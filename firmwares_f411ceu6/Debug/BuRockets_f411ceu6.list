
BuRockets_f411ceu6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000920  08010778  08010778  00020778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011098  08011098  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08011098  08011098  00021098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080110a0  080110a0  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080110a0  080110a0  000210a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080110a4  080110a4  000210a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080110a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  200001f0  08011298  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  08011298  00030864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf20  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046fe  00000000  00000000  0004c140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  00050840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001448  00000000  00000000  00051e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee90  00000000  00000000  00053258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000254a9  00000000  00000000  000720e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0530  00000000  00000000  00097591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137ac1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071a0  00000000  00000000  00137b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801075c 	.word	0x0801075c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0801075c 	.word	0x0801075c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <wait_for_gpio_state_timeout>:
#define SDA_PORT    GPIOB

#include "main.h"

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	460b      	mov	r3, r1
 80010d4:	817b      	strh	r3, [r7, #10]
 80010d6:	4613      	mov	r3, r2
 80010d8:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 80010da:	f003 fb45 	bl	8004768 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	75fb      	strb	r3, [r7, #23]

    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 80010e4:	e011      	b.n	800110a <wait_for_gpio_state_timeout+0x42>
    {
        if(timeout != HAL_MAX_DELAY) // Check for the timeout
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d00c      	beq.n	8001108 <wait_for_gpio_state_timeout+0x40>
        {
            if((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout)) ret = 0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <wait_for_gpio_state_timeout+0x3c>
 80010f4:	f003 fb38 	bl	8004768 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	d201      	bcs.n	8001108 <wait_for_gpio_state_timeout+0x40>
 8001104:	2300      	movs	r3, #0
 8001106:	75fb      	strb	r3, [r7, #23]
        }

        asm("nop");
 8001108:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 800110a:	897b      	ldrh	r3, [r7, #10]
 800110c:	4619      	mov	r1, r3
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f005 f994 	bl	800643c <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	7a7b      	ldrb	r3, [r7, #9]
 800111a:	4293      	cmp	r3, r2
 800111c:	d002      	beq.n	8001124 <wait_for_gpio_state_timeout+0x5c>
 800111e:	7dfb      	ldrb	r3, [r7, #23]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d0e0      	beq.n	80010e6 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 8001124:	7dfb      	ldrb	r3, [r7, #23]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <I2C_ClearBusyFlagErratum>:


static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef *hi2c, uint32_t timeout)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001140:	4852      	ldr	r0, [pc, #328]	; (800128c <I2C_ClearBusyFlagErratum+0x15c>)
 8001142:	f005 f9a1 	bl	8006488 <HAL_GPIO_WritePin>
	// 2.13.7 I2C analog filter may provide wrong value, locking BUSY. STM32F10xx8 STM32F10xxB Errata sheet

    GPIO_InitTypeDef GPIO_InitStructure = {0};
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

    // 1. Clear PE bit.
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0201 	bic.w	r2, r2, #1
 8001164:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(hi2c);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f005 fba4 	bl	80068b4 <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800116c:	2311      	movs	r3, #17
 800116e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

    GPIO_InitStructure.Pin = SCL_PIN;
 8001174:	2340      	movs	r3, #64	; 0x40
 8001176:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4619      	mov	r1, r3
 800117e:	4844      	ldr	r0, [pc, #272]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 8001180:	f004 fdc0 	bl	8005d04 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4619      	mov	r1, r3
 800118e:	4840      	ldr	r0, [pc, #256]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 8001190:	f004 fdb8 	bl	8005d04 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	483d      	ldr	r0, [pc, #244]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 800119a:	f005 f975 	bl	8006488 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	2140      	movs	r1, #64	; 0x40
 80011a2:	483b      	ldr	r0, [pc, #236]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011a4:	f005 f970 	bl	8006488 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2201      	movs	r2, #1
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	4838      	ldr	r0, [pc, #224]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011b0:	f7ff ff8a 	bl	80010c8 <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2201      	movs	r2, #1
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	4835      	ldr	r0, [pc, #212]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011bc:	f7ff ff84 	bl	80010c8 <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2180      	movs	r1, #128	; 0x80
 80011c4:	4832      	ldr	r0, [pc, #200]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011c6:	f005 f95f 	bl	8006488 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_RESET, timeout);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2200      	movs	r2, #0
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	482f      	ldr	r0, [pc, #188]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011d2:	f7ff ff79 	bl	80010c8 <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2140      	movs	r1, #64	; 0x40
 80011da:	482d      	ldr	r0, [pc, #180]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011dc:	f005 f954 	bl	8006488 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_RESET, timeout);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2200      	movs	r2, #0
 80011e4:	2140      	movs	r1, #64	; 0x40
 80011e6:	482a      	ldr	r0, [pc, #168]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011e8:	f7ff ff6e 	bl	80010c8 <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2140      	movs	r1, #64	; 0x40
 80011f0:	4827      	ldr	r0, [pc, #156]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011f2:	f005 f949 	bl	8006488 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2201      	movs	r2, #1
 80011fa:	2140      	movs	r1, #64	; 0x40
 80011fc:	4824      	ldr	r0, [pc, #144]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011fe:	f7ff ff63 	bl	80010c8 <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	4822      	ldr	r0, [pc, #136]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 8001208:	f005 f93e 	bl	8006488 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2201      	movs	r2, #1
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	481f      	ldr	r0, [pc, #124]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 8001214:	f7ff ff58 	bl	80010c8 <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001218:	2312      	movs	r3, #18
 800121a:	613b      	str	r3, [r7, #16]
    //GPIO_InitStructure.Alternate = GPIO_AF4_I2C2; // F4

    GPIO_InitStructure.Pin = SCL_PIN;
 800121c:	2340      	movs	r3, #64	; 0x40
 800121e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4619      	mov	r1, r3
 8001226:	481a      	ldr	r0, [pc, #104]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 8001228:	f004 fd6c 	bl	8005d04 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4619      	mov	r1, r3
 8001236:	4816      	ldr	r0, [pc, #88]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 8001238:	f004 fd64 	bl	8005d04 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800124a:	601a      	str	r2, [r3, #0]
    asm("nop");
 800124c:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800125c:	601a      	str	r2, [r3, #0]
    asm("nop");
 800125e:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001270:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(hi2c);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f005 f952 	bl	800651c <HAL_I2C_Init>
    HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4803      	ldr	r0, [pc, #12]	; (800128c <I2C_ClearBusyFlagErratum+0x15c>)
 8001280:	f005 f902 	bl	8006488 <HAL_GPIO_WritePin>
}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40020800 	.word	0x40020800
 8001290:	40020400 	.word	0x40020400
 8001294:	00000000 	.word	0x00000000

08001298 <MPU_get_accel>:
		}
	}

}

void MPU_get_accel(float* destination) {//��� ��� �������� ������ ���������
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b08b      	sub	sp, #44	; 0x2c
 800129c:	af04      	add	r7, sp, #16
 800129e:	6078      	str	r0, [r7, #4]

	uint8_t rawData[6];
	uint32_t status= HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS_R, MPU9250_ACCEL_XOUT_H, 1, rawData, 6, 100);
 80012a0:	2364      	movs	r3, #100	; 0x64
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2306      	movs	r3, #6
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	223b      	movs	r2, #59	; 0x3b
 80012b2:	21d1      	movs	r1, #209	; 0xd1
 80012b4:	483e      	ldr	r0, [pc, #248]	; (80013b0 <MPU_get_accel+0x118>)
 80012b6:	f005 fc4f 	bl	8006b58 <HAL_I2C_Mem_Read>
 80012ba:	4603      	mov	r3, r0
 80012bc:	617b      	str	r3, [r7, #20]
	if (status != HAL_OK)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <MPU_get_accel+0x36>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 80012c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012c8:	4839      	ldr	r0, [pc, #228]	; (80013b0 <MPU_get_accel+0x118>)
 80012ca:	f7ff ff31 	bl	8001130 <I2C_ClearBusyFlagErratum>
	}
	destination[0] = ((float)(int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) / 16384 * (9.8)); // Turn the MSB and LSB into a signed 16-bit value
 80012ce:	7b3b      	ldrb	r3, [r7, #12]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	7b7b      	ldrb	r3, [r7, #13]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b21b      	sxth	r3, r3
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80013b4 <MPU_get_accel+0x11c>
 80012e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012ec:	ee16 0a90 	vmov	r0, s13
 80012f0:	f7ff f942 	bl	8000578 <__aeabi_f2d>
 80012f4:	a32c      	add	r3, pc, #176	; (adr r3, 80013a8 <MPU_get_accel+0x110>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff f995 	bl	8000628 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fc87 	bl	8000c18 <__aeabi_d2f>
 800130a:	4602      	mov	r2, r0
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	601a      	str	r2, [r3, #0]
	destination[1] = ((float)(int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) / 16384 * (9.8));
 8001310:	7bbb      	ldrb	r3, [r7, #14]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	b21a      	sxth	r2, r3
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21b      	sxth	r3, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80013b4 <MPU_get_accel+0x11c>
 800132a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800132e:	ee16 0a90 	vmov	r0, s13
 8001332:	f7ff f921 	bl	8000578 <__aeabi_f2d>
 8001336:	a31c      	add	r3, pc, #112	; (adr r3, 80013a8 <MPU_get_accel+0x110>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff f974 	bl	8000628 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	1d1c      	adds	r4, r3, #4
 800134c:	f7ff fc64 	bl	8000c18 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	6023      	str	r3, [r4, #0]
	destination[2] = ((float)(int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) / 16384 * (9.8));
 8001354:	7c3b      	ldrb	r3, [r7, #16]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	7c7b      	ldrb	r3, [r7, #17]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21b      	sxth	r3, r3
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013b4 <MPU_get_accel+0x11c>
 800136e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001372:	ee16 0a90 	vmov	r0, s13
 8001376:	f7ff f8ff 	bl	8000578 <__aeabi_f2d>
 800137a:	a30b      	add	r3, pc, #44	; (adr r3, 80013a8 <MPU_get_accel+0x110>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff f952 	bl	8000628 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f103 0408 	add.w	r4, r3, #8
 8001392:	f7ff fc41 	bl	8000c18 <__aeabi_d2f>
 8001396:	4603      	mov	r3, r0
 8001398:	6023      	str	r3, [r4, #0]

}
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd90      	pop	{r4, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	f3af 8000 	nop.w
 80013a8:	9999999a 	.word	0x9999999a
 80013ac:	40239999 	.word	0x40239999
 80013b0:	20000254 	.word	0x20000254
 80013b4:	46800000 	.word	0x46800000

080013b8 <MPU_get_gyro>:

void MPU_get_gyro(float * destination) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af04      	add	r7, sp, #16
 80013be:	6078      	str	r0, [r7, #4]

	uint8_t rawData[6]; // x/y/z gyro register data stored here
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS_R, MPU9250_GYRO_XOUT_H, 1, rawData, 6, 100); // Read the six raw data registers sequentially into data array
 80013c0:	2364      	movs	r3, #100	; 0x64
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2306      	movs	r3, #6
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	2243      	movs	r2, #67	; 0x43
 80013d2:	21d1      	movs	r1, #209	; 0xd1
 80013d4:	4824      	ldr	r0, [pc, #144]	; (8001468 <MPU_get_gyro+0xb0>)
 80013d6:	f005 fbbf 	bl	8006b58 <HAL_I2C_Mem_Read>
 80013da:	4603      	mov	r3, r0
 80013dc:	617b      	str	r3, [r7, #20]
	if (status != HAL_OK)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <MPU_get_gyro+0x36>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 80013e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e8:	481f      	ldr	r0, [pc, #124]	; (8001468 <MPU_get_gyro+0xb0>)
 80013ea:	f7ff fea1 	bl	8001130 <I2C_ClearBusyFlagErratum>
	}
	destination[0] = (float)(int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) / 131; // Turn the MSB and LSB into a signed 16-bit value
 80013ee:	7b3b      	ldrb	r3, [r7, #12]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	7b7b      	ldrb	r3, [r7, #13]
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001404:	eddf 6a19 	vldr	s13, [pc, #100]	; 800146c <MPU_get_gyro+0xb4>
 8001408:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	edc3 7a00 	vstr	s15, [r3]
	destination[1] = (float)(int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) / 131;
 8001412:	7bbb      	ldrb	r3, [r7, #14]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	b21b      	sxth	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b21b      	sxth	r3, r3
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3304      	adds	r3, #4
 800142c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800146c <MPU_get_gyro+0xb4>
 8001430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001434:	edc3 7a00 	vstr	s15, [r3]
	destination[2] = (float)(int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) / 131;
 8001438:	7c3b      	ldrb	r3, [r7, #16]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	7c7b      	ldrb	r3, [r7, #17]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21b      	sxth	r3, r3
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3308      	adds	r3, #8
 8001452:	eddf 6a06 	vldr	s13, [pc, #24]	; 800146c <MPU_get_gyro+0xb4>
 8001456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145a:	edc3 7a00 	vstr	s15, [r3]
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000254 	.word	0x20000254
 800146c:	43030000 	.word	0x43030000

08001470 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_ADC1_Init+0x98>)
 8001484:	4a21      	ldr	r2, [pc, #132]	; (800150c <MX_ADC1_Init+0x9c>)
 8001486:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_ADC1_Init+0x98>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <MX_ADC1_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_ADC1_Init+0x98>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <MX_ADC1_Init+0x98>)
 800149c:	2201      	movs	r2, #1
 800149e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_ADC1_Init+0x98>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_ADC1_Init+0x98>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <MX_ADC1_Init+0x98>)
 80014b0:	4a17      	ldr	r2, [pc, #92]	; (8001510 <MX_ADC1_Init+0xa0>)
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_ADC1_Init+0x98>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <MX_ADC1_Init+0x98>)
 80014bc:	2201      	movs	r2, #1
 80014be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_ADC1_Init+0x98>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_ADC1_Init+0x98>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ce:	480e      	ldr	r0, [pc, #56]	; (8001508 <MX_ADC1_Init+0x98>)
 80014d0:	f003 f97a 	bl	80047c8 <HAL_ADC_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014da:	f001 fc47 	bl	8002d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014de:	2311      	movs	r3, #17
 80014e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014e2:	2301      	movs	r3, #1
 80014e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80014e6:	2301      	movs	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ea:	463b      	mov	r3, r7
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_ADC1_Init+0x98>)
 80014f0:	f003 fbae 	bl	8004c50 <HAL_ADC_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014fa:	f001 fc37 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000020c 	.word	0x2000020c
 800150c:	40012000 	.word	0x40012000
 8001510:	0f000001 	.word	0x0f000001

08001514 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_ADC_MspInit+0x3c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10d      	bne.n	8001542 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_ADC_MspInit+0x40>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_ADC_MspInit+0x40>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_ADC_MspInit+0x40>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40012000 	.word	0x40012000
 8001554:	40023800 	.word	0x40023800

08001558 <pascal_to_metrs>:

#define BMP280_RESET_VALUE     0xB6

#define standart_pressure      98910

float pascal_to_metrs(float pressure, float start_pressure){
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001562:	edc7 0a00 	vstr	s1, [r7]
	return  log(start_pressure/pressure) * 8.3144 * 288.16 / (9.806 * 0.0289);
 8001566:	ed97 7a00 	vldr	s14, [r7]
 800156a:	edd7 7a01 	vldr	s15, [r7, #4]
 800156e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001572:	ee16 0a90 	vmov	r0, s13
 8001576:	f7fe ffff 	bl	8000578 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	ec43 2b10 	vmov	d0, r2, r3
 8001582:	f00e fb9d 	bl	800fcc0 <log>
 8001586:	ec51 0b10 	vmov	r0, r1, d0
 800158a:	a313      	add	r3, pc, #76	; (adr r3, 80015d8 <pascal_to_metrs+0x80>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7ff f84a 	bl	8000628 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	a310      	add	r3, pc, #64	; (adr r3, 80015e0 <pascal_to_metrs+0x88>)
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	f7ff f841 	bl	8000628 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	a30e      	add	r3, pc, #56	; (adr r3, 80015e8 <pascal_to_metrs+0x90>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f962 	bl	800087c <__aeabi_ddiv>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fb2a 	bl	8000c18 <__aeabi_d2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	ee07 3a90 	vmov	s15, r3
}
 80015ca:	eeb0 0a67 	vmov.f32	s0, s15
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	f3af 8000 	nop.w
 80015d8:	096bb98c 	.word	0x096bb98c
 80015dc:	4020a0f9 	.word	0x4020a0f9
 80015e0:	5c28f5c3 	.word	0x5c28f5c3
 80015e4:	4072028f 	.word	0x4072028f
 80015e8:	1239be67 	.word	0x1239be67
 80015ec:	3fd2231e 	.word	0x3fd2231e

080015f0 <bmp280_init_default_params>:

void bmp280_init_default_params(bmp280_params_t *params) {
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2203      	movs	r2, #3
 80015fc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2203      	movs	r2, #3
 8001608:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2203      	movs	r2, #3
 800160e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2203      	movs	r2, #3
 8001614:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2203      	movs	r2, #3
 800161a:	715a      	strb	r2, [r3, #5]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af04      	add	r7, sp, #16
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	460b      	mov	r3, r1
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001642:	7afb      	ldrb	r3, [r7, #11]
 8001644:	b29a      	uxth	r2, r3
 8001646:	8af9      	ldrh	r1, [r7, #22]
 8001648:	f241 3388 	movw	r3, #5000	; 0x1388
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	2302      	movs	r3, #2
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	f005 fa7d 	bl	8006b58 <HAL_I2C_Mem_Read>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10b      	bne.n	800167c <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001664:	7d7b      	ldrb	r3, [r7, #21]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b21a      	sxth	r2, r3
 800166a:	7d3b      	ldrb	r3, [r7, #20]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	b29a      	uxth	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	801a      	strh	r2, [r3, #0]
		return true;
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <read_register16+0x56>
	} else
		return false;
 800167c:	2300      	movs	r3, #0

}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001686:	b590      	push	{r4, r7, lr}
 8001688:	b08b      	sub	sp, #44	; 0x2c
 800168a:	af04      	add	r7, sp, #16
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	461a      	mov	r2, r3
 8001692:	460b      	mov	r3, r1
 8001694:	72fb      	strb	r3, [r7, #11]
 8001696:	4613      	mov	r3, r2
 8001698:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80016a6:	7afb      	ldrb	r3, [r7, #11]
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	7abb      	ldrb	r3, [r7, #10]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	8af9      	ldrh	r1, [r7, #22]
 80016b0:	f241 3488 	movw	r4, #5000	; 0x1388
 80016b4:	9402      	str	r4, [sp, #8]
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2301      	movs	r3, #1
 80016be:	f005 fa4b 	bl	8006b58 <HAL_I2C_Mem_Read>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <read_data+0x46>
		return 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e000      	b.n	80016ce <read_data+0x48>
	else
		return 1;
 80016cc:	2301      	movs	r3, #1

}
 80016ce:	4618      	mov	r0, r3
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}

080016d6 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	461a      	mov	r2, r3
 80016e2:	2188      	movs	r1, #136	; 0x88
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff9f 	bl	8001628 <read_register16>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d06f      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3302      	adds	r3, #2
 80016f4:	461a      	mov	r2, r3
 80016f6:	218a      	movs	r1, #138	; 0x8a
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff95 	bl	8001628 <read_register16>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d065      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3304      	adds	r3, #4
 8001708:	461a      	mov	r2, r3
 800170a:	218c      	movs	r1, #140	; 0x8c
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff8b 	bl	8001628 <read_register16>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d05b      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3306      	adds	r3, #6
 800171c:	461a      	mov	r2, r3
 800171e:	218e      	movs	r1, #142	; 0x8e
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff81 	bl	8001628 <read_register16>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d051      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3308      	adds	r3, #8
 8001730:	461a      	mov	r2, r3
 8001732:	2190      	movs	r1, #144	; 0x90
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff77 	bl	8001628 <read_register16>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d047      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	330a      	adds	r3, #10
 8001744:	461a      	mov	r2, r3
 8001746:	2192      	movs	r1, #146	; 0x92
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff6d 	bl	8001628 <read_register16>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d03d      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	330c      	adds	r3, #12
 8001758:	461a      	mov	r2, r3
 800175a:	2194      	movs	r1, #148	; 0x94
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff63 	bl	8001628 <read_register16>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d033      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	330e      	adds	r3, #14
 800176c:	461a      	mov	r2, r3
 800176e:	2196      	movs	r1, #150	; 0x96
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff59 	bl	8001628 <read_register16>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d029      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3310      	adds	r3, #16
 8001780:	461a      	mov	r2, r3
 8001782:	2198      	movs	r1, #152	; 0x98
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff4f 	bl	8001628 <read_register16>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d01f      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3312      	adds	r3, #18
 8001794:	461a      	mov	r2, r3
 8001796:	219a      	movs	r1, #154	; 0x9a
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff45 	bl	8001628 <read_register16>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3314      	adds	r3, #20
 80017a8:	461a      	mov	r2, r3
 80017aa:	219c      	movs	r1, #156	; 0x9c
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff3b 	bl	8001628 <read_register16>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00b      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80017bc:	461a      	mov	r2, r3
 80017be:	219e      	movs	r1, #158	; 0x9e
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff31 	bl	8001628 <read_register16>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <read_calibration_data+0xfa>

		return true;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <read_calibration_data+0xfc>
	}

	return false;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f103 0218 	add.w	r2, r3, #24
 80017e8:	2301      	movs	r3, #1
 80017ea:	21a1      	movs	r1, #161	; 0xa1
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff4a 	bl	8001686 <read_data>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d14b      	bne.n	8001890 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	331a      	adds	r3, #26
 80017fc:	461a      	mov	r2, r3
 80017fe:	21e1      	movs	r1, #225	; 0xe1
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff11 	bl	8001628 <read_register16>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d041      	beq.n	8001890 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f103 021c 	add.w	r2, r3, #28
 8001812:	2301      	movs	r3, #1
 8001814:	21e3      	movs	r1, #227	; 0xe3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ff35 	bl	8001686 <read_data>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d136      	bne.n	8001890 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001822:	f107 030e 	add.w	r3, r7, #14
 8001826:	461a      	mov	r2, r3
 8001828:	21e4      	movs	r1, #228	; 0xe4
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fefc 	bl	8001628 <read_register16>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d02c      	beq.n	8001890 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	461a      	mov	r2, r3
 800183c:	21e5      	movs	r1, #229	; 0xe5
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fef2 	bl	8001628 <read_register16>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d022      	beq.n	8001890 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001850:	2301      	movs	r3, #1
 8001852:	21e7      	movs	r1, #231	; 0xe7
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff16 	bl	8001686 <read_data>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d117      	bne.n	8001890 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001860:	89fb      	ldrh	r3, [r7, #14]
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	b21b      	sxth	r3, r3
 8001866:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800186a:	b21a      	sxth	r2, r3
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	121b      	asrs	r3, r3, #8
 8001870:	b21b      	sxth	r3, r3
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	b21b      	sxth	r3, r3
 8001878:	4313      	orrs	r3, r2
 800187a:	b21a      	sxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001880:	89bb      	ldrh	r3, [r7, #12]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	b29b      	uxth	r3, r3
 8001886:	b21a      	sxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	841a      	strh	r2, [r3, #32]

		return true;
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800189a:	b580      	push	{r7, lr}
 800189c:	b088      	sub	sp, #32
 800189e:	af04      	add	r7, sp, #16
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	70fb      	strb	r3, [r7, #3]
 80018a6:	4613      	mov	r3, r2
 80018a8:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	89f9      	ldrh	r1, [r7, #14]
 80018bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80018c0:	9302      	str	r3, [sp, #8]
 80018c2:	2301      	movs	r3, #1
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	1cbb      	adds	r3, r7, #2
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2301      	movs	r3, #1
 80018cc:	f005 f83e 	bl	800694c <HAL_I2C_Mem_Write>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <write_register8+0x40>
		return false;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <write_register8+0x42>
	else
		return true;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018f2:	2b76      	cmp	r3, #118	; 0x76
 80018f4:	d005      	beq.n	8001902 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018fa:	2b77      	cmp	r3, #119	; 0x77
 80018fc:	d001      	beq.n	8001902 <bmp280_init+0x1e>

		return false;
 80018fe:	2300      	movs	r3, #0
 8001900:	e099      	b.n	8001a36 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001908:	2301      	movs	r3, #1
 800190a:	21d0      	movs	r1, #208	; 0xd0
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff feba 	bl	8001686 <read_data>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <bmp280_init+0x38>
		return false;
 8001918:	2300      	movs	r3, #0
 800191a:	e08c      	b.n	8001a36 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001922:	2b58      	cmp	r3, #88	; 0x58
 8001924:	d006      	beq.n	8001934 <bmp280_init+0x50>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800192c:	2b60      	cmp	r3, #96	; 0x60
 800192e:	d001      	beq.n	8001934 <bmp280_init+0x50>

		return false;
 8001930:	2300      	movs	r3, #0
 8001932:	e080      	b.n	8001a36 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001934:	22b6      	movs	r2, #182	; 0xb6
 8001936:	21e0      	movs	r1, #224	; 0xe0
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ffae 	bl	800189a <write_register8>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <bmp280_init+0x64>
		return false;
 8001944:	2300      	movs	r3, #0
 8001946:	e076      	b.n	8001a36 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001948:	f107 020c 	add.w	r2, r7, #12
 800194c:	2301      	movs	r3, #1
 800194e:	21f3      	movs	r1, #243	; 0xf3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff fe98 	bl	8001686 <read_data>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f5      	bne.n	8001948 <bmp280_init+0x64>
				&& (status & 1) == 0)
 800195c:	7b3b      	ldrb	r3, [r7, #12]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff feb5 	bl	80016d6 <read_calibration_data>
 800196c:	4603      	mov	r3, r0
 800196e:	f083 0301 	eor.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d100      	bne.n	800197a <bmp280_init+0x96>
 8001978:	e001      	b.n	800197e <bmp280_init+0x9a>
		return false;
 800197a:	2300      	movs	r3, #0
 800197c:	e05b      	b.n	8001a36 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001984:	2b60      	cmp	r3, #96	; 0x60
 8001986:	d10a      	bne.n	800199e <bmp280_init+0xba>
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff26 	bl	80017da <read_hum_calibration_data>
 800198e:	4603      	mov	r3, r0
 8001990:	f083 0301 	eor.w	r3, r3, #1
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <bmp280_init+0xba>
		return false;
 800199a:	2300      	movs	r3, #0
 800199c:	e04b      	b.n	8001a36 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	795b      	ldrb	r3, [r3, #5]
 80019a2:	015b      	lsls	r3, r3, #5
 80019a4:	b25a      	sxtb	r2, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	785b      	ldrb	r3, [r3, #1]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	461a      	mov	r2, r3
 80019b8:	21f5      	movs	r1, #245	; 0xf5
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff6d 	bl	800189a <write_register8>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <bmp280_init+0xe6>
		return false;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e035      	b.n	8001a36 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d102      	bne.n	80019d8 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	78db      	ldrb	r3, [r3, #3]
 80019dc:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	789b      	ldrb	r3, [r3, #2]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b25a      	sxtb	r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	4313      	orrs	r3, r2
 80019f4:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80019f6:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80019fe:	2b60      	cmp	r3, #96	; 0x60
 8001a00:	d10d      	bne.n	8001a1e <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	791b      	ldrb	r3, [r3, #4]
 8001a06:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001a08:	7b7b      	ldrb	r3, [r7, #13]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	21f2      	movs	r1, #242	; 0xf2
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff43 	bl	800189a <write_register8>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <bmp280_init+0x13a>
			return false;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e00b      	b.n	8001a36 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001a1e:	7bbb      	ldrb	r3, [r7, #14]
 8001a20:	461a      	mov	r2, r3
 8001a22:	21f4      	movs	r1, #244	; 0xf4
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff38 	bl	800189a <write_register8>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <bmp280_init+0x150>
		return false;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e000      	b.n	8001a36 <bmp280_init+0x152>
	}

	return true;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001a3e:	b480      	push	{r7}
 8001a40:	b087      	sub	sp, #28
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	10da      	asrs	r2, r3, #3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001a5c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001a60:	12db      	asrs	r3, r3, #11
 8001a62:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	111b      	asrs	r3, r3, #4
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	8812      	ldrh	r2, [r2, #0]
 8001a6c:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	1112      	asrs	r2, r2, #4
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	8809      	ldrh	r1, [r1, #0]
 8001a76:	1a52      	subs	r2, r2, r1
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001a88:	139b      	asrs	r3, r3, #14
 8001a8a:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	441a      	add	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3380      	adds	r3, #128	; 0x80
 8001aa2:	121b      	asrs	r3, r3, #8
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab4:	b0cc      	sub	sp, #304	; 0x130
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001abc:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001ac0:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ac8:	17da      	asrs	r2, r3, #31
 8001aca:	461c      	mov	r4, r3
 8001acc:	4615      	mov	r5, r2
 8001ace:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001ad2:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001ad6:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001ada:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001ade:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ae2:	fb03 f102 	mul.w	r1, r3, r2
 8001ae6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001aea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	18ca      	adds	r2, r1, r3
 8001af4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001af8:	fba3 8903 	umull	r8, r9, r3, r3
 8001afc:	eb02 0309 	add.w	r3, r2, r9
 8001b00:	4699      	mov	r9, r3
 8001b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b06:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	17da      	asrs	r2, r3, #31
 8001b0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b12:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001b16:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	fb03 f209 	mul.w	r2, r3, r9
 8001b20:	460b      	mov	r3, r1
 8001b22:	fb08 f303 	mul.w	r3, r8, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	4602      	mov	r2, r0
 8001b2a:	fba8 1202 	umull	r1, r2, r8, r2
 8001b2e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001b32:	460a      	mov	r2, r1
 8001b34:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001b38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001b42:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001b46:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001b4a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b52:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	17da      	asrs	r2, r3, #31
 8001b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001b5e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001b62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b66:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001b6a:	462a      	mov	r2, r5
 8001b6c:	fb02 f203 	mul.w	r2, r2, r3
 8001b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b74:	4621      	mov	r1, r4
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	441a      	add	r2, r3
 8001b7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b80:	4621      	mov	r1, r4
 8001b82:	fba3 1301 	umull	r1, r3, r3, r1
 8001b86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001b94:	18d3      	adds	r3, r2, r3
 8001b96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	0459      	lsls	r1, r3, #17
 8001baa:	4623      	mov	r3, r4
 8001bac:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	0458      	lsls	r0, r3, #17
 8001bb4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001bb8:	1814      	adds	r4, r2, r0
 8001bba:	643c      	str	r4, [r7, #64]	; 0x40
 8001bbc:	414b      	adcs	r3, r1
 8001bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001bc0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001bc4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bcc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	17da      	asrs	r2, r3, #31
 8001bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001bd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001bdc:	f04f 0000 	mov.w	r0, #0
 8001be0:	f04f 0100 	mov.w	r1, #0
 8001be4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001be8:	00d9      	lsls	r1, r3, #3
 8001bea:	2000      	movs	r0, #0
 8001bec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001bf0:	1814      	adds	r4, r2, r0
 8001bf2:	63bc      	str	r4, [r7, #56]	; 0x38
 8001bf4:	414b      	adcs	r3, r1
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001bfc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001c00:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001c04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c08:	fb03 f102 	mul.w	r1, r3, r2
 8001c0c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c14:	fb02 f303 	mul.w	r3, r2, r3
 8001c18:	18ca      	adds	r2, r1, r3
 8001c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c1e:	fba3 1303 	umull	r1, r3, r3, r3
 8001c22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001c26:	460b      	mov	r3, r1
 8001c28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c30:	18d3      	adds	r3, r2, r3
 8001c32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	17da      	asrs	r2, r3, #31
 8001c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001c4a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001c4e:	462b      	mov	r3, r5
 8001c50:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001c54:	4642      	mov	r2, r8
 8001c56:	fb02 f203 	mul.w	r2, r2, r3
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	4622      	mov	r2, r4
 8001c66:	4641      	mov	r1, r8
 8001c68:	fba2 1201 	umull	r1, r2, r2, r1
 8001c6c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001c70:	460a      	mov	r2, r1
 8001c72:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001c76:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001c80:	f04f 0000 	mov.w	r0, #0
 8001c84:	f04f 0100 	mov.w	r1, #0
 8001c88:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001c8c:	4623      	mov	r3, r4
 8001c8e:	0a18      	lsrs	r0, r3, #8
 8001c90:	462b      	mov	r3, r5
 8001c92:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001c96:	462b      	mov	r3, r5
 8001c98:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	17da      	asrs	r2, r3, #31
 8001ca6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001caa:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cb2:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001cb6:	464a      	mov	r2, r9
 8001cb8:	fb02 f203 	mul.w	r2, r2, r3
 8001cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cc0:	4644      	mov	r4, r8
 8001cc2:	fb04 f303 	mul.w	r3, r4, r3
 8001cc6:	441a      	add	r2, r3
 8001cc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ccc:	4644      	mov	r4, r8
 8001cce:	fba3 4304 	umull	r4, r3, r3, r4
 8001cd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001cdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ce0:	18d3      	adds	r3, r2, r3
 8001ce2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001cf2:	464c      	mov	r4, r9
 8001cf4:	0323      	lsls	r3, r4, #12
 8001cf6:	4644      	mov	r4, r8
 8001cf8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001cfc:	4644      	mov	r4, r8
 8001cfe:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001d00:	1884      	adds	r4, r0, r2
 8001d02:	633c      	str	r4, [r7, #48]	; 0x30
 8001d04:	eb41 0303 	adc.w	r3, r1, r3
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
 8001d0a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001d0e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001d12:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001d16:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001d1a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001d1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d26:	88db      	ldrh	r3, [r3, #6]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d34:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d38:	462b      	mov	r3, r5
 8001d3a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001d3e:	4642      	mov	r2, r8
 8001d40:	fb02 f203 	mul.w	r2, r2, r3
 8001d44:	464b      	mov	r3, r9
 8001d46:	4621      	mov	r1, r4
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4622      	mov	r2, r4
 8001d50:	4641      	mov	r1, r8
 8001d52:	fba2 1201 	umull	r1, r2, r2, r1
 8001d56:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001d5a:	460a      	mov	r2, r1
 8001d5c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001d60:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001d64:	4413      	add	r3, r2
 8001d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001d76:	4629      	mov	r1, r5
 8001d78:	104a      	asrs	r2, r1, #1
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	17cb      	asrs	r3, r1, #31
 8001d7e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001d82:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001d86:	4313      	orrs	r3, r2
 8001d88:	d101      	bne.n	8001d8e <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e148      	b.n	8002020 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001d8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d92:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001d96:	17da      	asrs	r2, r3, #31
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d9c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001da0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001da4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001da8:	105b      	asrs	r3, r3, #1
 8001daa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001db2:	07db      	lsls	r3, r3, #31
 8001db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001db8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001dbc:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	1a89      	subs	r1, r1, r2
 8001dc4:	67b9      	str	r1, [r7, #120]	; 0x78
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	eb61 0303 	sbc.w	r3, r1, r3
 8001dcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001dce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001dd2:	4622      	mov	r2, r4
 8001dd4:	462b      	mov	r3, r5
 8001dd6:	1891      	adds	r1, r2, r2
 8001dd8:	6239      	str	r1, [r7, #32]
 8001dda:	415b      	adcs	r3, r3
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001de2:	4621      	mov	r1, r4
 8001de4:	1851      	adds	r1, r2, r1
 8001de6:	61b9      	str	r1, [r7, #24]
 8001de8:	4629      	mov	r1, r5
 8001dea:	414b      	adcs	r3, r1
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	018b      	lsls	r3, r1, #6
 8001dfe:	4641      	mov	r1, r8
 8001e00:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e04:	4641      	mov	r1, r8
 8001e06:	018a      	lsls	r2, r1, #6
 8001e08:	4641      	mov	r1, r8
 8001e0a:	1889      	adds	r1, r1, r2
 8001e0c:	6139      	str	r1, [r7, #16]
 8001e0e:	4649      	mov	r1, r9
 8001e10:	eb43 0101 	adc.w	r1, r3, r1
 8001e14:	6179      	str	r1, [r7, #20]
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001e22:	4649      	mov	r1, r9
 8001e24:	008b      	lsls	r3, r1, #2
 8001e26:	4641      	mov	r1, r8
 8001e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e2c:	4641      	mov	r1, r8
 8001e2e:	008a      	lsls	r2, r1, #2
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	4603      	mov	r3, r0
 8001e36:	4622      	mov	r2, r4
 8001e38:	189b      	adds	r3, r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	462a      	mov	r2, r5
 8001e40:	eb42 0303 	adc.w	r3, r2, r3
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001e52:	4649      	mov	r1, r9
 8001e54:	008b      	lsls	r3, r1, #2
 8001e56:	4641      	mov	r1, r8
 8001e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e5c:	4641      	mov	r1, r8
 8001e5e:	008a      	lsls	r2, r1, #2
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	4603      	mov	r3, r0
 8001e66:	4622      	mov	r2, r4
 8001e68:	189b      	adds	r3, r3, r2
 8001e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8001e6c:	462b      	mov	r3, r5
 8001e6e:	460a      	mov	r2, r1
 8001e70:	eb42 0303 	adc.w	r3, r2, r3
 8001e74:	677b      	str	r3, [r7, #116]	; 0x74
 8001e76:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001e7a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001e7e:	f7fe ff1b 	bl	8000cb8 <__aeabi_ldivmod>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e8e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e92:	b21b      	sxth	r3, r3
 8001e94:	17da      	asrs	r2, r3, #31
 8001e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001e9e:	f04f 0000 	mov.w	r0, #0
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	0b50      	lsrs	r0, r2, #13
 8001ea8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001eac:	1359      	asrs	r1, r3, #13
 8001eae:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001eb2:	462b      	mov	r3, r5
 8001eb4:	fb00 f203 	mul.w	r2, r0, r3
 8001eb8:	4623      	mov	r3, r4
 8001eba:	fb03 f301 	mul.w	r3, r3, r1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4622      	mov	r2, r4
 8001ec2:	fba2 1200 	umull	r1, r2, r2, r0
 8001ec6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001eca:	460a      	mov	r2, r1
 8001ecc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001ed0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001eda:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001ede:	f04f 0000 	mov.w	r0, #0
 8001ee2:	f04f 0100 	mov.w	r1, #0
 8001ee6:	0b50      	lsrs	r0, r2, #13
 8001ee8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001eec:	1359      	asrs	r1, r3, #13
 8001eee:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001ef2:	462b      	mov	r3, r5
 8001ef4:	fb00 f203 	mul.w	r2, r0, r3
 8001ef8:	4623      	mov	r3, r4
 8001efa:	fb03 f301 	mul.w	r3, r3, r1
 8001efe:	4413      	add	r3, r2
 8001f00:	4622      	mov	r2, r4
 8001f02:	fba2 1200 	umull	r1, r2, r2, r0
 8001f06:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f0a:	460a      	mov	r2, r1
 8001f0c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001f10:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001f14:	4413      	add	r3, r2
 8001f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001f26:	4621      	mov	r1, r4
 8001f28:	0e4a      	lsrs	r2, r1, #25
 8001f2a:	4629      	mov	r1, r5
 8001f2c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001f30:	4629      	mov	r1, r5
 8001f32:	164b      	asrs	r3, r1, #25
 8001f34:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f3c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	17da      	asrs	r2, r3, #31
 8001f44:	663b      	str	r3, [r7, #96]	; 0x60
 8001f46:	667a      	str	r2, [r7, #100]	; 0x64
 8001f48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f50:	462a      	mov	r2, r5
 8001f52:	fb02 f203 	mul.w	r2, r2, r3
 8001f56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f66:	4621      	mov	r1, r4
 8001f68:	fba2 1201 	umull	r1, r2, r2, r1
 8001f6c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001f70:	460a      	mov	r2, r1
 8001f72:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001f76:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	0cca      	lsrs	r2, r1, #19
 8001f90:	4629      	mov	r1, r5
 8001f92:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001f96:	4629      	mov	r1, r5
 8001f98:	14cb      	asrs	r3, r1, #19
 8001f9a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001f9e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001fa2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001fa6:	1884      	adds	r4, r0, r2
 8001fa8:	65bc      	str	r4, [r7, #88]	; 0x58
 8001faa:	eb41 0303 	adc.w	r3, r1, r3
 8001fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fb0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001fb4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001fb8:	4621      	mov	r1, r4
 8001fba:	1889      	adds	r1, r1, r2
 8001fbc:	6539      	str	r1, [r7, #80]	; 0x50
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	eb43 0101 	adc.w	r1, r3, r1
 8001fc4:	6579      	str	r1, [r7, #84]	; 0x54
 8001fc6:	f04f 0000 	mov.w	r0, #0
 8001fca:	f04f 0100 	mov.w	r1, #0
 8001fce:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001fd2:	4623      	mov	r3, r4
 8001fd4:	0a18      	lsrs	r0, r3, #8
 8001fd6:	462b      	mov	r3, r5
 8001fd8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001fdc:	462b      	mov	r3, r5
 8001fde:	1219      	asrs	r1, r3, #8
 8001fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fe4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001fe8:	b21b      	sxth	r3, r3
 8001fea:	17da      	asrs	r2, r3, #31
 8001fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001ffc:	464c      	mov	r4, r9
 8001ffe:	0123      	lsls	r3, r4, #4
 8002000:	4644      	mov	r4, r8
 8002002:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002006:	4644      	mov	r4, r8
 8002008:	0122      	lsls	r2, r4, #4
 800200a:	1884      	adds	r4, r0, r2
 800200c:	603c      	str	r4, [r7, #0]
 800200e:	eb41 0303 	adc.w	r3, r1, r3
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002018:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 800201c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8002020:	4618      	mov	r0, r3
 8002022:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002026:	46bd      	mov	sp, r7
 8002028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800202c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800203e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	039a      	lsls	r2, r3, #14
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800204a:	051b      	lsls	r3, r3, #20
 800204c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002054:	4619      	mov	r1, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002062:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800206a:	4611      	mov	r1, r2
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	fb01 f202 	mul.w	r2, r1, r2
 8002072:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002074:	68f9      	ldr	r1, [r7, #12]
 8002076:	7f09      	ldrb	r1, [r1, #28]
 8002078:	4608      	mov	r0, r1
 800207a:	6979      	ldr	r1, [r7, #20]
 800207c:	fb00 f101 	mul.w	r1, r0, r1
 8002080:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002082:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002086:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800208a:	1292      	asrs	r2, r2, #10
 800208c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002090:	68f9      	ldr	r1, [r7, #12]
 8002092:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002096:	fb01 f202 	mul.w	r2, r1, r2
 800209a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800209e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
 80020a4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	13db      	asrs	r3, r3, #15
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	13d2      	asrs	r2, r2, #15
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	7e12      	ldrb	r2, [r2, #24]
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80020ca:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80020d2:	bfa8      	it	ge
 80020d4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80020d8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	131b      	asrs	r3, r3, #12
}
 80020de:	4618      	mov	r0, r3
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b08c      	sub	sp, #48	; 0x30
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80020fe:	2b60      	cmp	r3, #96	; 0x60
 8002100:	d007      	beq.n	8002112 <bmp280_read_fixed+0x28>
		if (humidity)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <bmp280_read_fixed+0x24>
			*humidity = 0;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800210e:	2300      	movs	r3, #0
 8002110:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <bmp280_read_fixed+0x32>
 8002118:	2308      	movs	r3, #8
 800211a:	e000      	b.n	800211e <bmp280_read_fixed+0x34>
 800211c:	2306      	movs	r3, #6
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f107 0218 	add.w	r2, r7, #24
 8002128:	21f7      	movs	r1, #247	; 0xf7
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff faab 	bl	8001686 <read_data>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <bmp280_read_fixed+0x50>
		return false;
 8002136:	2300      	movs	r3, #0
 8002138:	e038      	b.n	80021ac <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800213a:	7e3b      	ldrb	r3, [r7, #24]
 800213c:	031a      	lsls	r2, r3, #12
 800213e:	7e7b      	ldrb	r3, [r7, #25]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	4313      	orrs	r3, r2
 8002144:	7eba      	ldrb	r2, [r7, #26]
 8002146:	0912      	lsrs	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	4313      	orrs	r3, r2
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800214e:	7efb      	ldrb	r3, [r7, #27]
 8002150:	031a      	lsls	r2, r3, #12
 8002152:	7f3b      	ldrb	r3, [r7, #28]
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	4313      	orrs	r3, r2
 8002158:	7f7a      	ldrb	r2, [r7, #29]
 800215a:	0912      	lsrs	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	4313      	orrs	r3, r2
 8002160:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	461a      	mov	r2, r3
 8002168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff fc67 	bl	8001a3e <compensate_temperature>
 8002170:	4602      	mov	r2, r0
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	461a      	mov	r2, r3
 800217a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7ff fc97 	bl	8001ab0 <compensate_pressure>
 8002182:	4602      	mov	r2, r0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800218e:	7fbb      	ldrb	r3, [r7, #30]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	7ffa      	ldrb	r2, [r7, #31]
 8002194:	4313      	orrs	r3, r2
 8002196:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	461a      	mov	r2, r3
 800219c:	6a39      	ldr	r1, [r7, #32]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7ff ff44 	bl	800202c <compensate_humidity>
 80021a4:	4602      	mov	r2, r0
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	601a      	str	r2, [r3, #0]
	}

	return true;
 80021aa:	2301      	movs	r3, #1
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3730      	adds	r7, #48	; 0x30
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <bmp280_read_float+0x1a>
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	e000      	b.n	80021d0 <bmp280_read_float+0x1c>
 80021ce:	2300      	movs	r3, #0
 80021d0:	f107 0218 	add.w	r2, r7, #24
 80021d4:	f107 011c 	add.w	r1, r7, #28
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f7ff ff86 	bl	80020ea <bmp280_read_fixed>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d028      	beq.n	8002236 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ee:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002240 <bmp280_read_float+0x8c>
 80021f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002206:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002244 <bmp280_read_float+0x90>
 800220a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	ee07 3a90 	vmov	s15, r3
 8002220:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002224:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002248 <bmp280_read_float+0x94>
 8002228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <bmp280_read_float+0x84>
	}

	return false;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	42c80000 	.word	0x42c80000
 8002244:	43800000 	.word	0x43800000
 8002248:	44800000 	.word	0x44800000

0800224c <Hz_to_ms>:
	}

	return (uint8_t)value; // Преобразуем long в uint8_t
}

uint16_t Hz_to_ms(uint16_t frequency){
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]
	uint16_t ms = 1000/frequency;
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800225c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002260:	81fb      	strh	r3, [r7, #14]
	return ms;
 8002262:	89fb      	ldrh	r3, [r7, #14]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <receive_data>:

void receive_data(char* rx_buffer, struct Rocket* rocket, struct Radio* radio){
 8002270:	b580      	push	{r7, lr}
 8002272:	b0b8      	sub	sp, #224	; 0xe0
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
	char *token = strtok(rx_buffer, ":");
 800227c:	4998      	ldr	r1, [pc, #608]	; (80024e0 <receive_data+0x270>)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f00a fcc2 	bl	800cc08 <strtok>
 8002284:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	if (token != NULL) {
 8002288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 8123 	beq.w	80024d8 <receive_data+0x268>
		char *var_name = token;
 8002292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002296:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		token = strtok(NULL, ":");
 800229a:	4991      	ldr	r1, [pc, #580]	; (80024e0 <receive_data+0x270>)
 800229c:	2000      	movs	r0, #0
 800229e:	f00a fcb3 	bl	800cc08 <strtok>
 80022a2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		if (token != NULL) {
 80022a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 80b5 	beq.w	800241a <receive_data+0x1aa>
			float value = atof(token); // Преобразуем строку в float
 80022b0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80022b4:	f008 ff56 	bl	800b164 <atof>
 80022b8:	ec53 2b10 	vmov	r2, r3, d0
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	f7fe fcaa 	bl	8000c18 <__aeabi_d2f>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

			// Присваиваем значение переменной
			if (strcmp(var_name, "delta_apogee") == 0) {
 80022ca:	4986      	ldr	r1, [pc, #536]	; (80024e4 <receive_data+0x274>)
 80022cc:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80022d0:	f7fd ff86 	bl	80001e0 <strcmp>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d122      	bne.n	8002320 <receive_data+0xb0>
				rocket->delta_apogee = value;
 80022da:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80022de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e2:	edc7 7a00 	vstr	s15, [r7]
 80022e6:	783b      	ldrb	r3, [r7, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	751a      	strb	r2, [r3, #20]
				WriteToFlash(rocket);
 80022ee:	68b8      	ldr	r0, [r7, #8]
 80022f0:	f000 f95e 	bl	80025b0 <WriteToFlash>
				char buf[30];
				snprintf(buf,sizeof(buf),"delta_apogee = %u\n", rocket->delta_apogee);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	7d1b      	ldrb	r3, [r3, #20]
 80022f8:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80022fc:	4a7a      	ldr	r2, [pc, #488]	; (80024e8 <receive_data+0x278>)
 80022fe:	211e      	movs	r1, #30
 8002300:	f009 fde6 	bl	800bed0 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
 8002304:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002308:	4618      	mov	r0, r3
 800230a:	f7fd ff73 	bl	80001f4 <strlen>
 800230e:	4603      	mov	r3, r0
 8002310:	b29a      	uxth	r2, r3
 8002312:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002316:	23c8      	movs	r3, #200	; 0xc8
 8002318:	4874      	ldr	r0, [pc, #464]	; (80024ec <receive_data+0x27c>)
 800231a:	f007 fe7f 	bl	800a01c <HAL_UART_Transmit>
				snprintf(buf,sizeof(buf),"starting_height = %u\n", rocket->starting_height);
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
			}
		}
	}
}
 800231e:	e0db      	b.n	80024d8 <receive_data+0x268>
			} else if (strcmp(var_name, "delta_activate") == 0) {
 8002320:	4973      	ldr	r1, [pc, #460]	; (80024f0 <receive_data+0x280>)
 8002322:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002326:	f7fd ff5b 	bl	80001e0 <strcmp>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d122      	bne.n	8002376 <receive_data+0x106>
				rocket->delta_activate = value;
 8002330:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002338:	edc7 7a00 	vstr	s15, [r7]
 800233c:	783b      	ldrb	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	755a      	strb	r2, [r3, #21]
				WriteToFlash(rocket);
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f000 f933 	bl	80025b0 <WriteToFlash>
				snprintf(buf,sizeof(buf),"delta_activate = %u\n", rocket->delta_activate);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	7d5b      	ldrb	r3, [r3, #21]
 800234e:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8002352:	4a68      	ldr	r2, [pc, #416]	; (80024f4 <receive_data+0x284>)
 8002354:	211e      	movs	r1, #30
 8002356:	f009 fdbb 	bl	800bed0 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
 800235a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800235e:	4618      	mov	r0, r3
 8002360:	f7fd ff48 	bl	80001f4 <strlen>
 8002364:	4603      	mov	r3, r0
 8002366:	b29a      	uxth	r2, r3
 8002368:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800236c:	23c8      	movs	r3, #200	; 0xc8
 800236e:	485f      	ldr	r0, [pc, #380]	; (80024ec <receive_data+0x27c>)
 8002370:	f007 fe54 	bl	800a01c <HAL_UART_Transmit>
}
 8002374:	e0b0      	b.n	80024d8 <receive_data+0x268>
			} else if (strcmp(var_name, "starting_height") == 0) {
 8002376:	4960      	ldr	r1, [pc, #384]	; (80024f8 <receive_data+0x288>)
 8002378:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800237c:	f7fd ff30 	bl	80001e0 <strcmp>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d122      	bne.n	80023cc <receive_data+0x15c>
				rocket->starting_height = value;
 8002386:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800238a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800238e:	edc7 7a00 	vstr	s15, [r7]
 8002392:	783b      	ldrb	r3, [r7, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	759a      	strb	r2, [r3, #22]
				WriteToFlash(rocket);
 800239a:	68b8      	ldr	r0, [r7, #8]
 800239c:	f000 f908 	bl	80025b0 <WriteToFlash>
				snprintf(buf,sizeof(buf),"starting_height = %u\n", rocket->starting_height);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	7d9b      	ldrb	r3, [r3, #22]
 80023a4:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80023a8:	4a54      	ldr	r2, [pc, #336]	; (80024fc <receive_data+0x28c>)
 80023aa:	211e      	movs	r1, #30
 80023ac:	f009 fd90 	bl	800bed0 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
 80023b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fd ff1d 	bl	80001f4 <strlen>
 80023ba:	4603      	mov	r3, r0
 80023bc:	b29a      	uxth	r2, r3
 80023be:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80023c2:	23c8      	movs	r3, #200	; 0xc8
 80023c4:	4849      	ldr	r0, [pc, #292]	; (80024ec <receive_data+0x27c>)
 80023c6:	f007 fe29 	bl	800a01c <HAL_UART_Transmit>
}
 80023ca:	e085      	b.n	80024d8 <receive_data+0x268>
			} else if (strcmp(var_name, "TRANSMIT_IS_OK") == 0) {
 80023cc:	494c      	ldr	r1, [pc, #304]	; (8002500 <receive_data+0x290>)
 80023ce:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80023d2:	f7fd ff05 	bl	80001e0 <strcmp>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10c      	bne.n	80023f6 <receive_data+0x186>
				radio->TRANSMIT_IS_OK = value;
 80023dc:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80023e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	bf14      	ite	ne
 80023ea:	2301      	movne	r3, #1
 80023ec:	2300      	moveq	r3, #0
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	701a      	strb	r2, [r3, #0]
}
 80023f4:	e070      	b.n	80024d8 <receive_data+0x268>
			else if (strcmp(var_name, "frequency_data_transmission") == 0) {
 80023f6:	4943      	ldr	r1, [pc, #268]	; (8002504 <receive_data+0x294>)
 80023f8:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80023fc:	f7fd fef0 	bl	80001e0 <strcmp>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d168      	bne.n	80024d8 <receive_data+0x268>
				radio->frequency_data_transmission = value;
 8002406:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800240a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800240e:	ee17 3a90 	vmov	r3, s15
 8002412:	b29a      	uxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	805a      	strh	r2, [r3, #2]
}
 8002418:	e05e      	b.n	80024d8 <receive_data+0x268>
			char *command = strtok(rx_buffer, ";");
 800241a:	493b      	ldr	r1, [pc, #236]	; (8002508 <receive_data+0x298>)
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f00a fbf3 	bl	800cc08 <strtok>
 8002422:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
			if (strcmp(command, "get_delta_apogee") == 0){
 8002426:	4939      	ldr	r1, [pc, #228]	; (800250c <receive_data+0x29c>)
 8002428:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800242c:	f7fd fed8 	bl	80001e0 <strcmp>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d115      	bne.n	8002462 <receive_data+0x1f2>
				snprintf(buf,sizeof(buf),"delta_apogee = %u\n", rocket->delta_apogee);
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	7d1b      	ldrb	r3, [r3, #20]
 800243a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800243e:	4a2a      	ldr	r2, [pc, #168]	; (80024e8 <receive_data+0x278>)
 8002440:	211e      	movs	r1, #30
 8002442:	f009 fd45 	bl	800bed0 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
 8002446:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800244a:	4618      	mov	r0, r3
 800244c:	f7fd fed2 	bl	80001f4 <strlen>
 8002450:	4603      	mov	r3, r0
 8002452:	b29a      	uxth	r2, r3
 8002454:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002458:	23c8      	movs	r3, #200	; 0xc8
 800245a:	4824      	ldr	r0, [pc, #144]	; (80024ec <receive_data+0x27c>)
 800245c:	f007 fdde 	bl	800a01c <HAL_UART_Transmit>
}
 8002460:	e03a      	b.n	80024d8 <receive_data+0x268>
			else if (strcmp(command, "get_delta_activate") == 0){
 8002462:	492b      	ldr	r1, [pc, #172]	; (8002510 <receive_data+0x2a0>)
 8002464:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002468:	f7fd feba 	bl	80001e0 <strcmp>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d115      	bne.n	800249e <receive_data+0x22e>
				snprintf(buf,sizeof(buf),"delta_activate = %u\n", rocket->delta_activate);
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	7d5b      	ldrb	r3, [r3, #21]
 8002476:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800247a:	4a1e      	ldr	r2, [pc, #120]	; (80024f4 <receive_data+0x284>)
 800247c:	211e      	movs	r1, #30
 800247e:	f009 fd27 	bl	800bed0 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
 8002482:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002486:	4618      	mov	r0, r3
 8002488:	f7fd feb4 	bl	80001f4 <strlen>
 800248c:	4603      	mov	r3, r0
 800248e:	b29a      	uxth	r2, r3
 8002490:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002494:	23c8      	movs	r3, #200	; 0xc8
 8002496:	4815      	ldr	r0, [pc, #84]	; (80024ec <receive_data+0x27c>)
 8002498:	f007 fdc0 	bl	800a01c <HAL_UART_Transmit>
}
 800249c:	e01c      	b.n	80024d8 <receive_data+0x268>
			else if (strcmp(command, "get_starting_height") == 0){
 800249e:	491d      	ldr	r1, [pc, #116]	; (8002514 <receive_data+0x2a4>)
 80024a0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80024a4:	f7fd fe9c 	bl	80001e0 <strcmp>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d114      	bne.n	80024d8 <receive_data+0x268>
				snprintf(buf,sizeof(buf),"starting_height = %u\n", rocket->starting_height);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	7d9b      	ldrb	r3, [r3, #22]
 80024b2:	f107 0010 	add.w	r0, r7, #16
 80024b6:	4a11      	ldr	r2, [pc, #68]	; (80024fc <receive_data+0x28c>)
 80024b8:	211e      	movs	r1, #30
 80024ba:	f009 fd09 	bl	800bed0 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
 80024be:	f107 0310 	add.w	r3, r7, #16
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fd fe96 	bl	80001f4 <strlen>
 80024c8:	4603      	mov	r3, r0
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	f107 0110 	add.w	r1, r7, #16
 80024d0:	23c8      	movs	r3, #200	; 0xc8
 80024d2:	4806      	ldr	r0, [pc, #24]	; (80024ec <receive_data+0x27c>)
 80024d4:	f007 fda2 	bl	800a01c <HAL_UART_Transmit>
}
 80024d8:	bf00      	nop
 80024da:	37e0      	adds	r7, #224	; 0xe0
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	08010778 	.word	0x08010778
 80024e4:	0801077c 	.word	0x0801077c
 80024e8:	0801078c 	.word	0x0801078c
 80024ec:	200006b0 	.word	0x200006b0
 80024f0:	080107a0 	.word	0x080107a0
 80024f4:	080107b0 	.word	0x080107b0
 80024f8:	080107c8 	.word	0x080107c8
 80024fc:	080107d8 	.word	0x080107d8
 8002500:	080107f0 	.word	0x080107f0
 8002504:	08010800 	.word	0x08010800
 8002508:	0801081c 	.word	0x0801081c
 800250c:	08010820 	.word	0x08010820
 8002510:	08010834 	.word	0x08010834
 8002514:	08010848 	.word	0x08010848

08002518 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]

	receive_data(rx_buffer, &rocket, &radio);
 8002524:	4a06      	ldr	r2, [pc, #24]	; (8002540 <HAL_UARTEx_RxEventCallback+0x28>)
 8002526:	4907      	ldr	r1, [pc, #28]	; (8002544 <HAL_UARTEx_RxEventCallback+0x2c>)
 8002528:	4807      	ldr	r0, [pc, #28]	; (8002548 <HAL_UARTEx_RxEventCallback+0x30>)
 800252a:	f7ff fea1 	bl	8002270 <receive_data>
	// Запускаем прием следующего байта
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *)&rx_buffer, 100);
 800252e:	2264      	movs	r2, #100	; 0x64
 8002530:	4905      	ldr	r1, [pc, #20]	; (8002548 <HAL_UARTEx_RxEventCallback+0x30>)
 8002532:	4806      	ldr	r0, [pc, #24]	; (800254c <HAL_UARTEx_RxEventCallback+0x34>)
 8002534:	f007 fe04 	bl	800a140 <HAL_UARTEx_ReceiveToIdle_IT>

}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000334 	.word	0x20000334
 8002544:	200002a8 	.word	0x200002a8
 8002548:	20000558 	.word	0x20000558
 800254c:	200006b0 	.word	0x200006b0

08002550 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a05      	ldr	r2, [pc, #20]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d102      	bne.n	8002568 <HAL_TIM_PeriodElapsedCallback+0x18>
		PID_WORK = true;
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]

		//get_PID_out(&pid, &angle, &angle_velocity, set_data);
	}

}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40000400 	.word	0x40000400
 8002578:	200005c8 	.word	0x200005c8

0800257c <CheckFlashData>:
#include "flash.h"


// Функция проверки наличия корректных данных во Flash
int CheckFlashData() {
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
    uint32_t address = FLASH_USER_START_ADDR;
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <CheckFlashData+0x30>)
 8002584:	60fb      	str	r3, [r7, #12]

    // Проверяем контрольную сумму или признак валидности данных
    uint32_t checksum = *(uint32_t*)address; // Предположим, что первый байт - это контрольная сумма
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60bb      	str	r3, [r7, #8]
    uint32_t calculated_checksum = MAGIC_CHECKSUM_NUMBER; // Ваша логика для расчета контрольной суммы
 800258c:	2310      	movs	r3, #16
 800258e:	607b      	str	r3, [r7, #4]
    }*/
    //calculated_checksum += rocket.delta_apogee;
    //calculated_checksum += rocket.delta_activate;
    //calculated_checksum += rocket.starting_height;

    return (checksum == calculated_checksum); // Возвращаем true, если данные корректны
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	bf0c      	ite	eq
 8002598:	2301      	moveq	r3, #1
 800259a:	2300      	movne	r3, #0
 800259c:	b2db      	uxtb	r3, r3
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	08060000 	.word	0x08060000

080025b0 <WriteToFlash>:

// Функция записи структуры в Flash
HAL_StatusTypeDef WriteToFlash(struct Rocket *rocket) {
 80025b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b4:	b08c      	sub	sp, #48	; 0x30
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]

    HAL_FLASH_Unlock(); // Разблокировка Flash
 80025ba:	f003 f83d 	bl	8005638 <HAL_FLASH_Unlock>

    uint32_t address = FLASH_USER_START_ADDR;
 80025be:	4b3e      	ldr	r3, [pc, #248]	; (80026b8 <WriteToFlash+0x108>)
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Удаление страниц перед записью
    FLASH_EraseInitTypeDef FlashErase;                     // структура для функции стирания страницы
	uint32_t pageError = 0;                                // переменная для записи информации об ошибках в процессе стирания
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025c6:	b672      	cpsid	i
}
 80025c8:	bf00      	nop

	__disable_irq();                                       // запрещаем прерывания
	//HAL_FLASH_Unlock();
	FlashErase.TypeErase = FLASH_TYPEERASE_SECTORS;          // стирать постранично
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
	FlashErase.NbSectors = 1;         // считаем количество страниц, чтобы наш массив поместился
 80025ce:	2301      	movs	r3, #1
 80025d0:	623b      	str	r3, [r7, #32]
	FlashErase.Sector = FLASH_SECTOR_7;
 80025d2:	2307      	movs	r3, #7
 80025d4:	61fb      	str	r3, [r7, #28]
	FlashErase.VoltageRange = VOLTAGE_RANGE_3;
 80025d6:	2302      	movs	r3, #2
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_FLASHEx_Erase(&FlashErase, &pageError) != HAL_OK)   // вызов функции стирания
 80025da:	f107 0210 	add.w	r2, r7, #16
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 fa05 	bl	80059f4 <HAL_FLASHEx_Erase>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <WriteToFlash+0x48>
	{
		HAL_FLASH_Lock();                                  // если не смог стереть, то закрыть память и вернуть ошибку
 80025f0:	f003 f844 	bl	800567c <HAL_FLASH_Lock>
		return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e059      	b.n	80026ac <WriteToFlash+0xfc>
	}

    // Запись данных в Flash


    uint32_t checksum = MAGIC_CHECKSUM_NUMBER; // Для контрольной суммы
 80025f8:	2310      	movs	r3, #16
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
    //checksum += rocket->delta_activate;
    //checksum += rocket->starting_height;


    // Запись контрольной суммы в начало области Flash
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, address, checksum) != HAL_OK) {
 80025fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fe:	2200      	movs	r2, #0
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002608:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800260a:	2002      	movs	r0, #2
 800260c:	f002 ffae 	bl	800556c <HAL_FLASH_Program>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <WriteToFlash+0x6e>
        HAL_FLASH_Lock();
 8002616:	f003 f831 	bl	800567c <HAL_FLASH_Lock>
        return HAL_ERROR; // Ошибка записи
 800261a:	2301      	movs	r3, #1
 800261c:	e046      	b.n	80026ac <WriteToFlash+0xfc>
    }

    address += sizeof(uint32_t);
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	3304      	adds	r3, #4
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Запись структуры в Flash*((uint32_t*)&value)
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, address, rocket->delta_apogee) != HAL_OK) {
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	7d1b      	ldrb	r3, [r3, #20]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2200      	movs	r2, #0
 800262c:	469a      	mov	sl, r3
 800262e:	4693      	mov	fp, r2
 8002630:	4652      	mov	r2, sl
 8002632:	465b      	mov	r3, fp
 8002634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002636:	2002      	movs	r0, #2
 8002638:	f002 ff98 	bl	800556c <HAL_FLASH_Program>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <WriteToFlash+0x9a>
        HAL_FLASH_Lock();
 8002642:	f003 f81b 	bl	800567c <HAL_FLASH_Lock>
        return HAL_ERROR; // Ошибка записи
 8002646:	2301      	movs	r3, #1
 8002648:	e030      	b.n	80026ac <WriteToFlash+0xfc>
    }

    address += sizeof(uint32_t);
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	3304      	adds	r3, #4
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, address, rocket->delta_activate) != HAL_OK) {
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	7d5b      	ldrb	r3, [r3, #21]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2200      	movs	r2, #0
 8002658:	4698      	mov	r8, r3
 800265a:	4691      	mov	r9, r2
 800265c:	4642      	mov	r2, r8
 800265e:	464b      	mov	r3, r9
 8002660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002662:	2002      	movs	r0, #2
 8002664:	f002 ff82 	bl	800556c <HAL_FLASH_Program>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <WriteToFlash+0xc6>
        HAL_FLASH_Lock();
 800266e:	f003 f805 	bl	800567c <HAL_FLASH_Lock>
        return HAL_ERROR; // Ошибка записи
 8002672:	2301      	movs	r3, #1
 8002674:	e01a      	b.n	80026ac <WriteToFlash+0xfc>
    }

    address += sizeof(uint32_t);
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	3304      	adds	r3, #4
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, address, rocket->starting_height) != HAL_OK) {
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	7d9b      	ldrb	r3, [r3, #22]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2200      	movs	r2, #0
 8002684:	461c      	mov	r4, r3
 8002686:	4615      	mov	r5, r2
 8002688:	4622      	mov	r2, r4
 800268a:	462b      	mov	r3, r5
 800268c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800268e:	2002      	movs	r0, #2
 8002690:	f002 ff6c 	bl	800556c <HAL_FLASH_Program>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <WriteToFlash+0xf2>
            HAL_FLASH_Lock();
 800269a:	f002 ffef 	bl	800567c <HAL_FLASH_Lock>
            return HAL_ERROR; // Ошибка записи
 800269e:	2301      	movs	r3, #1
 80026a0:	e004      	b.n	80026ac <WriteToFlash+0xfc>
    }


    HAL_FLASH_Lock(); // Блокировка Flash
 80026a2:	f002 ffeb 	bl	800567c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80026a6:	b662      	cpsie	i
}
 80026a8:	bf00      	nop
    __enable_irq();                                        // включаем прерывания обратно
    return HAL_OK; // Успешно
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3730      	adds	r7, #48	; 0x30
 80026b0:	46bd      	mov	sp, r7
 80026b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026b6:	bf00      	nop
 80026b8:	08060000 	.word	0x08060000

080026bc <ReadFromFlash>:

// Функция чтения структуры из Flash
void ReadFromFlash(struct Rocket *rocket) {
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    uint32_t address = FLASH_USER_START_ADDR + 4; // Пропускаем контрольную сумму
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <ReadFromFlash+0x54>)
 80026c6:	60fb      	str	r3, [r7, #12]

    if (address % 4 != 0) {
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d118      	bne.n	8002704 <ReadFromFlash+0x48>
            // Обработка ошибки: адрес не выровнен
            return;
        }

    rocket->delta_apogee = *(__IO uint32_t*)address; // Чтение первого поля
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	751a      	strb	r2, [r3, #20]
    address += 4;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3304      	adds	r3, #4
 80026e0:	60fb      	str	r3, [r7, #12]

    rocket->delta_activate = *(__IO uint32_t*)address; // Чтение второго поля
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	755a      	strb	r2, [r3, #21]
    address += 4;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3304      	adds	r3, #4
 80026f0:	60fb      	str	r3, [r7, #12]

    rocket->starting_height = *(__IO uint32_t*)address; // Чтение второго поля
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	759a      	strb	r2, [r3, #22]
    address += 4;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3304      	adds	r3, #4
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e000      	b.n	8002706 <ReadFromFlash+0x4a>
            return;
 8002704:	bf00      	nop

    //return HAL_OK; // Успешно
}
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	08060004 	.word	0x08060004

08002714 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
 8002728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <MX_GPIO_Init+0xc8>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a2a      	ldr	r2, [pc, #168]	; (80027dc <MX_GPIO_Init+0xc8>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b28      	ldr	r3, [pc, #160]	; (80027dc <MX_GPIO_Init+0xc8>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <MX_GPIO_Init+0xc8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a23      	ldr	r2, [pc, #140]	; (80027dc <MX_GPIO_Init+0xc8>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b21      	ldr	r3, [pc, #132]	; (80027dc <MX_GPIO_Init+0xc8>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <MX_GPIO_Init+0xc8>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <MX_GPIO_Init+0xc8>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <MX_GPIO_Init+0xc8>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002784:	4816      	ldr	r0, [pc, #88]	; (80027e0 <MX_GPIO_Init+0xcc>)
 8002786:	f003 fe7f 	bl	8006488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 800278a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800278e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002790:	2301      	movs	r3, #1
 8002792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800279c:	f107 030c 	add.w	r3, r7, #12
 80027a0:	4619      	mov	r1, r3
 80027a2:	480f      	ldr	r0, [pc, #60]	; (80027e0 <MX_GPIO_Init+0xcc>)
 80027a4:	f003 faae 	bl	8005d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = btn_Pin;
 80027a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80027b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b4:	2301      	movs	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	4619      	mov	r1, r3
 80027be:	4808      	ldr	r0, [pc, #32]	; (80027e0 <MX_GPIO_Init+0xcc>)
 80027c0:	f003 faa0 	bl	8005d04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2100      	movs	r1, #0
 80027c8:	2028      	movs	r0, #40	; 0x28
 80027ca:	f002 fdd5 	bl	8005378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027ce:	2028      	movs	r0, #40	; 0x28
 80027d0:	f002 fdfe 	bl	80053d0 <HAL_NVIC_EnableIRQ>

}
 80027d4:	bf00      	nop
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40020800 	.word	0x40020800

080027e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <MX_I2C1_Init+0x50>)
 80027ea:	4a13      	ldr	r2, [pc, #76]	; (8002838 <MX_I2C1_Init+0x54>)
 80027ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <MX_I2C1_Init+0x50>)
 80027f0:	4a12      	ldr	r2, [pc, #72]	; (800283c <MX_I2C1_Init+0x58>)
 80027f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <MX_I2C1_Init+0x50>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <MX_I2C1_Init+0x50>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <MX_I2C1_Init+0x50>)
 8002802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002806:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <MX_I2C1_Init+0x50>)
 800280a:	2200      	movs	r2, #0
 800280c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <MX_I2C1_Init+0x50>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <MX_I2C1_Init+0x50>)
 8002816:	2200      	movs	r2, #0
 8002818:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <MX_I2C1_Init+0x50>)
 800281c:	2200      	movs	r2, #0
 800281e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002820:	4804      	ldr	r0, [pc, #16]	; (8002834 <MX_I2C1_Init+0x50>)
 8002822:	f003 fe7b 	bl	800651c <HAL_I2C_Init>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800282c:	f000 fa9e 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000254 	.word	0x20000254
 8002838:	40005400 	.word	0x40005400
 800283c:	000186a0 	.word	0x000186a0

08002840 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a20      	ldr	r2, [pc, #128]	; (80028e0 <HAL_I2C_MspInit+0xa0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d139      	bne.n	80028d6 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	4a1e      	ldr	r2, [pc, #120]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 800286c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002870:	6413      	str	r3, [r2, #64]	; 0x40
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800289a:	23c0      	movs	r3, #192	; 0xc0
 800289c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800289e:	2312      	movs	r3, #18
 80028a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028aa:	2304      	movs	r3, #4
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4619      	mov	r1, r3
 80028b4:	480c      	ldr	r0, [pc, #48]	; (80028e8 <HAL_I2C_MspInit+0xa8>)
 80028b6:	f003 fa25 	bl	8005d04 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a08      	ldr	r2, [pc, #32]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 80028c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_I2C_MspInit+0xa4>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d2:	60bb      	str	r3, [r7, #8]
 80028d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80028d6:	bf00      	nop
 80028d8:	3728      	adds	r7, #40	; 0x28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40005400 	.word	0x40005400
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40020400 	.word	0x40020400

080028ec <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_I2C_MspDeInit+0x38>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d10d      	bne.n	800291a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_I2C_MspDeInit+0x3c>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_I2C_MspDeInit+0x3c>)
 8002904:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002908:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800290a:	2140      	movs	r1, #64	; 0x40
 800290c:	4807      	ldr	r0, [pc, #28]	; (800292c <HAL_I2C_MspDeInit+0x40>)
 800290e:	f003 fc93 	bl	8006238 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002912:	2180      	movs	r1, #128	; 0x80
 8002914:	4805      	ldr	r0, [pc, #20]	; (800292c <HAL_I2C_MspDeInit+0x40>)
 8002916:	f003 fc8f 	bl	8006238 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40005400 	.word	0x40005400
 8002928:	40023800 	.word	0x40023800
 800292c:	40020400 	.word	0x40020400

08002930 <start_blink_led>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void start_blink_led(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint16_t time){
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	4613      	mov	r3, r2
 800293e:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	2201      	movs	r2, #1
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f003 fd9e 	bl	8006488 <HAL_GPIO_WritePin>
	HAL_Delay(time);
 800294c:	883b      	ldrh	r3, [r7, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f001 ff16 	bl	8004780 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	2200      	movs	r2, #0
 8002958:	4619      	mov	r1, r3
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f003 fd94 	bl	8006488 <HAL_GPIO_WritePin>

}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <tick_to_sec>:

float tick_to_sec(uint32_t tick){
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	return tick/(float)1000;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002994 <tick_to_sec+0x2c>
 800297e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002982:	eef0 7a66 	vmov.f32	s15, s13
}
 8002986:	eeb0 0a67 	vmov.f32	s0, s15
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	447a0000 	.word	0x447a0000

08002998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002998:	b590      	push	{r4, r7, lr}
 800299a:	b087      	sub	sp, #28
 800299c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800299e:	f001 fe7d 	bl	800469c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029a2:	f000 f969 	bl	8002c78 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_I2C1_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	4b95      	ldr	r3, [pc, #596]	; (8002c00 <main+0x268>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	4a94      	ldr	r2, [pc, #592]	; (8002c00 <main+0x268>)
 80029b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029b4:	6413      	str	r3, [r2, #64]	; 0x40
 80029b6:	4b92      	ldr	r3, [pc, #584]	; (8002c00 <main+0x268>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
    HAL_Delay(100);
 80029c2:	2064      	movs	r0, #100	; 0x64
 80029c4:	f001 fedc 	bl	8004780 <HAL_Delay>
    __HAL_RCC_I2C1_FORCE_RESET();
 80029c8:	4b8d      	ldr	r3, [pc, #564]	; (8002c00 <main+0x268>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	4a8c      	ldr	r2, [pc, #560]	; (8002c00 <main+0x268>)
 80029ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029d2:	6213      	str	r3, [r2, #32]
    HAL_Delay(100);
 80029d4:	2064      	movs	r0, #100	; 0x64
 80029d6:	f001 fed3 	bl	8004780 <HAL_Delay>
    __HAL_RCC_I2C1_RELEASE_RESET();
 80029da:	4b89      	ldr	r3, [pc, #548]	; (8002c00 <main+0x268>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	4a88      	ldr	r2, [pc, #544]	; (8002c00 <main+0x268>)
 80029e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029e4:	6213      	str	r3, [r2, #32]
    HAL_Delay(100);
 80029e6:	2064      	movs	r0, #100	; 0x64
 80029e8:	f001 feca 	bl	8004780 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029ec:	f7ff fe92 	bl	8002714 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80029f0:	f000 fd46 	bl	8003480 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80029f4:	f7fe fd3c 	bl	8001470 <MX_ADC1_Init>
  MX_I2C1_Init();
 80029f8:	f7ff fef4 	bl	80027e4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80029fc:	f000 fb0c 	bl	8003018 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002a00:	f000 fc40 	bl	8003284 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002a04:	f000 fba8 	bl	8003158 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *)&rx_buffer, 100);
 8002a08:	2264      	movs	r2, #100	; 0x64
 8002a0a:	497e      	ldr	r1, [pc, #504]	; (8002c04 <main+0x26c>)
 8002a0c:	487e      	ldr	r0, [pc, #504]	; (8002c08 <main+0x270>)
 8002a0e:	f007 fb97 	bl	800a140 <HAL_UARTEx_ReceiveToIdle_IT>

    //HAL_ADCEx_Calibration_Start(&hadc1);

    HAL_ADC_Start(&hadc1);
 8002a12:	487e      	ldr	r0, [pc, #504]	; (8002c0c <main+0x274>)
 8002a14:	f002 f836 	bl	8004a84 <HAL_ADC_Start>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002a18:	2100      	movs	r1, #0
 8002a1a:	487d      	ldr	r0, [pc, #500]	; (8002c10 <main+0x278>)
 8002a1c:	f005 fe02 	bl	8008624 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002a20:	2104      	movs	r1, #4
 8002a22:	487c      	ldr	r0, [pc, #496]	; (8002c14 <main+0x27c>)
 8002a24:	f005 fdfe 	bl	8008624 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002a28:	2108      	movs	r1, #8
 8002a2a:	487a      	ldr	r0, [pc, #488]	; (8002c14 <main+0x27c>)
 8002a2c:	f005 fdfa 	bl	8008624 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002a30:	210c      	movs	r1, #12
 8002a32:	4878      	ldr	r0, [pc, #480]	; (8002c14 <main+0x27c>)
 8002a34:	f005 fdf6 	bl	8008624 <HAL_TIM_PWM_Start>

    HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a3e:	4876      	ldr	r0, [pc, #472]	; (8002c18 <main+0x280>)
 8002a40:	f003 fd22 	bl	8006488 <HAL_GPIO_WritePin>

    atmosphere_init(&atmosphere);
 8002a44:	4875      	ldr	r0, [pc, #468]	; (8002c1c <main+0x284>)
 8002a46:	f001 fd3b 	bl	80044c0 <atmosphere_init>

    rocket_init(&rocket, "1A", &altitude, &atmosphere, &accelerate, &angle, &angle_velocity);
 8002a4a:	4b75      	ldr	r3, [pc, #468]	; (8002c20 <main+0x288>)
 8002a4c:	9302      	str	r3, [sp, #8]
 8002a4e:	4b75      	ldr	r3, [pc, #468]	; (8002c24 <main+0x28c>)
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	4b75      	ldr	r3, [pc, #468]	; (8002c28 <main+0x290>)
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	4b71      	ldr	r3, [pc, #452]	; (8002c1c <main+0x284>)
 8002a58:	4a74      	ldr	r2, [pc, #464]	; (8002c2c <main+0x294>)
 8002a5a:	4975      	ldr	r1, [pc, #468]	; (8002c30 <main+0x298>)
 8002a5c:	4875      	ldr	r0, [pc, #468]	; (8002c34 <main+0x29c>)
 8002a5e:	f001 fcf2 	bl	8004446 <rocket_init>

    if (CheckFlashData()) {
 8002a62:	f7ff fd8b 	bl	800257c <CheckFlashData>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <main+0xdc>
  	  ReadFromFlash(&rocket); // Чтение данных из Flash, если они корректны
 8002a6c:	4871      	ldr	r0, [pc, #452]	; (8002c34 <main+0x29c>)
 8002a6e:	f7ff fe25 	bl	80026bc <ReadFromFlash>
 8002a72:	e002      	b.n	8002a7a <main+0xe2>
    }
    else {
  	  delta_init(&rocket);
 8002a74:	486f      	ldr	r0, [pc, #444]	; (8002c34 <main+0x29c>)
 8002a76:	f001 fdd4 	bl	8004622 <delta_init>
    }

    angle_init(&angle);
 8002a7a:	486a      	ldr	r0, [pc, #424]	; (8002c24 <main+0x28c>)
 8002a7c:	f000 fd7a 	bl	8003574 <angle_init>

    angle_velocity_init(&angle_velocity);
 8002a80:	4867      	ldr	r0, [pc, #412]	; (8002c20 <main+0x288>)
 8002a82:	f000 fd8d 	bl	80035a0 <angle_velocity_init>

    PID_init(&pid);
 8002a86:	486c      	ldr	r0, [pc, #432]	; (8002c38 <main+0x2a0>)
 8002a88:	f000 ffdf 	bl	8003a4a <PID_init>

    set_PID_coefficients(&pid, Kp, Ki, Kd);
 8002a8c:	4b6b      	ldr	r3, [pc, #428]	; (8002c3c <main+0x2a4>)
 8002a8e:	edd3 7a00 	vldr	s15, [r3]
 8002a92:	4b6b      	ldr	r3, [pc, #428]	; (8002c40 <main+0x2a8>)
 8002a94:	ed93 7a00 	vldr	s14, [r3]
 8002a98:	4b6a      	ldr	r3, [pc, #424]	; (8002c44 <main+0x2ac>)
 8002a9a:	edd3 6a00 	vldr	s13, [r3]
 8002a9e:	eeb0 1a66 	vmov.f32	s2, s13
 8002aa2:	eef0 0a47 	vmov.f32	s1, s14
 8002aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aaa:	4863      	ldr	r0, [pc, #396]	; (8002c38 <main+0x2a0>)
 8002aac:	f001 f829 	bl	8003b02 <set_PID_coefficients>

    altitude_init(&rocket);
 8002ab0:	4860      	ldr	r0, [pc, #384]	; (8002c34 <main+0x29c>)
 8002ab2:	f001 f995 	bl	8003de0 <altitude_init>

    rescue_system_init(TIM1);
 8002ab6:	4864      	ldr	r0, [pc, #400]	; (8002c48 <main+0x2b0>)
 8002ab8:	f001 fcb6 	bl	8004428 <rescue_system_init>

    initGMedian(&gmedian_alt);
 8002abc:	4863      	ldr	r0, [pc, #396]	; (8002c4c <main+0x2b4>)
 8002abe:	f000 fee7 	bl	8003890 <initGMedian>

    for(int i = 0; i < 3; i++){
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	e016      	b.n	8002af6 <main+0x15e>
  	  initGMedian(&(gmedian_a[i]));
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	4a5f      	ldr	r2, [pc, #380]	; (8002c50 <main+0x2b8>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 feda 	bl	8003890 <initGMedian>
  	  initGMedian(&(gmedian_g[i]));
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	4a5b      	ldr	r2, [pc, #364]	; (8002c54 <main+0x2bc>)
 8002ae8:	4413      	add	r3, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fed0 	bl	8003890 <initGMedian>
    for(int i = 0; i < 3; i++){
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3301      	adds	r3, #1
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	dde5      	ble.n	8002ac8 <main+0x130>
    }

    radio_init(&radio);
 8002afc:	4856      	ldr	r0, [pc, #344]	; (8002c58 <main+0x2c0>)
 8002afe:	f001 fbab 	bl	8004258 <radio_init>

    HAL_TIM_Base_Start_IT(&htim3);
 8002b02:	4856      	ldr	r0, [pc, #344]	; (8002c5c <main+0x2c4>)
 8002b04:	f005 fc2c 	bl	8008360 <HAL_TIM_Base_Start_IT>

    HAL_Delay(500);
 8002b08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b0c:	f001 fe38 	bl	8004780 <HAL_Delay>
    HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8002b10:	2200      	movs	r2, #0
 8002b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b16:	4840      	ldr	r0, [pc, #256]	; (8002c18 <main+0x280>)
 8002b18:	f003 fcb6 	bl	8006488 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8002b1c:	20c8      	movs	r0, #200	; 0xc8
 8002b1e:	f001 fe2f 	bl	8004780 <HAL_Delay>
    start_blink_led(led_GPIO_Port, led_Pin, 200);
 8002b22:	22c8      	movs	r2, #200	; 0xc8
 8002b24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b28:	483b      	ldr	r0, [pc, #236]	; (8002c18 <main+0x280>)
 8002b2a:	f7ff ff01 	bl	8002930 <start_blink_led>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_inertia_measurement(&accelerate, &gyro);
 8002b2e:	494c      	ldr	r1, [pc, #304]	; (8002c60 <main+0x2c8>)
 8002b30:	483d      	ldr	r0, [pc, #244]	; (8002c28 <main+0x290>)
 8002b32:	f001 fa90 	bl	8004056 <get_inertia_measurement>

	  filtered_inertia_measurement(&accelerate, &gyro,gmedian_a,gmedian_g);
 8002b36:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <main+0x2bc>)
 8002b38:	4a45      	ldr	r2, [pc, #276]	; (8002c50 <main+0x2b8>)
 8002b3a:	4949      	ldr	r1, [pc, #292]	; (8002c60 <main+0x2c8>)
 8002b3c:	483a      	ldr	r0, [pc, #232]	; (8002c28 <main+0x290>)
 8002b3e:	f001 fa9b 	bl	8004078 <filtered_inertia_measurement>

	  get_inertia_measurement_mod(&accelerate, &gyro);
 8002b42:	4947      	ldr	r1, [pc, #284]	; (8002c60 <main+0x2c8>)
 8002b44:	4838      	ldr	r0, [pc, #224]	; (8002c28 <main+0x290>)
 8002b46:	f001 fb3d 	bl	80041c4 <get_inertia_measurement_mod>

	  angle_calculate(&angle, &accelerate);
 8002b4a:	4937      	ldr	r1, [pc, #220]	; (8002c28 <main+0x290>)
 8002b4c:	4835      	ldr	r0, [pc, #212]	; (8002c24 <main+0x28c>)
 8002b4e:	f000 fd53 	bl	80035f8 <angle_calculate>

	  angle_velocity_calculate(&angle_velocity, &gyro);
 8002b52:	4943      	ldr	r1, [pc, #268]	; (8002c60 <main+0x2c8>)
 8002b54:	4832      	ldr	r0, [pc, #200]	; (8002c20 <main+0x288>)
 8002b56:	f000 fe49 	bl	80037ec <angle_velocity_calculate>

	  get_altitude_measurement(&rocket);
 8002b5a:	4836      	ldr	r0, [pc, #216]	; (8002c34 <main+0x29c>)
 8002b5c:	f001 f9ce 	bl	8003efc <get_altitude_measurement>

	  filtered_altitude_measurement(&rocket, &gmedian_alt);
 8002b60:	493a      	ldr	r1, [pc, #232]	; (8002c4c <main+0x2b4>)
 8002b62:	4834      	ldr	r0, [pc, #208]	; (8002c34 <main+0x29c>)
 8002b64:	f001 f9f4 	bl	8003f50 <filtered_altitude_measurement>

	  if(flag_irq && (HAL_GetTick() - time_irq) > btn_time)
 8002b68:	4b3e      	ldr	r3, [pc, #248]	; (8002c64 <main+0x2cc>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <main+0x1ee>
 8002b70:	f001 fdfa 	bl	8004768 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b3c      	ldr	r3, [pc, #240]	; (8002c68 <main+0x2d0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2bc8      	cmp	r3, #200	; 0xc8
 8002b7e:	d902      	bls.n	8002b86 <main+0x1ee>
		  {
		  turn_servo(90);
 8002b80:	205a      	movs	r0, #90	; 0x5a
 8002b82:	f001 fc21 	bl	80043c8 <turn_servo>
		  }

	  fly_control(&rocket);
 8002b86:	482b      	ldr	r0, [pc, #172]	; (8002c34 <main+0x29c>)
 8002b88:	f001 fcbc 	bl	8004504 <fly_control>

	  if(rocket.activate_point){
		 //turn_servo(90);
	  }
	  rocket.time = tick_to_sec(HAL_GetTick());
 8002b8c:	f001 fdec 	bl	8004768 <HAL_GetTick>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fee8 	bl	8002968 <tick_to_sec>
 8002b98:	eef0 7a40 	vmov.f32	s15, s0
 8002b9c:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <main+0x29c>)
 8002b9e:	edc3 7a07 	vstr	s15, [r3, #28]
	  rocket.battery_voltage = get_mcu_voltage();
 8002ba2:	f001 fb2d 	bl	8004200 <get_mcu_voltage>
 8002ba6:	eef0 7a40 	vmov.f32	s15, s0
 8002baa:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <main+0x29c>)
 8002bac:	edc3 7a06 	vstr	s15, [r3, #24]

	  if(PID_WORK == true){
 8002bb0:	4b2e      	ldr	r3, [pc, #184]	; (8002c6c <main+0x2d4>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <main+0x238>
		  get_PID_out(&pid, &angle, &angle_velocity, set_data);
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	; (8002c70 <main+0x2d8>)
 8002bba:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <main+0x288>)
 8002bbc:	4919      	ldr	r1, [pc, #100]	; (8002c24 <main+0x28c>)
 8002bbe:	481e      	ldr	r0, [pc, #120]	; (8002c38 <main+0x2a0>)
 8002bc0:	f001 f838 	bl	8003c34 <get_PID_out>
		  set_pwm(&pid);
 8002bc4:	481c      	ldr	r0, [pc, #112]	; (8002c38 <main+0x2a0>)
 8002bc6:	f001 f8ce 	bl	8003d66 <set_pwm>
		  PID_WORK = false;
 8002bca:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <main+0x2d4>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
	  }

	  if(HAL_GetTick() - time > Hz_to_ms(radio.frequency_data_transmission)){
 8002bd0:	f001 fdca 	bl	8004768 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <main+0x2dc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	1ad4      	subs	r4, r2, r3
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <main+0x2c0>)
 8002bde:	885b      	ldrh	r3, [r3, #2]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fb33 	bl	800224c <Hz_to_ms>
 8002be6:	4603      	mov	r3, r0
 8002be8:	429c      	cmp	r4, r3
 8002bea:	d9a0      	bls.n	8002b2e <main+0x196>
		  time = HAL_GetTick();
 8002bec:	f001 fdbc 	bl	8004768 <HAL_GetTick>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4a20      	ldr	r2, [pc, #128]	; (8002c74 <main+0x2dc>)
 8002bf4:	6013      	str	r3, [r2, #0]

		  transmit_data(&rocket, &radio);
 8002bf6:	4918      	ldr	r1, [pc, #96]	; (8002c58 <main+0x2c0>)
 8002bf8:	480e      	ldr	r0, [pc, #56]	; (8002c34 <main+0x29c>)
 8002bfa:	f001 fb3d 	bl	8004278 <transmit_data>
	  get_inertia_measurement(&accelerate, &gyro);
 8002bfe:	e796      	b.n	8002b2e <main+0x196>
 8002c00:	40023800 	.word	0x40023800
 8002c04:	20000558 	.word	0x20000558
 8002c08:	200006b0 	.word	0x200006b0
 8002c0c:	2000020c 	.word	0x2000020c
 8002c10:	200005d8 	.word	0x200005d8
 8002c14:	20000620 	.word	0x20000620
 8002c18:	40020800 	.word	0x40020800
 8002c1c:	200002d8 	.word	0x200002d8
 8002c20:	200004a0 	.word	0x200004a0
 8002c24:	20000488 	.word	0x20000488
 8002c28:	200002fc 	.word	0x200002fc
 8002c2c:	200002f0 	.word	0x200002f0
 8002c30:	0801085c 	.word	0x0801085c
 8002c34:	200002a8 	.word	0x200002a8
 8002c38:	200004b8 	.word	0x200004b8
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	20000550 	.word	0x20000550
 8002c44:	20000554 	.word	0x20000554
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	20000458 	.word	0x20000458
 8002c50:	20000338 	.word	0x20000338
 8002c54:	200003c8 	.word	0x200003c8
 8002c58:	20000334 	.word	0x20000334
 8002c5c:	20000668 	.word	0x20000668
 8002c60:	20000318 	.word	0x20000318
 8002c64:	200005bc 	.word	0x200005bc
 8002c68:	200005c0 	.word	0x200005c0
 8002c6c:	200005c8 	.word	0x200005c8
 8002c70:	200005cc 	.word	0x200005cc
 8002c74:	200005c4 	.word	0x200005c4

08002c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b094      	sub	sp, #80	; 0x50
 8002c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c7e:	f107 0320 	add.w	r3, r7, #32
 8002c82:	2230      	movs	r2, #48	; 0x30
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f008 fa9a 	bl	800b1c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <SystemClock_Config+0xb4>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	4a21      	ldr	r2, [pc, #132]	; (8002d2c <SystemClock_Config+0xb4>)
 8002ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002caa:	6413      	str	r3, [r2, #64]	; 0x40
 8002cac:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <SystemClock_Config+0xb4>)
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	4b1c      	ldr	r3, [pc, #112]	; (8002d30 <SystemClock_Config+0xb8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	; (8002d30 <SystemClock_Config+0xb8>)
 8002cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <SystemClock_Config+0xb8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cdc:	2310      	movs	r3, #16
 8002cde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ce4:	f107 0320 	add.w	r3, r7, #32
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f004 fcc3 	bl	8007674 <HAL_RCC_OscConfig>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002cf4:	f000 f83a 	bl	8002d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cf8:	230f      	movs	r3, #15
 8002cfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f004 ffd6 	bl	8007cc4 <HAL_RCC_ClockConfig>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002d1e:	f000 f825 	bl	8002d6c <Error_Handler>
  }
}
 8002d22:	bf00      	nop
 8002d24:	3750      	adds	r7, #80	; 0x50
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40007000 	.word	0x40007000

08002d34 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == btn_Pin){
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d44:	d10a      	bne.n	8002d5c <HAL_GPIO_EXTI_Callback+0x28>
  	  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);  // сразу же отключаем прерывания на этом пине
 8002d46:	2028      	movs	r0, #40	; 0x28
 8002d48:	f002 fb5a 	bl	8005400 <HAL_NVIC_DisableIRQ>
  	  flag_irq = 1;							//поднимаем флажок
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_GPIO_EXTI_Callback+0x30>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
  	  time_irq = HAL_GetTick();				//запоминаем текущее время
 8002d52:	f001 fd09 	bl	8004768 <HAL_GetTick>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4a03      	ldr	r2, [pc, #12]	; (8002d68 <HAL_GPIO_EXTI_Callback+0x34>)
 8002d5a:	6013      	str	r3, [r2, #0]
    }
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	200005bc 	.word	0x200005bc
 8002d68:	200005c0 	.word	0x200005c0

08002d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d70:	b672      	cpsid	i
}
 8002d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d74:	e7fe      	b.n	8002d74 <Error_Handler+0x8>

08002d76 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	4a0f      	ldr	r2, [pc, #60]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	4a08      	ldr	r2, [pc, #32]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_MspInit+0x4c>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	603b      	str	r3, [r7, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800

08002ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <NMI_Handler+0x4>

08002de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <HardFault_Handler+0x4>

08002de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <MemManage_Handler+0x4>

08002dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df2:	e7fe      	b.n	8002df2 <BusFault_Handler+0x4>

08002df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <UsageFault_Handler+0x4>

08002dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e28:	f001 fc8a 	bl	8004740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <TIM3_IRQHandler+0x10>)
 8002e36:	f005 fd21 	bl	800887c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000668 	.word	0x20000668

08002e44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e48:	4802      	ldr	r0, [pc, #8]	; (8002e54 <USART1_IRQHandler+0x10>)
 8002e4a:	f007 f9df 	bl	800a20c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	200006b0 	.word	0x200006b0

08002e58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn_Pin);
 8002e5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e60:	f003 fb44 	bl	80064ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return 1;
 8002e6c:	2301      	movs	r3, #1
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <_kill>:

int _kill(int pid, int sig)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e82:	f008 f973 	bl	800b16c <__errno>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2216      	movs	r2, #22
 8002e8a:	601a      	str	r2, [r3, #0]
  return -1;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_exit>:

void _exit (int status)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ffe7 	bl	8002e78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002eaa:	e7fe      	b.n	8002eaa <_exit+0x12>

08002eac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e00a      	b.n	8002ed4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ebe:	f3af 8000 	nop.w
 8002ec2:	4601      	mov	r1, r0
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	60ba      	str	r2, [r7, #8]
 8002eca:	b2ca      	uxtb	r2, r1
 8002ecc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	dbf0      	blt.n	8002ebe <_read+0x12>
  }

  return len;
 8002edc:	687b      	ldr	r3, [r7, #4]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e009      	b.n	8002f0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	60ba      	str	r2, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	dbf1      	blt.n	8002ef8 <_write+0x12>
  }
  return len;
 8002f14:	687b      	ldr	r3, [r7, #4]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <_close>:

int _close(int file)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f46:	605a      	str	r2, [r3, #4]
  return 0;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <_isatty>:

int _isatty(int file)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f90:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <_sbrk+0x5c>)
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <_sbrk+0x60>)
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <_sbrk+0x64>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <_sbrk+0x64>)
 8002fa6:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <_sbrk+0x68>)
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <_sbrk+0x64>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d207      	bcs.n	8002fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb8:	f008 f8d8 	bl	800b16c <__errno>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	e009      	b.n	8002fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <_sbrk+0x64>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fce:	4b07      	ldr	r3, [pc, #28]	; (8002fec <_sbrk+0x64>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	4a05      	ldr	r2, [pc, #20]	; (8002fec <_sbrk+0x64>)
 8002fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fda:	68fb      	ldr	r3, [r7, #12]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20020000 	.word	0x20020000
 8002fe8:	00000400 	.word	0x00000400
 8002fec:	200005d4 	.word	0x200005d4
 8002ff0:	20000868 	.word	0x20000868

08002ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <SystemInit+0x20>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <SystemInit+0x20>)
 8003000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b096      	sub	sp, #88	; 0x58
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800301e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800302c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	60da      	str	r2, [r3, #12]
 8003044:	611a      	str	r2, [r3, #16]
 8003046:	615a      	str	r2, [r3, #20]
 8003048:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800304a:	1d3b      	adds	r3, r7, #4
 800304c:	2220      	movs	r2, #32
 800304e:	2100      	movs	r1, #0
 8003050:	4618      	mov	r0, r3
 8003052:	f008 f8b5 	bl	800b1c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003056:	4b3e      	ldr	r3, [pc, #248]	; (8003150 <MX_TIM1_Init+0x138>)
 8003058:	4a3e      	ldr	r2, [pc, #248]	; (8003154 <MX_TIM1_Init+0x13c>)
 800305a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800305c:	4b3c      	ldr	r3, [pc, #240]	; (8003150 <MX_TIM1_Init+0x138>)
 800305e:	220f      	movs	r2, #15
 8003060:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003062:	4b3b      	ldr	r3, [pc, #236]	; (8003150 <MX_TIM1_Init+0x138>)
 8003064:	2200      	movs	r2, #0
 8003066:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003068:	4b39      	ldr	r3, [pc, #228]	; (8003150 <MX_TIM1_Init+0x138>)
 800306a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800306e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003070:	4b37      	ldr	r3, [pc, #220]	; (8003150 <MX_TIM1_Init+0x138>)
 8003072:	2200      	movs	r2, #0
 8003074:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003076:	4b36      	ldr	r3, [pc, #216]	; (8003150 <MX_TIM1_Init+0x138>)
 8003078:	2200      	movs	r2, #0
 800307a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800307c:	4b34      	ldr	r3, [pc, #208]	; (8003150 <MX_TIM1_Init+0x138>)
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003082:	4833      	ldr	r0, [pc, #204]	; (8003150 <MX_TIM1_Init+0x138>)
 8003084:	f005 f8a6 	bl	80081d4 <HAL_TIM_Base_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800308e:	f7ff fe6d 	bl	8002d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003098:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800309c:	4619      	mov	r1, r3
 800309e:	482c      	ldr	r0, [pc, #176]	; (8003150 <MX_TIM1_Init+0x138>)
 80030a0:	f005 fe9a 	bl	8008dd8 <HAL_TIM_ConfigClockSource>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80030aa:	f7ff fe5f 	bl	8002d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030ae:	4828      	ldr	r0, [pc, #160]	; (8003150 <MX_TIM1_Init+0x138>)
 80030b0:	f005 f9e8 	bl	8008484 <HAL_TIM_PWM_Init>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80030ba:	f7ff fe57 	bl	8002d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030be:	2300      	movs	r3, #0
 80030c0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030ca:	4619      	mov	r1, r3
 80030cc:	4820      	ldr	r0, [pc, #128]	; (8003150 <MX_TIM1_Init+0x138>)
 80030ce:	f006 fd57 	bl	8009b80 <HAL_TIMEx_MasterConfigSynchronization>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80030d8:	f7ff fe48 	bl	8002d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030dc:	2360      	movs	r3, #96	; 0x60
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030e4:	2300      	movs	r3, #0
 80030e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030e8:	2300      	movs	r3, #0
 80030ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030f0:	2300      	movs	r3, #0
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030f4:	2300      	movs	r3, #0
 80030f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fc:	2200      	movs	r2, #0
 80030fe:	4619      	mov	r1, r3
 8003100:	4813      	ldr	r0, [pc, #76]	; (8003150 <MX_TIM1_Init+0x138>)
 8003102:	f005 fcc3 	bl	8008a8c <HAL_TIM_PWM_ConfigChannel>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800310c:	f7ff fe2e 	bl	8002d6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003110:	2300      	movs	r3, #0
 8003112:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003128:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800312a:	2300      	movs	r3, #0
 800312c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800312e:	1d3b      	adds	r3, r7, #4
 8003130:	4619      	mov	r1, r3
 8003132:	4807      	ldr	r0, [pc, #28]	; (8003150 <MX_TIM1_Init+0x138>)
 8003134:	f006 fde2 	bl	8009cfc <HAL_TIMEx_ConfigBreakDeadTime>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800313e:	f7ff fe15 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003142:	4803      	ldr	r0, [pc, #12]	; (8003150 <MX_TIM1_Init+0x138>)
 8003144:	f000 f93e 	bl	80033c4 <HAL_TIM_MspPostInit>

}
 8003148:	bf00      	nop
 800314a:	3758      	adds	r7, #88	; 0x58
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	200005d8 	.word	0x200005d8
 8003154:	40010000 	.word	0x40010000

08003158 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08e      	sub	sp, #56	; 0x38
 800315c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800315e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800316c:	f107 0320 	add.w	r3, r7, #32
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
 8003184:	615a      	str	r2, [r3, #20]
 8003186:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003188:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <MX_TIM2_Init+0x128>)
 800318a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800318e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8003190:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <MX_TIM2_Init+0x128>)
 8003192:	220f      	movs	r2, #15
 8003194:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003196:	4b3a      	ldr	r3, [pc, #232]	; (8003280 <MX_TIM2_Init+0x128>)
 8003198:	2200      	movs	r2, #0
 800319a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800319c:	4b38      	ldr	r3, [pc, #224]	; (8003280 <MX_TIM2_Init+0x128>)
 800319e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80031a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031a4:	4b36      	ldr	r3, [pc, #216]	; (8003280 <MX_TIM2_Init+0x128>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031aa:	4b35      	ldr	r3, [pc, #212]	; (8003280 <MX_TIM2_Init+0x128>)
 80031ac:	2280      	movs	r2, #128	; 0x80
 80031ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031b0:	4833      	ldr	r0, [pc, #204]	; (8003280 <MX_TIM2_Init+0x128>)
 80031b2:	f005 f80f 	bl	80081d4 <HAL_TIM_Base_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80031bc:	f7ff fdd6 	bl	8002d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031ca:	4619      	mov	r1, r3
 80031cc:	482c      	ldr	r0, [pc, #176]	; (8003280 <MX_TIM2_Init+0x128>)
 80031ce:	f005 fe03 	bl	8008dd8 <HAL_TIM_ConfigClockSource>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80031d8:	f7ff fdc8 	bl	8002d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80031dc:	4828      	ldr	r0, [pc, #160]	; (8003280 <MX_TIM2_Init+0x128>)
 80031de:	f005 f951 	bl	8008484 <HAL_TIM_PWM_Init>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80031e8:	f7ff fdc0 	bl	8002d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ec:	2300      	movs	r3, #0
 80031ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031f4:	f107 0320 	add.w	r3, r7, #32
 80031f8:	4619      	mov	r1, r3
 80031fa:	4821      	ldr	r0, [pc, #132]	; (8003280 <MX_TIM2_Init+0x128>)
 80031fc:	f006 fcc0 	bl	8009b80 <HAL_TIMEx_MasterConfigSynchronization>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003206:	f7ff fdb1 	bl	8002d6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800320a:	2360      	movs	r3, #96	; 0x60
 800320c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	2200      	movs	r2, #0
 800321e:	4619      	mov	r1, r3
 8003220:	4817      	ldr	r0, [pc, #92]	; (8003280 <MX_TIM2_Init+0x128>)
 8003222:	f005 fc33 	bl	8008a8c <HAL_TIM_PWM_ConfigChannel>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800322c:	f7ff fd9e 	bl	8002d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	2204      	movs	r2, #4
 8003234:	4619      	mov	r1, r3
 8003236:	4812      	ldr	r0, [pc, #72]	; (8003280 <MX_TIM2_Init+0x128>)
 8003238:	f005 fc28 	bl	8008a8c <HAL_TIM_PWM_ConfigChannel>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003242:	f7ff fd93 	bl	8002d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	2208      	movs	r2, #8
 800324a:	4619      	mov	r1, r3
 800324c:	480c      	ldr	r0, [pc, #48]	; (8003280 <MX_TIM2_Init+0x128>)
 800324e:	f005 fc1d 	bl	8008a8c <HAL_TIM_PWM_ConfigChannel>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8003258:	f7ff fd88 	bl	8002d6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	220c      	movs	r2, #12
 8003260:	4619      	mov	r1, r3
 8003262:	4807      	ldr	r0, [pc, #28]	; (8003280 <MX_TIM2_Init+0x128>)
 8003264:	f005 fc12 	bl	8008a8c <HAL_TIM_PWM_ConfigChannel>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800326e:	f7ff fd7d 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003272:	4803      	ldr	r0, [pc, #12]	; (8003280 <MX_TIM2_Init+0x128>)
 8003274:	f000 f8a6 	bl	80033c4 <HAL_TIM_MspPostInit>

}
 8003278:	bf00      	nop
 800327a:	3738      	adds	r7, #56	; 0x38
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000620 	.word	0x20000620

08003284 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800328a:	f107 0308 	add.w	r3, r7, #8
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003298:	463b      	mov	r3, r7
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <MX_TIM3_Init+0x94>)
 80032a2:	4a1e      	ldr	r2, [pc, #120]	; (800331c <MX_TIM3_Init+0x98>)
 80032a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80032a6:	4b1c      	ldr	r3, [pc, #112]	; (8003318 <MX_TIM3_Init+0x94>)
 80032a8:	220f      	movs	r2, #15
 80032aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ac:	4b1a      	ldr	r3, [pc, #104]	; (8003318 <MX_TIM3_Init+0x94>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80032b2:	4b19      	ldr	r3, [pc, #100]	; (8003318 <MX_TIM3_Init+0x94>)
 80032b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80032b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ba:	4b17      	ldr	r3, [pc, #92]	; (8003318 <MX_TIM3_Init+0x94>)
 80032bc:	2200      	movs	r2, #0
 80032be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032c0:	4b15      	ldr	r3, [pc, #84]	; (8003318 <MX_TIM3_Init+0x94>)
 80032c2:	2280      	movs	r2, #128	; 0x80
 80032c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032c6:	4814      	ldr	r0, [pc, #80]	; (8003318 <MX_TIM3_Init+0x94>)
 80032c8:	f004 ff84 	bl	80081d4 <HAL_TIM_Base_Init>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80032d2:	f7ff fd4b 	bl	8002d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032dc:	f107 0308 	add.w	r3, r7, #8
 80032e0:	4619      	mov	r1, r3
 80032e2:	480d      	ldr	r0, [pc, #52]	; (8003318 <MX_TIM3_Init+0x94>)
 80032e4:	f005 fd78 	bl	8008dd8 <HAL_TIM_ConfigClockSource>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80032ee:	f7ff fd3d 	bl	8002d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032f2:	2300      	movs	r3, #0
 80032f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032fa:	463b      	mov	r3, r7
 80032fc:	4619      	mov	r1, r3
 80032fe:	4806      	ldr	r0, [pc, #24]	; (8003318 <MX_TIM3_Init+0x94>)
 8003300:	f006 fc3e 	bl	8009b80 <HAL_TIMEx_MasterConfigSynchronization>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800330a:	f7ff fd2f 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800330e:	bf00      	nop
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000668 	.word	0x20000668
 800331c:	40000400 	.word	0x40000400

08003320 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <HAL_TIM_Base_MspInit+0x98>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10e      	bne.n	8003350 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	4b21      	ldr	r3, [pc, #132]	; (80033bc <HAL_TIM_Base_MspInit+0x9c>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_TIM_Base_MspInit+0x9c>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	6453      	str	r3, [r2, #68]	; 0x44
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <HAL_TIM_Base_MspInit+0x9c>)
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800334e:	e02e      	b.n	80033ae <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003358:	d10e      	bne.n	8003378 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	4b17      	ldr	r3, [pc, #92]	; (80033bc <HAL_TIM_Base_MspInit+0x9c>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	4a16      	ldr	r2, [pc, #88]	; (80033bc <HAL_TIM_Base_MspInit+0x9c>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6413      	str	r3, [r2, #64]	; 0x40
 800336a:	4b14      	ldr	r3, [pc, #80]	; (80033bc <HAL_TIM_Base_MspInit+0x9c>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
}
 8003376:	e01a      	b.n	80033ae <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a10      	ldr	r2, [pc, #64]	; (80033c0 <HAL_TIM_Base_MspInit+0xa0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d115      	bne.n	80033ae <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <HAL_TIM_Base_MspInit+0x9c>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4a0c      	ldr	r2, [pc, #48]	; (80033bc <HAL_TIM_Base_MspInit+0x9c>)
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	6413      	str	r3, [r2, #64]	; 0x40
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_TIM_Base_MspInit+0x9c>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800339e:	2200      	movs	r2, #0
 80033a0:	2100      	movs	r1, #0
 80033a2:	201d      	movs	r0, #29
 80033a4:	f001 ffe8 	bl	8005378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80033a8:	201d      	movs	r0, #29
 80033aa:	f002 f811 	bl	80053d0 <HAL_NVIC_EnableIRQ>
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40010000 	.word	0x40010000
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40000400 	.word	0x40000400

080033c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a24      	ldr	r2, [pc, #144]	; (8003474 <HAL_TIM_MspPostInit+0xb0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d11f      	bne.n	8003426 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	4b23      	ldr	r3, [pc, #140]	; (8003478 <HAL_TIM_MspPostInit+0xb4>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	4a22      	ldr	r2, [pc, #136]	; (8003478 <HAL_TIM_MspPostInit+0xb4>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6313      	str	r3, [r2, #48]	; 0x30
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_TIM_MspPostInit+0xb4>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003408:	2302      	movs	r3, #2
 800340a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003410:	2300      	movs	r3, #0
 8003412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003414:	2301      	movs	r3, #1
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003418:	f107 0314 	add.w	r3, r7, #20
 800341c:	4619      	mov	r1, r3
 800341e:	4817      	ldr	r0, [pc, #92]	; (800347c <HAL_TIM_MspPostInit+0xb8>)
 8003420:	f002 fc70 	bl	8005d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003424:	e022      	b.n	800346c <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342e:	d11d      	bne.n	800346c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_TIM_MspPostInit+0xb4>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <HAL_TIM_MspPostInit+0xb4>)
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	6313      	str	r3, [r2, #48]	; 0x30
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <HAL_TIM_MspPostInit+0xb4>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800344c:	230f      	movs	r3, #15
 800344e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800345c:	2301      	movs	r3, #1
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	4619      	mov	r1, r3
 8003466:	4805      	ldr	r0, [pc, #20]	; (800347c <HAL_TIM_MspPostInit+0xb8>)
 8003468:	f002 fc4c 	bl	8005d04 <HAL_GPIO_Init>
}
 800346c:	bf00      	nop
 800346e:	3728      	adds	r7, #40	; 0x28
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40010000 	.word	0x40010000
 8003478:	40023800 	.word	0x40023800
 800347c:	40020000 	.word	0x40020000

08003480 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003484:	4b11      	ldr	r3, [pc, #68]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 8003486:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <MX_USART1_UART_Init+0x50>)
 8003488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 800348c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 8003494:	2200      	movs	r2, #0
 8003496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 800349a:	2200      	movs	r2, #0
 800349c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034a4:	4b09      	ldr	r3, [pc, #36]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 80034a6:	220c      	movs	r2, #12
 80034a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034b6:	4805      	ldr	r0, [pc, #20]	; (80034cc <MX_USART1_UART_Init+0x4c>)
 80034b8:	f006 fcfa 	bl	8009eb0 <HAL_UART_Init>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034c2:	f7ff fc53 	bl	8002d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	200006b0 	.word	0x200006b0
 80034d0:	40011000 	.word	0x40011000

080034d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1d      	ldr	r2, [pc, #116]	; (8003568 <HAL_UART_MspInit+0x94>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d134      	bne.n	8003560 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <HAL_UART_MspInit+0x98>)
 80034fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fe:	4a1b      	ldr	r2, [pc, #108]	; (800356c <HAL_UART_MspInit+0x98>)
 8003500:	f043 0310 	orr.w	r3, r3, #16
 8003504:	6453      	str	r3, [r2, #68]	; 0x44
 8003506:	4b19      	ldr	r3, [pc, #100]	; (800356c <HAL_UART_MspInit+0x98>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <HAL_UART_MspInit+0x98>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	4a14      	ldr	r2, [pc, #80]	; (800356c <HAL_UART_MspInit+0x98>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6313      	str	r3, [r2, #48]	; 0x30
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <HAL_UART_MspInit+0x98>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800352e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003534:	2302      	movs	r3, #2
 8003536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353c:	2303      	movs	r3, #3
 800353e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003540:	2307      	movs	r3, #7
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003544:	f107 0314 	add.w	r3, r7, #20
 8003548:	4619      	mov	r1, r3
 800354a:	4809      	ldr	r0, [pc, #36]	; (8003570 <HAL_UART_MspInit+0x9c>)
 800354c:	f002 fbda 	bl	8005d04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003550:	2200      	movs	r2, #0
 8003552:	2100      	movs	r1, #0
 8003554:	2025      	movs	r0, #37	; 0x25
 8003556:	f001 ff0f 	bl	8005378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800355a:	2025      	movs	r0, #37	; 0x25
 800355c:	f001 ff38 	bl	80053d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003560:	bf00      	nop
 8003562:	3728      	adds	r7, #40	; 0x28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40011000 	.word	0x40011000
 800356c:	40023800 	.word	0x40023800
 8003570:	40020000 	.word	0x40020000

08003574 <angle_init>:
#include "math/angle.h"
#include <stdint.h>
#include <stdio.h>
#include <math.h>

void angle_init(struct Angle* angle){
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	angle->pitch = 0;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
	angle->roll = 0;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	605a      	str	r2, [r3, #4]
	angle->yaw = 0;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <angle_velocity_init>:

void angle_velocity_init(struct Angle_velocity* angle_velocity){
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	angle_velocity->d_pitch = 0;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
	angle_velocity->d_roll = 0;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	605a      	str	r2, [r3, #4]
	angle_velocity->d_yaw = 0;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < dimension_in; i++){
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	e00b      	b.n	80035de <angle_velocity_init+0x3e>
		angle_velocity->d_angle[i] = 0;
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3302      	adds	r3, #2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	3304      	adds	r3, #4
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < dimension_in; i++){
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	ddf0      	ble.n	80035c6 <angle_velocity_init+0x26>
	}
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	0000      	movs	r0, r0
 80035f4:	0000      	movs	r0, r0
	...

080035f8 <angle_calculate>:

void angle_calculate(struct Angle* angle, struct Accelerate* accelerate){
 80035f8:	b5b0      	push	{r4, r5, r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]

	float Bx = accelerate->destination_a_f[0];
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	617b      	str	r3, [r7, #20]
	float By = accelerate->destination_a_f[1];
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	613b      	str	r3, [r7, #16]
	float Bz = accelerate->destination_a_f[2];
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	60fb      	str	r3, [r7, #12]

	angle->pitch = atan2(-Bx, sqrt(By * By + Bz * Bz) / M_PI * 180);
 8003614:	edd7 7a05 	vldr	s15, [r7, #20]
 8003618:	eef1 7a67 	vneg.f32	s15, s15
 800361c:	ee17 3a90 	vmov	r3, s15
 8003620:	4618      	mov	r0, r3
 8003622:	f7fc ffa9 	bl	8000578 <__aeabi_f2d>
 8003626:	4604      	mov	r4, r0
 8003628:	460d      	mov	r5, r1
 800362a:	edd7 7a04 	vldr	s15, [r7, #16]
 800362e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003632:	edd7 7a03 	vldr	s15, [r7, #12]
 8003636:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800363a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800363e:	ee17 0a90 	vmov	r0, s15
 8003642:	f7fc ff99 	bl	8000578 <__aeabi_f2d>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	ec43 2b10 	vmov	d0, r2, r3
 800364e:	f00c fb75 	bl	800fd3c <sqrt>
 8003652:	ec51 0b10 	vmov	r0, r1, d0
 8003656:	a362      	add	r3, pc, #392	; (adr r3, 80037e0 <angle_calculate+0x1e8>)
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f7fd f90e 	bl	800087c <__aeabi_ddiv>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	4b5e      	ldr	r3, [pc, #376]	; (80037e8 <angle_calculate+0x1f0>)
 800366e:	f7fc ffdb 	bl	8000628 <__aeabi_dmul>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	ec43 2b17 	vmov	d7, r2, r3
 800367a:	eeb0 1a47 	vmov.f32	s2, s14
 800367e:	eef0 1a67 	vmov.f32	s3, s15
 8003682:	ec45 4b10 	vmov	d0, r4, r5
 8003686:	f00c fb19 	bl	800fcbc <atan2>
 800368a:	ec53 2b10 	vmov	r2, r3, d0
 800368e:	4610      	mov	r0, r2
 8003690:	4619      	mov	r1, r3
 8003692:	f7fd fac1 	bl	8000c18 <__aeabi_d2f>
 8003696:	4602      	mov	r2, r0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	601a      	str	r2, [r3, #0]
	angle->roll = atan2(By, Bz) / M_PI * 180;
 800369c:	6938      	ldr	r0, [r7, #16]
 800369e:	f7fc ff6b 	bl	8000578 <__aeabi_f2d>
 80036a2:	4604      	mov	r4, r0
 80036a4:	460d      	mov	r5, r1
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f7fc ff66 	bl	8000578 <__aeabi_f2d>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	ec43 2b11 	vmov	d1, r2, r3
 80036b4:	ec45 4b10 	vmov	d0, r4, r5
 80036b8:	f00c fb00 	bl	800fcbc <atan2>
 80036bc:	ec51 0b10 	vmov	r0, r1, d0
 80036c0:	a347      	add	r3, pc, #284	; (adr r3, 80037e0 <angle_calculate+0x1e8>)
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	f7fd f8d9 	bl	800087c <__aeabi_ddiv>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	4b44      	ldr	r3, [pc, #272]	; (80037e8 <angle_calculate+0x1f0>)
 80036d8:	f7fc ffa6 	bl	8000628 <__aeabi_dmul>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	f7fd fa98 	bl	8000c18 <__aeabi_d2f>
 80036e8:	4602      	mov	r2, r0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	605a      	str	r2, [r3, #4]
	angle->yaw = 0;//надо реализовать
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]

	angle->angle[0] = atan2(-Bx, sqrt(By * By + Bz * Bz)) / M_PI * 180;
 80036f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80036fa:	eef1 7a67 	vneg.f32	s15, s15
 80036fe:	ee17 3a90 	vmov	r3, s15
 8003702:	4618      	mov	r0, r3
 8003704:	f7fc ff38 	bl	8000578 <__aeabi_f2d>
 8003708:	4604      	mov	r4, r0
 800370a:	460d      	mov	r5, r1
 800370c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003710:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003714:	edd7 7a03 	vldr	s15, [r7, #12]
 8003718:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800371c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003720:	ee17 0a90 	vmov	r0, s15
 8003724:	f7fc ff28 	bl	8000578 <__aeabi_f2d>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	ec43 2b10 	vmov	d0, r2, r3
 8003730:	f00c fb04 	bl	800fd3c <sqrt>
 8003734:	eeb0 7a40 	vmov.f32	s14, s0
 8003738:	eef0 7a60 	vmov.f32	s15, s1
 800373c:	eeb0 1a47 	vmov.f32	s2, s14
 8003740:	eef0 1a67 	vmov.f32	s3, s15
 8003744:	ec45 4b10 	vmov	d0, r4, r5
 8003748:	f00c fab8 	bl	800fcbc <atan2>
 800374c:	ec51 0b10 	vmov	r0, r1, d0
 8003750:	a323      	add	r3, pc, #140	; (adr r3, 80037e0 <angle_calculate+0x1e8>)
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	f7fd f891 	bl	800087c <__aeabi_ddiv>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4610      	mov	r0, r2
 8003760:	4619      	mov	r1, r3
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <angle_calculate+0x1f0>)
 8003768:	f7fc ff5e 	bl	8000628 <__aeabi_dmul>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f7fd fa50 	bl	8000c18 <__aeabi_d2f>
 8003778:	4602      	mov	r2, r0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	60da      	str	r2, [r3, #12]
	angle->angle[1] = atan2(By, Bz) / M_PI * 180;
 800377e:	6938      	ldr	r0, [r7, #16]
 8003780:	f7fc fefa 	bl	8000578 <__aeabi_f2d>
 8003784:	4604      	mov	r4, r0
 8003786:	460d      	mov	r5, r1
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f7fc fef5 	bl	8000578 <__aeabi_f2d>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	ec43 2b11 	vmov	d1, r2, r3
 8003796:	ec45 4b10 	vmov	d0, r4, r5
 800379a:	f00c fa8f 	bl	800fcbc <atan2>
 800379e:	ec51 0b10 	vmov	r0, r1, d0
 80037a2:	a30f      	add	r3, pc, #60	; (adr r3, 80037e0 <angle_calculate+0x1e8>)
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	f7fd f868 	bl	800087c <__aeabi_ddiv>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <angle_calculate+0x1f0>)
 80037ba:	f7fc ff35 	bl	8000628 <__aeabi_dmul>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	f7fd fa27 	bl	8000c18 <__aeabi_d2f>
 80037ca:	4602      	mov	r2, r0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	611a      	str	r2, [r3, #16]
	angle->angle[2] = 0;//надо реализовать
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	615a      	str	r2, [r3, #20]
}
 80037d8:	bf00      	nop
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bdb0      	pop	{r4, r5, r7, pc}
 80037e0:	54442d18 	.word	0x54442d18
 80037e4:	400921fb 	.word	0x400921fb
 80037e8:	40668000 	.word	0x40668000

080037ec <angle_velocity_calculate>:


void angle_velocity_calculate(struct Angle_velocity* angle_velocity, struct Gyro* gyro){
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]

	angle_velocity->d_pitch = gyro->destination_g_f[0];
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	601a      	str	r2, [r3, #0]
	angle_velocity->d_roll = gyro->destination_g_f[1];
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	605a      	str	r2, [r3, #4]
	angle_velocity->d_yaw = gyro->destination_g_f[2];
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	609a      	str	r2, [r3, #8]

	for(int i = 0; i < 3; i++){
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	e010      	b.n	8003836 <angle_velocity_calculate+0x4a>
		angle_velocity->d_angle[i] = gyro->destination_g_f[i];
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3302      	adds	r3, #2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	3304      	adds	r3, #4
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3302      	adds	r3, #2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	3304      	adds	r3, #4
 800382e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3301      	adds	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b02      	cmp	r3, #2
 800383a:	ddeb      	ble.n	8003814 <angle_velocity_calculate+0x28>
	}
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <average_filter>:

float k_gyro = 0.09;															//коэфицент фильтра скользящего среднего для данных с гироскопа

float k_alt = 0.09;																//коэфицент фильтра скользящего среднего для данных с барометра

float average_filter(float newVal, float filVal, float k){
 800384a:	b480      	push	{r7}
 800384c:	b085      	sub	sp, #20
 800384e:	af00      	add	r7, sp, #0
 8003850:	ed87 0a03 	vstr	s0, [r7, #12]
 8003854:	edc7 0a02 	vstr	s1, [r7, #8]
 8003858:	ed87 1a01 	vstr	s2, [r7, #4]
	filVal += (newVal - filVal)*k;
 800385c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003860:	edd7 7a02 	vldr	s15, [r7, #8]
 8003864:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003868:	edd7 7a01 	vldr	s15, [r7, #4]
 800386c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003870:	ed97 7a02 	vldr	s14, [r7, #8]
 8003874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003878:	edc7 7a02 	vstr	s15, [r7, #8]
	return filVal;
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	ee07 3a90 	vmov	s15, r3
}
 8003882:	eeb0 0a67 	vmov.f32	s0, s15
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <initGMedian>:


void initGMedian(struct GMedian* gmedian) {
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
    gmedian->count = 0;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    gmedian->destination_f_m = 0;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <filtered>:

TYPE filtered(struct GMedian* gmedian, TYPE newVal) {
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	ed87 0a00 	vstr	s0, [r7]
    gmedian->buffer[gmedian->count] = newVal;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	601a      	str	r2, [r3, #0]

    if ((gmedian->count < MAX_SIZE - 1) && (gmedian->buffer[gmedian->count] > gmedian->buffer[gmedian->count + 1])) {
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d84b      	bhi.n	8003972 <filtered+0xbe>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	ed93 7a00 	vldr	s14, [r3]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038f0:	3301      	adds	r3, #1
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	edd3 7a00 	vldr	s15, [r3]
 80038fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	dd35      	ble.n	8003972 <filtered+0xbe>
        for (int i = gmedian->count; i < MAX_SIZE - 1; i++) {
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e02c      	b.n	800396a <filtered+0xb6>
            if (gmedian->buffer[i] > gmedian->buffer[i + 1]) {
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	ed93 7a00 	vldr	s14, [r3]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3301      	adds	r3, #1
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	edd3 7a00 	vldr	s15, [r3]
 800392a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800392e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003932:	dd17      	ble.n	8003964 <filtered+0xb0>
                TYPE buff = gmedian->buffer[i];
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]
                gmedian->buffer[i] = gmedian->buffer[i + 1];
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	3301      	adds	r3, #1
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	601a      	str	r2, [r3, #0]
                gmedian->buffer[i + 1] = buff;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	3301      	adds	r3, #1
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	601a      	str	r2, [r3, #0]
        for (int i = gmedian->count; i < MAX_SIZE - 1; i++) {
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	3301      	adds	r3, #1
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b08      	cmp	r3, #8
 800396e:	ddcf      	ble.n	8003910 <filtered+0x5c>
 8003970:	e04f      	b.n	8003a12 <filtered+0x15e>
            }
        }
    } else {
        if ((gmedian->count > 0) && (gmedian->buffer[gmedian->count - 1] > gmedian->buffer[gmedian->count])) {
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003978:	2b00      	cmp	r3, #0
 800397a:	d04a      	beq.n	8003a12 <filtered+0x15e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003982:	3b01      	subs	r3, #1
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	ed93 7a00 	vldr	s14, [r3]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	edd3 7a00 	vldr	s15, [r3]
 800399e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a6:	dd34      	ble.n	8003a12 <filtered+0x15e>
            for (int i = gmedian->count; i > 0; i--) {
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	e02c      	b.n	8003a0c <filtered+0x158>
                if (gmedian->buffer[i] < gmedian->buffer[i - 1]) {
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	ed93 7a00 	vldr	s14, [r3]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	edd3 7a00 	vldr	s15, [r3]
 80039cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d4:	d517      	bpl.n	8003a06 <filtered+0x152>
                    TYPE buff = gmedian->buffer[i];
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60bb      	str	r3, [r7, #8]
                    gmedian->buffer[i] = gmedian->buffer[i - 1];
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	601a      	str	r2, [r3, #0]
                    gmedian->buffer[i - 1] = buff;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	601a      	str	r2, [r3, #0]
            for (int i = gmedian->count; i > 0; i--) {
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	dccf      	bgt.n	80039b2 <filtered+0xfe>
                }
            }
        }
    }

    if (++gmedian->count >= MAX_SIZE) {
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a18:	3301      	adds	r3, #1
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a28:	2b09      	cmp	r3, #9
 8003a2a:	d903      	bls.n	8003a34 <filtered+0x180>
        gmedian->count = 0;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    return gmedian->buffer[MAX_SIZE / 2];
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	ee07 3a90 	vmov	s15, r3
}
 8003a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <PID_init>:
#include "math/pid.h"


void PID_init(struct PID* pid){
 8003a4a:	b480      	push	{r7}
 8003a4c:	b087      	sub	sp, #28
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < dimension_in; i++){
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	e02b      	b.n	8003ab0 <PID_init+0x66>
		for(int j = 0; j < dimension_out; j++){
 8003a58:	2300      	movs	r3, #0
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	e022      	b.n	8003aa4 <PID_init+0x5a>
			pid->kp[i][j] = 0;
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	0059      	lsls	r1, r3, #1
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	440b      	add	r3, r1
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
			pid->ki[i][j] = 0;
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	0059      	lsls	r1, r3, #1
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	440b      	add	r3, r1
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
			pid->kd[i][j] = 0;
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	0059      	lsls	r1, r3, #1
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	440b      	add	r3, r1
 8003a92:	3310      	adds	r3, #16
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < dimension_out; j++){
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	ddd9      	ble.n	8003a5e <PID_init+0x14>
	for(int i = 0; i < dimension_in; i++){
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	3301      	adds	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	ddd0      	ble.n	8003a58 <PID_init+0xe>
		}
	}
	for(int j = 0; j < dimension_out; j++){
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e018      	b.n	8003aee <PID_init+0xa4>
		pid->prev_data[j] = 0;
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	331a      	adds	r3, #26
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
		pid->error[j] = 0;
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	331c      	adds	r3, #28
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
		pid->out[j] = 0;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	3248      	adds	r2, #72	; 0x48
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int j = 0; j < dimension_out; j++){
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3301      	adds	r3, #1
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	dde3      	ble.n	8003abc <PID_init+0x72>
	}
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <set_PID_coefficients>:
/*
 * функция set_PID_coefficients написана для регуятора не корректирующего вращение ракеты
 * Также считается, что ракета симметрична
 * и коэффиценты по одной горизонтальной оси полность совпадают с коэффицентами по другой горизонтальной оси
 */
void set_PID_coefficients(struct PID* pid,float Kp, float Ki, float Kd){
 8003b02:	b480      	push	{r7}
 8003b04:	b087      	sub	sp, #28
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b0e:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b12:	ed87 1a00 	vstr	s2, [r7]

	for(int i = 0; i < dimension_out; i++){
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	e080      	b.n	8003c1e <set_PID_coefficients+0x11c>
			for(int j = 0; j < dimension_in; j++){
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	e077      	b.n	8003c12 <set_PID_coefficients+0x110>
				if((i + j) % 2 != 0){
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4413      	add	r3, r2
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d020      	beq.n	8003b72 <set_PID_coefficients+0x70>
					pid->kp[i][j] = 0;
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	0059      	lsls	r1, r3, #1
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	440b      	add	r3, r1
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	601a      	str	r2, [r3, #0]
					pid->ki[i][j] = 0;
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	0059      	lsls	r1, r3, #1
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3308      	adds	r3, #8
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
					pid->kd[i][j] = 0;
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	0059      	lsls	r1, r3, #1
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	440b      	add	r3, r1
 8003b64:	3310      	adds	r3, #16
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	e04c      	b.n	8003c0c <set_PID_coefficients+0x10a>
				} else {
					if(i == 0 || i == 1){
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <set_PID_coefficients+0x7c>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d11d      	bne.n	8003bba <set_PID_coefficients+0xb8>
						pid->kp[i][j] = Kp;
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	0059      	lsls	r1, r3, #1
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	440b      	add	r3, r1
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	601a      	str	r2, [r3, #0]
						pid->ki[i][j] = Ki;
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	0059      	lsls	r1, r3, #1
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	440b      	add	r3, r1
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	601a      	str	r2, [r3, #0]
						pid->kd[i][j] = Kd;
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	0059      	lsls	r1, r3, #1
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	440b      	add	r3, r1
 8003bae:	3310      	adds	r3, #16
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e028      	b.n	8003c0c <set_PID_coefficients+0x10a>
					} else {
						pid->kp[i][j] = -Kp;
 8003bba:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bbe:	eef1 7a67 	vneg.f32	s15, s15
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	0059      	lsls	r1, r3, #1
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	440b      	add	r3, r1
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	edc3 7a00 	vstr	s15, [r3]
						pid->ki[i][j] = -Ki;
 8003bd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bd8:	eef1 7a67 	vneg.f32	s15, s15
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	0059      	lsls	r1, r3, #1
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	440b      	add	r3, r1
 8003be6:	3308      	adds	r3, #8
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	edc3 7a00 	vstr	s15, [r3]
						pid->kd[i][j] = -Kd;
 8003bf0:	edd7 7a00 	vldr	s15, [r7]
 8003bf4:	eef1 7a67 	vneg.f32	s15, s15
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	0059      	lsls	r1, r3, #1
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	440b      	add	r3, r1
 8003c02:	3310      	adds	r3, #16
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	edc3 7a00 	vstr	s15, [r3]
			for(int j = 0; j < dimension_in; j++){
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	dd84      	ble.n	8003b22 <set_PID_coefficients+0x20>
	for(int i = 0; i < dimension_out; i++){
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	f77f af7b 	ble.w	8003b1c <set_PID_coefficients+0x1a>
					}
				}
			}
		}
}
 8003c26:	bf00      	nop
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <get_PID_out>:


void get_PID_out(struct PID* pid, struct Angle* angle, struct Angle_velocity* angle_velocity, float set_data[dimension_in]){
 8003c34:	b480      	push	{r7}
 8003c36:	b08b      	sub	sp, #44	; 0x2c
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]

	int16_t protect_out[dimension_out] = {0,};
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]

	for(int i = 0;i < dimension_in; i++){
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c50:	e019      	b.n	8003c86 <get_PID_out+0x52>
		pid->error[i] = set_data[i] - angle->angle[i];
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	4413      	add	r3, r2
 8003c5a:	ed93 7a00 	vldr	s14, [r3]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	3302      	adds	r3, #2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	3304      	adds	r3, #4
 8003c6a:	edd3 7a00 	vldr	s15, [r3]
 8003c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	331c      	adds	r3, #28
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0;i < dimension_in; i++){
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	3301      	adds	r3, #1
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	dde2      	ble.n	8003c52 <get_PID_out+0x1e>
	}

	for(int i = 0; i < dimension_out; i++){
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	623b      	str	r3, [r7, #32]
 8003c90:	e05f      	b.n	8003d52 <get_PID_out+0x11e>
		for(int j = 0; j < dimension_in; j++){
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
 8003c96:	e02b      	b.n	8003cf0 <get_PID_out+0xbc>
			protect_out[i] += pid->kp[i][j]*pid->error[j];
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	3328      	adds	r3, #40	; 0x28
 8003c9e:	443b      	add	r3, r7
 8003ca0:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	0059      	lsls	r1, r3, #1
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	440b      	add	r3, r1
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	edd3 6a00 	vldr	s13, [r3]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	331c      	adds	r3, #28
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	edd3 7a00 	vldr	s15, [r3]
 8003ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cd8:	ee17 3a90 	vmov	r3, s15
 8003cdc:	b21a      	sxth	r2, r3
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	3328      	adds	r3, #40	; 0x28
 8003ce4:	443b      	add	r3, r7
 8003ce6:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(int j = 0; j < dimension_in; j++){
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	3301      	adds	r3, #1
 8003cee:	61fb      	str	r3, [r7, #28]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	ddd0      	ble.n	8003c98 <get_PID_out+0x64>
		}

		if(protect_out[i] > 90){
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	3328      	adds	r3, #40	; 0x28
 8003cfc:	443b      	add	r3, r7
 8003cfe:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003d02:	2b5a      	cmp	r3, #90	; 0x5a
 8003d04:	dd06      	ble.n	8003d14 <get_PID_out+0xe0>
			pid->out[i] = 90;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a3a      	ldr	r2, [r7, #32]
 8003d0a:	3248      	adds	r2, #72	; 0x48
 8003d0c:	215a      	movs	r1, #90	; 0x5a
 8003d0e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003d12:	e01b      	b.n	8003d4c <get_PID_out+0x118>
		}
		else if (protect_out[i] < -90){
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	3328      	adds	r3, #40	; 0x28
 8003d1a:	443b      	add	r3, r7
 8003d1c:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003d20:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 8003d24:	da07      	bge.n	8003d36 <get_PID_out+0x102>
			pid->out[i] = -90;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a3a      	ldr	r2, [r7, #32]
 8003d2a:	3248      	adds	r2, #72	; 0x48
 8003d2c:	f64f 71a6 	movw	r1, #65446	; 0xffa6
 8003d30:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003d34:	e00a      	b.n	8003d4c <get_PID_out+0x118>
		}
		else {
			pid->out[i] = protect_out[i];
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	3328      	adds	r3, #40	; 0x28
 8003d3c:	443b      	add	r3, r7
 8003d3e:	f933 1c14 	ldrsh.w	r1, [r3, #-20]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a3a      	ldr	r2, [r7, #32]
 8003d46:	3248      	adds	r2, #72	; 0x48
 8003d48:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < dimension_out; i++){
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	623b      	str	r3, [r7, #32]
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	dd9c      	ble.n	8003c92 <get_PID_out+0x5e>
		}
	}
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	372c      	adds	r7, #44	; 0x2c
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <set_pwm>:

void set_pwm(struct PID* pid){
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b082      	sub	sp, #8
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = degrees_to_pulse(pid->out[1]);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fafb 	bl	8004370 <degrees_to_pulse>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d82:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = degrees_to_pulse(-pid->out[0]);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	425b      	negs	r3, r3
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	b21b      	sxth	r3, r3
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 faec 	bl	8004370 <degrees_to_pulse>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = degrees_to_pulse(pid->out[3]);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fae1 	bl	8004370 <degrees_to_pulse>
 8003dae:	4603      	mov	r3, r0
 8003db0:	461a      	mov	r2, r3
 8003db2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003db6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = degrees_to_pulse(-pid->out[2]);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	425b      	negs	r3, r3
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	b21b      	sxth	r3, r3
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fad2 	bl	8004370 <degrees_to_pulse>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <altitude_init>:
uint8_t Data[256];


BMP280_HandleTypedef bmp280;

void altitude_init(struct Rocket* rocket){
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

	if (rocket->altitude == NULL) {
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d06d      	beq.n	8003ecc <altitude_init+0xec>
		// Обработка ошибки: указатель не инициализирован
		return;
	}

	rocket->altitude->altitude = 0;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

	rocket->altitude->altitude_f = 0;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	605a      	str	r2, [r3, #4]

	rocket->altitude->max_altitude = 0;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]

	bmp280_init_default_params(&bmp280.params);
 8003e0e:	4831      	ldr	r0, [pc, #196]	; (8003ed4 <altitude_init+0xf4>)
 8003e10:	f7fd fbee 	bl	80015f0 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8003e14:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <altitude_init+0xf8>)
 8003e16:	2276      	movs	r2, #118	; 0x76
 8003e18:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8003e1a:	4b2f      	ldr	r3, [pc, #188]	; (8003ed8 <altitude_init+0xf8>)
 8003e1c:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <altitude_init+0xfc>)
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8003e20:	e013      	b.n	8003e4a <altitude_init+0x6a>
		size = sprintf((char *)Data, "BMP280 initialization failed\n");
 8003e22:	492f      	ldr	r1, [pc, #188]	; (8003ee0 <altitude_init+0x100>)
 8003e24:	482f      	ldr	r0, [pc, #188]	; (8003ee4 <altitude_init+0x104>)
 8003e26:	f008 f887 	bl	800bf38 <siprintf>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <altitude_init+0x108>)
 8003e30:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Data, size, 1000);
 8003e32:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <altitude_init+0x108>)
 8003e34:	881a      	ldrh	r2, [r3, #0]
 8003e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e3a:	492a      	ldr	r1, [pc, #168]	; (8003ee4 <altitude_init+0x104>)
 8003e3c:	482b      	ldr	r0, [pc, #172]	; (8003eec <altitude_init+0x10c>)
 8003e3e:	f006 f8ed 	bl	800a01c <HAL_UART_Transmit>
		HAL_Delay(2000);
 8003e42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003e46:	f000 fc9b 	bl	8004780 <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8003e4a:	4922      	ldr	r1, [pc, #136]	; (8003ed4 <altitude_init+0xf4>)
 8003e4c:	4822      	ldr	r0, [pc, #136]	; (8003ed8 <altitude_init+0xf8>)
 8003e4e:	f7fd fd49 	bl	80018e4 <bmp280_init>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f083 0301 	eor.w	r3, r3, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e1      	bne.n	8003e22 <altitude_init+0x42>
	}
	bool bme280p = bmp280.id == BME280_CHIP_ID;
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <altitude_init+0xf8>)
 8003e60:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e64:	2b60      	cmp	r3, #96	; 0x60
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	72fb      	strb	r3, [r7, #11]
	size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8003e6e:	7afb      	ldrb	r3, [r7, #11]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <altitude_init+0x98>
 8003e74:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <altitude_init+0x110>)
 8003e76:	e000      	b.n	8003e7a <altitude_init+0x9a>
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <altitude_init+0x114>)
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	491e      	ldr	r1, [pc, #120]	; (8003ef8 <altitude_init+0x118>)
 8003e7e:	4819      	ldr	r0, [pc, #100]	; (8003ee4 <altitude_init+0x104>)
 8003e80:	f008 f85a 	bl	800bf38 <siprintf>
 8003e84:	4603      	mov	r3, r0
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <altitude_init+0x108>)
 8003e8a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Data, size, 1000);
 8003e8c:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <altitude_init+0x108>)
 8003e8e:	881a      	ldrh	r2, [r3, #0]
 8003e90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e94:	4913      	ldr	r1, [pc, #76]	; (8003ee4 <altitude_init+0x104>)
 8003e96:	4815      	ldr	r0, [pc, #84]	; (8003eec <altitude_init+0x10c>)
 8003e98:	f006 f8c0 	bl	800a01c <HAL_UART_Transmit>
	for(int i = 0; i < 100; i++){
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e010      	b.n	8003ec4 <altitude_init+0xe4>
		bmp280_read_float(&bmp280, &(rocket->atmosphere->start_temperature), &(rocket->atmosphere->start_pressure), &(rocket->atmosphere->start_humidity));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	f103 0110 	add.w	r1, r3, #16
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	f103 020c 	add.w	r2, r3, #12
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	3314      	adds	r3, #20
 8003eb8:	4807      	ldr	r0, [pc, #28]	; (8003ed8 <altitude_init+0xf8>)
 8003eba:	f7fe f97b 	bl	80021b4 <bmp280_read_float>
	for(int i = 0; i < 100; i++){
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b63      	cmp	r3, #99	; 0x63
 8003ec8:	ddeb      	ble.n	8003ea2 <altitude_init+0xc2>
 8003eca:	e000      	b.n	8003ece <altitude_init+0xee>
		return;
 8003ecc:	bf00      	nop
	}

}
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000824 	.word	0x20000824
 8003ed8:	200007f8 	.word	0x200007f8
 8003edc:	20000254 	.word	0x20000254
 8003ee0:	08010860 	.word	0x08010860
 8003ee4:	200006f8 	.word	0x200006f8
 8003ee8:	200006f4 	.word	0x200006f4
 8003eec:	200006b0 	.word	0x200006b0
 8003ef0:	08010880 	.word	0x08010880
 8003ef4:	08010888 	.word	0x08010888
 8003ef8:	08010890 	.word	0x08010890

08003efc <get_altitude_measurement>:



void get_altitude_measurement(struct Rocket* rocket){
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
	  bmp280_read_float(&bmp280, &(rocket->atmosphere->temperature), &(rocket->atmosphere->pressure), &(rocket->atmosphere->humidity));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1d19      	adds	r1, r3, #4
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	461a      	mov	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	3308      	adds	r3, #8
 8003f16:	480d      	ldr	r0, [pc, #52]	; (8003f4c <get_altitude_measurement+0x50>)
 8003f18:	f7fe f94c 	bl	80021b4 <bmp280_read_float>
	  rocket->altitude->altitude = pascal_to_metrs(rocket->atmosphere->pressure,rocket->atmosphere->start_pressure);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	edd3 7a00 	vldr	s15, [r3]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68dc      	ldr	r4, [r3, #12]
 8003f30:	eef0 0a47 	vmov.f32	s1, s14
 8003f34:	eeb0 0a67 	vmov.f32	s0, s15
 8003f38:	f7fd fb0e 	bl	8001558 <pascal_to_metrs>
 8003f3c:	eef0 7a40 	vmov.f32	s15, s0
 8003f40:	edc4 7a00 	vstr	s15, [r4]
	  //rocket->altitude->altitude_f = average_filter(rocket->altitude->altitude, rocket->altitude->altitude_f, k_alt);
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd90      	pop	{r4, r7, pc}
 8003f4c:	200007f8 	.word	0x200007f8

08003f50 <filtered_altitude_measurement>:

void filtered_altitude_measurement(struct Rocket* rocket, struct GMedian* gmedian_alt){
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
	gmedian_alt->destination_f_m = filtered(gmedian_alt, rocket->altitude->altitude);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	edd3 7a00 	vldr	s15, [r3]
 8003f62:	eeb0 0a67 	vmov.f32	s0, s15
 8003f66:	6838      	ldr	r0, [r7, #0]
 8003f68:	f7ff fca4 	bl	80038b4 <filtered>
 8003f6c:	eef0 7a40 	vmov.f32	s15, s0
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	rocket->altitude->altitude_f = average_filter(gmedian_alt->destination_f_m,rocket->altitude->altitude_f, k_alt);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <filtered_altitude_measurement+0x60>)
 8003f86:	edd3 6a00 	vldr	s13, [r3]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68dc      	ldr	r4, [r3, #12]
 8003f8e:	eeb0 1a66 	vmov.f32	s2, s13
 8003f92:	eef0 0a47 	vmov.f32	s1, s14
 8003f96:	eeb0 0a67 	vmov.f32	s0, s15
 8003f9a:	f7ff fc56 	bl	800384a <average_filter>
 8003f9e:	eef0 7a40 	vmov.f32	s15, s0
 8003fa2:	edc4 7a01 	vstr	s15, [r4, #4]

	//rocket->altitude->altitude_f = average_filter(rocket->altitude->altitude, rocket->altitude->altitude_f, k_alt);

}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd90      	pop	{r4, r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000010 	.word	0x20000010

08003fb4 <pow2>:
//int16_t destination_m[3] = { 0, };
//float acceleration = 0;



float pow2(float a){
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	ed87 0a01 	vstr	s0, [r7, #4]
	return a*a;
 8003fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fc2:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 8003fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <acceleration_modulus>:
		gyro->destination_g_f[i] = 0;
	}
	gyro->gyro_mod = 0;
}

float acceleration_modulus(float* destination_a){
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	ed2d 8b02 	vpush	{d8}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	return sqrt(pow2(destination_a[0]) + pow2(destination_a[1]) + pow2(destination_a[2]));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	edd3 7a00 	vldr	s15, [r3]
 8003fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8003fea:	f7ff ffe3 	bl	8003fb4 <pow2>
 8003fee:	eeb0 8a40 	vmov.f32	s16, s0
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	edd3 7a00 	vldr	s15, [r3]
 8003ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8003ffe:	f7ff ffd9 	bl	8003fb4 <pow2>
 8004002:	eef0 7a40 	vmov.f32	s15, s0
 8004006:	ee38 8a27 	vadd.f32	s16, s16, s15
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3308      	adds	r3, #8
 800400e:	edd3 7a00 	vldr	s15, [r3]
 8004012:	eeb0 0a67 	vmov.f32	s0, s15
 8004016:	f7ff ffcd 	bl	8003fb4 <pow2>
 800401a:	eef0 7a40 	vmov.f32	s15, s0
 800401e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004022:	ee17 0a90 	vmov	r0, s15
 8004026:	f7fc faa7 	bl	8000578 <__aeabi_f2d>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	ec43 2b10 	vmov	d0, r2, r3
 8004032:	f00b fe83 	bl	800fd3c <sqrt>
 8004036:	ec53 2b10 	vmov	r2, r3, d0
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	f7fc fdeb 	bl	8000c18 <__aeabi_d2f>
 8004042:	4603      	mov	r3, r0
 8004044:	ee07 3a90 	vmov	s15, r3

}
 8004048:	eeb0 0a67 	vmov.f32	s0, s15
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	ecbd 8b02 	vpop	{d8}
 8004054:	bd80      	pop	{r7, pc}

08004056 <get_inertia_measurement>:
	//accelerate_init(accelerate);
	//gyro_init(gyro);
	MPU_init();
}

void get_inertia_measurement(struct Accelerate* accelerate, struct Gyro* gyro){
 8004056:	b580      	push	{r7, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
	MPU_get_accel(accelerate->destination_a);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd f918 	bl	8001298 <MPU_get_accel>
	MPU_get_gyro(gyro->destination_g);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd f9a4 	bl	80013b8 <MPU_get_gyro>
		rocket->gyro->destination_g_f[i] = average_filter(rocket->gyro->destination_g[i],rocket->gyro->destination_g_f[i], k_gyro);

	}*///если раскоментировать, то только for
	//destination_a_f_m[0] = filtered(&gmedian, rocket->accelerate->destination_a_f[0]);
	//rocket->accelerate->destination_a[i]
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <filtered_inertia_measurement>:

void filtered_inertia_measurement(struct Accelerate* accelerate, struct Gyro* gyro, struct GMedian* gmedian_a, struct GMedian* gmedian_g){
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]

	for(int i = 0; i < 3; i++){
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	e08e      	b.n	80041aa <filtered_inertia_measurement+0x132>
			gmedian_a[i].destination_f_m = filtered(&(gmedian_a[i]), accelerate->destination_a[i]);
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	461a      	mov	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	1899      	adds	r1, r3, r2
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	edd3 7a00 	vldr	s15, [r3]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4613      	mov	r3, r2
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4413      	add	r3, r2
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	461a      	mov	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	189c      	adds	r4, r3, r2
 80040b8:	eeb0 0a67 	vmov.f32	s0, s15
 80040bc:	4608      	mov	r0, r1
 80040be:	f7ff fbf9 	bl	80038b4 <filtered>
 80040c2:	eef0 7a40 	vmov.f32	s15, s0
 80040c6:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
			accelerate->destination_a_f[i] = average_filter(gmedian_a[i].destination_f_m, accelerate->destination_a_f[i], k_accel);
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4613      	mov	r3, r2
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4413      	add	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	461a      	mov	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4413      	add	r3, r2
 80040da:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	3302      	adds	r3, #2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	3304      	adds	r3, #4
 80040ea:	ed93 7a00 	vldr	s14, [r3]
 80040ee:	4b33      	ldr	r3, [pc, #204]	; (80041bc <filtered_inertia_measurement+0x144>)
 80040f0:	edd3 6a00 	vldr	s13, [r3]
 80040f4:	eeb0 1a66 	vmov.f32	s2, s13
 80040f8:	eef0 0a47 	vmov.f32	s1, s14
 80040fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004100:	f7ff fba3 	bl	800384a <average_filter>
 8004104:	eef0 7a40 	vmov.f32	s15, s0
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	3302      	adds	r3, #2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	3304      	adds	r3, #4
 8004114:	edc3 7a00 	vstr	s15, [r3]

			gmedian_g[i].destination_f_m = filtered(&(gmedian_g[i]), gyro->destination_g[i]);
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4613      	mov	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4413      	add	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	461a      	mov	r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	1899      	adds	r1, r3, r2
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	edd3 7a00 	vldr	s15, [r3]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4613      	mov	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	4413      	add	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	461a      	mov	r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	189c      	adds	r4, r3, r2
 8004144:	eeb0 0a67 	vmov.f32	s0, s15
 8004148:	4608      	mov	r0, r1
 800414a:	f7ff fbb3 	bl	80038b4 <filtered>
 800414e:	eef0 7a40 	vmov.f32	s15, s0
 8004152:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
			gyro->destination_g_f[i] = average_filter(gmedian_g[i].destination_f_m, gyro->destination_g_f[i], k_gyro);
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4613      	mov	r3, r2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	4413      	add	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	461a      	mov	r2, r3
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	4413      	add	r3, r2
 8004166:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	3302      	adds	r3, #2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	3304      	adds	r3, #4
 8004176:	ed93 7a00 	vldr	s14, [r3]
 800417a:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <filtered_inertia_measurement+0x148>)
 800417c:	edd3 6a00 	vldr	s13, [r3]
 8004180:	eeb0 1a66 	vmov.f32	s2, s13
 8004184:	eef0 0a47 	vmov.f32	s1, s14
 8004188:	eeb0 0a67 	vmov.f32	s0, s15
 800418c:	f7ff fb5d 	bl	800384a <average_filter>
 8004190:	eef0 7a40 	vmov.f32	s15, s0
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	3302      	adds	r3, #2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	3304      	adds	r3, #4
 80041a0:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 3; i++){
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	3301      	adds	r3, #1
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	f77f af6d 	ble.w	800408c <filtered_inertia_measurement+0x14>
		}
}
 80041b2:	bf00      	nop
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd90      	pop	{r4, r7, pc}
 80041bc:	20000008 	.word	0x20000008
 80041c0:	2000000c 	.word	0x2000000c

080041c4 <get_inertia_measurement_mod>:

void get_inertia_measurement_mod(struct Accelerate* accelerate, struct Gyro* gyro){
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
	accelerate->accel_mod = acceleration_modulus(accelerate->destination_a_f);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	330c      	adds	r3, #12
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fefe 	bl	8003fd4 <acceleration_modulus>
 80041d8:	eef0 7a40 	vmov.f32	s15, s0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	edc3 7a06 	vstr	s15, [r3, #24]
	gyro->gyro_mod = acceleration_modulus(gyro->destination_g_f);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fef4 	bl	8003fd4 <acceleration_modulus>
 80041ec:	eef0 7a40 	vmov.f32	s15, s0
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <get_mcu_voltage>:
#include "system/power.h"

uint16_t adcData = 0;


float get_mcu_voltage(){
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
	//HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
	adcData = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8004204:	4812      	ldr	r0, [pc, #72]	; (8004250 <get_mcu_voltage+0x50>)
 8004206:	f000 fd15 	bl	8004c34 <HAL_ADC_GetValue>
 800420a:	4603      	mov	r3, r0
 800420c:	b29a      	uxth	r2, r3
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <get_mcu_voltage+0x54>)
 8004210:	801a      	strh	r2, [r3, #0]
	return ADC_MAX * ADC_REFERENCE_VOLTAGE / adcData;
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <get_mcu_voltage+0x54>)
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fc f99c 	bl	8000554 <__aeabi_i2d>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	a109      	add	r1, pc, #36	; (adr r1, 8004248 <get_mcu_voltage+0x48>)
 8004222:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004226:	f7fc fb29 	bl	800087c <__aeabi_ddiv>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4610      	mov	r0, r2
 8004230:	4619      	mov	r1, r3
 8004232:	f7fc fcf1 	bl	8000c18 <__aeabi_d2f>
 8004236:	4603      	mov	r3, r0
 8004238:	ee07 3a90 	vmov	s15, r3
}
 800423c:	eeb0 0a67 	vmov.f32	s0, s15
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	f3af 8000 	nop.w
 8004248:	00000000 	.word	0x00000000
 800424c:	40b33200 	.word	0x40b33200
 8004250:	2000020c 	.word	0x2000020c
 8004254:	2000082c 	.word	0x2000082c

08004258 <radio_init>:
#include "system/radio.h"


void radio_init(struct Radio* radio){
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	radio->TRANSMIT_IS_OK = false;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
	radio->frequency_data_transmission = 1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	805a      	strh	r2, [r3, #2]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <transmit_data>:

void set_data_transmit_frequency(TIM_HandleTypeDef *htim, struct Radio* radio){
	htim->Instance->ARR = 8*powf(10,6) / radio->frequency_data_transmission/ htim->Instance->PSC;
}

void transmit_data(struct Rocket* rocket, struct Radio* radio){
 8004278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427c:	b0ad      	sub	sp, #180	; 0xb4
 800427e:	af0c      	add	r7, sp, #48	; 0x30
 8004280:	6178      	str	r0, [r7, #20]
 8004282:	6139      	str	r1, [r7, #16]
	char buf[100];

	snprintf(buf, sizeof(buf), "%s %f %f %f %f %d %d %d %d;\n", rocket->teamId, rocket->time, rocket->battery_voltage, rocket->altitude->altitude_f, rocket->accel_mod, rocket->start_point, rocket->apogee_point, rocket->activate_point, rocket->landing_point);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	4618      	mov	r0, r3
 800428e:	f7fc f973 	bl	8000578 <__aeabi_f2d>
 8004292:	4604      	mov	r4, r0
 8004294:	460d      	mov	r5, r1
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fc f96c 	bl	8000578 <__aeabi_f2d>
 80042a0:	4680      	mov	r8, r0
 80042a2:	4689      	mov	r9, r1
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fc f964 	bl	8000578 <__aeabi_f2d>
 80042b0:	4682      	mov	sl, r0
 80042b2:	468b      	mov	fp, r1
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fc f95d 	bl	8000578 <__aeabi_f2d>
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	7c1b      	ldrb	r3, [r3, #16]
 80042c2:	461a      	mov	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	7c5b      	ldrb	r3, [r3, #17]
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	7c9b      	ldrb	r3, [r3, #18]
 80042ce:	607b      	str	r3, [r7, #4]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	7cdb      	ldrb	r3, [r3, #19]
 80042d4:	f107 061c 	add.w	r6, r7, #28
 80042d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	930a      	str	r3, [sp, #40]	; 0x28
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	9309      	str	r3, [sp, #36]	; 0x24
 80042e2:	9208      	str	r2, [sp, #32]
 80042e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042e8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80042ec:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80042f0:	e9cd 4500 	strd	r4, r5, [sp]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a0d      	ldr	r2, [pc, #52]	; (800432c <transmit_data+0xb4>)
 80042f8:	2164      	movs	r1, #100	; 0x64
 80042fa:	4630      	mov	r0, r6
 80042fc:	f007 fde8 	bl	800bed0 <sniprintf>

	//sprintf(buf, "$%f %f %f %f;", rocket->atmosphere.pressure, rocket->accelerate->destination_a[0], rocket->accelerate->destination_a[1], rocket->accelerate->destination_a[2]);
	if(radio->TRANSMIT_IS_OK == true){
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00c      	beq.n	8004322 <transmit_data+0xaa>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 100);
 8004308:	f107 031c 	add.w	r3, r7, #28
 800430c:	4618      	mov	r0, r3
 800430e:	f7fb ff71 	bl	80001f4 <strlen>
 8004312:	4603      	mov	r3, r0
 8004314:	b29a      	uxth	r2, r3
 8004316:	f107 011c 	add.w	r1, r7, #28
 800431a:	2364      	movs	r3, #100	; 0x64
 800431c:	4804      	ldr	r0, [pc, #16]	; (8004330 <transmit_data+0xb8>)
 800431e:	f005 fe7d 	bl	800a01c <HAL_UART_Transmit>
	}
}
 8004322:	bf00      	nop
 8004324:	3784      	adds	r7, #132	; 0x84
 8004326:	46bd      	mov	sp, r7
 8004328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432c:	080108a4 	.word	0x080108a4
 8004330:	200006b0 	.word	0x200006b0

08004334 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	2b00      	cmp	r3, #0
 8004344:	db0c      	blt.n	8004360 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	f003 021f 	and.w	r2, r3, #31
 800434c:	4907      	ldr	r1, [pc, #28]	; (800436c <__NVIC_ClearPendingIRQ+0x38>)
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2001      	movs	r0, #1
 8004356:	fa00 f202 	lsl.w	r2, r0, r2
 800435a:	3360      	adds	r3, #96	; 0x60
 800435c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	e000e100 	.word	0xe000e100

08004370 <degrees_to_pulse>:
#include "system/rescue.h"

uint16_t degrees_to_pulse(int16_t degrees){
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	80fb      	strh	r3, [r7, #6]
  return 11.1*degrees + 1500;
 800437a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc f8e8 	bl	8000554 <__aeabi_i2d>
 8004384:	a30c      	add	r3, pc, #48	; (adr r3, 80043b8 <degrees_to_pulse+0x48>)
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	f7fc f94d 	bl	8000628 <__aeabi_dmul>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	a30a      	add	r3, pc, #40	; (adr r3, 80043c0 <degrees_to_pulse+0x50>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f7fb ff8e 	bl	80002bc <__adddf3>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	4610      	mov	r0, r2
 80043a6:	4619      	mov	r1, r3
 80043a8:	f7fc fc16 	bl	8000bd8 <__aeabi_d2uiz>
 80043ac:	4603      	mov	r3, r0
 80043ae:	b29b      	uxth	r3, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	33333333 	.word	0x33333333
 80043bc:	40263333 	.word	0x40263333
 80043c0:	00000000 	.word	0x00000000
 80043c4:	40977000 	.word	0x40977000

080043c8 <turn_servo>:

void turn_servo(int16_t degrees){
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	80fb      	strh	r3, [r7, #6]
	__HAL_GPIO_EXTI_CLEAR_IT(btn_Pin);  // очищаем бит EXTI_PR
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <turn_servo+0x54>)
 80043d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043d8:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // очищаем бит NVIC_ICPRx
 80043da:	2028      	movs	r0, #40	; 0x28
 80043dc:	f7ff ffaa 	bl	8004334 <__NVIC_ClearPendingIRQ>

	TIM1->CCR1 = degrees_to_pulse(degrees);
 80043e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ffc3 	bl	8004370 <degrees_to_pulse>
 80043ea:	4603      	mov	r3, r0
 80043ec:	461a      	mov	r2, r3
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <turn_servo+0x58>)
 80043f0:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(500);
 80043f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043f6:	f000 f9c3 	bl	8004780 <HAL_Delay>
	TIM1->CCR1 = degrees_to_pulse(0);
 80043fa:	2000      	movs	r0, #0
 80043fc:	f7ff ffb8 	bl	8004370 <degrees_to_pulse>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <turn_servo+0x58>)
 8004406:	635a      	str	r2, [r3, #52]	; 0x34

	//HAL_UART_Transmit(&huart1, (uint8_t*)"servo is turn\n", sizeof("servo is turn\n"), 200);

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);   // включаем внешнее прерывание
 8004408:	2028      	movs	r0, #40	; 0x28
 800440a:	f000 ffe1 	bl	80053d0 <HAL_NVIC_EnableIRQ>

	flag_irq = 0;
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <turn_servo+0x5c>)
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
}
 8004414:	bf00      	nop
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40013c00 	.word	0x40013c00
 8004420:	40010000 	.word	0x40010000
 8004424:	200005bc 	.word	0x200005bc

08004428 <rescue_system_init>:

void rescue_system_init(TIM_TypeDef* TIM){
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
	TIM->CCR2 = degrees_to_pulse(0);
 8004430:	2000      	movs	r0, #0
 8004432:	f7ff ff9d 	bl	8004370 <degrees_to_pulse>
 8004436:	4603      	mov	r3, r0
 8004438:	461a      	mov	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <rocket_init>:
#include <stdio.h>
#include <string.h>
#include "system/rocket.h"
#include "MPU9250.h"

void rocket_init(struct Rocket *rocket, const char *teamId, struct Altitude* altitude, struct Atmosphere_param* atmosphere,struct Accelerate* accelerate, struct Angle* angle, struct Angle_velocity* angle_velocity) {
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	603b      	str	r3, [r7, #0]

	strncpy(rocket->teamId, teamId, sizeof(rocket->teamId) - 1);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2209      	movs	r2, #9
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	4618      	mov	r0, r3
 800445c:	f007 fd8c 	bl	800bf78 <strncpy>
	rocket->teamId[sizeof(rocket->teamId) - 1] = '\0'; // Обеспечиваем нуль-терминатор
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	725a      	strb	r2, [r3, #9]

	/*rocket->altitude = 0;

	rocket->max_altitude = 0;*/

	rocket->altitude = altitude;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]

	//rocket->accelerate = accelerate;

	//rocket->gyro = gyro;

	rocket->angle = angle;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	629a      	str	r2, [r3, #40]	; 0x28

	rocket->angle_velocity = angle_velocity;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a3a      	ldr	r2, [r7, #32]
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c

	rocket->accel_mod = accelerate->accel_mod;
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	699a      	ldr	r2, [r3, #24]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	621a      	str	r2, [r3, #32]

    rocket->start_point = 0;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	741a      	strb	r2, [r3, #16]
    rocket->apogee_point = 0;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	745a      	strb	r2, [r3, #17]
    rocket->activate_point = 0;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	749a      	strb	r2, [r3, #18]
    rocket->landing_point = 0;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	74da      	strb	r2, [r3, #19]

    //rocket->delta_apogee = 1;
    //rocket->delta_activate = 1;
    //rocket->starting_height = 3;

    rocket->battery_voltage = 0;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	619a      	str	r2, [r3, #24]

    rocket->time = HAL_GetTick();
 80044a0:	f000 f962 	bl	8004768 <HAL_GetTick>
 80044a4:	ee07 0a90 	vmov	s15, r0
 80044a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	edc3 7a07 	vstr	s15, [r3, #28]

    rocket->atmosphere = atmosphere;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	625a      	str	r2, [r3, #36]	; 0x24

}
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <atmosphere_init>:

void atmosphere_init(struct Atmosphere_param* atmosphere){
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	atmosphere->pressure = 0;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
	atmosphere->temperature = 0;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	605a      	str	r2, [r3, #4]
	atmosphere->humidity = 0;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	609a      	str	r2, [r3, #8]

	atmosphere->start_pressure = 0;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	60da      	str	r2, [r3, #12]
	atmosphere->start_temperature = 0;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	611a      	str	r2, [r3, #16]
	atmosphere->start_humidity = 0;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	615a      	str	r2, [r3, #20]
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <fly_control>:

void fly_control(struct Rocket* rocket){
 8004504:	b5b0      	push	{r4, r5, r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	if (rocket->altitude->altitude > rocket->starting_height)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	ed93 7a00 	vldr	s14, [r3]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	7d9b      	ldrb	r3, [r3, #22]
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004528:	dd02      	ble.n	8004530 <fly_control+0x2c>
	{
	  rocket->start_point = 1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	741a      	strb	r2, [r3, #16]
	}

	rocket->altitude->max_altitude= fmax( rocket->altitude->max_altitude, rocket->altitude->altitude );
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fc f81e 	bl	8000578 <__aeabi_f2d>
 800453c:	4604      	mov	r4, r0
 800453e:	460d      	mov	r5, r1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fc f816 	bl	8000578 <__aeabi_f2d>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	ec43 2b11 	vmov	d1, r2, r3
 8004554:	ec45 4b10 	vmov	d0, r4, r5
 8004558:	f00b fb5e 	bl	800fc18 <fmax>
 800455c:	ec51 0b10 	vmov	r0, r1, d0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68dc      	ldr	r4, [r3, #12]
 8004564:	f7fc fb58 	bl	8000c18 <__aeabi_d2f>
 8004568:	4603      	mov	r3, r0
 800456a:	60a3      	str	r3, [r4, #8]

	if ((rocket->altitude->max_altitude - rocket->altitude->altitude) > rocket->delta_apogee && rocket->start_point == 1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	ed93 7a02 	vldr	s14, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	edd3 7a00 	vldr	s15, [r3]
 800457c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	7d1b      	ldrb	r3, [r3, #20]
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800458c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004594:	dd06      	ble.n	80045a4 <fly_control+0xa0>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	7c1b      	ldrb	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <fly_control+0xa0>
	{
	  rocket->apogee_point = 1;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	745a      	strb	r2, [r3, #17]
	}

	if ((rocket->altitude->max_altitude - rocket->altitude->altitude) > rocket->delta_activate && rocket->apogee_point == 1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	edd3 7a00 	vldr	s15, [r3]
 80045b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	7d5b      	ldrb	r3, [r3, #21]
 80045bc:	ee07 3a90 	vmov	s15, r3
 80045c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045cc:	dd06      	ble.n	80045dc <fly_control+0xd8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	7c5b      	ldrb	r3, [r3, #17]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <fly_control+0xd8>
	{
	  rocket->activate_point = 1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	749a      	strb	r2, [r3, #18]
	}

	if(rocket->start_point == 1 && rocket->apogee_point == 1 && rocket->activate_point == 1 && rocket->altitude->altitude < rocket->starting_height)//высота считающаяся приземлением
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	7c1b      	ldrb	r3, [r3, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01a      	beq.n	800461a <fly_control+0x116>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	7c5b      	ldrb	r3, [r3, #17]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d016      	beq.n	800461a <fly_control+0x116>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	7c9b      	ldrb	r3, [r3, #18]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d012      	beq.n	800461a <fly_control+0x116>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	ed93 7a00 	vldr	s14, [r3]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	7d9b      	ldrb	r3, [r3, #22]
 8004600:	ee07 3a90 	vmov	s15, r3
 8004604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800460c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004610:	d400      	bmi.n	8004614 <fly_control+0x110>
	{
	  rocket->landing_point = 1;
	}
}
 8004612:	e002      	b.n	800461a <fly_control+0x116>
	  rocket->landing_point = 1;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	74da      	strb	r2, [r3, #19]
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bdb0      	pop	{r4, r5, r7, pc}

08004622 <delta_init>:

void delta_init(struct Rocket* rocket){
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
	rocket->delta_apogee = 1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	751a      	strb	r2, [r3, #20]
	rocket->delta_activate = 1;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	755a      	strb	r2, [r3, #21]
	rocket->starting_height = 2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2202      	movs	r2, #2
 800463a:	759a      	strb	r2, [r3, #22]
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004680 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800464c:	480d      	ldr	r0, [pc, #52]	; (8004684 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800464e:	490e      	ldr	r1, [pc, #56]	; (8004688 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004650:	4a0e      	ldr	r2, [pc, #56]	; (800468c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004654:	e002      	b.n	800465c <LoopCopyDataInit>

08004656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800465a:	3304      	adds	r3, #4

0800465c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800465c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800465e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004660:	d3f9      	bcc.n	8004656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004662:	4a0b      	ldr	r2, [pc, #44]	; (8004690 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004664:	4c0b      	ldr	r4, [pc, #44]	; (8004694 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004668:	e001      	b.n	800466e <LoopFillZerobss>

0800466a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800466a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800466c:	3204      	adds	r2, #4

0800466e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800466e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004670:	d3fb      	bcc.n	800466a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004672:	f7fe fcbf 	bl	8002ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004676:	f006 fd7f 	bl	800b178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800467a:	f7fe f98d 	bl	8002998 <main>
  bx  lr    
 800467e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004688:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800468c:	080110a8 	.word	0x080110a8
  ldr r2, =_sbss
 8004690:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004694:	20000864 	.word	0x20000864

08004698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004698:	e7fe      	b.n	8004698 <ADC_IRQHandler>
	...

0800469c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046a0:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <HAL_Init+0x40>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a0d      	ldr	r2, [pc, #52]	; (80046dc <HAL_Init+0x40>)
 80046a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <HAL_Init+0x40>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <HAL_Init+0x40>)
 80046b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046b8:	4b08      	ldr	r3, [pc, #32]	; (80046dc <HAL_Init+0x40>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a07      	ldr	r2, [pc, #28]	; (80046dc <HAL_Init+0x40>)
 80046be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046c4:	2003      	movs	r0, #3
 80046c6:	f000 fe37 	bl	8005338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046ca:	200f      	movs	r0, #15
 80046cc:	f000 f808 	bl	80046e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046d0:	f7fe fb5c 	bl	8002d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023c00 	.word	0x40023c00

080046e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046e8:	4b12      	ldr	r3, [pc, #72]	; (8004734 <HAL_InitTick+0x54>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b12      	ldr	r3, [pc, #72]	; (8004738 <HAL_InitTick+0x58>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	4619      	mov	r1, r3
 80046f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80046fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fe96 	bl	8005430 <HAL_SYSTICK_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e00e      	b.n	800472c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b0f      	cmp	r3, #15
 8004712:	d80a      	bhi.n	800472a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004714:	2200      	movs	r2, #0
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	f000 fe2c 	bl	8005378 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004720:	4a06      	ldr	r2, [pc, #24]	; (800473c <HAL_InitTick+0x5c>)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	e000      	b.n	800472c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	20000004 	.word	0x20000004
 8004738:	20000018 	.word	0x20000018
 800473c:	20000014 	.word	0x20000014

08004740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004744:	4b06      	ldr	r3, [pc, #24]	; (8004760 <HAL_IncTick+0x20>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_IncTick+0x24>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4413      	add	r3, r2
 8004750:	4a04      	ldr	r2, [pc, #16]	; (8004764 <HAL_IncTick+0x24>)
 8004752:	6013      	str	r3, [r2, #0]
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	20000018 	.word	0x20000018
 8004764:	20000830 	.word	0x20000830

08004768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return uwTick;
 800476c:	4b03      	ldr	r3, [pc, #12]	; (800477c <HAL_GetTick+0x14>)
 800476e:	681b      	ldr	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000830 	.word	0x20000830

08004780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004788:	f7ff ffee 	bl	8004768 <HAL_GetTick>
 800478c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d005      	beq.n	80047a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_Delay+0x44>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047a6:	bf00      	nop
 80047a8:	f7ff ffde 	bl	8004768 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d8f7      	bhi.n	80047a8 <HAL_Delay+0x28>
  {
  }
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000018 	.word	0x20000018

080047c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e14e      	b.n	8004a7c <HAL_ADC_Init+0x2b4>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a90      	ldr	r2, [pc, #576]	; (8004a24 <HAL_ADC_Init+0x25c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <HAL_ADC_Init+0x2a>
 80047e8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80047ec:	488e      	ldr	r0, [pc, #568]	; (8004a28 <HAL_ADC_Init+0x260>)
 80047ee:	f7fe fac2 	bl	8002d76 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d013      	beq.n	8004822 <HAL_ADC_Init+0x5a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004802:	d00e      	beq.n	8004822 <HAL_ADC_Init+0x5a>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800480c:	d009      	beq.n	8004822 <HAL_ADC_Init+0x5a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004816:	d004      	beq.n	8004822 <HAL_ADC_Init+0x5a>
 8004818:	f240 1143 	movw	r1, #323	; 0x143
 800481c:	4882      	ldr	r0, [pc, #520]	; (8004a28 <HAL_ADC_Init+0x260>)
 800481e:	f7fe faaa 	bl	8002d76 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d013      	beq.n	8004852 <HAL_ADC_Init+0x8a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004832:	d00e      	beq.n	8004852 <HAL_ADC_Init+0x8a>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800483c:	d009      	beq.n	8004852 <HAL_ADC_Init+0x8a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004846:	d004      	beq.n	8004852 <HAL_ADC_Init+0x8a>
 8004848:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800484c:	4876      	ldr	r0, [pc, #472]	; (8004a28 <HAL_ADC_Init+0x260>)
 800484e:	f7fe fa92 	bl	8002d76 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d008      	beq.n	800486c <HAL_ADC_Init+0xa4>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d004      	beq.n	800486c <HAL_ADC_Init+0xa4>
 8004862:	f240 1145 	movw	r1, #325	; 0x145
 8004866:	4870      	ldr	r0, [pc, #448]	; (8004a28 <HAL_ADC_Init+0x260>)
 8004868:	f7fe fa85 	bl	8002d76 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	7e1b      	ldrb	r3, [r3, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_ADC_Init+0xbe>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	7e1b      	ldrb	r3, [r3, #24]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d004      	beq.n	8004886 <HAL_ADC_Init+0xbe>
 800487c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004880:	4869      	ldr	r0, [pc, #420]	; (8004a28 <HAL_ADC_Init+0x260>)
 8004882:	f7fe fa78 	bl	8002d76 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	2b00      	cmp	r3, #0
 800488c:	d054      	beq.n	8004938 <HAL_ADC_Init+0x170>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004896:	d04f      	beq.n	8004938 <HAL_ADC_Init+0x170>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048a0:	d04a      	beq.n	8004938 <HAL_ADC_Init+0x170>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048aa:	d045      	beq.n	8004938 <HAL_ADC_Init+0x170>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048b4:	d040      	beq.n	8004938 <HAL_ADC_Init+0x170>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80048be:	d03b      	beq.n	8004938 <HAL_ADC_Init+0x170>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80048c8:	d036      	beq.n	8004938 <HAL_ADC_Init+0x170>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80048d2:	d031      	beq.n	8004938 <HAL_ADC_Init+0x170>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048dc:	d02c      	beq.n	8004938 <HAL_ADC_Init+0x170>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80048e6:	d027      	beq.n	8004938 <HAL_ADC_Init+0x170>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80048f0:	d022      	beq.n	8004938 <HAL_ADC_Init+0x170>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80048fa:	d01d      	beq.n	8004938 <HAL_ADC_Init+0x170>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004904:	d018      	beq.n	8004938 <HAL_ADC_Init+0x170>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800490e:	d013      	beq.n	8004938 <HAL_ADC_Init+0x170>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004918:	d00e      	beq.n	8004938 <HAL_ADC_Init+0x170>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004922:	d009      	beq.n	8004938 <HAL_ADC_Init+0x170>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	4a40      	ldr	r2, [pc, #256]	; (8004a2c <HAL_ADC_Init+0x264>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d004      	beq.n	8004938 <HAL_ADC_Init+0x170>
 800492e:	f240 1147 	movw	r1, #327	; 0x147
 8004932:	483d      	ldr	r0, [pc, #244]	; (8004a28 <HAL_ADC_Init+0x260>)
 8004934:	f7fe fa1f 	bl	8002d76 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d009      	beq.n	8004954 <HAL_ADC_Init+0x18c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004948:	d004      	beq.n	8004954 <HAL_ADC_Init+0x18c>
 800494a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800494e:	4836      	ldr	r0, [pc, #216]	; (8004a28 <HAL_ADC_Init+0x260>)
 8004950:	f7fe fa11 	bl	8002d76 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_ADC_Init+0x19c>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	2b10      	cmp	r3, #16
 8004962:	d904      	bls.n	800496e <HAL_ADC_Init+0x1a6>
 8004964:	f240 1149 	movw	r1, #329	; 0x149
 8004968:	482f      	ldr	r0, [pc, #188]	; (8004a28 <HAL_ADC_Init+0x260>)
 800496a:	f7fe fa04 	bl	8002d76 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004974:	2b00      	cmp	r3, #0
 8004976:	d009      	beq.n	800498c <HAL_ADC_Init+0x1c4>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800497e:	2b01      	cmp	r3, #1
 8004980:	d004      	beq.n	800498c <HAL_ADC_Init+0x1c4>
 8004982:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004986:	4828      	ldr	r0, [pc, #160]	; (8004a28 <HAL_ADC_Init+0x260>)
 8004988:	f7fe f9f5 	bl	8002d76 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d00c      	beq.n	80049ae <HAL_ADC_Init+0x1e6>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_ADC_Init+0x1e6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d004      	beq.n	80049ae <HAL_ADC_Init+0x1e6>
 80049a4:	f240 114b 	movw	r1, #331	; 0x14b
 80049a8:	481f      	ldr	r0, [pc, #124]	; (8004a28 <HAL_ADC_Init+0x260>)
 80049aa:	f7fe f9e4 	bl	8002d76 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d009      	beq.n	80049cc <HAL_ADC_Init+0x204>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d004      	beq.n	80049cc <HAL_ADC_Init+0x204>
 80049c2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80049c6:	4818      	ldr	r0, [pc, #96]	; (8004a28 <HAL_ADC_Init+0x260>)
 80049c8:	f7fe f9d5 	bl	8002d76 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	4a16      	ldr	r2, [pc, #88]	; (8004a2c <HAL_ADC_Init+0x264>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d017      	beq.n	8004a06 <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d013      	beq.n	8004a06 <HAL_ADC_Init+0x23e>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049e6:	d00e      	beq.n	8004a06 <HAL_ADC_Init+0x23e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049f0:	d009      	beq.n	8004a06 <HAL_ADC_Init+0x23e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049fa:	d004      	beq.n	8004a06 <HAL_ADC_Init+0x23e>
 80049fc:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004a00:	4809      	ldr	r0, [pc, #36]	; (8004a28 <HAL_ADC_Init+0x260>)
 8004a02:	f7fe f9b8 	bl	8002d76 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d110      	bne.n	8004a30 <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fc fd80 	bl	8001514 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004a22:	e005      	b.n	8004a30 <HAL_ADC_Init+0x268>
 8004a24:	40012000 	.word	0x40012000
 8004a28:	080108c4 	.word	0x080108c4
 8004a2c:	0f000001 	.word	0x0f000001
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d118      	bne.n	8004a6e <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a44:	f023 0302 	bic.w	r3, r3, #2
 8004a48:	f043 0202 	orr.w	r2, r3, #2
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 fa73 	bl	8004f3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f023 0303 	bic.w	r3, r3, #3
 8004a64:	f043 0201 	orr.w	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40
 8004a6c:	e001      	b.n	8004a72 <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	7e1b      	ldrb	r3, [r3, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_ADC_Start+0x26>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	7e1b      	ldrb	r3, [r3, #24]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d004      	beq.n	8004aaa <HAL_ADC_Start+0x26>
 8004aa0:	f240 21d2 	movw	r1, #722	; 0x2d2
 8004aa4:	485e      	ldr	r0, [pc, #376]	; (8004c20 <HAL_ADC_Start+0x19c>)
 8004aa6:	f7fe f966 	bl	8002d76 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d013      	beq.n	8004ada <HAL_ADC_Start+0x56>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aba:	d00e      	beq.n	8004ada <HAL_ADC_Start+0x56>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac4:	d009      	beq.n	8004ada <HAL_ADC_Start+0x56>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ace:	d004      	beq.n	8004ada <HAL_ADC_Start+0x56>
 8004ad0:	f240 21d3 	movw	r1, #723	; 0x2d3
 8004ad4:	4852      	ldr	r0, [pc, #328]	; (8004c20 <HAL_ADC_Start+0x19c>)
 8004ad6:	f7fe f94e 	bl	8002d76 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_ADC_Start+0x64>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e097      	b.n	8004c18 <HAL_ADC_Start+0x194>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d018      	beq.n	8004b30 <HAL_ADC_Start+0xac>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0201 	orr.w	r2, r2, #1
 8004b0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b0e:	4b45      	ldr	r3, [pc, #276]	; (8004c24 <HAL_ADC_Start+0x1a0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a45      	ldr	r2, [pc, #276]	; (8004c28 <HAL_ADC_Start+0x1a4>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	0c9a      	lsrs	r2, r3, #18
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	4413      	add	r3, r2
 8004b20:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004b22:	e002      	b.n	8004b2a <HAL_ADC_Start+0xa6>
    {
      counter--;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f9      	bne.n	8004b24 <HAL_ADC_Start+0xa0>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d15f      	bne.n	8004bfe <HAL_ADC_Start+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7c:	d106      	bne.n	8004b8c <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	f023 0206 	bic.w	r2, r3, #6
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	645a      	str	r2, [r3, #68]	; 0x44
 8004b8a:	e002      	b.n	8004b92 <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b9a:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <HAL_ADC_Start+0x1a8>)
 8004b9c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004ba6:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10f      	bne.n	8004bd4 <HAL_ADC_Start+0x150>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d129      	bne.n	8004c16 <HAL_ADC_Start+0x192>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004bd0:	609a      	str	r2, [r3, #8]
 8004bd2:	e020      	b.n	8004c16 <HAL_ADC_Start+0x192>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <HAL_ADC_Start+0x1ac>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d11b      	bne.n	8004c16 <HAL_ADC_Start+0x192>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d114      	bne.n	8004c16 <HAL_ADC_Start+0x192>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	e00b      	b.n	8004c16 <HAL_ADC_Start+0x192>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f043 0210 	orr.w	r2, r3, #16
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0e:	f043 0201 	orr.w	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	080108c4 	.word	0x080108c4
 8004c24:	20000004 	.word	0x20000004
 8004c28:	431bde83 	.word	0x431bde83
 8004c2c:	40012300 	.word	0x40012300
 8004c30:	40012000 	.word	0x40012000

08004c34 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
	...

08004c50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b12      	cmp	r3, #18
 8004c64:	d909      	bls.n	8004c7a <HAL_ADC_ConfigChannel+0x2a>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a72      	ldr	r2, [pc, #456]	; (8004e34 <HAL_ADC_ConfigChannel+0x1e4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_ADC_ConfigChannel+0x2a>
 8004c70:	f240 618b 	movw	r1, #1675	; 0x68b
 8004c74:	4870      	ldr	r0, [pc, #448]	; (8004e38 <HAL_ADC_ConfigChannel+0x1e8>)
 8004c76:	f7fe f87e 	bl	8002d76 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_ADC_ConfigChannel+0x3a>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b10      	cmp	r3, #16
 8004c88:	d904      	bls.n	8004c94 <HAL_ADC_ConfigChannel+0x44>
 8004c8a:	f240 618c 	movw	r1, #1676	; 0x68c
 8004c8e:	486a      	ldr	r0, [pc, #424]	; (8004e38 <HAL_ADC_ConfigChannel+0x1e8>)
 8004c90:	f7fe f871 	bl	8002d76 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d020      	beq.n	8004cde <HAL_ADC_ConfigChannel+0x8e>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d01c      	beq.n	8004cde <HAL_ADC_ConfigChannel+0x8e>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d018      	beq.n	8004cde <HAL_ADC_ConfigChannel+0x8e>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d014      	beq.n	8004cde <HAL_ADC_ConfigChannel+0x8e>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d010      	beq.n	8004cde <HAL_ADC_ConfigChannel+0x8e>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b05      	cmp	r3, #5
 8004cc2:	d00c      	beq.n	8004cde <HAL_ADC_ConfigChannel+0x8e>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2b06      	cmp	r3, #6
 8004cca:	d008      	beq.n	8004cde <HAL_ADC_ConfigChannel+0x8e>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b07      	cmp	r3, #7
 8004cd2:	d004      	beq.n	8004cde <HAL_ADC_ConfigChannel+0x8e>
 8004cd4:	f240 618d 	movw	r1, #1677	; 0x68d
 8004cd8:	4857      	ldr	r0, [pc, #348]	; (8004e38 <HAL_ADC_ConfigChannel+0x1e8>)
 8004cda:	f7fe f84c 	bl	8002d76 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_ADC_ConfigChannel+0x9c>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e118      	b.n	8004f1e <HAL_ADC_ConfigChannel+0x2ce>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b09      	cmp	r3, #9
 8004cfa:	d925      	bls.n	8004d48 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68d9      	ldr	r1, [r3, #12]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4413      	add	r3, r2
 8004d10:	3b1e      	subs	r3, #30
 8004d12:	2207      	movs	r2, #7
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	43da      	mvns	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	400a      	ands	r2, r1
 8004d20:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68d9      	ldr	r1, [r3, #12]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	4618      	mov	r0, r3
 8004d34:	4603      	mov	r3, r0
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	4403      	add	r3, r0
 8004d3a:	3b1e      	subs	r3, #30
 8004d3c:	409a      	lsls	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	60da      	str	r2, [r3, #12]
 8004d46:	e022      	b.n	8004d8e <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6919      	ldr	r1, [r3, #16]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	4613      	mov	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	2207      	movs	r2, #7
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43da      	mvns	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	400a      	ands	r2, r1
 8004d6a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6919      	ldr	r1, [r3, #16]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	4603      	mov	r3, r0
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	4403      	add	r3, r0
 8004d84:	409a      	lsls	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b06      	cmp	r3, #6
 8004d94:	d824      	bhi.n	8004de0 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	3b05      	subs	r3, #5
 8004da8:	221f      	movs	r2, #31
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43da      	mvns	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	400a      	ands	r2, r1
 8004db6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	3b05      	subs	r3, #5
 8004dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8004dde:	e051      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b0c      	cmp	r3, #12
 8004de6:	d829      	bhi.n	8004e3c <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	3b23      	subs	r3, #35	; 0x23
 8004dfa:	221f      	movs	r2, #31
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43da      	mvns	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	400a      	ands	r2, r1
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4618      	mov	r0, r3
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	3b23      	subs	r3, #35	; 0x23
 8004e24:	fa00 f203 	lsl.w	r2, r0, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8004e30:	e028      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x234>
 8004e32:	bf00      	nop
 8004e34:	10000012 	.word	0x10000012
 8004e38:	080108c4 	.word	0x080108c4
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3b41      	subs	r3, #65	; 0x41
 8004e4e:	221f      	movs	r2, #31
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43da      	mvns	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	400a      	ands	r2, r1
 8004e5c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	3b41      	subs	r3, #65	; 0x41
 8004e78:	fa00 f203 	lsl.w	r2, r0, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e84:	4b28      	ldr	r3, [pc, #160]	; (8004f28 <HAL_ADC_ConfigChannel+0x2d8>)
 8004e86:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a27      	ldr	r2, [pc, #156]	; (8004f2c <HAL_ADC_ConfigChannel+0x2dc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d10f      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x262>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b12      	cmp	r3, #18
 8004e98:	d10b      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <HAL_ADC_ConfigChannel+0x2dc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d12b      	bne.n	8004f14 <HAL_ADC_ConfigChannel+0x2c4>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1b      	ldr	r2, [pc, #108]	; (8004f30 <HAL_ADC_ConfigChannel+0x2e0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <HAL_ADC_ConfigChannel+0x27e>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b11      	cmp	r3, #17
 8004ecc:	d122      	bne.n	8004f14 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <HAL_ADC_ConfigChannel+0x2e0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d111      	bne.n	8004f14 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ef0:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <HAL_ADC_ConfigChannel+0x2e4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a10      	ldr	r2, [pc, #64]	; (8004f38 <HAL_ADC_ConfigChannel+0x2e8>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	0c9a      	lsrs	r2, r3, #18
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f06:	e002      	b.n	8004f0e <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f9      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40012300 	.word	0x40012300
 8004f2c:	40012000 	.word	0x40012000
 8004f30:	10000012 	.word	0x10000012
 8004f34:	20000004 	.word	0x20000004
 8004f38:	431bde83 	.word	0x431bde83

08004f3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f44:	4b7f      	ldr	r3, [pc, #508]	; (8005144 <ADC_Init+0x208>)
 8004f46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6859      	ldr	r1, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	021a      	lsls	r2, r3, #8
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6859      	ldr	r1, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6899      	ldr	r1, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fce:	4a5e      	ldr	r2, [pc, #376]	; (8005148 <ADC_Init+0x20c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d022      	beq.n	800501a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fe2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6899      	ldr	r1, [r3, #8]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6899      	ldr	r1, [r3, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	609a      	str	r2, [r3, #8]
 8005018:	e00f      	b.n	800503a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005028:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005038:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0202 	bic.w	r2, r2, #2
 8005048:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6899      	ldr	r1, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	7e1b      	ldrb	r3, [r3, #24]
 8005054:	005a      	lsls	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d028      	beq.n	80050ba <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <ADC_Init+0x13c>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	2b08      	cmp	r3, #8
 8005076:	d904      	bls.n	8005082 <ADC_Init+0x146>
 8005078:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 800507c:	4833      	ldr	r0, [pc, #204]	; (800514c <ADC_Init+0x210>)
 800507e:	f7fd fe7a 	bl	8002d76 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005090:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80050a0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6859      	ldr	r1, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	3b01      	subs	r3, #1
 80050ae:	035a      	lsls	r2, r3, #13
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	605a      	str	r2, [r3, #4]
 80050b8:	e007      	b.n	80050ca <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050c8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80050d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	3b01      	subs	r3, #1
 80050e6:	051a      	lsls	r2, r3, #20
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6899      	ldr	r1, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800510c:	025a      	lsls	r2, r3, #9
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005124:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6899      	ldr	r1, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	029a      	lsls	r2, r3, #10
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	609a      	str	r2, [r3, #8]
}
 800513a:	bf00      	nop
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40012300 	.word	0x40012300
 8005148:	0f000001 	.word	0x0f000001
 800514c:	080108c4 	.word	0x080108c4

08005150 <__NVIC_SetPriorityGrouping>:
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005160:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <__NVIC_SetPriorityGrouping+0x44>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800516c:	4013      	ands	r3, r2
 800516e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800517c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005182:	4a04      	ldr	r2, [pc, #16]	; (8005194 <__NVIC_SetPriorityGrouping+0x44>)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	60d3      	str	r3, [r2, #12]
}
 8005188:	bf00      	nop
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	e000ed00 	.word	0xe000ed00

08005198 <__NVIC_GetPriorityGrouping>:
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800519c:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <__NVIC_GetPriorityGrouping+0x18>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	0a1b      	lsrs	r3, r3, #8
 80051a2:	f003 0307 	and.w	r3, r3, #7
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	e000ed00 	.word	0xe000ed00

080051b4 <__NVIC_EnableIRQ>:
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	db0b      	blt.n	80051de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	f003 021f 	and.w	r2, r3, #31
 80051cc:	4907      	ldr	r1, [pc, #28]	; (80051ec <__NVIC_EnableIRQ+0x38>)
 80051ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	2001      	movs	r0, #1
 80051d6:	fa00 f202 	lsl.w	r2, r0, r2
 80051da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	e000e100 	.word	0xe000e100

080051f0 <__NVIC_DisableIRQ>:
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	db12      	blt.n	8005228 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	f003 021f 	and.w	r2, r3, #31
 8005208:	490a      	ldr	r1, [pc, #40]	; (8005234 <__NVIC_DisableIRQ+0x44>)
 800520a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	2001      	movs	r0, #1
 8005212:	fa00 f202 	lsl.w	r2, r0, r2
 8005216:	3320      	adds	r3, #32
 8005218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800521c:	f3bf 8f4f 	dsb	sy
}
 8005220:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005222:	f3bf 8f6f 	isb	sy
}
 8005226:	bf00      	nop
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	e000e100 	.word	0xe000e100

08005238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	4603      	mov	r3, r0
 8005240:	6039      	str	r1, [r7, #0]
 8005242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005248:	2b00      	cmp	r3, #0
 800524a:	db0a      	blt.n	8005262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	b2da      	uxtb	r2, r3
 8005250:	490c      	ldr	r1, [pc, #48]	; (8005284 <__NVIC_SetPriority+0x4c>)
 8005252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005256:	0112      	lsls	r2, r2, #4
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	440b      	add	r3, r1
 800525c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005260:	e00a      	b.n	8005278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	b2da      	uxtb	r2, r3
 8005266:	4908      	ldr	r1, [pc, #32]	; (8005288 <__NVIC_SetPriority+0x50>)
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	3b04      	subs	r3, #4
 8005270:	0112      	lsls	r2, r2, #4
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	440b      	add	r3, r1
 8005276:	761a      	strb	r2, [r3, #24]
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	e000e100 	.word	0xe000e100
 8005288:	e000ed00 	.word	0xe000ed00

0800528c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	; 0x24
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f1c3 0307 	rsb	r3, r3, #7
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	bf28      	it	cs
 80052aa:	2304      	movcs	r3, #4
 80052ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	3304      	adds	r3, #4
 80052b2:	2b06      	cmp	r3, #6
 80052b4:	d902      	bls.n	80052bc <NVIC_EncodePriority+0x30>
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	3b03      	subs	r3, #3
 80052ba:	e000      	b.n	80052be <NVIC_EncodePriority+0x32>
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052c0:	f04f 32ff 	mov.w	r2, #4294967295
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ca:	43da      	mvns	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	401a      	ands	r2, r3
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052d4:	f04f 31ff 	mov.w	r1, #4294967295
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	fa01 f303 	lsl.w	r3, r1, r3
 80052de:	43d9      	mvns	r1, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052e4:	4313      	orrs	r3, r2
         );
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3724      	adds	r7, #36	; 0x24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3b01      	subs	r3, #1
 8005300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005304:	d301      	bcc.n	800530a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005306:	2301      	movs	r3, #1
 8005308:	e00f      	b.n	800532a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800530a:	4a0a      	ldr	r2, [pc, #40]	; (8005334 <SysTick_Config+0x40>)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3b01      	subs	r3, #1
 8005310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005312:	210f      	movs	r1, #15
 8005314:	f04f 30ff 	mov.w	r0, #4294967295
 8005318:	f7ff ff8e 	bl	8005238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800531c:	4b05      	ldr	r3, [pc, #20]	; (8005334 <SysTick_Config+0x40>)
 800531e:	2200      	movs	r2, #0
 8005320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005322:	4b04      	ldr	r3, [pc, #16]	; (8005334 <SysTick_Config+0x40>)
 8005324:	2207      	movs	r2, #7
 8005326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	e000e010 	.word	0xe000e010

08005338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b07      	cmp	r3, #7
 8005344:	d00f      	beq.n	8005366 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b06      	cmp	r3, #6
 800534a:	d00c      	beq.n	8005366 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b05      	cmp	r3, #5
 8005350:	d009      	beq.n	8005366 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b04      	cmp	r3, #4
 8005356:	d006      	beq.n	8005366 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b03      	cmp	r3, #3
 800535c:	d003      	beq.n	8005366 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800535e:	2190      	movs	r1, #144	; 0x90
 8005360:	4804      	ldr	r0, [pc, #16]	; (8005374 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005362:	f7fd fd08 	bl	8002d76 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7ff fef2 	bl	8005150 <__NVIC_SetPriorityGrouping>
}
 800536c:	bf00      	nop
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	080108fc 	.word	0x080108fc

08005378 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b0f      	cmp	r3, #15
 800538e:	d903      	bls.n	8005398 <HAL_NVIC_SetPriority+0x20>
 8005390:	21a8      	movs	r1, #168	; 0xa8
 8005392:	480e      	ldr	r0, [pc, #56]	; (80053cc <HAL_NVIC_SetPriority+0x54>)
 8005394:	f7fd fcef 	bl	8002d76 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b0f      	cmp	r3, #15
 800539c:	d903      	bls.n	80053a6 <HAL_NVIC_SetPriority+0x2e>
 800539e:	21a9      	movs	r1, #169	; 0xa9
 80053a0:	480a      	ldr	r0, [pc, #40]	; (80053cc <HAL_NVIC_SetPriority+0x54>)
 80053a2:	f7fd fce8 	bl	8002d76 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053a6:	f7ff fef7 	bl	8005198 <__NVIC_GetPriorityGrouping>
 80053aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	6978      	ldr	r0, [r7, #20]
 80053b2:	f7ff ff6b 	bl	800528c <NVIC_EncodePriority>
 80053b6:	4602      	mov	r2, r0
 80053b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053bc:	4611      	mov	r1, r2
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff ff3a 	bl	8005238 <__NVIC_SetPriority>
}
 80053c4:	bf00      	nop
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	080108fc 	.word	0x080108fc

080053d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	4603      	mov	r3, r0
 80053d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80053da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	da03      	bge.n	80053ea <HAL_NVIC_EnableIRQ+0x1a>
 80053e2:	21bc      	movs	r1, #188	; 0xbc
 80053e4:	4805      	ldr	r0, [pc, #20]	; (80053fc <HAL_NVIC_EnableIRQ+0x2c>)
 80053e6:	f7fd fcc6 	bl	8002d76 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fee0 	bl	80051b4 <__NVIC_EnableIRQ>
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	080108fc 	.word	0x080108fc

08005400 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800540a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540e:	2b00      	cmp	r3, #0
 8005410:	da03      	bge.n	800541a <HAL_NVIC_DisableIRQ+0x1a>
 8005412:	21cc      	movs	r1, #204	; 0xcc
 8005414:	4805      	ldr	r0, [pc, #20]	; (800542c <HAL_NVIC_DisableIRQ+0x2c>)
 8005416:	f7fd fcae 	bl	8002d76 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800541a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541e:	4618      	mov	r0, r3
 8005420:	f7ff fee6 	bl	80051f0 <__NVIC_DisableIRQ>
}
 8005424:	bf00      	nop
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	080108fc 	.word	0x080108fc

08005430 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff ff5b 	bl	80052f4 <SysTick_Config>
 800543e:	4603      	mov	r3, r0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005454:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005456:	f7ff f987 	bl	8004768 <HAL_GetTick>
 800545a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d008      	beq.n	800547a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2280      	movs	r2, #128	; 0x80
 800546c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e052      	b.n	8005520 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0216 	bic.w	r2, r2, #22
 8005488:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005498:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d103      	bne.n	80054aa <HAL_DMA_Abort+0x62>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0208 	bic.w	r2, r2, #8
 80054b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054ca:	e013      	b.n	80054f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054cc:	f7ff f94c 	bl	8004768 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b05      	cmp	r3, #5
 80054d8:	d90c      	bls.n	80054f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2203      	movs	r2, #3
 80054e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e015      	b.n	8005520 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e4      	bne.n	80054cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005506:	223f      	movs	r2, #63	; 0x3f
 8005508:	409a      	lsls	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d004      	beq.n	8005546 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2280      	movs	r2, #128	; 0x80
 8005540:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e00c      	b.n	8005560 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2205      	movs	r2, #5
 800554a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0201 	bic.w	r2, r2, #1
 800555c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800557e:	4b2b      	ldr	r3, [pc, #172]	; (800562c <HAL_FLASH_Program+0xc0>)
 8005580:	7e1b      	ldrb	r3, [r3, #24]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_FLASH_Program+0x1e>
 8005586:	2302      	movs	r3, #2
 8005588:	e04b      	b.n	8005622 <HAL_FLASH_Program+0xb6>
 800558a:	4b28      	ldr	r3, [pc, #160]	; (800562c <HAL_FLASH_Program+0xc0>)
 800558c:	2201      	movs	r2, #1
 800558e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00c      	beq.n	80055b0 <HAL_FLASH_Program+0x44>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d009      	beq.n	80055b0 <HAL_FLASH_Program+0x44>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d006      	beq.n	80055b0 <HAL_FLASH_Program+0x44>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d003      	beq.n	80055b0 <HAL_FLASH_Program+0x44>
 80055a8:	21a2      	movs	r1, #162	; 0xa2
 80055aa:	4821      	ldr	r0, [pc, #132]	; (8005630 <HAL_FLASH_Program+0xc4>)
 80055ac:	f7fd fbe3 	bl	8002d76 <assert_failed>
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80055b4:	f000 f872 	bl	800569c <FLASH_WaitForLastOperation>
 80055b8:	4603      	mov	r3, r0
 80055ba:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d12b      	bne.n	800561a <HAL_FLASH_Program+0xae>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d105      	bne.n	80055d4 <HAL_FLASH_Program+0x68>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80055c8:	783b      	ldrb	r3, [r7, #0]
 80055ca:	4619      	mov	r1, r3
 80055cc:	68b8      	ldr	r0, [r7, #8]
 80055ce:	f000 f96f 	bl	80058b0 <FLASH_Program_Byte>
 80055d2:	e016      	b.n	8005602 <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d105      	bne.n	80055e6 <HAL_FLASH_Program+0x7a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80055da:	883b      	ldrh	r3, [r7, #0]
 80055dc:	4619      	mov	r1, r3
 80055de:	68b8      	ldr	r0, [r7, #8]
 80055e0:	f000 f928 	bl	8005834 <FLASH_Program_HalfWord>
 80055e4:	e00d      	b.n	8005602 <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d105      	bne.n	80055f8 <HAL_FLASH_Program+0x8c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	4619      	mov	r1, r3
 80055f0:	68b8      	ldr	r0, [r7, #8]
 80055f2:	f000 f8e1 	bl	80057b8 <FLASH_Program_Word>
 80055f6:	e004      	b.n	8005602 <HAL_FLASH_Program+0x96>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80055f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055fc:	68b8      	ldr	r0, [r7, #8]
 80055fe:	f000 f88d 	bl	800571c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005602:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005606:	f000 f849 	bl	800569c <FLASH_WaitForLastOperation>
 800560a:	4603      	mov	r3, r0
 800560c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <HAL_FLASH_Program+0xc8>)
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	4a08      	ldr	r2, [pc, #32]	; (8005634 <HAL_FLASH_Program+0xc8>)
 8005614:	f023 0301 	bic.w	r3, r3, #1
 8005618:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800561a:	4b04      	ldr	r3, [pc, #16]	; (800562c <HAL_FLASH_Program+0xc0>)
 800561c:	2200      	movs	r2, #0
 800561e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005620:	7dfb      	ldrb	r3, [r7, #23]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	20000834 	.word	0x20000834
 8005630:	08010938 	.word	0x08010938
 8005634:	40023c00 	.word	0x40023c00

08005638 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005642:	4b0b      	ldr	r3, [pc, #44]	; (8005670 <HAL_FLASH_Unlock+0x38>)
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	da0b      	bge.n	8005662 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800564a:	4b09      	ldr	r3, [pc, #36]	; (8005670 <HAL_FLASH_Unlock+0x38>)
 800564c:	4a09      	ldr	r2, [pc, #36]	; (8005674 <HAL_FLASH_Unlock+0x3c>)
 800564e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005650:	4b07      	ldr	r3, [pc, #28]	; (8005670 <HAL_FLASH_Unlock+0x38>)
 8005652:	4a09      	ldr	r2, [pc, #36]	; (8005678 <HAL_FLASH_Unlock+0x40>)
 8005654:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005656:	4b06      	ldr	r3, [pc, #24]	; (8005670 <HAL_FLASH_Unlock+0x38>)
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	da01      	bge.n	8005662 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005662:	79fb      	ldrb	r3, [r7, #7]
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	40023c00 	.word	0x40023c00
 8005674:	45670123 	.word	0x45670123
 8005678:	cdef89ab 	.word	0xcdef89ab

0800567c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <HAL_FLASH_Lock+0x1c>)
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	4a04      	ldr	r2, [pc, #16]	; (8005698 <HAL_FLASH_Lock+0x1c>)
 8005686:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800568a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	40023c00 	.word	0x40023c00

0800569c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80056a8:	4b1a      	ldr	r3, [pc, #104]	; (8005714 <FLASH_WaitForLastOperation+0x78>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80056ae:	f7ff f85b 	bl	8004768 <HAL_GetTick>
 80056b2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80056b4:	e010      	b.n	80056d8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056bc:	d00c      	beq.n	80056d8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <FLASH_WaitForLastOperation+0x38>
 80056c4:	f7ff f850 	bl	8004768 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d201      	bcs.n	80056d8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e019      	b.n	800570c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80056d8:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <FLASH_WaitForLastOperation+0x7c>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e8      	bne.n	80056b6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80056e4:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <FLASH_WaitForLastOperation+0x7c>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80056f0:	4b09      	ldr	r3, [pc, #36]	; (8005718 <FLASH_WaitForLastOperation+0x7c>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80056f6:	4b08      	ldr	r3, [pc, #32]	; (8005718 <FLASH_WaitForLastOperation+0x7c>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005702:	f000 f911 	bl	8005928 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
  
}  
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000834 	.word	0x20000834
 8005718:	40023c00 	.word	0x40023c00

0800571c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800572e:	d303      	bcc.n	8005738 <FLASH_Program_DoubleWord+0x1c>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4a1c      	ldr	r2, [pc, #112]	; (80057a4 <FLASH_Program_DoubleWord+0x88>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d90c      	bls.n	8005752 <FLASH_Program_DoubleWord+0x36>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4a1b      	ldr	r2, [pc, #108]	; (80057a8 <FLASH_Program_DoubleWord+0x8c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d903      	bls.n	8005748 <FLASH_Program_DoubleWord+0x2c>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a1a      	ldr	r2, [pc, #104]	; (80057ac <FLASH_Program_DoubleWord+0x90>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d904      	bls.n	8005752 <FLASH_Program_DoubleWord+0x36>
 8005748:	f240 2165 	movw	r1, #613	; 0x265
 800574c:	4818      	ldr	r0, [pc, #96]	; (80057b0 <FLASH_Program_DoubleWord+0x94>)
 800574e:	f7fd fb12 	bl	8002d76 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005752:	4b18      	ldr	r3, [pc, #96]	; (80057b4 <FLASH_Program_DoubleWord+0x98>)
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <FLASH_Program_DoubleWord+0x98>)
 8005758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800575e:	4b15      	ldr	r3, [pc, #84]	; (80057b4 <FLASH_Program_DoubleWord+0x98>)
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	4a14      	ldr	r2, [pc, #80]	; (80057b4 <FLASH_Program_DoubleWord+0x98>)
 8005764:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005768:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800576a:	4b12      	ldr	r3, [pc, #72]	; (80057b4 <FLASH_Program_DoubleWord+0x98>)
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	4a11      	ldr	r2, [pc, #68]	; (80057b4 <FLASH_Program_DoubleWord+0x98>)
 8005770:	f043 0301 	orr.w	r3, r3, #1
 8005774:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800577c:	f3bf 8f6f 	isb	sy
}
 8005780:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005782:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	000a      	movs	r2, r1
 8005790:	2300      	movs	r3, #0
 8005792:	68f9      	ldr	r1, [r7, #12]
 8005794:	3104      	adds	r1, #4
 8005796:	4613      	mov	r3, r2
 8005798:	600b      	str	r3, [r1, #0]
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	0807ffff 	.word	0x0807ffff
 80057a8:	1fff77ff 	.word	0x1fff77ff
 80057ac:	1fff7a0f 	.word	0x1fff7a0f
 80057b0:	08010938 	.word	0x08010938
 80057b4:	40023c00 	.word	0x40023c00

080057b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057c8:	d303      	bcc.n	80057d2 <FLASH_Program_Word+0x1a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a14      	ldr	r2, [pc, #80]	; (8005820 <FLASH_Program_Word+0x68>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d90c      	bls.n	80057ec <FLASH_Program_Word+0x34>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a13      	ldr	r2, [pc, #76]	; (8005824 <FLASH_Program_Word+0x6c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d903      	bls.n	80057e2 <FLASH_Program_Word+0x2a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a12      	ldr	r2, [pc, #72]	; (8005828 <FLASH_Program_Word+0x70>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d904      	bls.n	80057ec <FLASH_Program_Word+0x34>
 80057e2:	f240 2187 	movw	r1, #647	; 0x287
 80057e6:	4811      	ldr	r0, [pc, #68]	; (800582c <FLASH_Program_Word+0x74>)
 80057e8:	f7fd fac5 	bl	8002d76 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80057ec:	4b10      	ldr	r3, [pc, #64]	; (8005830 <FLASH_Program_Word+0x78>)
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	4a0f      	ldr	r2, [pc, #60]	; (8005830 <FLASH_Program_Word+0x78>)
 80057f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80057f8:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <FLASH_Program_Word+0x78>)
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	4a0c      	ldr	r2, [pc, #48]	; (8005830 <FLASH_Program_Word+0x78>)
 80057fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005802:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <FLASH_Program_Word+0x78>)
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	4a09      	ldr	r2, [pc, #36]	; (8005830 <FLASH_Program_Word+0x78>)
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	601a      	str	r2, [r3, #0]
}
 8005816:	bf00      	nop
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	0807ffff 	.word	0x0807ffff
 8005824:	1fff77ff 	.word	0x1fff77ff
 8005828:	1fff7a0f 	.word	0x1fff7a0f
 800582c:	08010938 	.word	0x08010938
 8005830:	40023c00 	.word	0x40023c00

08005834 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005846:	d303      	bcc.n	8005850 <FLASH_Program_HalfWord+0x1c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a14      	ldr	r2, [pc, #80]	; (800589c <FLASH_Program_HalfWord+0x68>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d90c      	bls.n	800586a <FLASH_Program_HalfWord+0x36>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a13      	ldr	r2, [pc, #76]	; (80058a0 <FLASH_Program_HalfWord+0x6c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d903      	bls.n	8005860 <FLASH_Program_HalfWord+0x2c>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a12      	ldr	r2, [pc, #72]	; (80058a4 <FLASH_Program_HalfWord+0x70>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d904      	bls.n	800586a <FLASH_Program_HalfWord+0x36>
 8005860:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8005864:	4810      	ldr	r0, [pc, #64]	; (80058a8 <FLASH_Program_HalfWord+0x74>)
 8005866:	f7fd fa86 	bl	8002d76 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800586a:	4b10      	ldr	r3, [pc, #64]	; (80058ac <FLASH_Program_HalfWord+0x78>)
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	4a0f      	ldr	r2, [pc, #60]	; (80058ac <FLASH_Program_HalfWord+0x78>)
 8005870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005874:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005876:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <FLASH_Program_HalfWord+0x78>)
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	4a0c      	ldr	r2, [pc, #48]	; (80058ac <FLASH_Program_HalfWord+0x78>)
 800587c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005880:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005882:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <FLASH_Program_HalfWord+0x78>)
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	4a09      	ldr	r2, [pc, #36]	; (80058ac <FLASH_Program_HalfWord+0x78>)
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	887a      	ldrh	r2, [r7, #2]
 8005892:	801a      	strh	r2, [r3, #0]
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	0807ffff 	.word	0x0807ffff
 80058a0:	1fff77ff 	.word	0x1fff77ff
 80058a4:	1fff7a0f 	.word	0x1fff7a0f
 80058a8:	08010938 	.word	0x08010938
 80058ac:	40023c00 	.word	0x40023c00

080058b0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058c2:	d303      	bcc.n	80058cc <FLASH_Program_Byte+0x1c>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a13      	ldr	r2, [pc, #76]	; (8005914 <FLASH_Program_Byte+0x64>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d90c      	bls.n	80058e6 <FLASH_Program_Byte+0x36>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a12      	ldr	r2, [pc, #72]	; (8005918 <FLASH_Program_Byte+0x68>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d903      	bls.n	80058dc <FLASH_Program_Byte+0x2c>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a11      	ldr	r2, [pc, #68]	; (800591c <FLASH_Program_Byte+0x6c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d904      	bls.n	80058e6 <FLASH_Program_Byte+0x36>
 80058dc:	f240 21b9 	movw	r1, #697	; 0x2b9
 80058e0:	480f      	ldr	r0, [pc, #60]	; (8005920 <FLASH_Program_Byte+0x70>)
 80058e2:	f7fd fa48 	bl	8002d76 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80058e6:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <FLASH_Program_Byte+0x74>)
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	4a0e      	ldr	r2, [pc, #56]	; (8005924 <FLASH_Program_Byte+0x74>)
 80058ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80058f2:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <FLASH_Program_Byte+0x74>)
 80058f4:	4a0b      	ldr	r2, [pc, #44]	; (8005924 <FLASH_Program_Byte+0x74>)
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80058fa:	4b0a      	ldr	r3, [pc, #40]	; (8005924 <FLASH_Program_Byte+0x74>)
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	4a09      	ldr	r2, [pc, #36]	; (8005924 <FLASH_Program_Byte+0x74>)
 8005900:	f043 0301 	orr.w	r3, r3, #1
 8005904:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	78fa      	ldrb	r2, [r7, #3]
 800590a:	701a      	strb	r2, [r3, #0]
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	0807ffff 	.word	0x0807ffff
 8005918:	1fff77ff 	.word	0x1fff77ff
 800591c:	1fff7a0f 	.word	0x1fff7a0f
 8005920:	08010938 	.word	0x08010938
 8005924:	40023c00 	.word	0x40023c00

08005928 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800592c:	4b2f      	ldr	r3, [pc, #188]	; (80059ec <FLASH_SetErrorCode+0xc4>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b00      	cmp	r3, #0
 8005936:	d008      	beq.n	800594a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005938:	4b2d      	ldr	r3, [pc, #180]	; (80059f0 <FLASH_SetErrorCode+0xc8>)
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	f043 0310 	orr.w	r3, r3, #16
 8005940:	4a2b      	ldr	r2, [pc, #172]	; (80059f0 <FLASH_SetErrorCode+0xc8>)
 8005942:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005944:	4b29      	ldr	r3, [pc, #164]	; (80059ec <FLASH_SetErrorCode+0xc4>)
 8005946:	2210      	movs	r2, #16
 8005948:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800594a:	4b28      	ldr	r3, [pc, #160]	; (80059ec <FLASH_SetErrorCode+0xc4>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005956:	4b26      	ldr	r3, [pc, #152]	; (80059f0 <FLASH_SetErrorCode+0xc8>)
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f043 0308 	orr.w	r3, r3, #8
 800595e:	4a24      	ldr	r2, [pc, #144]	; (80059f0 <FLASH_SetErrorCode+0xc8>)
 8005960:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005962:	4b22      	ldr	r3, [pc, #136]	; (80059ec <FLASH_SetErrorCode+0xc4>)
 8005964:	2220      	movs	r2, #32
 8005966:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005968:	4b20      	ldr	r3, [pc, #128]	; (80059ec <FLASH_SetErrorCode+0xc4>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005970:	2b00      	cmp	r3, #0
 8005972:	d008      	beq.n	8005986 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005974:	4b1e      	ldr	r3, [pc, #120]	; (80059f0 <FLASH_SetErrorCode+0xc8>)
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	f043 0304 	orr.w	r3, r3, #4
 800597c:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <FLASH_SetErrorCode+0xc8>)
 800597e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005980:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <FLASH_SetErrorCode+0xc4>)
 8005982:	2240      	movs	r2, #64	; 0x40
 8005984:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005986:	4b19      	ldr	r3, [pc, #100]	; (80059ec <FLASH_SetErrorCode+0xc4>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598e:	2b00      	cmp	r3, #0
 8005990:	d008      	beq.n	80059a4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005992:	4b17      	ldr	r3, [pc, #92]	; (80059f0 <FLASH_SetErrorCode+0xc8>)
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f043 0302 	orr.w	r3, r3, #2
 800599a:	4a15      	ldr	r2, [pc, #84]	; (80059f0 <FLASH_SetErrorCode+0xc8>)
 800599c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800599e:	4b13      	ldr	r3, [pc, #76]	; (80059ec <FLASH_SetErrorCode+0xc4>)
 80059a0:	2280      	movs	r2, #128	; 0x80
 80059a2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80059a4:	4b11      	ldr	r3, [pc, #68]	; (80059ec <FLASH_SetErrorCode+0xc4>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d009      	beq.n	80059c4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80059b0:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <FLASH_SetErrorCode+0xc8>)
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	4a0d      	ldr	r2, [pc, #52]	; (80059f0 <FLASH_SetErrorCode+0xc8>)
 80059ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80059bc:	4b0b      	ldr	r3, [pc, #44]	; (80059ec <FLASH_SetErrorCode+0xc4>)
 80059be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80059c4:	4b09      	ldr	r3, [pc, #36]	; (80059ec <FLASH_SetErrorCode+0xc4>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80059d0:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <FLASH_SetErrorCode+0xc8>)
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f043 0320 	orr.w	r3, r3, #32
 80059d8:	4a05      	ldr	r2, [pc, #20]	; (80059f0 <FLASH_SetErrorCode+0xc8>)
 80059da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80059dc:	4b03      	ldr	r3, [pc, #12]	; (80059ec <FLASH_SetErrorCode+0xc4>)
 80059de:	2202      	movs	r2, #2
 80059e0:	60da      	str	r2, [r3, #12]
  }
}
 80059e2:	bf00      	nop
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	40023c00 	.word	0x40023c00
 80059f0:	20000834 	.word	0x20000834

080059f4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005a06:	4b40      	ldr	r3, [pc, #256]	; (8005b08 <HAL_FLASHEx_Erase+0x114>)
 8005a08:	7e1b      	ldrb	r3, [r3, #24]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_FLASHEx_Erase+0x1e>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e076      	b.n	8005b00 <HAL_FLASHEx_Erase+0x10c>
 8005a12:	4b3d      	ldr	r3, [pc, #244]	; (8005b08 <HAL_FLASHEx_Erase+0x114>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <HAL_FLASHEx_Erase+0x3c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d003      	beq.n	8005a30 <HAL_FLASHEx_Erase+0x3c>
 8005a28:	21a9      	movs	r1, #169	; 0xa9
 8005a2a:	4838      	ldr	r0, [pc, #224]	; (8005b0c <HAL_FLASHEx_Erase+0x118>)
 8005a2c:	f7fd f9a3 	bl	8002d76 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a34:	f7ff fe32 	bl	800569c <FLASH_WaitForLastOperation>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d15a      	bne.n	8005af8 <HAL_FLASHEx_Erase+0x104>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	f04f 32ff 	mov.w	r2, #4294967295
 8005a48:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d115      	bne.n	8005a7e <HAL_FLASHEx_Erase+0x8a>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4610      	mov	r0, r2
 8005a60:	f000 f858 	bl	8005b14 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a68:	f7ff fe18 	bl	800569c <FLASH_WaitForLastOperation>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005a70:	4b27      	ldr	r3, [pc, #156]	; (8005b10 <HAL_FLASHEx_Erase+0x11c>)
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	4a26      	ldr	r2, [pc, #152]	; (8005b10 <HAL_FLASHEx_Erase+0x11c>)
 8005a76:	f023 0304 	bic.w	r3, r3, #4
 8005a7a:	6113      	str	r3, [r2, #16]
 8005a7c:	e03a      	b.n	8005af4 <HAL_FLASHEx_Erase+0x100>
    }
    else
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	4413      	add	r3, r2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d006      	beq.n	8005a9a <HAL_FLASHEx_Erase+0xa6>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	4413      	add	r3, r2
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d903      	bls.n	8005aa2 <HAL_FLASHEx_Erase+0xae>
 8005a9a:	21c1      	movs	r1, #193	; 0xc1
 8005a9c:	481b      	ldr	r0, [pc, #108]	; (8005b0c <HAL_FLASHEx_Erase+0x118>)
 8005a9e:	f7fd f96a 	bl	8002d76 <assert_failed>

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	60bb      	str	r3, [r7, #8]
 8005aa8:	e01c      	b.n	8005ae4 <HAL_FLASHEx_Erase+0xf0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	68b8      	ldr	r0, [r7, #8]
 8005ab4:	f000 f86a 	bl	8005b8c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ab8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005abc:	f7ff fdee 	bl	800569c <FLASH_WaitForLastOperation>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005ac4:	4b12      	ldr	r3, [pc, #72]	; (8005b10 <HAL_FLASHEx_Erase+0x11c>)
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <HAL_FLASHEx_Erase+0x11c>)
 8005aca:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005ace:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_FLASHEx_Erase+0xea>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	601a      	str	r2, [r3, #0]
          break;
 8005adc:	e00a      	b.n	8005af4 <HAL_FLASHEx_Erase+0x100>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60bb      	str	r3, [r7, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	4413      	add	r3, r2
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d3da      	bcc.n	8005aaa <HAL_FLASHEx_Erase+0xb6>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005af4:	f000 f8c0 	bl	8005c78 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005af8:	4b03      	ldr	r3, [pc, #12]	; (8005b08 <HAL_FLASHEx_Erase+0x114>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	761a      	strb	r2, [r3, #24]

  return status;
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20000834 	.word	0x20000834
 8005b0c:	08010974 	.word	0x08010974
 8005b10:	40023c00 	.word	0x40023c00

08005b14 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	6039      	str	r1, [r7, #0]
 8005b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <FLASH_MassErase+0x2e>
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d00a      	beq.n	8005b42 <FLASH_MassErase+0x2e>
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d007      	beq.n	8005b42 <FLASH_MassErase+0x2e>
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d004      	beq.n	8005b42 <FLASH_MassErase+0x2e>
 8005b38:	f240 31ba 	movw	r1, #954	; 0x3ba
 8005b3c:	4811      	ldr	r0, [pc, #68]	; (8005b84 <FLASH_MassErase+0x70>)
 8005b3e:	f7fd f91a 	bl	8002d76 <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d004      	beq.n	8005b52 <FLASH_MassErase+0x3e>
 8005b48:	f240 31bb 	movw	r1, #955	; 0x3bb
 8005b4c:	480d      	ldr	r0, [pc, #52]	; (8005b84 <FLASH_MassErase+0x70>)
 8005b4e:	f7fd f912 	bl	8002d76 <assert_failed>

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b52:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <FLASH_MassErase+0x74>)
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	4a0c      	ldr	r2, [pc, #48]	; (8005b88 <FLASH_MassErase+0x74>)
 8005b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005b5e:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <FLASH_MassErase+0x74>)
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	4a09      	ldr	r2, [pc, #36]	; (8005b88 <FLASH_MassErase+0x74>)
 8005b64:	f043 0304 	orr.w	r3, r3, #4
 8005b68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005b6a:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <FLASH_MassErase+0x74>)
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	79fb      	ldrb	r3, [r7, #7]
 8005b70:	021b      	lsls	r3, r3, #8
 8005b72:	4313      	orrs	r3, r2
 8005b74:	4a04      	ldr	r2, [pc, #16]	; (8005b88 <FLASH_MassErase+0x74>)
 8005b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7a:	6113      	str	r3, [r2, #16]
}
 8005b7c:	bf00      	nop
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	08010974 	.word	0x08010974
 8005b88:	40023c00 	.word	0x40023c00

08005b8c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d019      	beq.n	8005bd6 <FLASH_Erase_Sector+0x4a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d016      	beq.n	8005bd6 <FLASH_Erase_Sector+0x4a>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d013      	beq.n	8005bd6 <FLASH_Erase_Sector+0x4a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d010      	beq.n	8005bd6 <FLASH_Erase_Sector+0x4a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d00d      	beq.n	8005bd6 <FLASH_Erase_Sector+0x4a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b05      	cmp	r3, #5
 8005bbe:	d00a      	beq.n	8005bd6 <FLASH_Erase_Sector+0x4a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b06      	cmp	r3, #6
 8005bc4:	d007      	beq.n	8005bd6 <FLASH_Erase_Sector+0x4a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b07      	cmp	r3, #7
 8005bca:	d004      	beq.n	8005bd6 <FLASH_Erase_Sector+0x4a>
 8005bcc:	f240 31d9 	movw	r1, #985	; 0x3d9
 8005bd0:	4827      	ldr	r0, [pc, #156]	; (8005c70 <FLASH_Erase_Sector+0xe4>)
 8005bd2:	f7fd f8d0 	bl	8002d76 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 8005bd6:	78fb      	ldrb	r3, [r7, #3]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00d      	beq.n	8005bf8 <FLASH_Erase_Sector+0x6c>
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d00a      	beq.n	8005bf8 <FLASH_Erase_Sector+0x6c>
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d007      	beq.n	8005bf8 <FLASH_Erase_Sector+0x6c>
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d004      	beq.n	8005bf8 <FLASH_Erase_Sector+0x6c>
 8005bee:	f240 31da 	movw	r1, #986	; 0x3da
 8005bf2:	481f      	ldr	r0, [pc, #124]	; (8005c70 <FLASH_Erase_Sector+0xe4>)
 8005bf4:	f7fd f8bf 	bl	8002d76 <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d102      	bne.n	8005c04 <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
 8005c02:	e010      	b.n	8005c26 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d103      	bne.n	8005c12 <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	e009      	b.n	8005c26 <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d103      	bne.n	8005c20 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e002      	b.n	8005c26 <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005c20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005c24:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c26:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <FLASH_Erase_Sector+0xe8>)
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <FLASH_Erase_Sector+0xe8>)
 8005c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005c32:	4b10      	ldr	r3, [pc, #64]	; (8005c74 <FLASH_Erase_Sector+0xe8>)
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	490f      	ldr	r1, [pc, #60]	; (8005c74 <FLASH_Erase_Sector+0xe8>)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <FLASH_Erase_Sector+0xe8>)
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	4a0c      	ldr	r2, [pc, #48]	; (8005c74 <FLASH_Erase_Sector+0xe8>)
 8005c44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005c48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <FLASH_Erase_Sector+0xe8>)
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	4313      	orrs	r3, r2
 8005c54:	4a07      	ldr	r2, [pc, #28]	; (8005c74 <FLASH_Erase_Sector+0xe8>)
 8005c56:	f043 0302 	orr.w	r3, r3, #2
 8005c5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <FLASH_Erase_Sector+0xe8>)
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	4a04      	ldr	r2, [pc, #16]	; (8005c74 <FLASH_Erase_Sector+0xe8>)
 8005c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c66:	6113      	str	r3, [r2, #16]
}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	08010974 	.word	0x08010974
 8005c74:	40023c00 	.word	0x40023c00

08005c78 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005c7c:	4b20      	ldr	r3, [pc, #128]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d017      	beq.n	8005cb8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005c88:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005c8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c92:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005c94:	4b1a      	ldr	r3, [pc, #104]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a19      	ldr	r2, [pc, #100]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005c9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	4b17      	ldr	r3, [pc, #92]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a16      	ldr	r2, [pc, #88]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005ca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005caa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005cac:	4b14      	ldr	r3, [pc, #80]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a13      	ldr	r2, [pc, #76]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cb6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005cb8:	4b11      	ldr	r3, [pc, #68]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d017      	beq.n	8005cf4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a0d      	ldr	r2, [pc, #52]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005cca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005cd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a07      	ldr	r2, [pc, #28]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ce6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a04      	ldr	r2, [pc, #16]	; (8005d00 <FLASH_FlushCaches+0x88>)
 8005cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cf2:	6013      	str	r3, [r2, #0]
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40023c00 	.word	0x40023c00

08005d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a33      	ldr	r2, [pc, #204]	; (8005dec <HAL_GPIO_Init+0xe8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d017      	beq.n	8005d52 <HAL_GPIO_Init+0x4e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a32      	ldr	r2, [pc, #200]	; (8005df0 <HAL_GPIO_Init+0xec>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <HAL_GPIO_Init+0x4e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a31      	ldr	r2, [pc, #196]	; (8005df4 <HAL_GPIO_Init+0xf0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00f      	beq.n	8005d52 <HAL_GPIO_Init+0x4e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a30      	ldr	r2, [pc, #192]	; (8005df8 <HAL_GPIO_Init+0xf4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00b      	beq.n	8005d52 <HAL_GPIO_Init+0x4e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2f      	ldr	r2, [pc, #188]	; (8005dfc <HAL_GPIO_Init+0xf8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d007      	beq.n	8005d52 <HAL_GPIO_Init+0x4e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a2e      	ldr	r2, [pc, #184]	; (8005e00 <HAL_GPIO_Init+0xfc>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d003      	beq.n	8005d52 <HAL_GPIO_Init+0x4e>
 8005d4a:	21ac      	movs	r1, #172	; 0xac
 8005d4c:	482d      	ldr	r0, [pc, #180]	; (8005e04 <HAL_GPIO_Init+0x100>)
 8005d4e:	f7fd f812 	bl	8002d76 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_GPIO_Init+0x64>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <HAL_GPIO_Init+0x6c>
 8005d68:	21ad      	movs	r1, #173	; 0xad
 8005d6a:	4826      	ldr	r0, [pc, #152]	; (8005e04 <HAL_GPIO_Init+0x100>)
 8005d6c:	f7fd f803 	bl	8002d76 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d035      	beq.n	8005de4 <HAL_GPIO_Init+0xe0>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d031      	beq.n	8005de4 <HAL_GPIO_Init+0xe0>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b11      	cmp	r3, #17
 8005d86:	d02d      	beq.n	8005de4 <HAL_GPIO_Init+0xe0>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d029      	beq.n	8005de4 <HAL_GPIO_Init+0xe0>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b12      	cmp	r3, #18
 8005d96:	d025      	beq.n	8005de4 <HAL_GPIO_Init+0xe0>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005da0:	d020      	beq.n	8005de4 <HAL_GPIO_Init+0xe0>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005daa:	d01b      	beq.n	8005de4 <HAL_GPIO_Init+0xe0>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005db4:	d016      	beq.n	8005de4 <HAL_GPIO_Init+0xe0>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005dbe:	d011      	beq.n	8005de4 <HAL_GPIO_Init+0xe0>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005dc8:	d00c      	beq.n	8005de4 <HAL_GPIO_Init+0xe0>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005dd2:	d007      	beq.n	8005de4 <HAL_GPIO_Init+0xe0>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d003      	beq.n	8005de4 <HAL_GPIO_Init+0xe0>
 8005ddc:	21ae      	movs	r1, #174	; 0xae
 8005dde:	4809      	ldr	r0, [pc, #36]	; (8005e04 <HAL_GPIO_Init+0x100>)
 8005de0:	f7fc ffc9 	bl	8002d76 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005de4:	2300      	movs	r3, #0
 8005de6:	61fb      	str	r3, [r7, #28]
 8005de8:	e20c      	b.n	8006204 <HAL_GPIO_Init+0x500>
 8005dea:	bf00      	nop
 8005dec:	40020000 	.word	0x40020000
 8005df0:	40020400 	.word	0x40020400
 8005df4:	40020800 	.word	0x40020800
 8005df8:	40020c00 	.word	0x40020c00
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	40021c00 	.word	0x40021c00
 8005e04:	080109b4 	.word	0x080109b4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e08:	2201      	movs	r2, #1
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	f040 81ec 	bne.w	80061fe <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d005      	beq.n	8005e3e <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d144      	bne.n	8005ec8 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00f      	beq.n	8005e66 <HAL_GPIO_Init+0x162>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d00b      	beq.n	8005e66 <HAL_GPIO_Init+0x162>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d007      	beq.n	8005e66 <HAL_GPIO_Init+0x162>
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d003      	beq.n	8005e66 <HAL_GPIO_Init+0x162>
 8005e5e:	21c0      	movs	r1, #192	; 0xc0
 8005e60:	4884      	ldr	r0, [pc, #528]	; (8006074 <HAL_GPIO_Init+0x370>)
 8005e62:	f7fc ff88 	bl	8002d76 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	2203      	movs	r2, #3
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	43db      	mvns	r3, r3
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	091b      	lsrs	r3, r3, #4
 8005eb2:	f003 0201 	and.w	r2, r3, #1
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d027      	beq.n	8005f24 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00b      	beq.n	8005ef4 <HAL_GPIO_Init+0x1f0>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d007      	beq.n	8005ef4 <HAL_GPIO_Init+0x1f0>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d003      	beq.n	8005ef4 <HAL_GPIO_Init+0x1f0>
 8005eec:	21d1      	movs	r1, #209	; 0xd1
 8005eee:	4861      	ldr	r0, [pc, #388]	; (8006074 <HAL_GPIO_Init+0x370>)
 8005ef0:	f7fc ff41 	bl	8002d76 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	2203      	movs	r2, #3
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	43db      	mvns	r3, r3
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	689a      	ldr	r2, [r3, #8]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	f040 80a3 	bne.w	8006078 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d077      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b09      	cmp	r3, #9
 8005f40:	d073      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d06f      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d06b      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d067      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d063      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d05f      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d05b      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d057      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d053      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d04f      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d04b      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d047      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d043      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b05      	cmp	r3, #5
 8005fa8:	d03f      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	d03b      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	d037      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	2b06      	cmp	r3, #6
 8005fc0:	d033      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b06      	cmp	r3, #6
 8005fc8:	d02f      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b05      	cmp	r3, #5
 8005fd0:	d02b      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	2b06      	cmp	r3, #6
 8005fd8:	d027      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b07      	cmp	r3, #7
 8005fe0:	d023      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b07      	cmp	r3, #7
 8005fe8:	d01f      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b07      	cmp	r3, #7
 8005ff0:	d01b      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d017      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b0a      	cmp	r3, #10
 8006000:	d013      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b09      	cmp	r3, #9
 8006008:	d00f      	beq.n	800602a <HAL_GPIO_Init+0x326>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b09      	cmp	r3, #9
 8006010:	d00b      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	2b0c      	cmp	r3, #12
 8006018:	d007      	beq.n	800602a <HAL_GPIO_Init+0x326>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b0f      	cmp	r3, #15
 8006020:	d003      	beq.n	800602a <HAL_GPIO_Init+0x326>
 8006022:	21de      	movs	r1, #222	; 0xde
 8006024:	4813      	ldr	r0, [pc, #76]	; (8006074 <HAL_GPIO_Init+0x370>)
 8006026:	f7fc fea6 	bl	8002d76 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	08da      	lsrs	r2, r3, #3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3208      	adds	r2, #8
 8006032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	220f      	movs	r2, #15
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	43db      	mvns	r3, r3
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	4013      	ands	r3, r2
 800604c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	4313      	orrs	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	08da      	lsrs	r2, r3, #3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3208      	adds	r2, #8
 800606c:	69b9      	ldr	r1, [r7, #24]
 800606e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006072:	e001      	b.n	8006078 <HAL_GPIO_Init+0x374>
 8006074:	080109b4 	.word	0x080109b4
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	2203      	movs	r2, #3
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	43db      	mvns	r3, r3
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	4013      	ands	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f003 0203 	and.w	r2, r3, #3
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 80a2 	beq.w	80061fe <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	4b56      	ldr	r3, [pc, #344]	; (8006218 <HAL_GPIO_Init+0x514>)
 80060c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c2:	4a55      	ldr	r2, [pc, #340]	; (8006218 <HAL_GPIO_Init+0x514>)
 80060c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060c8:	6453      	str	r3, [r2, #68]	; 0x44
 80060ca:	4b53      	ldr	r3, [pc, #332]	; (8006218 <HAL_GPIO_Init+0x514>)
 80060cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060d6:	4a51      	ldr	r2, [pc, #324]	; (800621c <HAL_GPIO_Init+0x518>)
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	089b      	lsrs	r3, r3, #2
 80060dc:	3302      	adds	r3, #2
 80060de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	220f      	movs	r2, #15
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	43db      	mvns	r3, r3
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4013      	ands	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a48      	ldr	r2, [pc, #288]	; (8006220 <HAL_GPIO_Init+0x51c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d019      	beq.n	8006136 <HAL_GPIO_Init+0x432>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a47      	ldr	r2, [pc, #284]	; (8006224 <HAL_GPIO_Init+0x520>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d013      	beq.n	8006132 <HAL_GPIO_Init+0x42e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a46      	ldr	r2, [pc, #280]	; (8006228 <HAL_GPIO_Init+0x524>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00d      	beq.n	800612e <HAL_GPIO_Init+0x42a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a45      	ldr	r2, [pc, #276]	; (800622c <HAL_GPIO_Init+0x528>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d007      	beq.n	800612a <HAL_GPIO_Init+0x426>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a44      	ldr	r2, [pc, #272]	; (8006230 <HAL_GPIO_Init+0x52c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d101      	bne.n	8006126 <HAL_GPIO_Init+0x422>
 8006122:	2304      	movs	r3, #4
 8006124:	e008      	b.n	8006138 <HAL_GPIO_Init+0x434>
 8006126:	2307      	movs	r3, #7
 8006128:	e006      	b.n	8006138 <HAL_GPIO_Init+0x434>
 800612a:	2303      	movs	r3, #3
 800612c:	e004      	b.n	8006138 <HAL_GPIO_Init+0x434>
 800612e:	2302      	movs	r3, #2
 8006130:	e002      	b.n	8006138 <HAL_GPIO_Init+0x434>
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <HAL_GPIO_Init+0x434>
 8006136:	2300      	movs	r3, #0
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	f002 0203 	and.w	r2, r2, #3
 800613e:	0092      	lsls	r2, r2, #2
 8006140:	4093      	lsls	r3, r2
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	4313      	orrs	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006148:	4934      	ldr	r1, [pc, #208]	; (800621c <HAL_GPIO_Init+0x518>)
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	089b      	lsrs	r3, r3, #2
 800614e:	3302      	adds	r3, #2
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006156:	4b37      	ldr	r3, [pc, #220]	; (8006234 <HAL_GPIO_Init+0x530>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	43db      	mvns	r3, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4013      	ands	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800617a:	4a2e      	ldr	r2, [pc, #184]	; (8006234 <HAL_GPIO_Init+0x530>)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006180:	4b2c      	ldr	r3, [pc, #176]	; (8006234 <HAL_GPIO_Init+0x530>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	43db      	mvns	r3, r3
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	4013      	ands	r3, r2
 800618e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061a4:	4a23      	ldr	r2, [pc, #140]	; (8006234 <HAL_GPIO_Init+0x530>)
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061aa:	4b22      	ldr	r3, [pc, #136]	; (8006234 <HAL_GPIO_Init+0x530>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	43db      	mvns	r3, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4013      	ands	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061ce:	4a19      	ldr	r2, [pc, #100]	; (8006234 <HAL_GPIO_Init+0x530>)
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061d4:	4b17      	ldr	r3, [pc, #92]	; (8006234 <HAL_GPIO_Init+0x530>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	43db      	mvns	r3, r3
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	4013      	ands	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061f8:	4a0e      	ldr	r2, [pc, #56]	; (8006234 <HAL_GPIO_Init+0x530>)
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	3301      	adds	r3, #1
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2b0f      	cmp	r3, #15
 8006208:	f67f adfe 	bls.w	8005e08 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40023800 	.word	0x40023800
 800621c:	40013800 	.word	0x40013800
 8006220:	40020000 	.word	0x40020000
 8006224:	40020400 	.word	0x40020400
 8006228:	40020800 	.word	0x40020800
 800622c:	40020c00 	.word	0x40020c00
 8006230:	40021000 	.word	0x40021000
 8006234:	40013c00 	.word	0x40013c00

08006238 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006242:	2300      	movs	r3, #0
 8006244:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800624a:	2300      	movs	r3, #0
 800624c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a71      	ldr	r2, [pc, #452]	; (8006418 <HAL_GPIO_DeInit+0x1e0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d018      	beq.n	8006288 <HAL_GPIO_DeInit+0x50>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a70      	ldr	r2, [pc, #448]	; (800641c <HAL_GPIO_DeInit+0x1e4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d014      	beq.n	8006288 <HAL_GPIO_DeInit+0x50>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a6f      	ldr	r2, [pc, #444]	; (8006420 <HAL_GPIO_DeInit+0x1e8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d010      	beq.n	8006288 <HAL_GPIO_DeInit+0x50>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a6e      	ldr	r2, [pc, #440]	; (8006424 <HAL_GPIO_DeInit+0x1ec>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00c      	beq.n	8006288 <HAL_GPIO_DeInit+0x50>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a6d      	ldr	r2, [pc, #436]	; (8006428 <HAL_GPIO_DeInit+0x1f0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d008      	beq.n	8006288 <HAL_GPIO_DeInit+0x50>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a6c      	ldr	r2, [pc, #432]	; (800642c <HAL_GPIO_DeInit+0x1f4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <HAL_GPIO_DeInit+0x50>
 800627e:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8006282:	486b      	ldr	r0, [pc, #428]	; (8006430 <HAL_GPIO_DeInit+0x1f8>)
 8006284:	f7fc fd77 	bl	8002d76 <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	e0bb      	b.n	8006406 <HAL_GPIO_DeInit+0x1ce>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800628e:	2201      	movs	r2, #1
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	fa02 f303 	lsl.w	r3, r2, r3
 8006296:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	4013      	ands	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	f040 80ab 	bne.w	8006400 <HAL_GPIO_DeInit+0x1c8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80062aa:	4a62      	ldr	r2, [pc, #392]	; (8006434 <HAL_GPIO_DeInit+0x1fc>)
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	089b      	lsrs	r3, r3, #2
 80062b0:	3302      	adds	r3, #2
 80062b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062b6:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	220f      	movs	r2, #15
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	4013      	ands	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a52      	ldr	r2, [pc, #328]	; (8006418 <HAL_GPIO_DeInit+0x1e0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d019      	beq.n	8006308 <HAL_GPIO_DeInit+0xd0>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a51      	ldr	r2, [pc, #324]	; (800641c <HAL_GPIO_DeInit+0x1e4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d013      	beq.n	8006304 <HAL_GPIO_DeInit+0xcc>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a50      	ldr	r2, [pc, #320]	; (8006420 <HAL_GPIO_DeInit+0x1e8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00d      	beq.n	8006300 <HAL_GPIO_DeInit+0xc8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a4f      	ldr	r2, [pc, #316]	; (8006424 <HAL_GPIO_DeInit+0x1ec>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d007      	beq.n	80062fc <HAL_GPIO_DeInit+0xc4>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a4e      	ldr	r2, [pc, #312]	; (8006428 <HAL_GPIO_DeInit+0x1f0>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d101      	bne.n	80062f8 <HAL_GPIO_DeInit+0xc0>
 80062f4:	2304      	movs	r3, #4
 80062f6:	e008      	b.n	800630a <HAL_GPIO_DeInit+0xd2>
 80062f8:	2307      	movs	r3, #7
 80062fa:	e006      	b.n	800630a <HAL_GPIO_DeInit+0xd2>
 80062fc:	2303      	movs	r3, #3
 80062fe:	e004      	b.n	800630a <HAL_GPIO_DeInit+0xd2>
 8006300:	2302      	movs	r3, #2
 8006302:	e002      	b.n	800630a <HAL_GPIO_DeInit+0xd2>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <HAL_GPIO_DeInit+0xd2>
 8006308:	2300      	movs	r3, #0
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	f002 0203 	and.w	r2, r2, #3
 8006310:	0092      	lsls	r2, r2, #2
 8006312:	4093      	lsls	r3, r2
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	429a      	cmp	r2, r3
 8006318:	d132      	bne.n	8006380 <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800631a:	4b47      	ldr	r3, [pc, #284]	; (8006438 <HAL_GPIO_DeInit+0x200>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	43db      	mvns	r3, r3
 8006322:	4945      	ldr	r1, [pc, #276]	; (8006438 <HAL_GPIO_DeInit+0x200>)
 8006324:	4013      	ands	r3, r2
 8006326:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006328:	4b43      	ldr	r3, [pc, #268]	; (8006438 <HAL_GPIO_DeInit+0x200>)
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	43db      	mvns	r3, r3
 8006330:	4941      	ldr	r1, [pc, #260]	; (8006438 <HAL_GPIO_DeInit+0x200>)
 8006332:	4013      	ands	r3, r2
 8006334:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006336:	4b40      	ldr	r3, [pc, #256]	; (8006438 <HAL_GPIO_DeInit+0x200>)
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	43db      	mvns	r3, r3
 800633e:	493e      	ldr	r1, [pc, #248]	; (8006438 <HAL_GPIO_DeInit+0x200>)
 8006340:	4013      	ands	r3, r2
 8006342:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006344:	4b3c      	ldr	r3, [pc, #240]	; (8006438 <HAL_GPIO_DeInit+0x200>)
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	43db      	mvns	r3, r3
 800634c:	493a      	ldr	r1, [pc, #232]	; (8006438 <HAL_GPIO_DeInit+0x200>)
 800634e:	4013      	ands	r3, r2
 8006350:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	220f      	movs	r2, #15
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006362:	4a34      	ldr	r2, [pc, #208]	; (8006434 <HAL_GPIO_DeInit+0x1fc>)
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	089b      	lsrs	r3, r3, #2
 8006368:	3302      	adds	r3, #2
 800636a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	43da      	mvns	r2, r3
 8006372:	4830      	ldr	r0, [pc, #192]	; (8006434 <HAL_GPIO_DeInit+0x1fc>)
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	089b      	lsrs	r3, r3, #2
 8006378:	400a      	ands	r2, r1
 800637a:	3302      	adds	r3, #2
 800637c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	2103      	movs	r1, #3
 800638a:	fa01 f303 	lsl.w	r3, r1, r3
 800638e:	43db      	mvns	r3, r3
 8006390:	401a      	ands	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	08da      	lsrs	r2, r3, #3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3208      	adds	r2, #8
 800639e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	220f      	movs	r2, #15
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	43db      	mvns	r3, r3
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	08d2      	lsrs	r2, r2, #3
 80063b6:	4019      	ands	r1, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3208      	adds	r2, #8
 80063bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68da      	ldr	r2, [r3, #12]
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	2103      	movs	r1, #3
 80063ca:	fa01 f303 	lsl.w	r3, r1, r3
 80063ce:	43db      	mvns	r3, r3
 80063d0:	401a      	ands	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685a      	ldr	r2, [r3, #4]
 80063da:	2101      	movs	r1, #1
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	fa01 f303 	lsl.w	r3, r1, r3
 80063e2:	43db      	mvns	r3, r3
 80063e4:	401a      	ands	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689a      	ldr	r2, [r3, #8]
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	2103      	movs	r1, #3
 80063f4:	fa01 f303 	lsl.w	r3, r1, r3
 80063f8:	43db      	mvns	r3, r3
 80063fa:	401a      	ands	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	3301      	adds	r3, #1
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b0f      	cmp	r3, #15
 800640a:	f67f af40 	bls.w	800628e <HAL_GPIO_DeInit+0x56>
    }
  }
}
 800640e:	bf00      	nop
 8006410:	bf00      	nop
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	40020000 	.word	0x40020000
 800641c:	40020400 	.word	0x40020400
 8006420:	40020800 	.word	0x40020800
 8006424:	40020c00 	.word	0x40020c00
 8006428:	40021000 	.word	0x40021000
 800642c:	40021c00 	.word	0x40021c00
 8006430:	080109b4 	.word	0x080109b4
 8006434:	40013800 	.word	0x40013800
 8006438:	40013c00 	.word	0x40013c00

0800643c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006448:	887b      	ldrh	r3, [r7, #2]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d004      	beq.n	8006458 <HAL_GPIO_ReadPin+0x1c>
 800644e:	887b      	ldrh	r3, [r7, #2]
 8006450:	0c1b      	lsrs	r3, r3, #16
 8006452:	041b      	lsls	r3, r3, #16
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <HAL_GPIO_ReadPin+0x26>
 8006458:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800645c:	4809      	ldr	r0, [pc, #36]	; (8006484 <HAL_GPIO_ReadPin+0x48>)
 800645e:	f7fc fc8a 	bl	8002d76 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	887b      	ldrh	r3, [r7, #2]
 8006468:	4013      	ands	r3, r2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800646e:	2301      	movs	r3, #1
 8006470:	73fb      	strb	r3, [r7, #15]
 8006472:	e001      	b.n	8006478 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006474:	2300      	movs	r3, #0
 8006476:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	080109b4 	.word	0x080109b4

08006488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	807b      	strh	r3, [r7, #2]
 8006494:	4613      	mov	r3, r2
 8006496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006498:	887b      	ldrh	r3, [r7, #2]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d004      	beq.n	80064a8 <HAL_GPIO_WritePin+0x20>
 800649e:	887b      	ldrh	r3, [r7, #2]
 80064a0:	0c1b      	lsrs	r3, r3, #16
 80064a2:	041b      	lsls	r3, r3, #16
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <HAL_GPIO_WritePin+0x2a>
 80064a8:	f240 119d 	movw	r1, #413	; 0x19d
 80064ac:	480e      	ldr	r0, [pc, #56]	; (80064e8 <HAL_GPIO_WritePin+0x60>)
 80064ae:	f7fc fc62 	bl	8002d76 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80064b2:	787b      	ldrb	r3, [r7, #1]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <HAL_GPIO_WritePin+0x40>
 80064b8:	787b      	ldrb	r3, [r7, #1]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d004      	beq.n	80064c8 <HAL_GPIO_WritePin+0x40>
 80064be:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80064c2:	4809      	ldr	r0, [pc, #36]	; (80064e8 <HAL_GPIO_WritePin+0x60>)
 80064c4:	f7fc fc57 	bl	8002d76 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80064c8:	787b      	ldrb	r3, [r7, #1]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064ce:	887a      	ldrh	r2, [r7, #2]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064d4:	e003      	b.n	80064de <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064d6:	887b      	ldrh	r3, [r7, #2]
 80064d8:	041a      	lsls	r2, r3, #16
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	619a      	str	r2, [r3, #24]
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	080109b4 	.word	0x080109b4

080064ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	4603      	mov	r3, r0
 80064f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80064f6:	4b08      	ldr	r3, [pc, #32]	; (8006518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064f8:	695a      	ldr	r2, [r3, #20]
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	4013      	ands	r3, r2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d006      	beq.n	8006510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006502:	4a05      	ldr	r2, [pc, #20]	; (8006518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006504:	88fb      	ldrh	r3, [r7, #6]
 8006506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006508:	88fb      	ldrh	r3, [r7, #6]
 800650a:	4618      	mov	r0, r3
 800650c:	f7fc fc12 	bl	8002d34 <HAL_GPIO_EXTI_Callback>
  }
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	40013c00 	.word	0x40013c00

0800651c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e1bd      	b.n	80068aa <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a93      	ldr	r2, [pc, #588]	; (8006780 <HAL_I2C_Init+0x264>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00e      	beq.n	8006556 <HAL_I2C_Init+0x3a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a91      	ldr	r2, [pc, #580]	; (8006784 <HAL_I2C_Init+0x268>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d009      	beq.n	8006556 <HAL_I2C_Init+0x3a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a90      	ldr	r2, [pc, #576]	; (8006788 <HAL_I2C_Init+0x26c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d004      	beq.n	8006556 <HAL_I2C_Init+0x3a>
 800654c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8006550:	488e      	ldr	r0, [pc, #568]	; (800678c <HAL_I2C_Init+0x270>)
 8006552:	f7fc fc10 	bl	8002d76 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d004      	beq.n	8006568 <HAL_I2C_Init+0x4c>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	4a8b      	ldr	r2, [pc, #556]	; (8006790 <HAL_I2C_Init+0x274>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d904      	bls.n	8006572 <HAL_I2C_Init+0x56>
 8006568:	f240 11bf 	movw	r1, #447	; 0x1bf
 800656c:	4887      	ldr	r0, [pc, #540]	; (800678c <HAL_I2C_Init+0x270>)
 800656e:	f7fc fc02 	bl	8002d76 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <HAL_I2C_Init+0x72>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006582:	d004      	beq.n	800658e <HAL_I2C_Init+0x72>
 8006584:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006588:	4880      	ldr	r0, [pc, #512]	; (800678c <HAL_I2C_Init+0x270>)
 800658a:	f7fc fbf4 	bl	8002d76 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006596:	f023 0303 	bic.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d004      	beq.n	80065a8 <HAL_I2C_Init+0x8c>
 800659e:	f240 11c1 	movw	r1, #449	; 0x1c1
 80065a2:	487a      	ldr	r0, [pc, #488]	; (800678c <HAL_I2C_Init+0x270>)
 80065a4:	f7fc fbe7 	bl	8002d76 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065b0:	d009      	beq.n	80065c6 <HAL_I2C_Init+0xaa>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065ba:	d004      	beq.n	80065c6 <HAL_I2C_Init+0xaa>
 80065bc:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80065c0:	4872      	ldr	r0, [pc, #456]	; (800678c <HAL_I2C_Init+0x270>)
 80065c2:	f7fc fbd8 	bl	8002d76 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d008      	beq.n	80065e0 <HAL_I2C_Init+0xc4>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d004      	beq.n	80065e0 <HAL_I2C_Init+0xc4>
 80065d6:	f240 11c3 	movw	r1, #451	; 0x1c3
 80065da:	486c      	ldr	r0, [pc, #432]	; (800678c <HAL_I2C_Init+0x270>)
 80065dc:	f7fc fbcb 	bl	8002d76 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <HAL_I2C_Init+0xda>
 80065ec:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80065f0:	4866      	ldr	r0, [pc, #408]	; (800678c <HAL_I2C_Init+0x270>)
 80065f2:	f7fc fbc0 	bl	8002d76 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d008      	beq.n	8006610 <HAL_I2C_Init+0xf4>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	2b40      	cmp	r3, #64	; 0x40
 8006604:	d004      	beq.n	8006610 <HAL_I2C_Init+0xf4>
 8006606:	f240 11c5 	movw	r1, #453	; 0x1c5
 800660a:	4860      	ldr	r0, [pc, #384]	; (800678c <HAL_I2C_Init+0x270>)
 800660c:	f7fc fbb3 	bl	8002d76 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d008      	beq.n	800662a <HAL_I2C_Init+0x10e>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	2b80      	cmp	r3, #128	; 0x80
 800661e:	d004      	beq.n	800662a <HAL_I2C_Init+0x10e>
 8006620:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8006624:	4859      	ldr	r0, [pc, #356]	; (800678c <HAL_I2C_Init+0x270>)
 8006626:	f7fc fba6 	bl	8002d76 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fc f8fe 	bl	8002840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2224      	movs	r2, #36	; 0x24
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0201 	bic.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800666a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800667a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800667c:	f001 fd82 	bl	8008184 <HAL_RCC_GetPCLK1Freq>
 8006680:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	4a43      	ldr	r2, [pc, #268]	; (8006794 <HAL_I2C_Init+0x278>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d807      	bhi.n	800669c <HAL_I2C_Init+0x180>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4a42      	ldr	r2, [pc, #264]	; (8006798 <HAL_I2C_Init+0x27c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	bf94      	ite	ls
 8006694:	2301      	movls	r3, #1
 8006696:	2300      	movhi	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	e006      	b.n	80066aa <HAL_I2C_Init+0x18e>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4a3f      	ldr	r2, [pc, #252]	; (800679c <HAL_I2C_Init+0x280>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	bf94      	ite	ls
 80066a4:	2301      	movls	r3, #1
 80066a6:	2300      	movhi	r3, #0
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e0fb      	b.n	80068aa <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	4a3a      	ldr	r2, [pc, #232]	; (80067a0 <HAL_I2C_Init+0x284>)
 80066b6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ba:	0c9b      	lsrs	r3, r3, #18
 80066bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6a1b      	ldr	r3, [r3, #32]
 80066d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4a2c      	ldr	r2, [pc, #176]	; (8006794 <HAL_I2C_Init+0x278>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d802      	bhi.n	80066ec <HAL_I2C_Init+0x1d0>
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	3301      	adds	r3, #1
 80066ea:	e009      	b.n	8006700 <HAL_I2C_Init+0x1e4>
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066f2:	fb02 f303 	mul.w	r3, r2, r3
 80066f6:	4a2b      	ldr	r2, [pc, #172]	; (80067a4 <HAL_I2C_Init+0x288>)
 80066f8:	fba2 2303 	umull	r2, r3, r2, r3
 80066fc:	099b      	lsrs	r3, r3, #6
 80066fe:	3301      	adds	r3, #1
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6812      	ldr	r2, [r2, #0]
 8006704:	430b      	orrs	r3, r1
 8006706:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006712:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	491e      	ldr	r1, [pc, #120]	; (8006794 <HAL_I2C_Init+0x278>)
 800671c:	428b      	cmp	r3, r1
 800671e:	d819      	bhi.n	8006754 <HAL_I2C_Init+0x238>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	1e59      	subs	r1, r3, #1
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	fbb1 f3f3 	udiv	r3, r1, r3
 800672e:	1c59      	adds	r1, r3, #1
 8006730:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006734:	400b      	ands	r3, r1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <HAL_I2C_Init+0x234>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	1e59      	subs	r1, r3, #1
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	fbb1 f3f3 	udiv	r3, r1, r3
 8006748:	3301      	adds	r3, #1
 800674a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800674e:	e065      	b.n	800681c <HAL_I2C_Init+0x300>
 8006750:	2304      	movs	r3, #4
 8006752:	e063      	b.n	800681c <HAL_I2C_Init+0x300>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d125      	bne.n	80067a8 <HAL_I2C_Init+0x28c>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	1e58      	subs	r0, r3, #1
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6859      	ldr	r1, [r3, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	440b      	add	r3, r1
 800676a:	fbb0 f3f3 	udiv	r3, r0, r3
 800676e:	3301      	adds	r3, #1
 8006770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006774:	2b00      	cmp	r3, #0
 8006776:	bf0c      	ite	eq
 8006778:	2301      	moveq	r3, #1
 800677a:	2300      	movne	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	e026      	b.n	80067ce <HAL_I2C_Init+0x2b2>
 8006780:	40005400 	.word	0x40005400
 8006784:	40005800 	.word	0x40005800
 8006788:	40005c00 	.word	0x40005c00
 800678c:	080109f0 	.word	0x080109f0
 8006790:	00061a80 	.word	0x00061a80
 8006794:	000186a0 	.word	0x000186a0
 8006798:	001e847f 	.word	0x001e847f
 800679c:	003d08ff 	.word	0x003d08ff
 80067a0:	431bde83 	.word	0x431bde83
 80067a4:	10624dd3 	.word	0x10624dd3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	1e58      	subs	r0, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6859      	ldr	r1, [r3, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	440b      	add	r3, r1
 80067b6:	0099      	lsls	r1, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80067be:	3301      	adds	r3, #1
 80067c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bf0c      	ite	eq
 80067c8:	2301      	moveq	r3, #1
 80067ca:	2300      	movne	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_I2C_Init+0x2ba>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e022      	b.n	800681c <HAL_I2C_Init+0x300>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10e      	bne.n	80067fc <HAL_I2C_Init+0x2e0>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1e58      	subs	r0, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6859      	ldr	r1, [r3, #4]
 80067e6:	460b      	mov	r3, r1
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	440b      	add	r3, r1
 80067ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80067f0:	3301      	adds	r3, #1
 80067f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067fa:	e00f      	b.n	800681c <HAL_I2C_Init+0x300>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	1e58      	subs	r0, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6859      	ldr	r1, [r3, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	0099      	lsls	r1, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006812:	3301      	adds	r3, #1
 8006814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	6809      	ldr	r1, [r1, #0]
 8006820:	4313      	orrs	r3, r2
 8006822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	69da      	ldr	r2, [r3, #28]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800684a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6911      	ldr	r1, [r2, #16]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	68d2      	ldr	r2, [r2, #12]
 8006856:	4311      	orrs	r1, r2
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6812      	ldr	r2, [r2, #0]
 800685c:	430b      	orrs	r3, r1
 800685e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop

080068b4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e035      	b.n	8006932 <HAL_I2C_DeInit+0x7e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1c      	ldr	r2, [pc, #112]	; (800693c <HAL_I2C_DeInit+0x88>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_I2C_DeInit+0x3a>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1a      	ldr	r2, [pc, #104]	; (8006940 <HAL_I2C_DeInit+0x8c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_I2C_DeInit+0x3a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a19      	ldr	r2, [pc, #100]	; (8006944 <HAL_I2C_DeInit+0x90>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_I2C_DeInit+0x3a>
 80068e4:	f240 212e 	movw	r1, #558	; 0x22e
 80068e8:	4817      	ldr	r0, [pc, #92]	; (8006948 <HAL_I2C_DeInit+0x94>)
 80068ea:	f7fc fa44 	bl	8002d76 <assert_failed>

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2224      	movs	r2, #36	; 0x24
 80068f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0201 	bic.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fb fff0 	bl	80028ec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	40005400 	.word	0x40005400
 8006940:	40005800 	.word	0x40005800
 8006944:	40005c00 	.word	0x40005c00
 8006948:	080109f0 	.word	0x080109f0

0800694c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	4608      	mov	r0, r1
 8006956:	4611      	mov	r1, r2
 8006958:	461a      	mov	r2, r3
 800695a:	4603      	mov	r3, r0
 800695c:	817b      	strh	r3, [r7, #10]
 800695e:	460b      	mov	r3, r1
 8006960:	813b      	strh	r3, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006966:	f7fd feff 	bl	8004768 <HAL_GetTick>
 800696a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800696c:	88fb      	ldrh	r3, [r7, #6]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d007      	beq.n	8006982 <HAL_I2C_Mem_Write+0x36>
 8006972:	88fb      	ldrh	r3, [r7, #6]
 8006974:	2b10      	cmp	r3, #16
 8006976:	d004      	beq.n	8006982 <HAL_I2C_Mem_Write+0x36>
 8006978:	f640 11b9 	movw	r1, #2489	; 0x9b9
 800697c:	4873      	ldr	r0, [pc, #460]	; (8006b4c <HAL_I2C_Mem_Write+0x200>)
 800697e:	f7fc f9fa 	bl	8002d76 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b20      	cmp	r3, #32
 800698c:	f040 80d9 	bne.w	8006b42 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	2319      	movs	r3, #25
 8006996:	2201      	movs	r2, #1
 8006998:	496d      	ldr	r1, [pc, #436]	; (8006b50 <HAL_I2C_Mem_Write+0x204>)
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 fc8c 	bl	80072b8 <I2C_WaitOnFlagUntilTimeout>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 80069a6:	2302      	movs	r3, #2
 80069a8:	e0cc      	b.n	8006b44 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_I2C_Mem_Write+0x6c>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e0c5      	b.n	8006b44 <HAL_I2C_Mem_Write+0x1f8>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d007      	beq.n	80069de <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f042 0201 	orr.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069ec:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2221      	movs	r2, #33	; 0x21
 80069f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2240      	movs	r2, #64	; 0x40
 80069fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a3a      	ldr	r2, [r7, #32]
 8006a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4a4d      	ldr	r2, [pc, #308]	; (8006b54 <HAL_I2C_Mem_Write+0x208>)
 8006a1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a20:	88f8      	ldrh	r0, [r7, #6]
 8006a22:	893a      	ldrh	r2, [r7, #8]
 8006a24:	8979      	ldrh	r1, [r7, #10]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	9301      	str	r3, [sp, #4]
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	4603      	mov	r3, r0
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f000 fac3 	bl	8006fbc <I2C_RequestMemoryWrite>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d052      	beq.n	8006ae2 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e081      	b.n	8006b44 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 fd0d 	bl	8007464 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00d      	beq.n	8006a6c <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d107      	bne.n	8006a68 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a66:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e06b      	b.n	8006b44 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	781a      	ldrb	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d11b      	bne.n	8006ae2 <HAL_I2C_Mem_Write+0x196>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d017      	beq.n	8006ae2 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	781a      	ldrb	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006acc:	3b01      	subs	r3, #1
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1aa      	bne.n	8006a40 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fcf9 	bl	80074e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00d      	beq.n	8006b16 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	2b04      	cmp	r3, #4
 8006b00:	d107      	bne.n	8006b12 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e016      	b.n	8006b44 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	e000      	b.n	8006b44 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8006b42:	2302      	movs	r3, #2
  }
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	080109f0 	.word	0x080109f0
 8006b50:	00100002 	.word	0x00100002
 8006b54:	ffff0000 	.word	0xffff0000

08006b58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08c      	sub	sp, #48	; 0x30
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	4608      	mov	r0, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	817b      	strh	r3, [r7, #10]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	813b      	strh	r3, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b72:	f7fd fdf9 	bl	8004768 <HAL_GetTick>
 8006b76:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006b78:	88fb      	ldrh	r3, [r7, #6]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d007      	beq.n	8006b8e <HAL_I2C_Mem_Read+0x36>
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	2b10      	cmp	r3, #16
 8006b82:	d004      	beq.n	8006b8e <HAL_I2C_Mem_Read+0x36>
 8006b84:	f640 2134 	movw	r1, #2612	; 0xa34
 8006b88:	4881      	ldr	r0, [pc, #516]	; (8006d90 <HAL_I2C_Mem_Read+0x238>)
 8006b8a:	f7fc f8f4 	bl	8002d76 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b20      	cmp	r3, #32
 8006b98:	f040 8209 	bne.w	8006fae <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	2319      	movs	r3, #25
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	497b      	ldr	r1, [pc, #492]	; (8006d94 <HAL_I2C_Mem_Read+0x23c>)
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fb86 	bl	80072b8 <I2C_WaitOnFlagUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e1fc      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_I2C_Mem_Read+0x6c>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e1f5      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x458>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d007      	beq.n	8006bea <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f042 0201 	orr.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bf8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2222      	movs	r2, #34	; 0x22
 8006bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2240      	movs	r2, #64	; 0x40
 8006c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4a5b      	ldr	r2, [pc, #364]	; (8006d98 <HAL_I2C_Mem_Read+0x240>)
 8006c2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c2c:	88f8      	ldrh	r0, [r7, #6]
 8006c2e:	893a      	ldrh	r2, [r7, #8]
 8006c30:	8979      	ldrh	r1, [r7, #10]
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 fa53 	bl	80070e8 <I2C_RequestMemoryRead>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e1b1      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d113      	bne.n	8006c7c <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c54:	2300      	movs	r3, #0
 8006c56:	623b      	str	r3, [r7, #32]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	623b      	str	r3, [r7, #32]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	623b      	str	r3, [r7, #32]
 8006c68:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	e185      	b.n	8006f88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d11b      	bne.n	8006cbc <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c92:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c94:	2300      	movs	r3, #0
 8006c96:	61fb      	str	r3, [r7, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	e165      	b.n	8006f88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d11b      	bne.n	8006cfc <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cd2:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ce2:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61bb      	str	r3, [r7, #24]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	e145      	b.n	8006f88 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d12:	e139      	b.n	8006f88 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	f200 80f2 	bhi.w	8006f02 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d123      	bne.n	8006d6e <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 fc1c 	bl	8007568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e13a      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d6c:	e10c      	b.n	8006f88 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d14f      	bne.n	8006e16 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4907      	ldr	r1, [pc, #28]	; (8006d9c <HAL_I2C_Mem_Read+0x244>)
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f000 fa99 	bl	80072b8 <I2C_WaitOnFlagUntilTimeout>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d009      	beq.n	8006da0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e10f      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x458>
 8006d90:	080109f0 	.word	0x080109f0
 8006d94:	00100002 	.word	0x00100002
 8006d98:	ffff0000 	.word	0xffff0000
 8006d9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	691a      	ldr	r2, [r3, #16]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e14:	e0b8      	b.n	8006f88 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4966      	ldr	r1, [pc, #408]	; (8006fb8 <HAL_I2C_Mem_Read+0x460>)
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 fa49 	bl	80072b8 <I2C_WaitOnFlagUntilTimeout>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0bf      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691a      	ldr	r2, [r3, #16]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e78:	2200      	movs	r2, #0
 8006e7a:	494f      	ldr	r1, [pc, #316]	; (8006fb8 <HAL_I2C_Mem_Read+0x460>)
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 fa1b 	bl	80072b8 <I2C_WaitOnFlagUntilTimeout>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e091      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691a      	ldr	r2, [r3, #16]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	691a      	ldr	r2, [r3, #16]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f00:	e042      	b.n	8006f88 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 fb2e 	bl	8007568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e04c      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	3b01      	subs	r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d118      	bne.n	8006f88 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f47f aec1 	bne.w	8006d14 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	e000      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006fae:	2302      	movs	r3, #2
  }
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3728      	adds	r7, #40	; 0x28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	00010004 	.word	0x00010004

08006fbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4603      	mov	r3, r0
 8006fcc:	817b      	strh	r3, [r7, #10]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	813b      	strh	r3, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fe4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 f960 	bl	80072b8 <I2C_WaitOnFlagUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00d      	beq.n	800701a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800700c:	d103      	bne.n	8007016 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007014:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e05f      	b.n	80070da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800701a:	897b      	ldrh	r3, [r7, #10]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	461a      	mov	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007028:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	6a3a      	ldr	r2, [r7, #32]
 800702e:	492d      	ldr	r1, [pc, #180]	; (80070e4 <I2C_RequestMemoryWrite+0x128>)
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 f998 	bl	8007366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e04c      	b.n	80070da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007040:	2300      	movs	r3, #0
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	617b      	str	r3, [r7, #20]
 8007054:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007058:	6a39      	ldr	r1, [r7, #32]
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 fa02 	bl	8007464 <I2C_WaitOnTXEFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00d      	beq.n	8007082 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	2b04      	cmp	r3, #4
 800706c:	d107      	bne.n	800707e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800707c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e02b      	b.n	80070da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d105      	bne.n	8007094 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007088:	893b      	ldrh	r3, [r7, #8]
 800708a:	b2da      	uxtb	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	611a      	str	r2, [r3, #16]
 8007092:	e021      	b.n	80070d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007094:	893b      	ldrh	r3, [r7, #8]
 8007096:	0a1b      	lsrs	r3, r3, #8
 8007098:	b29b      	uxth	r3, r3
 800709a:	b2da      	uxtb	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a4:	6a39      	ldr	r1, [r7, #32]
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 f9dc 	bl	8007464 <I2C_WaitOnTXEFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d107      	bne.n	80070ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e005      	b.n	80070da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070ce:	893b      	ldrh	r3, [r7, #8]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	00010002 	.word	0x00010002

080070e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	4608      	mov	r0, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	461a      	mov	r2, r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	817b      	strh	r3, [r7, #10]
 80070fa:	460b      	mov	r3, r1
 80070fc:	813b      	strh	r3, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007110:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007120:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	2200      	movs	r2, #0
 800712a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 f8c2 	bl	80072b8 <I2C_WaitOnFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00d      	beq.n	8007156 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007148:	d103      	bne.n	8007152 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007150:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e0aa      	b.n	80072ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007156:	897b      	ldrh	r3, [r7, #10]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	461a      	mov	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007164:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	6a3a      	ldr	r2, [r7, #32]
 800716a:	4952      	ldr	r1, [pc, #328]	; (80072b4 <I2C_RequestMemoryRead+0x1cc>)
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f8fa 	bl	8007366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e097      	b.n	80072ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007194:	6a39      	ldr	r1, [r7, #32]
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f964 	bl	8007464 <I2C_WaitOnTXEFlagUntilTimeout>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d107      	bne.n	80071ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e076      	b.n	80072ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d105      	bne.n	80071d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071c4:	893b      	ldrh	r3, [r7, #8]
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	611a      	str	r2, [r3, #16]
 80071ce:	e021      	b.n	8007214 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071d0:	893b      	ldrh	r3, [r7, #8]
 80071d2:	0a1b      	lsrs	r3, r3, #8
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e0:	6a39      	ldr	r1, [r7, #32]
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 f93e 	bl	8007464 <I2C_WaitOnTXEFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00d      	beq.n	800720a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d107      	bne.n	8007206 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007204:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e050      	b.n	80072ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800720a:	893b      	ldrh	r3, [r7, #8]
 800720c:	b2da      	uxtb	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007216:	6a39      	ldr	r1, [r7, #32]
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f923 	bl	8007464 <I2C_WaitOnTXEFlagUntilTimeout>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00d      	beq.n	8007240 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	2b04      	cmp	r3, #4
 800722a:	d107      	bne.n	800723c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800723a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e035      	b.n	80072ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800724e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	2200      	movs	r2, #0
 8007258:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 f82b 	bl	80072b8 <I2C_WaitOnFlagUntilTimeout>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00d      	beq.n	8007284 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007276:	d103      	bne.n	8007280 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800727e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e013      	b.n	80072ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007284:	897b      	ldrh	r3, [r7, #10]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	f043 0301 	orr.w	r3, r3, #1
 800728c:	b2da      	uxtb	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	6a3a      	ldr	r2, [r7, #32]
 8007298:	4906      	ldr	r1, [pc, #24]	; (80072b4 <I2C_RequestMemoryRead+0x1cc>)
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 f863 	bl	8007366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	00010002 	.word	0x00010002

080072b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	4613      	mov	r3, r2
 80072c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072c8:	e025      	b.n	8007316 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d0:	d021      	beq.n	8007316 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072d2:	f7fd fa49 	bl	8004768 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d302      	bcc.n	80072e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d116      	bne.n	8007316 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	f043 0220 	orr.w	r2, r3, #32
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e023      	b.n	800735e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	0c1b      	lsrs	r3, r3, #16
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b01      	cmp	r3, #1
 800731e:	d10d      	bne.n	800733c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	43da      	mvns	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4013      	ands	r3, r2
 800732c:	b29b      	uxth	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	bf0c      	ite	eq
 8007332:	2301      	moveq	r3, #1
 8007334:	2300      	movne	r3, #0
 8007336:	b2db      	uxtb	r3, r3
 8007338:	461a      	mov	r2, r3
 800733a:	e00c      	b.n	8007356 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	43da      	mvns	r2, r3
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	4013      	ands	r3, r2
 8007348:	b29b      	uxth	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	bf0c      	ite	eq
 800734e:	2301      	moveq	r3, #1
 8007350:	2300      	movne	r3, #0
 8007352:	b2db      	uxtb	r3, r3
 8007354:	461a      	mov	r2, r3
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	429a      	cmp	r2, r3
 800735a:	d0b6      	beq.n	80072ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	607a      	str	r2, [r7, #4]
 8007372:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007374:	e051      	b.n	800741a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007384:	d123      	bne.n	80073ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007394:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800739e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	f043 0204 	orr.w	r2, r3, #4
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e046      	b.n	800745c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d4:	d021      	beq.n	800741a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073d6:	f7fd f9c7 	bl	8004768 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d302      	bcc.n	80073ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d116      	bne.n	800741a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	f043 0220 	orr.w	r2, r3, #32
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e020      	b.n	800745c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	0c1b      	lsrs	r3, r3, #16
 800741e:	b2db      	uxtb	r3, r3
 8007420:	2b01      	cmp	r3, #1
 8007422:	d10c      	bne.n	800743e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	43da      	mvns	r2, r3
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4013      	ands	r3, r2
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	bf14      	ite	ne
 8007436:	2301      	movne	r3, #1
 8007438:	2300      	moveq	r3, #0
 800743a:	b2db      	uxtb	r3, r3
 800743c:	e00b      	b.n	8007456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	43da      	mvns	r2, r3
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	4013      	ands	r3, r2
 800744a:	b29b      	uxth	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	bf14      	ite	ne
 8007450:	2301      	movne	r3, #1
 8007452:	2300      	moveq	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d18d      	bne.n	8007376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007470:	e02d      	b.n	80074ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 f8ce 	bl	8007614 <I2C_IsAcknowledgeFailed>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e02d      	b.n	80074de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d021      	beq.n	80074ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800748a:	f7fd f96d 	bl	8004768 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	429a      	cmp	r2, r3
 8007498:	d302      	bcc.n	80074a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d116      	bne.n	80074ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	f043 0220 	orr.w	r2, r3, #32
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e007      	b.n	80074de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d8:	2b80      	cmp	r3, #128	; 0x80
 80074da:	d1ca      	bne.n	8007472 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074f2:	e02d      	b.n	8007550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f88d 	bl	8007614 <I2C_IsAcknowledgeFailed>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e02d      	b.n	8007560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750a:	d021      	beq.n	8007550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800750c:	f7fd f92c 	bl	8004768 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	429a      	cmp	r2, r3
 800751a:	d302      	bcc.n	8007522 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d116      	bne.n	8007550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2220      	movs	r2, #32
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	f043 0220 	orr.w	r2, r3, #32
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e007      	b.n	8007560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b04      	cmp	r3, #4
 800755c:	d1ca      	bne.n	80074f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007574:	e042      	b.n	80075fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b10      	cmp	r3, #16
 8007582:	d119      	bne.n	80075b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0210 	mvn.w	r2, #16
 800758c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2220      	movs	r2, #32
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e029      	b.n	800760c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075b8:	f7fd f8d6 	bl	8004768 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d302      	bcc.n	80075ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d116      	bne.n	80075fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e8:	f043 0220 	orr.w	r2, r3, #32
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e007      	b.n	800760c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007606:	2b40      	cmp	r3, #64	; 0x40
 8007608:	d1b5      	bne.n	8007576 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800762a:	d11b      	bne.n	8007664 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007634:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2220      	movs	r2, #32
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	f043 0204 	orr.w	r2, r3, #4
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e000      	b.n	8007666 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
	...

08007674 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e314      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b0f      	cmp	r3, #15
 800768c:	d903      	bls.n	8007696 <HAL_RCC_OscConfig+0x22>
 800768e:	21e6      	movs	r1, #230	; 0xe6
 8007690:	4897      	ldr	r0, [pc, #604]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 8007692:	f7fb fb70 	bl	8002d76 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 8088 	beq.w	80077b4 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00d      	beq.n	80076c8 <HAL_RCC_OscConfig+0x54>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b4:	d008      	beq.n	80076c8 <HAL_RCC_OscConfig+0x54>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076be:	d003      	beq.n	80076c8 <HAL_RCC_OscConfig+0x54>
 80076c0:	21eb      	movs	r1, #235	; 0xeb
 80076c2:	488b      	ldr	r0, [pc, #556]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80076c4:	f7fb fb57 	bl	8002d76 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076c8:	4b8a      	ldr	r3, [pc, #552]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f003 030c 	and.w	r3, r3, #12
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	d00c      	beq.n	80076ee <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076d4:	4b87      	ldr	r3, [pc, #540]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d112      	bne.n	8007706 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076e0:	4b84      	ldr	r3, [pc, #528]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ec:	d10b      	bne.n	8007706 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076ee:	4b81      	ldr	r3, [pc, #516]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d05b      	beq.n	80077b2 <HAL_RCC_OscConfig+0x13e>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d157      	bne.n	80077b2 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e2d4      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800770e:	d106      	bne.n	800771e <HAL_RCC_OscConfig+0xaa>
 8007710:	4b78      	ldr	r3, [pc, #480]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a77      	ldr	r2, [pc, #476]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800771a:	6013      	str	r3, [r2, #0]
 800771c:	e01d      	b.n	800775a <HAL_RCC_OscConfig+0xe6>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007726:	d10c      	bne.n	8007742 <HAL_RCC_OscConfig+0xce>
 8007728:	4b72      	ldr	r3, [pc, #456]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a71      	ldr	r2, [pc, #452]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800772e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	4b6f      	ldr	r3, [pc, #444]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a6e      	ldr	r2, [pc, #440]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800773a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	e00b      	b.n	800775a <HAL_RCC_OscConfig+0xe6>
 8007742:	4b6c      	ldr	r3, [pc, #432]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a6b      	ldr	r2, [pc, #428]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	4b69      	ldr	r3, [pc, #420]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a68      	ldr	r2, [pc, #416]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007758:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d013      	beq.n	800778a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007762:	f7fd f801 	bl	8004768 <HAL_GetTick>
 8007766:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007768:	e008      	b.n	800777c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800776a:	f7fc fffd 	bl	8004768 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	2b64      	cmp	r3, #100	; 0x64
 8007776:	d901      	bls.n	800777c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e299      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800777c:	4b5d      	ldr	r3, [pc, #372]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d0f0      	beq.n	800776a <HAL_RCC_OscConfig+0xf6>
 8007788:	e014      	b.n	80077b4 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800778a:	f7fc ffed 	bl	8004768 <HAL_GetTick>
 800778e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007790:	e008      	b.n	80077a4 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007792:	f7fc ffe9 	bl	8004768 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b64      	cmp	r3, #100	; 0x64
 800779e:	d901      	bls.n	80077a4 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e285      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077a4:	4b53      	ldr	r3, [pc, #332]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1f0      	bne.n	8007792 <HAL_RCC_OscConfig+0x11e>
 80077b0:	e000      	b.n	80077b4 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d079      	beq.n	80078b4 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d008      	beq.n	80077da <HAL_RCC_OscConfig+0x166>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d004      	beq.n	80077da <HAL_RCC_OscConfig+0x166>
 80077d0:	f240 111d 	movw	r1, #285	; 0x11d
 80077d4:	4846      	ldr	r0, [pc, #280]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80077d6:	f7fb face 	bl	8002d76 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b1f      	cmp	r3, #31
 80077e0:	d904      	bls.n	80077ec <HAL_RCC_OscConfig+0x178>
 80077e2:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80077e6:	4842      	ldr	r0, [pc, #264]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80077e8:	f7fb fac5 	bl	8002d76 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077ec:	4b41      	ldr	r3, [pc, #260]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f003 030c 	and.w	r3, r3, #12
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00b      	beq.n	8007810 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077f8:	4b3e      	ldr	r3, [pc, #248]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007800:	2b08      	cmp	r3, #8
 8007802:	d11c      	bne.n	800783e <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007804:	4b3b      	ldr	r3, [pc, #236]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d116      	bne.n	800783e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007810:	4b38      	ldr	r3, [pc, #224]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <HAL_RCC_OscConfig+0x1b4>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d001      	beq.n	8007828 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e243      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007828:	4b32      	ldr	r3, [pc, #200]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	492f      	ldr	r1, [pc, #188]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007838:	4313      	orrs	r3, r2
 800783a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800783c:	e03a      	b.n	80078b4 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d020      	beq.n	8007888 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007846:	4b2c      	ldr	r3, [pc, #176]	; (80078f8 <HAL_RCC_OscConfig+0x284>)
 8007848:	2201      	movs	r2, #1
 800784a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784c:	f7fc ff8c 	bl	8004768 <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007854:	f7fc ff88 	bl	8004768 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e224      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007866:	4b23      	ldr	r3, [pc, #140]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f0      	beq.n	8007854 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007872:	4b20      	ldr	r3, [pc, #128]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	491c      	ldr	r1, [pc, #112]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 8007882:	4313      	orrs	r3, r2
 8007884:	600b      	str	r3, [r1, #0]
 8007886:	e015      	b.n	80078b4 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007888:	4b1b      	ldr	r3, [pc, #108]	; (80078f8 <HAL_RCC_OscConfig+0x284>)
 800788a:	2200      	movs	r2, #0
 800788c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800788e:	f7fc ff6b 	bl	8004768 <HAL_GetTick>
 8007892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007894:	e008      	b.n	80078a8 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007896:	f7fc ff67 	bl	8004768 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d901      	bls.n	80078a8 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e203      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078a8:	4b12      	ldr	r3, [pc, #72]	; (80078f4 <HAL_RCC_OscConfig+0x280>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1f0      	bne.n	8007896 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d045      	beq.n	800794c <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d008      	beq.n	80078da <HAL_RCC_OscConfig+0x266>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d004      	beq.n	80078da <HAL_RCC_OscConfig+0x266>
 80078d0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80078d4:	4806      	ldr	r0, [pc, #24]	; (80078f0 <HAL_RCC_OscConfig+0x27c>)
 80078d6:	f7fb fa4e 	bl	8002d76 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d01e      	beq.n	8007920 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078e2:	4b06      	ldr	r3, [pc, #24]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078e8:	f7fc ff3e 	bl	8004768 <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078ee:	e010      	b.n	8007912 <HAL_RCC_OscConfig+0x29e>
 80078f0:	08010a28 	.word	0x08010a28
 80078f4:	40023800 	.word	0x40023800
 80078f8:	42470000 	.word	0x42470000
 80078fc:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007900:	f7fc ff32 	bl	8004768 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e1ce      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007912:	4b5e      	ldr	r3, [pc, #376]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0f0      	beq.n	8007900 <HAL_RCC_OscConfig+0x28c>
 800791e:	e015      	b.n	800794c <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007920:	4b5b      	ldr	r3, [pc, #364]	; (8007a90 <HAL_RCC_OscConfig+0x41c>)
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007926:	f7fc ff1f 	bl	8004768 <HAL_GetTick>
 800792a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800792c:	e008      	b.n	8007940 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800792e:	f7fc ff1b 	bl	8004768 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b02      	cmp	r3, #2
 800793a:	d901      	bls.n	8007940 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e1b7      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007940:	4b52      	ldr	r3, [pc, #328]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1f0      	bne.n	800792e <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 80b0 	beq.w	8007aba <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800795a:	2300      	movs	r3, #0
 800795c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00c      	beq.n	8007980 <HAL_RCC_OscConfig+0x30c>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d008      	beq.n	8007980 <HAL_RCC_OscConfig+0x30c>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2b05      	cmp	r3, #5
 8007974:	d004      	beq.n	8007980 <HAL_RCC_OscConfig+0x30c>
 8007976:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 800797a:	4846      	ldr	r0, [pc, #280]	; (8007a94 <HAL_RCC_OscConfig+0x420>)
 800797c:	f7fb f9fb 	bl	8002d76 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007980:	4b42      	ldr	r3, [pc, #264]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10f      	bne.n	80079ac <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800798c:	2300      	movs	r3, #0
 800798e:	60bb      	str	r3, [r7, #8]
 8007990:	4b3e      	ldr	r3, [pc, #248]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007994:	4a3d      	ldr	r2, [pc, #244]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799a:	6413      	str	r3, [r2, #64]	; 0x40
 800799c:	4b3b      	ldr	r3, [pc, #236]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a4:	60bb      	str	r3, [r7, #8]
 80079a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079a8:	2301      	movs	r3, #1
 80079aa:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ac:	4b3a      	ldr	r3, [pc, #232]	; (8007a98 <HAL_RCC_OscConfig+0x424>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d118      	bne.n	80079ea <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079b8:	4b37      	ldr	r3, [pc, #220]	; (8007a98 <HAL_RCC_OscConfig+0x424>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a36      	ldr	r2, [pc, #216]	; (8007a98 <HAL_RCC_OscConfig+0x424>)
 80079be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079c4:	f7fc fed0 	bl	8004768 <HAL_GetTick>
 80079c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079cc:	f7fc fecc 	bl	8004768 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e168      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079de:	4b2e      	ldr	r3, [pc, #184]	; (8007a98 <HAL_RCC_OscConfig+0x424>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f0      	beq.n	80079cc <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d106      	bne.n	8007a00 <HAL_RCC_OscConfig+0x38c>
 80079f2:	4b26      	ldr	r3, [pc, #152]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	4a25      	ldr	r2, [pc, #148]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	6713      	str	r3, [r2, #112]	; 0x70
 80079fe:	e01c      	b.n	8007a3a <HAL_RCC_OscConfig+0x3c6>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b05      	cmp	r3, #5
 8007a06:	d10c      	bne.n	8007a22 <HAL_RCC_OscConfig+0x3ae>
 8007a08:	4b20      	ldr	r3, [pc, #128]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0c:	4a1f      	ldr	r2, [pc, #124]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007a0e:	f043 0304 	orr.w	r3, r3, #4
 8007a12:	6713      	str	r3, [r2, #112]	; 0x70
 8007a14:	4b1d      	ldr	r3, [pc, #116]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a18:	4a1c      	ldr	r2, [pc, #112]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007a1a:	f043 0301 	orr.w	r3, r3, #1
 8007a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a20:	e00b      	b.n	8007a3a <HAL_RCC_OscConfig+0x3c6>
 8007a22:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a26:	4a19      	ldr	r2, [pc, #100]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007a28:	f023 0301 	bic.w	r3, r3, #1
 8007a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a2e:	4b17      	ldr	r3, [pc, #92]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a32:	4a16      	ldr	r2, [pc, #88]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007a34:	f023 0304 	bic.w	r3, r3, #4
 8007a38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d015      	beq.n	8007a6e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a42:	f7fc fe91 	bl	8004768 <HAL_GetTick>
 8007a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a48:	e00a      	b.n	8007a60 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a4a:	f7fc fe8d 	bl	8004768 <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d901      	bls.n	8007a60 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e127      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a60:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <HAL_RCC_OscConfig+0x418>)
 8007a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0ee      	beq.n	8007a4a <HAL_RCC_OscConfig+0x3d6>
 8007a6c:	e01c      	b.n	8007aa8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a6e:	f7fc fe7b 	bl	8004768 <HAL_GetTick>
 8007a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a74:	e012      	b.n	8007a9c <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a76:	f7fc fe77 	bl	8004768 <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d909      	bls.n	8007a9c <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e111      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
 8007a8c:	40023800 	.word	0x40023800
 8007a90:	42470e80 	.word	0x42470e80
 8007a94:	08010a28 	.word	0x08010a28
 8007a98:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a9c:	4b86      	ldr	r3, [pc, #536]	; (8007cb8 <HAL_RCC_OscConfig+0x644>)
 8007a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e6      	bne.n	8007a76 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007aa8:	7dfb      	ldrb	r3, [r7, #23]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d105      	bne.n	8007aba <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aae:	4b82      	ldr	r3, [pc, #520]	; (8007cb8 <HAL_RCC_OscConfig+0x644>)
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	4a81      	ldr	r2, [pc, #516]	; (8007cb8 <HAL_RCC_OscConfig+0x644>)
 8007ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ab8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00c      	beq.n	8007adc <HAL_RCC_OscConfig+0x468>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d008      	beq.n	8007adc <HAL_RCC_OscConfig+0x468>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d004      	beq.n	8007adc <HAL_RCC_OscConfig+0x468>
 8007ad2:	f240 11cd 	movw	r1, #461	; 0x1cd
 8007ad6:	4879      	ldr	r0, [pc, #484]	; (8007cbc <HAL_RCC_OscConfig+0x648>)
 8007ad8:	f7fb f94d 	bl	8002d76 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 80e4 	beq.w	8007cae <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ae6:	4b74      	ldr	r3, [pc, #464]	; (8007cb8 <HAL_RCC_OscConfig+0x644>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 030c 	and.w	r3, r3, #12
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	f000 80a5 	beq.w	8007c3e <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	f040 8089 	bne.w	8007c10 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d009      	beq.n	8007b1a <HAL_RCC_OscConfig+0x4a6>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	69db      	ldr	r3, [r3, #28]
 8007b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b0e:	d004      	beq.n	8007b1a <HAL_RCC_OscConfig+0x4a6>
 8007b10:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8007b14:	4869      	ldr	r0, [pc, #420]	; (8007cbc <HAL_RCC_OscConfig+0x648>)
 8007b16:	f7fb f92e 	bl	8002d76 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	2b3f      	cmp	r3, #63	; 0x3f
 8007b20:	d904      	bls.n	8007b2c <HAL_RCC_OscConfig+0x4b8>
 8007b22:	f240 11d7 	movw	r1, #471	; 0x1d7
 8007b26:	4865      	ldr	r0, [pc, #404]	; (8007cbc <HAL_RCC_OscConfig+0x648>)
 8007b28:	f7fb f925 	bl	8002d76 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	2b31      	cmp	r3, #49	; 0x31
 8007b32:	d904      	bls.n	8007b3e <HAL_RCC_OscConfig+0x4ca>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b38:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007b3c:	d904      	bls.n	8007b48 <HAL_RCC_OscConfig+0x4d4>
 8007b3e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8007b42:	485e      	ldr	r0, [pc, #376]	; (8007cbc <HAL_RCC_OscConfig+0x648>)
 8007b44:	f7fb f917 	bl	8002d76 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d010      	beq.n	8007b72 <HAL_RCC_OscConfig+0x4fe>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d00c      	beq.n	8007b72 <HAL_RCC_OscConfig+0x4fe>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	2b06      	cmp	r3, #6
 8007b5e:	d008      	beq.n	8007b72 <HAL_RCC_OscConfig+0x4fe>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	d004      	beq.n	8007b72 <HAL_RCC_OscConfig+0x4fe>
 8007b68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b6c:	4853      	ldr	r0, [pc, #332]	; (8007cbc <HAL_RCC_OscConfig+0x648>)
 8007b6e:	f7fb f902 	bl	8002d76 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d903      	bls.n	8007b82 <HAL_RCC_OscConfig+0x50e>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7e:	2b0f      	cmp	r3, #15
 8007b80:	d904      	bls.n	8007b8c <HAL_RCC_OscConfig+0x518>
 8007b82:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8007b86:	484d      	ldr	r0, [pc, #308]	; (8007cbc <HAL_RCC_OscConfig+0x648>)
 8007b88:	f7fb f8f5 	bl	8002d76 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b8c:	4b4c      	ldr	r3, [pc, #304]	; (8007cc0 <HAL_RCC_OscConfig+0x64c>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b92:	f7fc fde9 	bl	8004768 <HAL_GetTick>
 8007b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b98:	e008      	b.n	8007bac <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b9a:	f7fc fde5 	bl	8004768 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d901      	bls.n	8007bac <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e081      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bac:	4b42      	ldr	r3, [pc, #264]	; (8007cb8 <HAL_RCC_OscConfig+0x644>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1f0      	bne.n	8007b9a <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	69da      	ldr	r2, [r3, #28]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	019b      	lsls	r3, r3, #6
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bce:	085b      	lsrs	r3, r3, #1
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	041b      	lsls	r3, r3, #16
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bda:	061b      	lsls	r3, r3, #24
 8007bdc:	4936      	ldr	r1, [pc, #216]	; (8007cb8 <HAL_RCC_OscConfig+0x644>)
 8007bde:	4313      	orrs	r3, r2
 8007be0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007be2:	4b37      	ldr	r3, [pc, #220]	; (8007cc0 <HAL_RCC_OscConfig+0x64c>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007be8:	f7fc fdbe 	bl	8004768 <HAL_GetTick>
 8007bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bee:	e008      	b.n	8007c02 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bf0:	f7fc fdba 	bl	8004768 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e056      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c02:	4b2d      	ldr	r3, [pc, #180]	; (8007cb8 <HAL_RCC_OscConfig+0x644>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d0f0      	beq.n	8007bf0 <HAL_RCC_OscConfig+0x57c>
 8007c0e:	e04e      	b.n	8007cae <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c10:	4b2b      	ldr	r3, [pc, #172]	; (8007cc0 <HAL_RCC_OscConfig+0x64c>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c16:	f7fc fda7 	bl	8004768 <HAL_GetTick>
 8007c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c1c:	e008      	b.n	8007c30 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c1e:	f7fc fda3 	bl	8004768 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d901      	bls.n	8007c30 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e03f      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c30:	4b21      	ldr	r3, [pc, #132]	; (8007cb8 <HAL_RCC_OscConfig+0x644>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1f0      	bne.n	8007c1e <HAL_RCC_OscConfig+0x5aa>
 8007c3c:	e037      	b.n	8007cae <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d101      	bne.n	8007c4a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e032      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c4a:	4b1b      	ldr	r3, [pc, #108]	; (8007cb8 <HAL_RCC_OscConfig+0x644>)
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d028      	beq.n	8007caa <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d121      	bne.n	8007caa <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d11a      	bne.n	8007caa <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d111      	bne.n	8007caa <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	085b      	lsrs	r3, r3, #1
 8007c92:	3b01      	subs	r3, #1
 8007c94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d107      	bne.n	8007caa <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d001      	beq.n	8007cae <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40023800 	.word	0x40023800
 8007cbc:	08010a28 	.word	0x08010a28
 8007cc0:	42470060 	.word	0x42470060

08007cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e174      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <HAL_RCC_ClockConfig+0x24>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b0f      	cmp	r3, #15
 8007ce6:	d904      	bls.n	8007cf2 <HAL_RCC_ClockConfig+0x2e>
 8007ce8:	f240 215a 	movw	r1, #602	; 0x25a
 8007cec:	487b      	ldr	r0, [pc, #492]	; (8007edc <HAL_RCC_ClockConfig+0x218>)
 8007cee:	f7fb f842 	bl	8002d76 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d019      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x68>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d016      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x68>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d013      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x68>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d010      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x68>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d00d      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x68>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b05      	cmp	r3, #5
 8007d14:	d00a      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x68>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b06      	cmp	r3, #6
 8007d1a:	d007      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x68>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	2b07      	cmp	r3, #7
 8007d20:	d004      	beq.n	8007d2c <HAL_RCC_ClockConfig+0x68>
 8007d22:	f240 215b 	movw	r1, #603	; 0x25b
 8007d26:	486d      	ldr	r0, [pc, #436]	; (8007edc <HAL_RCC_ClockConfig+0x218>)
 8007d28:	f7fb f825 	bl	8002d76 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d2c:	4b6c      	ldr	r3, [pc, #432]	; (8007ee0 <HAL_RCC_ClockConfig+0x21c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0307 	and.w	r3, r3, #7
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d90c      	bls.n	8007d54 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d3a:	4b69      	ldr	r3, [pc, #420]	; (8007ee0 <HAL_RCC_ClockConfig+0x21c>)
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d42:	4b67      	ldr	r3, [pc, #412]	; (8007ee0 <HAL_RCC_ClockConfig+0x21c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d001      	beq.n	8007d54 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e136      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0302 	and.w	r3, r3, #2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d049      	beq.n	8007df4 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d6c:	4b5d      	ldr	r3, [pc, #372]	; (8007ee4 <HAL_RCC_ClockConfig+0x220>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	4a5c      	ldr	r2, [pc, #368]	; (8007ee4 <HAL_RCC_ClockConfig+0x220>)
 8007d72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0308 	and.w	r3, r3, #8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d005      	beq.n	8007d90 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d84:	4b57      	ldr	r3, [pc, #348]	; (8007ee4 <HAL_RCC_ClockConfig+0x220>)
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	4a56      	ldr	r2, [pc, #344]	; (8007ee4 <HAL_RCC_ClockConfig+0x220>)
 8007d8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d024      	beq.n	8007de2 <HAL_RCC_ClockConfig+0x11e>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b80      	cmp	r3, #128	; 0x80
 8007d9e:	d020      	beq.n	8007de2 <HAL_RCC_ClockConfig+0x11e>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	2b90      	cmp	r3, #144	; 0x90
 8007da6:	d01c      	beq.n	8007de2 <HAL_RCC_ClockConfig+0x11e>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	2ba0      	cmp	r3, #160	; 0xa0
 8007dae:	d018      	beq.n	8007de2 <HAL_RCC_ClockConfig+0x11e>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	2bb0      	cmp	r3, #176	; 0xb0
 8007db6:	d014      	beq.n	8007de2 <HAL_RCC_ClockConfig+0x11e>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	2bc0      	cmp	r3, #192	; 0xc0
 8007dbe:	d010      	beq.n	8007de2 <HAL_RCC_ClockConfig+0x11e>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	2bd0      	cmp	r3, #208	; 0xd0
 8007dc6:	d00c      	beq.n	8007de2 <HAL_RCC_ClockConfig+0x11e>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	2be0      	cmp	r3, #224	; 0xe0
 8007dce:	d008      	beq.n	8007de2 <HAL_RCC_ClockConfig+0x11e>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	2bf0      	cmp	r3, #240	; 0xf0
 8007dd6:	d004      	beq.n	8007de2 <HAL_RCC_ClockConfig+0x11e>
 8007dd8:	f240 217e 	movw	r1, #638	; 0x27e
 8007ddc:	483f      	ldr	r0, [pc, #252]	; (8007edc <HAL_RCC_ClockConfig+0x218>)
 8007dde:	f7fa ffca 	bl	8002d76 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007de2:	4b40      	ldr	r3, [pc, #256]	; (8007ee4 <HAL_RCC_ClockConfig+0x220>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	493d      	ldr	r1, [pc, #244]	; (8007ee4 <HAL_RCC_ClockConfig+0x220>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d059      	beq.n	8007eb4 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d010      	beq.n	8007e2a <HAL_RCC_ClockConfig+0x166>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d00c      	beq.n	8007e2a <HAL_RCC_ClockConfig+0x166>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d008      	beq.n	8007e2a <HAL_RCC_ClockConfig+0x166>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d004      	beq.n	8007e2a <HAL_RCC_ClockConfig+0x166>
 8007e20:	f240 2185 	movw	r1, #645	; 0x285
 8007e24:	482d      	ldr	r0, [pc, #180]	; (8007edc <HAL_RCC_ClockConfig+0x218>)
 8007e26:	f7fa ffa6 	bl	8002d76 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d107      	bne.n	8007e42 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e32:	4b2c      	ldr	r3, [pc, #176]	; (8007ee4 <HAL_RCC_ClockConfig+0x220>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d119      	bne.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e0bf      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d003      	beq.n	8007e52 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d107      	bne.n	8007e62 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e52:	4b24      	ldr	r3, [pc, #144]	; (8007ee4 <HAL_RCC_ClockConfig+0x220>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d109      	bne.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e0af      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e62:	4b20      	ldr	r3, [pc, #128]	; (8007ee4 <HAL_RCC_ClockConfig+0x220>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e0a7      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e72:	4b1c      	ldr	r3, [pc, #112]	; (8007ee4 <HAL_RCC_ClockConfig+0x220>)
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f023 0203 	bic.w	r2, r3, #3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	4919      	ldr	r1, [pc, #100]	; (8007ee4 <HAL_RCC_ClockConfig+0x220>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e84:	f7fc fc70 	bl	8004768 <HAL_GetTick>
 8007e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e8a:	e00a      	b.n	8007ea2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e8c:	f7fc fc6c 	bl	8004768 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d901      	bls.n	8007ea2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e08f      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ea2:	4b10      	ldr	r3, [pc, #64]	; (8007ee4 <HAL_RCC_ClockConfig+0x220>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f003 020c 	and.w	r2, r3, #12
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d1eb      	bne.n	8007e8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007eb4:	4b0a      	ldr	r3, [pc, #40]	; (8007ee0 <HAL_RCC_ClockConfig+0x21c>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d212      	bcs.n	8007ee8 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ec2:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <HAL_RCC_ClockConfig+0x21c>)
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	b2d2      	uxtb	r2, r2
 8007ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eca:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <HAL_RCC_ClockConfig+0x21c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0307 	and.w	r3, r3, #7
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d007      	beq.n	8007ee8 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e072      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x2fe>
 8007edc:	08010a28 	.word	0x08010a28
 8007ee0:	40023c00 	.word	0x40023c00
 8007ee4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d025      	beq.n	8007f40 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d018      	beq.n	8007f2e <HAL_RCC_ClockConfig+0x26a>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f04:	d013      	beq.n	8007f2e <HAL_RCC_ClockConfig+0x26a>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f0e:	d00e      	beq.n	8007f2e <HAL_RCC_ClockConfig+0x26a>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007f18:	d009      	beq.n	8007f2e <HAL_RCC_ClockConfig+0x26a>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007f22:	d004      	beq.n	8007f2e <HAL_RCC_ClockConfig+0x26a>
 8007f24:	f240 21c3 	movw	r1, #707	; 0x2c3
 8007f28:	4828      	ldr	r0, [pc, #160]	; (8007fcc <HAL_RCC_ClockConfig+0x308>)
 8007f2a:	f7fa ff24 	bl	8002d76 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f2e:	4b28      	ldr	r3, [pc, #160]	; (8007fd0 <HAL_RCC_ClockConfig+0x30c>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	4925      	ldr	r1, [pc, #148]	; (8007fd0 <HAL_RCC_ClockConfig+0x30c>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0308 	and.w	r3, r3, #8
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d026      	beq.n	8007f9a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d018      	beq.n	8007f86 <HAL_RCC_ClockConfig+0x2c2>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5c:	d013      	beq.n	8007f86 <HAL_RCC_ClockConfig+0x2c2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007f66:	d00e      	beq.n	8007f86 <HAL_RCC_ClockConfig+0x2c2>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007f70:	d009      	beq.n	8007f86 <HAL_RCC_ClockConfig+0x2c2>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007f7a:	d004      	beq.n	8007f86 <HAL_RCC_ClockConfig+0x2c2>
 8007f7c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8007f80:	4812      	ldr	r0, [pc, #72]	; (8007fcc <HAL_RCC_ClockConfig+0x308>)
 8007f82:	f7fa fef8 	bl	8002d76 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f86:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <HAL_RCC_ClockConfig+0x30c>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	490e      	ldr	r1, [pc, #56]	; (8007fd0 <HAL_RCC_ClockConfig+0x30c>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f9a:	f000 f821 	bl	8007fe0 <HAL_RCC_GetSysClockFreq>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	4b0b      	ldr	r3, [pc, #44]	; (8007fd0 <HAL_RCC_ClockConfig+0x30c>)
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	091b      	lsrs	r3, r3, #4
 8007fa6:	f003 030f 	and.w	r3, r3, #15
 8007faa:	490a      	ldr	r1, [pc, #40]	; (8007fd4 <HAL_RCC_ClockConfig+0x310>)
 8007fac:	5ccb      	ldrb	r3, [r1, r3]
 8007fae:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb2:	4a09      	ldr	r2, [pc, #36]	; (8007fd8 <HAL_RCC_ClockConfig+0x314>)
 8007fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007fb6:	4b09      	ldr	r3, [pc, #36]	; (8007fdc <HAL_RCC_ClockConfig+0x318>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fc fb90 	bl	80046e0 <HAL_InitTick>

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	08010a28 	.word	0x08010a28
 8007fd0:	40023800 	.word	0x40023800
 8007fd4:	08010b10 	.word	0x08010b10
 8007fd8:	20000004 	.word	0x20000004
 8007fdc:	20000014 	.word	0x20000014

08007fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fe4:	b090      	sub	sp, #64	; 0x40
 8007fe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	637b      	str	r3, [r7, #52]	; 0x34
 8007fec:	2300      	movs	r3, #0
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ff8:	4b59      	ldr	r3, [pc, #356]	; (8008160 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f003 030c 	and.w	r3, r3, #12
 8008000:	2b08      	cmp	r3, #8
 8008002:	d00d      	beq.n	8008020 <HAL_RCC_GetSysClockFreq+0x40>
 8008004:	2b08      	cmp	r3, #8
 8008006:	f200 80a1 	bhi.w	800814c <HAL_RCC_GetSysClockFreq+0x16c>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <HAL_RCC_GetSysClockFreq+0x34>
 800800e:	2b04      	cmp	r3, #4
 8008010:	d003      	beq.n	800801a <HAL_RCC_GetSysClockFreq+0x3a>
 8008012:	e09b      	b.n	800814c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008014:	4b53      	ldr	r3, [pc, #332]	; (8008164 <HAL_RCC_GetSysClockFreq+0x184>)
 8008016:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008018:	e09b      	b.n	8008152 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800801a:	4b53      	ldr	r3, [pc, #332]	; (8008168 <HAL_RCC_GetSysClockFreq+0x188>)
 800801c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800801e:	e098      	b.n	8008152 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008020:	4b4f      	ldr	r3, [pc, #316]	; (8008160 <HAL_RCC_GetSysClockFreq+0x180>)
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800802a:	4b4d      	ldr	r3, [pc, #308]	; (8008160 <HAL_RCC_GetSysClockFreq+0x180>)
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d028      	beq.n	8008088 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008036:	4b4a      	ldr	r3, [pc, #296]	; (8008160 <HAL_RCC_GetSysClockFreq+0x180>)
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	099b      	lsrs	r3, r3, #6
 800803c:	2200      	movs	r2, #0
 800803e:	623b      	str	r3, [r7, #32]
 8008040:	627a      	str	r2, [r7, #36]	; 0x24
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008048:	2100      	movs	r1, #0
 800804a:	4b47      	ldr	r3, [pc, #284]	; (8008168 <HAL_RCC_GetSysClockFreq+0x188>)
 800804c:	fb03 f201 	mul.w	r2, r3, r1
 8008050:	2300      	movs	r3, #0
 8008052:	fb00 f303 	mul.w	r3, r0, r3
 8008056:	4413      	add	r3, r2
 8008058:	4a43      	ldr	r2, [pc, #268]	; (8008168 <HAL_RCC_GetSysClockFreq+0x188>)
 800805a:	fba0 1202 	umull	r1, r2, r0, r2
 800805e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008060:	460a      	mov	r2, r1
 8008062:	62ba      	str	r2, [r7, #40]	; 0x28
 8008064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008066:	4413      	add	r3, r2
 8008068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800806a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806c:	2200      	movs	r2, #0
 800806e:	61bb      	str	r3, [r7, #24]
 8008070:	61fa      	str	r2, [r7, #28]
 8008072:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008076:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800807a:	f7f8 fe6d 	bl	8000d58 <__aeabi_uldivmod>
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	4613      	mov	r3, r2
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008086:	e053      	b.n	8008130 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008088:	4b35      	ldr	r3, [pc, #212]	; (8008160 <HAL_RCC_GetSysClockFreq+0x180>)
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	099b      	lsrs	r3, r3, #6
 800808e:	2200      	movs	r2, #0
 8008090:	613b      	str	r3, [r7, #16]
 8008092:	617a      	str	r2, [r7, #20]
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800809a:	f04f 0b00 	mov.w	fp, #0
 800809e:	4652      	mov	r2, sl
 80080a0:	465b      	mov	r3, fp
 80080a2:	f04f 0000 	mov.w	r0, #0
 80080a6:	f04f 0100 	mov.w	r1, #0
 80080aa:	0159      	lsls	r1, r3, #5
 80080ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080b0:	0150      	lsls	r0, r2, #5
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	ebb2 080a 	subs.w	r8, r2, sl
 80080ba:	eb63 090b 	sbc.w	r9, r3, fp
 80080be:	f04f 0200 	mov.w	r2, #0
 80080c2:	f04f 0300 	mov.w	r3, #0
 80080c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80080ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80080ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80080d2:	ebb2 0408 	subs.w	r4, r2, r8
 80080d6:	eb63 0509 	sbc.w	r5, r3, r9
 80080da:	f04f 0200 	mov.w	r2, #0
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	00eb      	lsls	r3, r5, #3
 80080e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080e8:	00e2      	lsls	r2, r4, #3
 80080ea:	4614      	mov	r4, r2
 80080ec:	461d      	mov	r5, r3
 80080ee:	eb14 030a 	adds.w	r3, r4, sl
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	eb45 030b 	adc.w	r3, r5, fp
 80080f8:	607b      	str	r3, [r7, #4]
 80080fa:	f04f 0200 	mov.w	r2, #0
 80080fe:	f04f 0300 	mov.w	r3, #0
 8008102:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008106:	4629      	mov	r1, r5
 8008108:	028b      	lsls	r3, r1, #10
 800810a:	4621      	mov	r1, r4
 800810c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008110:	4621      	mov	r1, r4
 8008112:	028a      	lsls	r2, r1, #10
 8008114:	4610      	mov	r0, r2
 8008116:	4619      	mov	r1, r3
 8008118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811a:	2200      	movs	r2, #0
 800811c:	60bb      	str	r3, [r7, #8]
 800811e:	60fa      	str	r2, [r7, #12]
 8008120:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008124:	f7f8 fe18 	bl	8000d58 <__aeabi_uldivmod>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4613      	mov	r3, r2
 800812e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008130:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <HAL_RCC_GetSysClockFreq+0x180>)
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	0c1b      	lsrs	r3, r3, #16
 8008136:	f003 0303 	and.w	r3, r3, #3
 800813a:	3301      	adds	r3, #1
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	fbb2 f3f3 	udiv	r3, r2, r3
 8008148:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800814a:	e002      	b.n	8008152 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <HAL_RCC_GetSysClockFreq+0x184>)
 800814e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008154:	4618      	mov	r0, r3
 8008156:	3740      	adds	r7, #64	; 0x40
 8008158:	46bd      	mov	sp, r7
 800815a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800815e:	bf00      	nop
 8008160:	40023800 	.word	0x40023800
 8008164:	00f42400 	.word	0x00f42400
 8008168:	017d7840 	.word	0x017d7840

0800816c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008170:	4b03      	ldr	r3, [pc, #12]	; (8008180 <HAL_RCC_GetHCLKFreq+0x14>)
 8008172:	681b      	ldr	r3, [r3, #0]
}
 8008174:	4618      	mov	r0, r3
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	20000004 	.word	0x20000004

08008184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008188:	f7ff fff0 	bl	800816c <HAL_RCC_GetHCLKFreq>
 800818c:	4602      	mov	r2, r0
 800818e:	4b05      	ldr	r3, [pc, #20]	; (80081a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	0a9b      	lsrs	r3, r3, #10
 8008194:	f003 0307 	and.w	r3, r3, #7
 8008198:	4903      	ldr	r1, [pc, #12]	; (80081a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800819a:	5ccb      	ldrb	r3, [r1, r3]
 800819c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	40023800 	.word	0x40023800
 80081a8:	08010b20 	.word	0x08010b20

080081ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80081b0:	f7ff ffdc 	bl	800816c <HAL_RCC_GetHCLKFreq>
 80081b4:	4602      	mov	r2, r0
 80081b6:	4b05      	ldr	r3, [pc, #20]	; (80081cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	0b5b      	lsrs	r3, r3, #13
 80081bc:	f003 0307 	and.w	r3, r3, #7
 80081c0:	4903      	ldr	r1, [pc, #12]	; (80081d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081c2:	5ccb      	ldrb	r3, [r1, r3]
 80081c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	40023800 	.word	0x40023800
 80081d0:	08010b20 	.word	0x08010b20

080081d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e0a7      	b.n	8008336 <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a55      	ldr	r2, [pc, #340]	; (8008340 <HAL_TIM_Base_Init+0x16c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d027      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f8:	d022      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a51      	ldr	r2, [pc, #324]	; (8008344 <HAL_TIM_Base_Init+0x170>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d01d      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a4f      	ldr	r2, [pc, #316]	; (8008348 <HAL_TIM_Base_Init+0x174>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d018      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a4e      	ldr	r2, [pc, #312]	; (800834c <HAL_TIM_Base_Init+0x178>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d013      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a4c      	ldr	r2, [pc, #304]	; (8008350 <HAL_TIM_Base_Init+0x17c>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d00e      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a4b      	ldr	r2, [pc, #300]	; (8008354 <HAL_TIM_Base_Init+0x180>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d009      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a49      	ldr	r2, [pc, #292]	; (8008358 <HAL_TIM_Base_Init+0x184>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d004      	beq.n	8008240 <HAL_TIM_Base_Init+0x6c>
 8008236:	f240 1113 	movw	r1, #275	; 0x113
 800823a:	4848      	ldr	r0, [pc, #288]	; (800835c <HAL_TIM_Base_Init+0x188>)
 800823c:	f7fa fd9b 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d014      	beq.n	8008272 <HAL_TIM_Base_Init+0x9e>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	2b10      	cmp	r3, #16
 800824e:	d010      	beq.n	8008272 <HAL_TIM_Base_Init+0x9e>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	2b20      	cmp	r3, #32
 8008256:	d00c      	beq.n	8008272 <HAL_TIM_Base_Init+0x9e>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d008      	beq.n	8008272 <HAL_TIM_Base_Init+0x9e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2b60      	cmp	r3, #96	; 0x60
 8008266:	d004      	beq.n	8008272 <HAL_TIM_Base_Init+0x9e>
 8008268:	f44f 718a 	mov.w	r1, #276	; 0x114
 800826c:	483b      	ldr	r0, [pc, #236]	; (800835c <HAL_TIM_Base_Init+0x188>)
 800826e:	f7fa fd82 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00e      	beq.n	8008298 <HAL_TIM_Base_Init+0xc4>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008282:	d009      	beq.n	8008298 <HAL_TIM_Base_Init+0xc4>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800828c:	d004      	beq.n	8008298 <HAL_TIM_Base_Init+0xc4>
 800828e:	f240 1115 	movw	r1, #277	; 0x115
 8008292:	4832      	ldr	r0, [pc, #200]	; (800835c <HAL_TIM_Base_Init+0x188>)
 8008294:	f7fa fd6f 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d008      	beq.n	80082b2 <HAL_TIM_Base_Init+0xde>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	2b80      	cmp	r3, #128	; 0x80
 80082a6:	d004      	beq.n	80082b2 <HAL_TIM_Base_Init+0xde>
 80082a8:	f44f 718b 	mov.w	r1, #278	; 0x116
 80082ac:	482b      	ldr	r0, [pc, #172]	; (800835c <HAL_TIM_Base_Init+0x188>)
 80082ae:	f7fa fd62 	bl	8002d76 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d106      	bne.n	80082cc <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7fb f82a 	bl	8003320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3304      	adds	r3, #4
 80082dc:	4619      	mov	r1, r3
 80082de:	4610      	mov	r0, r2
 80082e0:	f001 f8b2 	bl	8009448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	40010000 	.word	0x40010000
 8008344:	40000400 	.word	0x40000400
 8008348:	40000800 	.word	0x40000800
 800834c:	40000c00 	.word	0x40000c00
 8008350:	40014000 	.word	0x40014000
 8008354:	40014400 	.word	0x40014400
 8008358:	40014800 	.word	0x40014800
 800835c:	08010a60 	.word	0x08010a60

08008360 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a3d      	ldr	r2, [pc, #244]	; (8008464 <HAL_TIM_Base_Start_IT+0x104>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d027      	beq.n	80083c2 <HAL_TIM_Base_Start_IT+0x62>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800837a:	d022      	beq.n	80083c2 <HAL_TIM_Base_Start_IT+0x62>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a39      	ldr	r2, [pc, #228]	; (8008468 <HAL_TIM_Base_Start_IT+0x108>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d01d      	beq.n	80083c2 <HAL_TIM_Base_Start_IT+0x62>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a38      	ldr	r2, [pc, #224]	; (800846c <HAL_TIM_Base_Start_IT+0x10c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d018      	beq.n	80083c2 <HAL_TIM_Base_Start_IT+0x62>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a36      	ldr	r2, [pc, #216]	; (8008470 <HAL_TIM_Base_Start_IT+0x110>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d013      	beq.n	80083c2 <HAL_TIM_Base_Start_IT+0x62>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a35      	ldr	r2, [pc, #212]	; (8008474 <HAL_TIM_Base_Start_IT+0x114>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d00e      	beq.n	80083c2 <HAL_TIM_Base_Start_IT+0x62>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a33      	ldr	r2, [pc, #204]	; (8008478 <HAL_TIM_Base_Start_IT+0x118>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d009      	beq.n	80083c2 <HAL_TIM_Base_Start_IT+0x62>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a32      	ldr	r2, [pc, #200]	; (800847c <HAL_TIM_Base_Start_IT+0x11c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d004      	beq.n	80083c2 <HAL_TIM_Base_Start_IT+0x62>
 80083b8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80083bc:	4830      	ldr	r0, [pc, #192]	; (8008480 <HAL_TIM_Base_Start_IT+0x120>)
 80083be:	f7fa fcda 	bl	8002d76 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d001      	beq.n	80083d2 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e044      	b.n	800845c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2202      	movs	r2, #2
 80083d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68da      	ldr	r2, [r3, #12]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f042 0201 	orr.w	r2, r2, #1
 80083e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a1d      	ldr	r2, [pc, #116]	; (8008464 <HAL_TIM_Base_Start_IT+0x104>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d018      	beq.n	8008426 <HAL_TIM_Base_Start_IT+0xc6>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083fc:	d013      	beq.n	8008426 <HAL_TIM_Base_Start_IT+0xc6>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a19      	ldr	r2, [pc, #100]	; (8008468 <HAL_TIM_Base_Start_IT+0x108>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d00e      	beq.n	8008426 <HAL_TIM_Base_Start_IT+0xc6>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a17      	ldr	r2, [pc, #92]	; (800846c <HAL_TIM_Base_Start_IT+0x10c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d009      	beq.n	8008426 <HAL_TIM_Base_Start_IT+0xc6>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a16      	ldr	r2, [pc, #88]	; (8008470 <HAL_TIM_Base_Start_IT+0x110>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d004      	beq.n	8008426 <HAL_TIM_Base_Start_IT+0xc6>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a14      	ldr	r2, [pc, #80]	; (8008474 <HAL_TIM_Base_Start_IT+0x114>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d111      	bne.n	800844a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f003 0307 	and.w	r3, r3, #7
 8008430:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2b06      	cmp	r3, #6
 8008436:	d010      	beq.n	800845a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0201 	orr.w	r2, r2, #1
 8008446:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008448:	e007      	b.n	800845a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f042 0201 	orr.w	r2, r2, #1
 8008458:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	40010000 	.word	0x40010000
 8008468:	40000400 	.word	0x40000400
 800846c:	40000800 	.word	0x40000800
 8008470:	40000c00 	.word	0x40000c00
 8008474:	40014000 	.word	0x40014000
 8008478:	40014400 	.word	0x40014400
 800847c:	40014800 	.word	0x40014800
 8008480:	08010a60 	.word	0x08010a60

08008484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e0a7      	b.n	80085e6 <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a55      	ldr	r2, [pc, #340]	; (80085f0 <HAL_TIM_PWM_Init+0x16c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d027      	beq.n	80084f0 <HAL_TIM_PWM_Init+0x6c>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084a8:	d022      	beq.n	80084f0 <HAL_TIM_PWM_Init+0x6c>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a51      	ldr	r2, [pc, #324]	; (80085f4 <HAL_TIM_PWM_Init+0x170>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d01d      	beq.n	80084f0 <HAL_TIM_PWM_Init+0x6c>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a4f      	ldr	r2, [pc, #316]	; (80085f8 <HAL_TIM_PWM_Init+0x174>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d018      	beq.n	80084f0 <HAL_TIM_PWM_Init+0x6c>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a4e      	ldr	r2, [pc, #312]	; (80085fc <HAL_TIM_PWM_Init+0x178>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d013      	beq.n	80084f0 <HAL_TIM_PWM_Init+0x6c>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a4c      	ldr	r2, [pc, #304]	; (8008600 <HAL_TIM_PWM_Init+0x17c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d00e      	beq.n	80084f0 <HAL_TIM_PWM_Init+0x6c>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a4b      	ldr	r2, [pc, #300]	; (8008604 <HAL_TIM_PWM_Init+0x180>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d009      	beq.n	80084f0 <HAL_TIM_PWM_Init+0x6c>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a49      	ldr	r2, [pc, #292]	; (8008608 <HAL_TIM_PWM_Init+0x184>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d004      	beq.n	80084f0 <HAL_TIM_PWM_Init+0x6c>
 80084e6:	f240 5129 	movw	r1, #1321	; 0x529
 80084ea:	4848      	ldr	r0, [pc, #288]	; (800860c <HAL_TIM_PWM_Init+0x188>)
 80084ec:	f7fa fc43 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d014      	beq.n	8008522 <HAL_TIM_PWM_Init+0x9e>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	2b10      	cmp	r3, #16
 80084fe:	d010      	beq.n	8008522 <HAL_TIM_PWM_Init+0x9e>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	2b20      	cmp	r3, #32
 8008506:	d00c      	beq.n	8008522 <HAL_TIM_PWM_Init+0x9e>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	2b40      	cmp	r3, #64	; 0x40
 800850e:	d008      	beq.n	8008522 <HAL_TIM_PWM_Init+0x9e>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	2b60      	cmp	r3, #96	; 0x60
 8008516:	d004      	beq.n	8008522 <HAL_TIM_PWM_Init+0x9e>
 8008518:	f240 512a 	movw	r1, #1322	; 0x52a
 800851c:	483b      	ldr	r0, [pc, #236]	; (800860c <HAL_TIM_PWM_Init+0x188>)
 800851e:	f7fa fc2a 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00e      	beq.n	8008548 <HAL_TIM_PWM_Init+0xc4>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008532:	d009      	beq.n	8008548 <HAL_TIM_PWM_Init+0xc4>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800853c:	d004      	beq.n	8008548 <HAL_TIM_PWM_Init+0xc4>
 800853e:	f240 512b 	movw	r1, #1323	; 0x52b
 8008542:	4832      	ldr	r0, [pc, #200]	; (800860c <HAL_TIM_PWM_Init+0x188>)
 8008544:	f7fa fc17 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d008      	beq.n	8008562 <HAL_TIM_PWM_Init+0xde>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	2b80      	cmp	r3, #128	; 0x80
 8008556:	d004      	beq.n	8008562 <HAL_TIM_PWM_Init+0xde>
 8008558:	f240 512c 	movw	r1, #1324	; 0x52c
 800855c:	482b      	ldr	r0, [pc, #172]	; (800860c <HAL_TIM_PWM_Init+0x188>)
 800855e:	f7fa fc0a 	bl	8002d76 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d106      	bne.n	800857c <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f84a 	bl	8008610 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3304      	adds	r3, #4
 800858c:	4619      	mov	r1, r3
 800858e:	4610      	mov	r0, r2
 8008590:	f000 ff5a 	bl	8009448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	40010000 	.word	0x40010000
 80085f4:	40000400 	.word	0x40000400
 80085f8:	40000800 	.word	0x40000800
 80085fc:	40000c00 	.word	0x40000c00
 8008600:	40014000 	.word	0x40014000
 8008604:	40014400 	.word	0x40014400
 8008608:	40014800 	.word	0x40014800
 800860c:	08010a60 	.word	0x08010a60

08008610 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a8a      	ldr	r2, [pc, #552]	; (800885c <HAL_TIM_PWM_Start+0x238>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d10b      	bne.n	8008650 <HAL_TIM_PWM_Start+0x2c>
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d06c      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2b04      	cmp	r3, #4
 8008642:	d069      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	2b08      	cmp	r3, #8
 8008648:	d066      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b0c      	cmp	r3, #12
 800864e:	d063      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008658:	d10b      	bne.n	8008672 <HAL_TIM_PWM_Start+0x4e>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d05b      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	2b04      	cmp	r3, #4
 8008664:	d058      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b08      	cmp	r3, #8
 800866a:	d055      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b0c      	cmp	r3, #12
 8008670:	d052      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a7a      	ldr	r2, [pc, #488]	; (8008860 <HAL_TIM_PWM_Start+0x23c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d10b      	bne.n	8008694 <HAL_TIM_PWM_Start+0x70>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d04a      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	2b04      	cmp	r3, #4
 8008686:	d047      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2b08      	cmp	r3, #8
 800868c:	d044      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b0c      	cmp	r3, #12
 8008692:	d041      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a72      	ldr	r2, [pc, #456]	; (8008864 <HAL_TIM_PWM_Start+0x240>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d10b      	bne.n	80086b6 <HAL_TIM_PWM_Start+0x92>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d039      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b04      	cmp	r3, #4
 80086a8:	d036      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d033      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b0c      	cmp	r3, #12
 80086b4:	d030      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a6b      	ldr	r2, [pc, #428]	; (8008868 <HAL_TIM_PWM_Start+0x244>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d10b      	bne.n	80086d8 <HAL_TIM_PWM_Start+0xb4>
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d028      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d025      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b08      	cmp	r3, #8
 80086d0:	d022      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2b0c      	cmp	r3, #12
 80086d6:	d01f      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a63      	ldr	r2, [pc, #396]	; (800886c <HAL_TIM_PWM_Start+0x248>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d105      	bne.n	80086ee <HAL_TIM_PWM_Start+0xca>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d017      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	d014      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a5f      	ldr	r2, [pc, #380]	; (8008870 <HAL_TIM_PWM_Start+0x24c>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d102      	bne.n	80086fe <HAL_TIM_PWM_Start+0xda>
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00c      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a5c      	ldr	r2, [pc, #368]	; (8008874 <HAL_TIM_PWM_Start+0x250>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d102      	bne.n	800870e <HAL_TIM_PWM_Start+0xea>
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <HAL_TIM_PWM_Start+0xf4>
 800870e:	f240 51af 	movw	r1, #1455	; 0x5af
 8008712:	4859      	ldr	r0, [pc, #356]	; (8008878 <HAL_TIM_PWM_Start+0x254>)
 8008714:	f7fa fb2f 	bl	8002d76 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d109      	bne.n	8008732 <HAL_TIM_PWM_Start+0x10e>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b01      	cmp	r3, #1
 8008728:	bf14      	ite	ne
 800872a:	2301      	movne	r3, #1
 800872c:	2300      	moveq	r3, #0
 800872e:	b2db      	uxtb	r3, r3
 8008730:	e022      	b.n	8008778 <HAL_TIM_PWM_Start+0x154>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b04      	cmp	r3, #4
 8008736:	d109      	bne.n	800874c <HAL_TIM_PWM_Start+0x128>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b01      	cmp	r3, #1
 8008742:	bf14      	ite	ne
 8008744:	2301      	movne	r3, #1
 8008746:	2300      	moveq	r3, #0
 8008748:	b2db      	uxtb	r3, r3
 800874a:	e015      	b.n	8008778 <HAL_TIM_PWM_Start+0x154>
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2b08      	cmp	r3, #8
 8008750:	d109      	bne.n	8008766 <HAL_TIM_PWM_Start+0x142>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b01      	cmp	r3, #1
 800875c:	bf14      	ite	ne
 800875e:	2301      	movne	r3, #1
 8008760:	2300      	moveq	r3, #0
 8008762:	b2db      	uxtb	r3, r3
 8008764:	e008      	b.n	8008778 <HAL_TIM_PWM_Start+0x154>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b01      	cmp	r3, #1
 8008770:	bf14      	ite	ne
 8008772:	2301      	movne	r3, #1
 8008774:	2300      	moveq	r3, #0
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <HAL_TIM_PWM_Start+0x15c>
  {
    return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e068      	b.n	8008852 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d104      	bne.n	8008790 <HAL_TIM_PWM_Start+0x16c>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2202      	movs	r2, #2
 800878a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800878e:	e013      	b.n	80087b8 <HAL_TIM_PWM_Start+0x194>
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	2b04      	cmp	r3, #4
 8008794:	d104      	bne.n	80087a0 <HAL_TIM_PWM_Start+0x17c>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2202      	movs	r2, #2
 800879a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800879e:	e00b      	b.n	80087b8 <HAL_TIM_PWM_Start+0x194>
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b08      	cmp	r3, #8
 80087a4:	d104      	bne.n	80087b0 <HAL_TIM_PWM_Start+0x18c>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2202      	movs	r2, #2
 80087aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087ae:	e003      	b.n	80087b8 <HAL_TIM_PWM_Start+0x194>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2201      	movs	r2, #1
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f001 f971 	bl	8009aa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a24      	ldr	r2, [pc, #144]	; (800885c <HAL_TIM_PWM_Start+0x238>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d107      	bne.n	80087e0 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a1d      	ldr	r2, [pc, #116]	; (800885c <HAL_TIM_PWM_Start+0x238>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d018      	beq.n	800881c <HAL_TIM_PWM_Start+0x1f8>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f2:	d013      	beq.n	800881c <HAL_TIM_PWM_Start+0x1f8>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a19      	ldr	r2, [pc, #100]	; (8008860 <HAL_TIM_PWM_Start+0x23c>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00e      	beq.n	800881c <HAL_TIM_PWM_Start+0x1f8>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a18      	ldr	r2, [pc, #96]	; (8008864 <HAL_TIM_PWM_Start+0x240>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d009      	beq.n	800881c <HAL_TIM_PWM_Start+0x1f8>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a16      	ldr	r2, [pc, #88]	; (8008868 <HAL_TIM_PWM_Start+0x244>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d004      	beq.n	800881c <HAL_TIM_PWM_Start+0x1f8>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a15      	ldr	r2, [pc, #84]	; (800886c <HAL_TIM_PWM_Start+0x248>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d111      	bne.n	8008840 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f003 0307 	and.w	r3, r3, #7
 8008826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2b06      	cmp	r3, #6
 800882c:	d010      	beq.n	8008850 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f042 0201 	orr.w	r2, r2, #1
 800883c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800883e:	e007      	b.n	8008850 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f042 0201 	orr.w	r2, r2, #1
 800884e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	40010000 	.word	0x40010000
 8008860:	40000400 	.word	0x40000400
 8008864:	40000800 	.word	0x40000800
 8008868:	40000c00 	.word	0x40000c00
 800886c:	40014000 	.word	0x40014000
 8008870:	40014400 	.word	0x40014400
 8008874:	40014800 	.word	0x40014800
 8008878:	08010a60 	.word	0x08010a60

0800887c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	2b02      	cmp	r3, #2
 8008890:	d122      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f003 0302 	and.w	r3, r3, #2
 800889c:	2b02      	cmp	r3, #2
 800889e:	d11b      	bne.n	80088d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f06f 0202 	mvn.w	r2, #2
 80088a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fda4 	bl	800940c <HAL_TIM_IC_CaptureCallback>
 80088c4:	e005      	b.n	80088d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fd96 	bl	80093f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fda7 	bl	8009420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	f003 0304 	and.w	r3, r3, #4
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d122      	bne.n	800892c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f003 0304 	and.w	r3, r3, #4
 80088f0:	2b04      	cmp	r3, #4
 80088f2:	d11b      	bne.n	800892c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0204 	mvn.w	r2, #4
 80088fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2202      	movs	r2, #2
 8008902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fd7a 	bl	800940c <HAL_TIM_IC_CaptureCallback>
 8008918:	e005      	b.n	8008926 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fd6c 	bl	80093f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fd7d 	bl	8009420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f003 0308 	and.w	r3, r3, #8
 8008936:	2b08      	cmp	r3, #8
 8008938:	d122      	bne.n	8008980 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f003 0308 	and.w	r3, r3, #8
 8008944:	2b08      	cmp	r3, #8
 8008946:	d11b      	bne.n	8008980 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f06f 0208 	mvn.w	r2, #8
 8008950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2204      	movs	r2, #4
 8008956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	69db      	ldr	r3, [r3, #28]
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fd50 	bl	800940c <HAL_TIM_IC_CaptureCallback>
 800896c:	e005      	b.n	800897a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fd42 	bl	80093f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fd53 	bl	8009420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	f003 0310 	and.w	r3, r3, #16
 800898a:	2b10      	cmp	r3, #16
 800898c:	d122      	bne.n	80089d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f003 0310 	and.w	r3, r3, #16
 8008998:	2b10      	cmp	r3, #16
 800899a:	d11b      	bne.n	80089d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f06f 0210 	mvn.w	r2, #16
 80089a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2208      	movs	r2, #8
 80089aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fd26 	bl	800940c <HAL_TIM_IC_CaptureCallback>
 80089c0:	e005      	b.n	80089ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fd18 	bl	80093f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fd29 	bl	8009420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d10e      	bne.n	8008a00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d107      	bne.n	8008a00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f06f 0201 	mvn.w	r2, #1
 80089f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7f9 fda8 	bl	8002550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a0a:	2b80      	cmp	r3, #128	; 0x80
 8008a0c:	d10e      	bne.n	8008a2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a18:	2b80      	cmp	r3, #128	; 0x80
 8008a1a:	d107      	bne.n	8008a2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f001 fa38 	bl	8009e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a36:	2b40      	cmp	r3, #64	; 0x40
 8008a38:	d10e      	bne.n	8008a58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a44:	2b40      	cmp	r3, #64	; 0x40
 8008a46:	d107      	bne.n	8008a58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fcee 	bl	8009434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b20      	cmp	r3, #32
 8008a64:	d10e      	bne.n	8008a84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	f003 0320 	and.w	r3, r3, #32
 8008a70:	2b20      	cmp	r3, #32
 8008a72:	d107      	bne.n	8008a84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f06f 0220 	mvn.w	r2, #32
 8008a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 fa02 	bl	8009e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a84:	bf00      	nop
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b086      	sub	sp, #24
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d010      	beq.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	d00d      	beq.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b08      	cmp	r3, #8
 8008aac:	d00a      	beq.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b0c      	cmp	r3, #12
 8008ab2:	d007      	beq.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b3c      	cmp	r3, #60	; 0x3c
 8008ab8:	d004      	beq.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8008aba:	f241 0177 	movw	r1, #4215	; 0x1077
 8008abe:	4893      	ldr	r0, [pc, #588]	; (8008d0c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008ac0:	f7fa f959 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b60      	cmp	r3, #96	; 0x60
 8008aca:	d008      	beq.n	8008ade <HAL_TIM_PWM_ConfigChannel+0x52>
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b70      	cmp	r3, #112	; 0x70
 8008ad2:	d004      	beq.n	8008ade <HAL_TIM_PWM_ConfigChannel+0x52>
 8008ad4:	f241 0178 	movw	r1, #4216	; 0x1078
 8008ad8:	488c      	ldr	r0, [pc, #560]	; (8008d0c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008ada:	f7fa f94c 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d008      	beq.n	8008af8 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d004      	beq.n	8008af8 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8008aee:	f241 0179 	movw	r1, #4217	; 0x1079
 8008af2:	4886      	ldr	r0, [pc, #536]	; (8008d0c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008af4:	f7fa f93f 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d008      	beq.n	8008b12 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	2b04      	cmp	r3, #4
 8008b06:	d004      	beq.n	8008b12 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008b08:	f241 017a 	movw	r1, #4218	; 0x107a
 8008b0c:	487f      	ldr	r0, [pc, #508]	; (8008d0c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008b0e:	f7fa f932 	bl	8002d76 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d101      	bne.n	8008b20 <HAL_TIM_PWM_ConfigChannel+0x94>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e14c      	b.n	8008dba <HAL_TIM_PWM_ConfigChannel+0x32e>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b0c      	cmp	r3, #12
 8008b2c:	f200 813d 	bhi.w	8008daa <HAL_TIM_PWM_ConfigChannel+0x31e>
 8008b30:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b6d 	.word	0x08008b6d
 8008b3c:	08008dab 	.word	0x08008dab
 8008b40:	08008dab 	.word	0x08008dab
 8008b44:	08008dab 	.word	0x08008dab
 8008b48:	08008c07 	.word	0x08008c07
 8008b4c:	08008dab 	.word	0x08008dab
 8008b50:	08008dab 	.word	0x08008dab
 8008b54:	08008dab 	.word	0x08008dab
 8008b58:	08008c8f 	.word	0x08008c8f
 8008b5c:	08008dab 	.word	0x08008dab
 8008b60:	08008dab 	.word	0x08008dab
 8008b64:	08008dab 	.word	0x08008dab
 8008b68:	08008d2d 	.word	0x08008d2d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a67      	ldr	r2, [pc, #412]	; (8008d10 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d027      	beq.n	8008bc6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b7e:	d022      	beq.n	8008bc6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a63      	ldr	r2, [pc, #396]	; (8008d14 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d01d      	beq.n	8008bc6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a62      	ldr	r2, [pc, #392]	; (8008d18 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d018      	beq.n	8008bc6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a60      	ldr	r2, [pc, #384]	; (8008d1c <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d013      	beq.n	8008bc6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a5f      	ldr	r2, [pc, #380]	; (8008d20 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d00e      	beq.n	8008bc6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a5d      	ldr	r2, [pc, #372]	; (8008d24 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d009      	beq.n	8008bc6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a5c      	ldr	r2, [pc, #368]	; (8008d28 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d004      	beq.n	8008bc6 <HAL_TIM_PWM_ConfigChannel+0x13a>
 8008bbc:	f241 0184 	movw	r1, #4228	; 0x1084
 8008bc0:	4852      	ldr	r0, [pc, #328]	; (8008d0c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008bc2:	f7fa f8d8 	bl	8002d76 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68b9      	ldr	r1, [r7, #8]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 fcbb 	bl	8009548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	699a      	ldr	r2, [r3, #24]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f042 0208 	orr.w	r2, r2, #8
 8008be0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	699a      	ldr	r2, [r3, #24]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f022 0204 	bic.w	r2, r2, #4
 8008bf0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6999      	ldr	r1, [r3, #24]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	691a      	ldr	r2, [r3, #16]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	619a      	str	r2, [r3, #24]
      break;
 8008c04:	e0d4      	b.n	8008db0 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a41      	ldr	r2, [pc, #260]	; (8008d10 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d01d      	beq.n	8008c4c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c18:	d018      	beq.n	8008c4c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a3d      	ldr	r2, [pc, #244]	; (8008d14 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d013      	beq.n	8008c4c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a3b      	ldr	r2, [pc, #236]	; (8008d18 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d00e      	beq.n	8008c4c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a3a      	ldr	r2, [pc, #232]	; (8008d1c <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d009      	beq.n	8008c4c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a38      	ldr	r2, [pc, #224]	; (8008d20 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d004      	beq.n	8008c4c <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8008c42:	f241 0195 	movw	r1, #4245	; 0x1095
 8008c46:	4831      	ldr	r0, [pc, #196]	; (8008d0c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008c48:	f7fa f895 	bl	8002d76 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68b9      	ldr	r1, [r7, #8]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 fd08 	bl	8009668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	699a      	ldr	r2, [r3, #24]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	699a      	ldr	r2, [r3, #24]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	6999      	ldr	r1, [r3, #24]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	021a      	lsls	r2, r3, #8
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	619a      	str	r2, [r3, #24]
      break;
 8008c8c:	e090      	b.n	8008db0 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a1f      	ldr	r2, [pc, #124]	; (8008d10 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d018      	beq.n	8008cca <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca0:	d013      	beq.n	8008cca <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a1b      	ldr	r2, [pc, #108]	; (8008d14 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d00e      	beq.n	8008cca <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a19      	ldr	r2, [pc, #100]	; (8008d18 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d009      	beq.n	8008cca <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a18      	ldr	r2, [pc, #96]	; (8008d1c <HAL_TIM_PWM_ConfigChannel+0x290>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d004      	beq.n	8008cca <HAL_TIM_PWM_ConfigChannel+0x23e>
 8008cc0:	f241 01a6 	movw	r1, #4262	; 0x10a6
 8008cc4:	4811      	ldr	r0, [pc, #68]	; (8008d0c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8008cc6:	f7fa f856 	bl	8002d76 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68b9      	ldr	r1, [r7, #8]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 fd5d 	bl	8009790 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	69da      	ldr	r2, [r3, #28]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f042 0208 	orr.w	r2, r2, #8
 8008ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	69da      	ldr	r2, [r3, #28]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f022 0204 	bic.w	r2, r2, #4
 8008cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	69d9      	ldr	r1, [r3, #28]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	691a      	ldr	r2, [r3, #16]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	430a      	orrs	r2, r1
 8008d06:	61da      	str	r2, [r3, #28]
      break;
 8008d08:	e052      	b.n	8008db0 <HAL_TIM_PWM_ConfigChannel+0x324>
 8008d0a:	bf00      	nop
 8008d0c:	08010a60 	.word	0x08010a60
 8008d10:	40010000 	.word	0x40010000
 8008d14:	40000400 	.word	0x40000400
 8008d18:	40000800 	.word	0x40000800
 8008d1c:	40000c00 	.word	0x40000c00
 8008d20:	40014000 	.word	0x40014000
 8008d24:	40014400 	.word	0x40014400
 8008d28:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a24      	ldr	r2, [pc, #144]	; (8008dc4 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d018      	beq.n	8008d68 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d3e:	d013      	beq.n	8008d68 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a20      	ldr	r2, [pc, #128]	; (8008dc8 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d00e      	beq.n	8008d68 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a1f      	ldr	r2, [pc, #124]	; (8008dcc <HAL_TIM_PWM_ConfigChannel+0x340>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d009      	beq.n	8008d68 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a1d      	ldr	r2, [pc, #116]	; (8008dd0 <HAL_TIM_PWM_ConfigChannel+0x344>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d004      	beq.n	8008d68 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8008d5e:	f241 01b7 	movw	r1, #4279	; 0x10b7
 8008d62:	481c      	ldr	r0, [pc, #112]	; (8008dd4 <HAL_TIM_PWM_ConfigChannel+0x348>)
 8008d64:	f7fa f807 	bl	8002d76 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68b9      	ldr	r1, [r7, #8]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 fda2 	bl	80098b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	69da      	ldr	r2, [r3, #28]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d82:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	69da      	ldr	r2, [r3, #28]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	69d9      	ldr	r1, [r3, #28]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	021a      	lsls	r2, r3, #8
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	61da      	str	r2, [r3, #28]
      break;
 8008da8:	e002      	b.n	8008db0 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	75fb      	strb	r3, [r7, #23]
      break;
 8008dae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40010000 	.word	0x40010000
 8008dc8:	40000400 	.word	0x40000400
 8008dcc:	40000800 	.word	0x40000800
 8008dd0:	40000c00 	.word	0x40000c00
 8008dd4:	08010a60 	.word	0x08010a60

08008dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d101      	bne.n	8008df4 <HAL_TIM_ConfigClockSource+0x1c>
 8008df0:	2302      	movs	r3, #2
 8008df2:	e2f0      	b.n	80093d6 <HAL_TIM_ConfigClockSource+0x5fe>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2202      	movs	r2, #2
 8008e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e0c:	d029      	beq.n	8008e62 <HAL_TIM_ConfigClockSource+0x8a>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2b70      	cmp	r3, #112	; 0x70
 8008e14:	d025      	beq.n	8008e62 <HAL_TIM_ConfigClockSource+0x8a>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e1e:	d020      	beq.n	8008e62 <HAL_TIM_ConfigClockSource+0x8a>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b40      	cmp	r3, #64	; 0x40
 8008e26:	d01c      	beq.n	8008e62 <HAL_TIM_ConfigClockSource+0x8a>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b50      	cmp	r3, #80	; 0x50
 8008e2e:	d018      	beq.n	8008e62 <HAL_TIM_ConfigClockSource+0x8a>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b60      	cmp	r3, #96	; 0x60
 8008e36:	d014      	beq.n	8008e62 <HAL_TIM_ConfigClockSource+0x8a>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d010      	beq.n	8008e62 <HAL_TIM_ConfigClockSource+0x8a>
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b10      	cmp	r3, #16
 8008e46:	d00c      	beq.n	8008e62 <HAL_TIM_ConfigClockSource+0x8a>
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b20      	cmp	r3, #32
 8008e4e:	d008      	beq.n	8008e62 <HAL_TIM_ConfigClockSource+0x8a>
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b30      	cmp	r3, #48	; 0x30
 8008e56:	d004      	beq.n	8008e62 <HAL_TIM_ConfigClockSource+0x8a>
 8008e58:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8008e5c:	487c      	ldr	r0, [pc, #496]	; (8009050 <HAL_TIM_ConfigClockSource+0x278>)
 8008e5e:	f7f9 ff8a 	bl	8002d76 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008e70:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e78:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e8a:	f000 80f1 	beq.w	8009070 <HAL_TIM_ConfigClockSource+0x298>
 8008e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e92:	f200 8293 	bhi.w	80093bc <HAL_TIM_ConfigClockSource+0x5e4>
 8008e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e9a:	d02d      	beq.n	8008ef8 <HAL_TIM_ConfigClockSource+0x120>
 8008e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea0:	f200 828c 	bhi.w	80093bc <HAL_TIM_ConfigClockSource+0x5e4>
 8008ea4:	2b70      	cmp	r3, #112	; 0x70
 8008ea6:	d05d      	beq.n	8008f64 <HAL_TIM_ConfigClockSource+0x18c>
 8008ea8:	2b70      	cmp	r3, #112	; 0x70
 8008eaa:	f200 8287 	bhi.w	80093bc <HAL_TIM_ConfigClockSource+0x5e4>
 8008eae:	2b60      	cmp	r3, #96	; 0x60
 8008eb0:	f000 81a0 	beq.w	80091f4 <HAL_TIM_ConfigClockSource+0x41c>
 8008eb4:	2b60      	cmp	r3, #96	; 0x60
 8008eb6:	f200 8281 	bhi.w	80093bc <HAL_TIM_ConfigClockSource+0x5e4>
 8008eba:	2b50      	cmp	r3, #80	; 0x50
 8008ebc:	f000 8144 	beq.w	8009148 <HAL_TIM_ConfigClockSource+0x370>
 8008ec0:	2b50      	cmp	r3, #80	; 0x50
 8008ec2:	f200 827b 	bhi.w	80093bc <HAL_TIM_ConfigClockSource+0x5e4>
 8008ec6:	2b40      	cmp	r3, #64	; 0x40
 8008ec8:	f000 81f6 	beq.w	80092b8 <HAL_TIM_ConfigClockSource+0x4e0>
 8008ecc:	2b40      	cmp	r3, #64	; 0x40
 8008ece:	f200 8275 	bhi.w	80093bc <HAL_TIM_ConfigClockSource+0x5e4>
 8008ed2:	2b30      	cmp	r3, #48	; 0x30
 8008ed4:	f000 8246 	beq.w	8009364 <HAL_TIM_ConfigClockSource+0x58c>
 8008ed8:	2b30      	cmp	r3, #48	; 0x30
 8008eda:	f200 826f 	bhi.w	80093bc <HAL_TIM_ConfigClockSource+0x5e4>
 8008ede:	2b20      	cmp	r3, #32
 8008ee0:	f000 8240 	beq.w	8009364 <HAL_TIM_ConfigClockSource+0x58c>
 8008ee4:	2b20      	cmp	r3, #32
 8008ee6:	f200 8269 	bhi.w	80093bc <HAL_TIM_ConfigClockSource+0x5e4>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 823a 	beq.w	8009364 <HAL_TIM_ConfigClockSource+0x58c>
 8008ef0:	2b10      	cmp	r3, #16
 8008ef2:	f000 8237 	beq.w	8009364 <HAL_TIM_ConfigClockSource+0x58c>
 8008ef6:	e261      	b.n	80093bc <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a55      	ldr	r2, [pc, #340]	; (8009054 <HAL_TIM_ConfigClockSource+0x27c>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	f000 825f 	beq.w	80093c2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0c:	f000 8259 	beq.w	80093c2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a50      	ldr	r2, [pc, #320]	; (8009058 <HAL_TIM_ConfigClockSource+0x280>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	f000 8253 	beq.w	80093c2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a4e      	ldr	r2, [pc, #312]	; (800905c <HAL_TIM_ConfigClockSource+0x284>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	f000 824d 	beq.w	80093c2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a4c      	ldr	r2, [pc, #304]	; (8009060 <HAL_TIM_ConfigClockSource+0x288>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	f000 8247 	beq.w	80093c2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a4a      	ldr	r2, [pc, #296]	; (8009064 <HAL_TIM_ConfigClockSource+0x28c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	f000 8241 	beq.w	80093c2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a48      	ldr	r2, [pc, #288]	; (8009068 <HAL_TIM_ConfigClockSource+0x290>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	f000 823b 	beq.w	80093c2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a46      	ldr	r2, [pc, #280]	; (800906c <HAL_TIM_ConfigClockSource+0x294>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	f000 8235 	beq.w	80093c2 <HAL_TIM_ConfigClockSource+0x5ea>
 8008f58:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8008f5c:	483c      	ldr	r0, [pc, #240]	; (8009050 <HAL_TIM_ConfigClockSource+0x278>)
 8008f5e:	f7f9 ff0a 	bl	8002d76 <assert_failed>
      break;
 8008f62:	e22e      	b.n	80093c2 <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a3a      	ldr	r2, [pc, #232]	; (8009054 <HAL_TIM_ConfigClockSource+0x27c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d01d      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x1d2>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f76:	d018      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x1d2>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a36      	ldr	r2, [pc, #216]	; (8009058 <HAL_TIM_ConfigClockSource+0x280>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d013      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x1d2>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a35      	ldr	r2, [pc, #212]	; (800905c <HAL_TIM_ConfigClockSource+0x284>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d00e      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x1d2>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a33      	ldr	r2, [pc, #204]	; (8009060 <HAL_TIM_ConfigClockSource+0x288>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d009      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x1d2>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a32      	ldr	r2, [pc, #200]	; (8009064 <HAL_TIM_ConfigClockSource+0x28c>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d004      	beq.n	8008faa <HAL_TIM_ConfigClockSource+0x1d2>
 8008fa0:	f241 41ca 	movw	r1, #5322	; 0x14ca
 8008fa4:	482a      	ldr	r0, [pc, #168]	; (8009050 <HAL_TIM_ConfigClockSource+0x278>)
 8008fa6:	f7f9 fee6 	bl	8002d76 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d013      	beq.n	8008fda <HAL_TIM_ConfigClockSource+0x202>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fba:	d00e      	beq.n	8008fda <HAL_TIM_ConfigClockSource+0x202>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fc4:	d009      	beq.n	8008fda <HAL_TIM_ConfigClockSource+0x202>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008fce:	d004      	beq.n	8008fda <HAL_TIM_ConfigClockSource+0x202>
 8008fd0:	f241 41cd 	movw	r1, #5325	; 0x14cd
 8008fd4:	481e      	ldr	r0, [pc, #120]	; (8009050 <HAL_TIM_ConfigClockSource+0x278>)
 8008fd6:	f7f9 fece 	bl	8002d76 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe2:	d014      	beq.n	800900e <HAL_TIM_ConfigClockSource+0x236>
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d010      	beq.n	800900e <HAL_TIM_ConfigClockSource+0x236>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00c      	beq.n	800900e <HAL_TIM_ConfigClockSource+0x236>
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d008      	beq.n	800900e <HAL_TIM_ConfigClockSource+0x236>
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	2b0a      	cmp	r3, #10
 8009002:	d004      	beq.n	800900e <HAL_TIM_ConfigClockSource+0x236>
 8009004:	f241 41ce 	movw	r1, #5326	; 0x14ce
 8009008:	4811      	ldr	r0, [pc, #68]	; (8009050 <HAL_TIM_ConfigClockSource+0x278>)
 800900a:	f7f9 feb4 	bl	8002d76 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	2b0f      	cmp	r3, #15
 8009014:	d904      	bls.n	8009020 <HAL_TIM_ConfigClockSource+0x248>
 8009016:	f241 41cf 	movw	r1, #5327	; 0x14cf
 800901a:	480d      	ldr	r0, [pc, #52]	; (8009050 <HAL_TIM_ConfigClockSource+0x278>)
 800901c:	f7f9 feab 	bl	8002d76 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	6899      	ldr	r1, [r3, #8]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	f000 fd1a 	bl	8009a68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009042:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	609a      	str	r2, [r3, #8]
      break;
 800904c:	e1ba      	b.n	80093c4 <HAL_TIM_ConfigClockSource+0x5ec>
 800904e:	bf00      	nop
 8009050:	08010a60 	.word	0x08010a60
 8009054:	40010000 	.word	0x40010000
 8009058:	40000400 	.word	0x40000400
 800905c:	40000800 	.word	0x40000800
 8009060:	40000c00 	.word	0x40000c00
 8009064:	40014000 	.word	0x40014000
 8009068:	40014400 	.word	0x40014400
 800906c:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a8a      	ldr	r2, [pc, #552]	; (80092a0 <HAL_TIM_ConfigClockSource+0x4c8>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d018      	beq.n	80090ac <HAL_TIM_ConfigClockSource+0x2d4>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009082:	d013      	beq.n	80090ac <HAL_TIM_ConfigClockSource+0x2d4>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a86      	ldr	r2, [pc, #536]	; (80092a4 <HAL_TIM_ConfigClockSource+0x4cc>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d00e      	beq.n	80090ac <HAL_TIM_ConfigClockSource+0x2d4>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a85      	ldr	r2, [pc, #532]	; (80092a8 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d009      	beq.n	80090ac <HAL_TIM_ConfigClockSource+0x2d4>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a83      	ldr	r2, [pc, #524]	; (80092ac <HAL_TIM_ConfigClockSource+0x4d4>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d004      	beq.n	80090ac <HAL_TIM_ConfigClockSource+0x2d4>
 80090a2:	f241 41e2 	movw	r1, #5346	; 0x14e2
 80090a6:	4882      	ldr	r0, [pc, #520]	; (80092b0 <HAL_TIM_ConfigClockSource+0x4d8>)
 80090a8:	f7f9 fe65 	bl	8002d76 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d013      	beq.n	80090dc <HAL_TIM_ConfigClockSource+0x304>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090bc:	d00e      	beq.n	80090dc <HAL_TIM_ConfigClockSource+0x304>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090c6:	d009      	beq.n	80090dc <HAL_TIM_ConfigClockSource+0x304>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090d0:	d004      	beq.n	80090dc <HAL_TIM_ConfigClockSource+0x304>
 80090d2:	f241 41e5 	movw	r1, #5349	; 0x14e5
 80090d6:	4876      	ldr	r0, [pc, #472]	; (80092b0 <HAL_TIM_ConfigClockSource+0x4d8>)
 80090d8:	f7f9 fe4d 	bl	8002d76 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090e4:	d014      	beq.n	8009110 <HAL_TIM_ConfigClockSource+0x338>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d010      	beq.n	8009110 <HAL_TIM_ConfigClockSource+0x338>
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00c      	beq.n	8009110 <HAL_TIM_ConfigClockSource+0x338>
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d008      	beq.n	8009110 <HAL_TIM_ConfigClockSource+0x338>
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	2b0a      	cmp	r3, #10
 8009104:	d004      	beq.n	8009110 <HAL_TIM_ConfigClockSource+0x338>
 8009106:	f241 41e6 	movw	r1, #5350	; 0x14e6
 800910a:	4869      	ldr	r0, [pc, #420]	; (80092b0 <HAL_TIM_ConfigClockSource+0x4d8>)
 800910c:	f7f9 fe33 	bl	8002d76 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	2b0f      	cmp	r3, #15
 8009116:	d904      	bls.n	8009122 <HAL_TIM_ConfigClockSource+0x34a>
 8009118:	f241 41e7 	movw	r1, #5351	; 0x14e7
 800911c:	4864      	ldr	r0, [pc, #400]	; (80092b0 <HAL_TIM_ConfigClockSource+0x4d8>)
 800911e:	f7f9 fe2a 	bl	8002d76 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	6899      	ldr	r1, [r3, #8]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	f000 fc99 	bl	8009a68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689a      	ldr	r2, [r3, #8]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009144:	609a      	str	r2, [r3, #8]
      break;
 8009146:	e13d      	b.n	80093c4 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a54      	ldr	r2, [pc, #336]	; (80092a0 <HAL_TIM_ConfigClockSource+0x4c8>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d01d      	beq.n	800918e <HAL_TIM_ConfigClockSource+0x3b6>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800915a:	d018      	beq.n	800918e <HAL_TIM_ConfigClockSource+0x3b6>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a50      	ldr	r2, [pc, #320]	; (80092a4 <HAL_TIM_ConfigClockSource+0x4cc>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d013      	beq.n	800918e <HAL_TIM_ConfigClockSource+0x3b6>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a4f      	ldr	r2, [pc, #316]	; (80092a8 <HAL_TIM_ConfigClockSource+0x4d0>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d00e      	beq.n	800918e <HAL_TIM_ConfigClockSource+0x3b6>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a4d      	ldr	r2, [pc, #308]	; (80092ac <HAL_TIM_ConfigClockSource+0x4d4>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d009      	beq.n	800918e <HAL_TIM_ConfigClockSource+0x3b6>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a4d      	ldr	r2, [pc, #308]	; (80092b4 <HAL_TIM_ConfigClockSource+0x4dc>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d004      	beq.n	800918e <HAL_TIM_ConfigClockSource+0x3b6>
 8009184:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8009188:	4849      	ldr	r0, [pc, #292]	; (80092b0 <HAL_TIM_ConfigClockSource+0x4d8>)
 800918a:	f7f9 fdf4 	bl	8002d76 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009196:	d014      	beq.n	80091c2 <HAL_TIM_ConfigClockSource+0x3ea>
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d010      	beq.n	80091c2 <HAL_TIM_ConfigClockSource+0x3ea>
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00c      	beq.n	80091c2 <HAL_TIM_ConfigClockSource+0x3ea>
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d008      	beq.n	80091c2 <HAL_TIM_ConfigClockSource+0x3ea>
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	2b0a      	cmp	r3, #10
 80091b6:	d004      	beq.n	80091c2 <HAL_TIM_ConfigClockSource+0x3ea>
 80091b8:	f241 41f9 	movw	r1, #5369	; 0x14f9
 80091bc:	483c      	ldr	r0, [pc, #240]	; (80092b0 <HAL_TIM_ConfigClockSource+0x4d8>)
 80091be:	f7f9 fdda 	bl	8002d76 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	2b0f      	cmp	r3, #15
 80091c8:	d904      	bls.n	80091d4 <HAL_TIM_ConfigClockSource+0x3fc>
 80091ca:	f241 41fa 	movw	r1, #5370	; 0x14fa
 80091ce:	4838      	ldr	r0, [pc, #224]	; (80092b0 <HAL_TIM_ConfigClockSource+0x4d8>)
 80091d0:	f7f9 fdd1 	bl	8002d76 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	6859      	ldr	r1, [r3, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	461a      	mov	r2, r3
 80091e2:	f000 fbc7 	bl	8009974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2150      	movs	r1, #80	; 0x50
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 fc20 	bl	8009a32 <TIM_ITRx_SetConfig>
      break;
 80091f2:	e0e7      	b.n	80093c4 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a29      	ldr	r2, [pc, #164]	; (80092a0 <HAL_TIM_ConfigClockSource+0x4c8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d01d      	beq.n	800923a <HAL_TIM_ConfigClockSource+0x462>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009206:	d018      	beq.n	800923a <HAL_TIM_ConfigClockSource+0x462>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a25      	ldr	r2, [pc, #148]	; (80092a4 <HAL_TIM_ConfigClockSource+0x4cc>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d013      	beq.n	800923a <HAL_TIM_ConfigClockSource+0x462>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a24      	ldr	r2, [pc, #144]	; (80092a8 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d00e      	beq.n	800923a <HAL_TIM_ConfigClockSource+0x462>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a22      	ldr	r2, [pc, #136]	; (80092ac <HAL_TIM_ConfigClockSource+0x4d4>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d009      	beq.n	800923a <HAL_TIM_ConfigClockSource+0x462>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a22      	ldr	r2, [pc, #136]	; (80092b4 <HAL_TIM_ConfigClockSource+0x4dc>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d004      	beq.n	800923a <HAL_TIM_ConfigClockSource+0x462>
 8009230:	f241 5106 	movw	r1, #5382	; 0x1506
 8009234:	481e      	ldr	r0, [pc, #120]	; (80092b0 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009236:	f7f9 fd9e 	bl	8002d76 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009242:	d014      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x496>
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d010      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x496>
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00c      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x496>
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	2b02      	cmp	r3, #2
 800925a:	d008      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x496>
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	2b0a      	cmp	r3, #10
 8009262:	d004      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x496>
 8009264:	f241 5109 	movw	r1, #5385	; 0x1509
 8009268:	4811      	ldr	r0, [pc, #68]	; (80092b0 <HAL_TIM_ConfigClockSource+0x4d8>)
 800926a:	f7f9 fd84 	bl	8002d76 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	2b0f      	cmp	r3, #15
 8009274:	d904      	bls.n	8009280 <HAL_TIM_ConfigClockSource+0x4a8>
 8009276:	f241 510a 	movw	r1, #5386	; 0x150a
 800927a:	480d      	ldr	r0, [pc, #52]	; (80092b0 <HAL_TIM_ConfigClockSource+0x4d8>)
 800927c:	f7f9 fd7b 	bl	8002d76 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6818      	ldr	r0, [r3, #0]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	6859      	ldr	r1, [r3, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	461a      	mov	r2, r3
 800928e:	f000 fba0 	bl	80099d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2160      	movs	r1, #96	; 0x60
 8009298:	4618      	mov	r0, r3
 800929a:	f000 fbca 	bl	8009a32 <TIM_ITRx_SetConfig>
      break;
 800929e:	e091      	b.n	80093c4 <HAL_TIM_ConfigClockSource+0x5ec>
 80092a0:	40010000 	.word	0x40010000
 80092a4:	40000400 	.word	0x40000400
 80092a8:	40000800 	.word	0x40000800
 80092ac:	40000c00 	.word	0x40000c00
 80092b0:	08010a60 	.word	0x08010a60
 80092b4:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a48      	ldr	r2, [pc, #288]	; (80093e0 <HAL_TIM_ConfigClockSource+0x608>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d01d      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x526>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ca:	d018      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x526>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a44      	ldr	r2, [pc, #272]	; (80093e4 <HAL_TIM_ConfigClockSource+0x60c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d013      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x526>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a43      	ldr	r2, [pc, #268]	; (80093e8 <HAL_TIM_ConfigClockSource+0x610>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d00e      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x526>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a41      	ldr	r2, [pc, #260]	; (80093ec <HAL_TIM_ConfigClockSource+0x614>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d009      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x526>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a40      	ldr	r2, [pc, #256]	; (80093f0 <HAL_TIM_ConfigClockSource+0x618>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d004      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x526>
 80092f4:	f241 5116 	movw	r1, #5398	; 0x1516
 80092f8:	483e      	ldr	r0, [pc, #248]	; (80093f4 <HAL_TIM_ConfigClockSource+0x61c>)
 80092fa:	f7f9 fd3c 	bl	8002d76 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009306:	d014      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x55a>
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d010      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x55a>
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00c      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x55a>
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	2b02      	cmp	r3, #2
 800931e:	d008      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x55a>
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	2b0a      	cmp	r3, #10
 8009326:	d004      	beq.n	8009332 <HAL_TIM_ConfigClockSource+0x55a>
 8009328:	f241 5119 	movw	r1, #5401	; 0x1519
 800932c:	4831      	ldr	r0, [pc, #196]	; (80093f4 <HAL_TIM_ConfigClockSource+0x61c>)
 800932e:	f7f9 fd22 	bl	8002d76 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
 8009336:	2b0f      	cmp	r3, #15
 8009338:	d904      	bls.n	8009344 <HAL_TIM_ConfigClockSource+0x56c>
 800933a:	f241 511a 	movw	r1, #5402	; 0x151a
 800933e:	482d      	ldr	r0, [pc, #180]	; (80093f4 <HAL_TIM_ConfigClockSource+0x61c>)
 8009340:	f7f9 fd19 	bl	8002d76 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	6859      	ldr	r1, [r3, #4]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	461a      	mov	r2, r3
 8009352:	f000 fb0f 	bl	8009974 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2140      	movs	r1, #64	; 0x40
 800935c:	4618      	mov	r0, r3
 800935e:	f000 fb68 	bl	8009a32 <TIM_ITRx_SetConfig>
      break;
 8009362:	e02f      	b.n	80093c4 <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a1d      	ldr	r2, [pc, #116]	; (80093e0 <HAL_TIM_ConfigClockSource+0x608>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d01d      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0x5d2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009376:	d018      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0x5d2>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a19      	ldr	r2, [pc, #100]	; (80093e4 <HAL_TIM_ConfigClockSource+0x60c>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d013      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0x5d2>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a18      	ldr	r2, [pc, #96]	; (80093e8 <HAL_TIM_ConfigClockSource+0x610>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00e      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0x5d2>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a16      	ldr	r2, [pc, #88]	; (80093ec <HAL_TIM_ConfigClockSource+0x614>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d009      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0x5d2>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a15      	ldr	r2, [pc, #84]	; (80093f0 <HAL_TIM_ConfigClockSource+0x618>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d004      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0x5d2>
 80093a0:	f241 5129 	movw	r1, #5417	; 0x1529
 80093a4:	4813      	ldr	r0, [pc, #76]	; (80093f4 <HAL_TIM_ConfigClockSource+0x61c>)
 80093a6:	f7f9 fce6 	bl	8002d76 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4619      	mov	r1, r3
 80093b4:	4610      	mov	r0, r2
 80093b6:	f000 fb3c 	bl	8009a32 <TIM_ITRx_SetConfig>
      break;
 80093ba:	e003      	b.n	80093c4 <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	73fb      	strb	r3, [r7, #15]
      break;
 80093c0:	e000      	b.n	80093c4 <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 80093c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	40010000 	.word	0x40010000
 80093e4:	40000400 	.word	0x40000400
 80093e8:	40000800 	.word	0x40000800
 80093ec:	40000c00 	.word	0x40000c00
 80093f0:	40014000 	.word	0x40014000
 80093f4:	08010a60 	.word	0x08010a60

080093f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a34      	ldr	r2, [pc, #208]	; (800952c <TIM_Base_SetConfig+0xe4>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d00f      	beq.n	8009480 <TIM_Base_SetConfig+0x38>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009466:	d00b      	beq.n	8009480 <TIM_Base_SetConfig+0x38>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a31      	ldr	r2, [pc, #196]	; (8009530 <TIM_Base_SetConfig+0xe8>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d007      	beq.n	8009480 <TIM_Base_SetConfig+0x38>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a30      	ldr	r2, [pc, #192]	; (8009534 <TIM_Base_SetConfig+0xec>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d003      	beq.n	8009480 <TIM_Base_SetConfig+0x38>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a2f      	ldr	r2, [pc, #188]	; (8009538 <TIM_Base_SetConfig+0xf0>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d108      	bne.n	8009492 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4313      	orrs	r3, r2
 8009490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a25      	ldr	r2, [pc, #148]	; (800952c <TIM_Base_SetConfig+0xe4>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d01b      	beq.n	80094d2 <TIM_Base_SetConfig+0x8a>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a0:	d017      	beq.n	80094d2 <TIM_Base_SetConfig+0x8a>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a22      	ldr	r2, [pc, #136]	; (8009530 <TIM_Base_SetConfig+0xe8>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d013      	beq.n	80094d2 <TIM_Base_SetConfig+0x8a>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a21      	ldr	r2, [pc, #132]	; (8009534 <TIM_Base_SetConfig+0xec>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d00f      	beq.n	80094d2 <TIM_Base_SetConfig+0x8a>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a20      	ldr	r2, [pc, #128]	; (8009538 <TIM_Base_SetConfig+0xf0>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d00b      	beq.n	80094d2 <TIM_Base_SetConfig+0x8a>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a1f      	ldr	r2, [pc, #124]	; (800953c <TIM_Base_SetConfig+0xf4>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d007      	beq.n	80094d2 <TIM_Base_SetConfig+0x8a>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a1e      	ldr	r2, [pc, #120]	; (8009540 <TIM_Base_SetConfig+0xf8>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d003      	beq.n	80094d2 <TIM_Base_SetConfig+0x8a>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <TIM_Base_SetConfig+0xfc>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d108      	bne.n	80094e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	689a      	ldr	r2, [r3, #8]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a08      	ldr	r2, [pc, #32]	; (800952c <TIM_Base_SetConfig+0xe4>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d103      	bne.n	8009518 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	691a      	ldr	r2, [r3, #16]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	615a      	str	r2, [r3, #20]
}
 800951e:	bf00      	nop
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	40010000 	.word	0x40010000
 8009530:	40000400 	.word	0x40000400
 8009534:	40000800 	.word	0x40000800
 8009538:	40000c00 	.word	0x40000c00
 800953c:	40014000 	.word	0x40014000
 8009540:	40014400 	.word	0x40014400
 8009544:	40014800 	.word	0x40014800

08009548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	f023 0201 	bic.w	r2, r3, #1
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	699b      	ldr	r3, [r3, #24]
 800956e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f023 0303 	bic.w	r3, r3, #3
 800957e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	4313      	orrs	r3, r2
 8009588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	f023 0302 	bic.w	r3, r3, #2
 8009590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	4313      	orrs	r3, r2
 800959a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a30      	ldr	r2, [pc, #192]	; (8009660 <TIM_OC1_SetConfig+0x118>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d119      	bne.n	80095d8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d008      	beq.n	80095be <TIM_OC1_SetConfig+0x76>
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	2b08      	cmp	r3, #8
 80095b2:	d004      	beq.n	80095be <TIM_OC1_SetConfig+0x76>
 80095b4:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 80095b8:	482a      	ldr	r0, [pc, #168]	; (8009664 <TIM_OC1_SetConfig+0x11c>)
 80095ba:	f7f9 fbdc 	bl	8002d76 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f023 0308 	bic.w	r3, r3, #8
 80095c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f023 0304 	bic.w	r3, r3, #4
 80095d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a21      	ldr	r2, [pc, #132]	; (8009660 <TIM_OC1_SetConfig+0x118>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d12d      	bne.n	800963c <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095e8:	d008      	beq.n	80095fc <TIM_OC1_SetConfig+0xb4>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d004      	beq.n	80095fc <TIM_OC1_SetConfig+0xb4>
 80095f2:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 80095f6:	481b      	ldr	r0, [pc, #108]	; (8009664 <TIM_OC1_SetConfig+0x11c>)
 80095f8:	f7f9 fbbd 	bl	8002d76 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	695b      	ldr	r3, [r3, #20]
 8009600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009604:	d008      	beq.n	8009618 <TIM_OC1_SetConfig+0xd0>
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <TIM_OC1_SetConfig+0xd0>
 800960e:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 8009612:	4814      	ldr	r0, [pc, #80]	; (8009664 <TIM_OC1_SetConfig+0x11c>)
 8009614:	f7f9 fbaf 	bl	8002d76 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800961e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	4313      	orrs	r3, r2
 8009630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	4313      	orrs	r3, r2
 800963a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	621a      	str	r2, [r3, #32]
}
 8009656:	bf00      	nop
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	40010000 	.word	0x40010000
 8009664:	08010a60 	.word	0x08010a60

08009668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	f023 0210 	bic.w	r2, r3, #16
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800969e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	021b      	lsls	r3, r3, #8
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f023 0320 	bic.w	r3, r3, #32
 80096b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	689b      	ldr	r3, [r3, #8]
 80096b8:	011b      	lsls	r3, r3, #4
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	4313      	orrs	r3, r2
 80096be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a31      	ldr	r2, [pc, #196]	; (8009788 <TIM_OC2_SetConfig+0x120>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d11a      	bne.n	80096fe <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d008      	beq.n	80096e2 <TIM_OC2_SetConfig+0x7a>
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	2b08      	cmp	r3, #8
 80096d6:	d004      	beq.n	80096e2 <TIM_OC2_SetConfig+0x7a>
 80096d8:	f641 3112 	movw	r1, #6930	; 0x1b12
 80096dc:	482b      	ldr	r0, [pc, #172]	; (800978c <TIM_OC2_SetConfig+0x124>)
 80096de:	f7f9 fb4a 	bl	8002d76 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	011b      	lsls	r3, r3, #4
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096fc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a21      	ldr	r2, [pc, #132]	; (8009788 <TIM_OC2_SetConfig+0x120>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d12f      	bne.n	8009766 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800970e:	d008      	beq.n	8009722 <TIM_OC2_SetConfig+0xba>
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d004      	beq.n	8009722 <TIM_OC2_SetConfig+0xba>
 8009718:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 800971c:	481b      	ldr	r0, [pc, #108]	; (800978c <TIM_OC2_SetConfig+0x124>)
 800971e:	f7f9 fb2a 	bl	8002d76 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800972a:	d008      	beq.n	800973e <TIM_OC2_SetConfig+0xd6>
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	695b      	ldr	r3, [r3, #20]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d004      	beq.n	800973e <TIM_OC2_SetConfig+0xd6>
 8009734:	f641 3121 	movw	r1, #6945	; 0x1b21
 8009738:	4814      	ldr	r0, [pc, #80]	; (800978c <TIM_OC2_SetConfig+0x124>)
 800973a:	f7f9 fb1c 	bl	8002d76 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800974c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	4313      	orrs	r3, r2
 8009758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	4313      	orrs	r3, r2
 8009764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	621a      	str	r2, [r3, #32]
}
 8009780:	bf00      	nop
 8009782:	3718      	adds	r7, #24
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}
 8009788:	40010000 	.word	0x40010000
 800978c:	08010a60 	.word	0x08010a60

08009790 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f023 0303 	bic.w	r3, r3, #3
 80097c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	021b      	lsls	r3, r3, #8
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a31      	ldr	r2, [pc, #196]	; (80098b0 <TIM_OC3_SetConfig+0x120>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d11a      	bne.n	8009824 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d008      	beq.n	8009808 <TIM_OC3_SetConfig+0x78>
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	2b08      	cmp	r3, #8
 80097fc:	d004      	beq.n	8009808 <TIM_OC3_SetConfig+0x78>
 80097fe:	f641 315d 	movw	r1, #7005	; 0x1b5d
 8009802:	482c      	ldr	r0, [pc, #176]	; (80098b4 <TIM_OC3_SetConfig+0x124>)
 8009804:	f7f9 fab7 	bl	8002d76 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800980e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	021b      	lsls	r3, r3, #8
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4313      	orrs	r3, r2
 800981a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009822:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a22      	ldr	r2, [pc, #136]	; (80098b0 <TIM_OC3_SetConfig+0x120>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d12f      	bne.n	800988c <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009834:	d008      	beq.n	8009848 <TIM_OC3_SetConfig+0xb8>
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d004      	beq.n	8009848 <TIM_OC3_SetConfig+0xb8>
 800983e:	f641 316a 	movw	r1, #7018	; 0x1b6a
 8009842:	481c      	ldr	r0, [pc, #112]	; (80098b4 <TIM_OC3_SetConfig+0x124>)
 8009844:	f7f9 fa97 	bl	8002d76 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	695b      	ldr	r3, [r3, #20]
 800984c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009850:	d008      	beq.n	8009864 <TIM_OC3_SetConfig+0xd4>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d004      	beq.n	8009864 <TIM_OC3_SetConfig+0xd4>
 800985a:	f641 316b 	movw	r1, #7019	; 0x1b6b
 800985e:	4815      	ldr	r0, [pc, #84]	; (80098b4 <TIM_OC3_SetConfig+0x124>)
 8009860:	f7f9 fa89 	bl	8002d76 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800986a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	011b      	lsls	r3, r3, #4
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	4313      	orrs	r3, r2
 800987e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	011b      	lsls	r3, r3, #4
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	4313      	orrs	r3, r2
 800988a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	621a      	str	r2, [r3, #32]
}
 80098a6:	bf00      	nop
 80098a8:	3718      	adds	r7, #24
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	40010000 	.word	0x40010000
 80098b4:	08010a60 	.word	0x08010a60

080098b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	69db      	ldr	r3, [r3, #28]
 80098de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	021b      	lsls	r3, r3, #8
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	031b      	lsls	r3, r3, #12
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	4313      	orrs	r3, r2
 800990e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a16      	ldr	r2, [pc, #88]	; (800996c <TIM_OC4_SetConfig+0xb4>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d117      	bne.n	8009948 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	695b      	ldr	r3, [r3, #20]
 800991c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009920:	d008      	beq.n	8009934 <TIM_OC4_SetConfig+0x7c>
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d004      	beq.n	8009934 <TIM_OC4_SetConfig+0x7c>
 800992a:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 800992e:	4810      	ldr	r0, [pc, #64]	; (8009970 <TIM_OC4_SetConfig+0xb8>)
 8009930:	f7f9 fa21 	bl	8002d76 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800993a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	019b      	lsls	r3, r3, #6
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	4313      	orrs	r3, r2
 8009946:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	621a      	str	r2, [r3, #32]
}
 8009962:	bf00      	nop
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	40010000 	.word	0x40010000
 8009970:	08010a60 	.word	0x08010a60

08009974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009974:	b480      	push	{r7}
 8009976:	b087      	sub	sp, #28
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6a1b      	ldr	r3, [r3, #32]
 8009984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	f023 0201 	bic.w	r2, r3, #1
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800999e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	011b      	lsls	r3, r3, #4
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f023 030a 	bic.w	r3, r3, #10
 80099b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	621a      	str	r2, [r3, #32]
}
 80099c6:	bf00      	nop
 80099c8:	371c      	adds	r7, #28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b087      	sub	sp, #28
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	60f8      	str	r0, [r7, #12]
 80099da:	60b9      	str	r1, [r7, #8]
 80099dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	f023 0210 	bic.w	r2, r3, #16
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6a1b      	ldr	r3, [r3, #32]
 80099f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	031b      	lsls	r3, r3, #12
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	4313      	orrs	r3, r2
 8009a06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	011b      	lsls	r3, r3, #4
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	621a      	str	r2, [r3, #32]
}
 8009a26:	bf00      	nop
 8009a28:	371c      	adds	r7, #28
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b085      	sub	sp, #20
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	f043 0307 	orr.w	r3, r3, #7
 8009a54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	609a      	str	r2, [r3, #8]
}
 8009a5c:	bf00      	nop
 8009a5e:	3714      	adds	r7, #20
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	021a      	lsls	r2, r3, #8
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	609a      	str	r2, [r3, #8]
}
 8009a9c:	bf00      	nop
 8009a9e:	371c      	adds	r7, #28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4a2a      	ldr	r2, [pc, #168]	; (8009b60 <TIM_CCxChannelCmd+0xb8>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d020      	beq.n	8009afe <TIM_CCxChannelCmd+0x56>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ac2:	d01c      	beq.n	8009afe <TIM_CCxChannelCmd+0x56>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	4a27      	ldr	r2, [pc, #156]	; (8009b64 <TIM_CCxChannelCmd+0xbc>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d018      	beq.n	8009afe <TIM_CCxChannelCmd+0x56>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4a26      	ldr	r2, [pc, #152]	; (8009b68 <TIM_CCxChannelCmd+0xc0>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d014      	beq.n	8009afe <TIM_CCxChannelCmd+0x56>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	4a25      	ldr	r2, [pc, #148]	; (8009b6c <TIM_CCxChannelCmd+0xc4>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d010      	beq.n	8009afe <TIM_CCxChannelCmd+0x56>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4a24      	ldr	r2, [pc, #144]	; (8009b70 <TIM_CCxChannelCmd+0xc8>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d00c      	beq.n	8009afe <TIM_CCxChannelCmd+0x56>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4a23      	ldr	r2, [pc, #140]	; (8009b74 <TIM_CCxChannelCmd+0xcc>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d008      	beq.n	8009afe <TIM_CCxChannelCmd+0x56>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	4a22      	ldr	r2, [pc, #136]	; (8009b78 <TIM_CCxChannelCmd+0xd0>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d004      	beq.n	8009afe <TIM_CCxChannelCmd+0x56>
 8009af4:	f641 5194 	movw	r1, #7572	; 0x1d94
 8009af8:	4820      	ldr	r0, [pc, #128]	; (8009b7c <TIM_CCxChannelCmd+0xd4>)
 8009afa:	f7f9 f93c 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d010      	beq.n	8009b26 <TIM_CCxChannelCmd+0x7e>
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b04      	cmp	r3, #4
 8009b08:	d00d      	beq.n	8009b26 <TIM_CCxChannelCmd+0x7e>
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	2b08      	cmp	r3, #8
 8009b0e:	d00a      	beq.n	8009b26 <TIM_CCxChannelCmd+0x7e>
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	2b0c      	cmp	r3, #12
 8009b14:	d007      	beq.n	8009b26 <TIM_CCxChannelCmd+0x7e>
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	2b3c      	cmp	r3, #60	; 0x3c
 8009b1a:	d004      	beq.n	8009b26 <TIM_CCxChannelCmd+0x7e>
 8009b1c:	f641 5195 	movw	r1, #7573	; 0x1d95
 8009b20:	4816      	ldr	r0, [pc, #88]	; (8009b7c <TIM_CCxChannelCmd+0xd4>)
 8009b22:	f7f9 f928 	bl	8002d76 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	f003 031f 	and.w	r3, r3, #31
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b32:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6a1a      	ldr	r2, [r3, #32]
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	43db      	mvns	r3, r3
 8009b3c:	401a      	ands	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6a1a      	ldr	r2, [r3, #32]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f003 031f 	and.w	r3, r3, #31
 8009b4c:	6879      	ldr	r1, [r7, #4]
 8009b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b52:	431a      	orrs	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	621a      	str	r2, [r3, #32]
}
 8009b58:	bf00      	nop
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	40010000 	.word	0x40010000
 8009b64:	40000400 	.word	0x40000400
 8009b68:	40000800 	.word	0x40000800
 8009b6c:	40000c00 	.word	0x40000c00
 8009b70:	40014000 	.word	0x40014000
 8009b74:	40014400 	.word	0x40014400
 8009b78:	40014800 	.word	0x40014800
 8009b7c:	08010a60 	.word	0x08010a60

08009b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a55      	ldr	r2, [pc, #340]	; (8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d018      	beq.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b9c:	d013      	beq.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a51      	ldr	r2, [pc, #324]	; (8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d00e      	beq.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a4f      	ldr	r2, [pc, #316]	; (8009cec <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d009      	beq.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a4e      	ldr	r2, [pc, #312]	; (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d004      	beq.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8009bbc:	f240 71b1 	movw	r1, #1969	; 0x7b1
 8009bc0:	484c      	ldr	r0, [pc, #304]	; (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009bc2:	f7f9 f8d8 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d020      	beq.n	8009c10 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b10      	cmp	r3, #16
 8009bd4:	d01c      	beq.n	8009c10 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b20      	cmp	r3, #32
 8009bdc:	d018      	beq.n	8009c10 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b30      	cmp	r3, #48	; 0x30
 8009be4:	d014      	beq.n	8009c10 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b40      	cmp	r3, #64	; 0x40
 8009bec:	d010      	beq.n	8009c10 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b50      	cmp	r3, #80	; 0x50
 8009bf4:	d00c      	beq.n	8009c10 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b60      	cmp	r3, #96	; 0x60
 8009bfc:	d008      	beq.n	8009c10 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b70      	cmp	r3, #112	; 0x70
 8009c04:	d004      	beq.n	8009c10 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8009c06:	f240 71b2 	movw	r1, #1970	; 0x7b2
 8009c0a:	483a      	ldr	r0, [pc, #232]	; (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009c0c:	f7f9 f8b3 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	2b80      	cmp	r3, #128	; 0x80
 8009c16:	d008      	beq.n	8009c2a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d004      	beq.n	8009c2a <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8009c20:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8009c24:	4833      	ldr	r0, [pc, #204]	; (8009cf4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009c26:	f7f9 f8a6 	bl	8002d76 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d101      	bne.n	8009c38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009c34:	2302      	movs	r3, #2
 8009c36:	e050      	b.n	8009cda <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2202      	movs	r2, #2
 8009c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a1b      	ldr	r2, [pc, #108]	; (8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d018      	beq.n	8009cae <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c84:	d013      	beq.n	8009cae <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a17      	ldr	r2, [pc, #92]	; (8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d00e      	beq.n	8009cae <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a15      	ldr	r2, [pc, #84]	; (8009cec <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d009      	beq.n	8009cae <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a14      	ldr	r2, [pc, #80]	; (8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d004      	beq.n	8009cae <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a13      	ldr	r2, [pc, #76]	; (8009cf8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d10c      	bne.n	8009cc8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	40010000 	.word	0x40010000
 8009ce8:	40000400 	.word	0x40000400
 8009cec:	40000800 	.word	0x40000800
 8009cf0:	40000c00 	.word	0x40000c00
 8009cf4:	08010a98 	.word	0x08010a98
 8009cf8:	40014000 	.word	0x40014000

08009cfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d06:	2300      	movs	r3, #0
 8009d08:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a5c      	ldr	r2, [pc, #368]	; (8009e80 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d004      	beq.n	8009d1e <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 8009d14:	f240 71ee 	movw	r1, #2030	; 0x7ee
 8009d18:	485a      	ldr	r0, [pc, #360]	; (8009e84 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8009d1a:	f7f9 f82c 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d26:	d008      	beq.n	8009d3a <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d004      	beq.n	8009d3a <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 8009d30:	f240 71ef 	movw	r1, #2031	; 0x7ef
 8009d34:	4853      	ldr	r0, [pc, #332]	; (8009e84 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8009d36:	f7f9 f81e 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d42:	d008      	beq.n	8009d56 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d004      	beq.n	8009d56 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 8009d4c:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8009d50:	484c      	ldr	r0, [pc, #304]	; (8009e84 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8009d52:	f7f9 f810 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d013      	beq.n	8009d86 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d66:	d00e      	beq.n	8009d86 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d70:	d009      	beq.n	8009d86 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d7a:	d004      	beq.n	8009d86 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 8009d7c:	f240 71f1 	movw	r1, #2033	; 0x7f1
 8009d80:	4840      	ldr	r0, [pc, #256]	; (8009e84 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8009d82:	f7f8 fff8 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	2bff      	cmp	r3, #255	; 0xff
 8009d8c:	d904      	bls.n	8009d98 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 8009d8e:	f240 71f2 	movw	r1, #2034	; 0x7f2
 8009d92:	483c      	ldr	r0, [pc, #240]	; (8009e84 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8009d94:	f7f8 ffef 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009da0:	d008      	beq.n	8009db4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d004      	beq.n	8009db4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8009daa:	f240 71f3 	movw	r1, #2035	; 0x7f3
 8009dae:	4835      	ldr	r0, [pc, #212]	; (8009e84 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8009db0:	f7f8 ffe1 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d009      	beq.n	8009dd0 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dc4:	d004      	beq.n	8009dd0 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 8009dc6:	f240 71f4 	movw	r1, #2036	; 0x7f4
 8009dca:	482e      	ldr	r0, [pc, #184]	; (8009e84 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8009dcc:	f7f8 ffd3 	bl	8002d76 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	69db      	ldr	r3, [r3, #28]
 8009dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dd8:	d008      	beq.n	8009dec <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d004      	beq.n	8009dec <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 8009de2:	f240 71f5 	movw	r1, #2037	; 0x7f5
 8009de6:	4827      	ldr	r0, [pc, #156]	; (8009e84 <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 8009de8:	f7f8 ffc5 	bl	8002d76 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d101      	bne.n	8009dfa <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 8009df6:	2302      	movs	r3, #2
 8009df8:	e03d      	b.n	8009e76 <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	695b      	ldr	r3, [r3, #20]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	40010000 	.word	0x40010000
 8009e84:	08010a98 	.word	0x08010a98

08009e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e0a0      	b.n	800a004 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d02c      	beq.n	8009f24 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a4f      	ldr	r2, [pc, #316]	; (800a00c <HAL_UART_Init+0x15c>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d00e      	beq.n	8009ef2 <HAL_UART_Init+0x42>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a4d      	ldr	r2, [pc, #308]	; (800a010 <HAL_UART_Init+0x160>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d009      	beq.n	8009ef2 <HAL_UART_Init+0x42>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a4c      	ldr	r2, [pc, #304]	; (800a014 <HAL_UART_Init+0x164>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d004      	beq.n	8009ef2 <HAL_UART_Init+0x42>
 8009ee8:	f240 1173 	movw	r1, #371	; 0x173
 8009eec:	484a      	ldr	r0, [pc, #296]	; (800a018 <HAL_UART_Init+0x168>)
 8009eee:	f7f8 ff42 	bl	8002d76 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d028      	beq.n	8009f4c <HAL_UART_Init+0x9c>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	699b      	ldr	r3, [r3, #24]
 8009efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f02:	d023      	beq.n	8009f4c <HAL_UART_Init+0x9c>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f0c:	d01e      	beq.n	8009f4c <HAL_UART_Init+0x9c>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f16:	d019      	beq.n	8009f4c <HAL_UART_Init+0x9c>
 8009f18:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8009f1c:	483e      	ldr	r0, [pc, #248]	; (800a018 <HAL_UART_Init+0x168>)
 8009f1e:	f7f8 ff2a 	bl	8002d76 <assert_failed>
 8009f22:	e013      	b.n	8009f4c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a38      	ldr	r2, [pc, #224]	; (800a00c <HAL_UART_Init+0x15c>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d00e      	beq.n	8009f4c <HAL_UART_Init+0x9c>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a37      	ldr	r2, [pc, #220]	; (800a010 <HAL_UART_Init+0x160>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d009      	beq.n	8009f4c <HAL_UART_Init+0x9c>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a35      	ldr	r2, [pc, #212]	; (800a014 <HAL_UART_Init+0x164>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d004      	beq.n	8009f4c <HAL_UART_Init+0x9c>
 8009f42:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8009f46:	4834      	ldr	r0, [pc, #208]	; (800a018 <HAL_UART_Init+0x168>)
 8009f48:	f7f8 ff15 	bl	8002d76 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d009      	beq.n	8009f68 <HAL_UART_Init+0xb8>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f5c:	d004      	beq.n	8009f68 <HAL_UART_Init+0xb8>
 8009f5e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8009f62:	482d      	ldr	r0, [pc, #180]	; (800a018 <HAL_UART_Init+0x168>)
 8009f64:	f7f8 ff07 	bl	8002d76 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	69db      	ldr	r3, [r3, #28]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d009      	beq.n	8009f84 <HAL_UART_Init+0xd4>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	69db      	ldr	r3, [r3, #28]
 8009f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f78:	d004      	beq.n	8009f84 <HAL_UART_Init+0xd4>
 8009f7a:	f240 117b 	movw	r1, #379	; 0x17b
 8009f7e:	4826      	ldr	r0, [pc, #152]	; (800a018 <HAL_UART_Init+0x168>)
 8009f80:	f7f8 fef9 	bl	8002d76 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d106      	bne.n	8009f9e <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7f9 fa9b 	bl	80034d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2224      	movs	r2, #36	; 0x24
 8009fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68da      	ldr	r2, [r3, #12]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fe1a 	bl	800abf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	691a      	ldr	r2, [r3, #16]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009fca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	695a      	ldr	r2, [r3, #20]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009fda:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68da      	ldr	r2, [r3, #12]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2220      	movs	r2, #32
 8009ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2220      	movs	r2, #32
 8009ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	40011000 	.word	0x40011000
 800a010:	40004400 	.word	0x40004400
 800a014:	40011400 	.word	0x40011400
 800a018:	08010ad4 	.word	0x08010ad4

0800a01c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b08a      	sub	sp, #40	; 0x28
 800a020:	af02      	add	r7, sp, #8
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	603b      	str	r3, [r7, #0]
 800a028:	4613      	mov	r3, r2
 800a02a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a02c:	2300      	movs	r3, #0
 800a02e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b20      	cmp	r3, #32
 800a03a:	d17c      	bne.n	800a136 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <HAL_UART_Transmit+0x2c>
 800a042:	88fb      	ldrh	r3, [r7, #6]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d101      	bne.n	800a04c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e075      	b.n	800a138 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a052:	2b01      	cmp	r3, #1
 800a054:	d101      	bne.n	800a05a <HAL_UART_Transmit+0x3e>
 800a056:	2302      	movs	r3, #2
 800a058:	e06e      	b.n	800a138 <HAL_UART_Transmit+0x11c>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2221      	movs	r2, #33	; 0x21
 800a06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a070:	f7fa fb7a 	bl	8004768 <HAL_GetTick>
 800a074:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	88fa      	ldrh	r2, [r7, #6]
 800a07a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	88fa      	ldrh	r2, [r7, #6]
 800a080:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a08a:	d108      	bne.n	800a09e <HAL_UART_Transmit+0x82>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d104      	bne.n	800a09e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a094:	2300      	movs	r3, #0
 800a096:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	61bb      	str	r3, [r7, #24]
 800a09c:	e003      	b.n	800a0a6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a0ae:	e02a      	b.n	800a106 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	2180      	movs	r1, #128	; 0x80
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 fb52 	bl	800a764 <UART_WaitOnFlagUntilTimeout>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e036      	b.n	800a138 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10b      	bne.n	800a0e8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	881b      	ldrh	r3, [r3, #0]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0de:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	3302      	adds	r3, #2
 800a0e4:	61bb      	str	r3, [r7, #24]
 800a0e6:	e007      	b.n	800a0f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	781a      	ldrb	r2, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	3b01      	subs	r3, #1
 800a100:	b29a      	uxth	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1cf      	bne.n	800a0b0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	2200      	movs	r2, #0
 800a118:	2140      	movs	r1, #64	; 0x40
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 fb22 	bl	800a764 <UART_WaitOnFlagUntilTimeout>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e006      	b.n	800a138 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2220      	movs	r2, #32
 800a12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	e000      	b.n	800a138 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a136:	2302      	movs	r3, #2
  }
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3720      	adds	r7, #32
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b08c      	sub	sp, #48	; 0x30
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	4613      	mov	r3, r2
 800a14c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b20      	cmp	r3, #32
 800a158:	d152      	bne.n	800a200 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800a160:	88fb      	ldrh	r3, [r7, #6]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800a166:	2301      	movs	r3, #1
 800a168:	e04b      	b.n	800a202 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a170:	2b01      	cmp	r3, #1
 800a172:	d101      	bne.n	800a178 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800a174:	2302      	movs	r3, #2
 800a176:	e044      	b.n	800a202 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2201      	movs	r2, #1
 800a184:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800a186:	88fb      	ldrh	r3, [r7, #6]
 800a188:	461a      	mov	r2, r3
 800a18a:	68b9      	ldr	r1, [r7, #8]
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 fb57 	bl	800a840 <UART_Start_Receive_IT>
 800a192:	4603      	mov	r3, r0
 800a194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a198:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d12c      	bne.n	800a1fa <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d125      	bne.n	800a1f4 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	613b      	str	r3, [r7, #16]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	613b      	str	r3, [r7, #16]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	613b      	str	r3, [r7, #16]
 800a1bc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	330c      	adds	r3, #12
 800a1c4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	e853 3f00 	ldrex	r3, [r3]
 800a1cc:	617b      	str	r3, [r7, #20]
   return(result);
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f043 0310 	orr.w	r3, r3, #16
 800a1d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	330c      	adds	r3, #12
 800a1dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1de:	627a      	str	r2, [r7, #36]	; 0x24
 800a1e0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e2:	6a39      	ldr	r1, [r7, #32]
 800a1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e6:	e841 2300 	strex	r3, r2, [r1]
 800a1ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d1e5      	bne.n	800a1be <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800a1f2:	e002      	b.n	800a1fa <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a1fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1fe:	e000      	b.n	800a202 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a200:	2302      	movs	r3, #2
  }
}
 800a202:	4618      	mov	r0, r3
 800a204:	3730      	adds	r7, #48	; 0x30
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
	...

0800a20c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b0ba      	sub	sp, #232	; 0xe8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a232:	2300      	movs	r3, #0
 800a234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a238:	2300      	movs	r3, #0
 800a23a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a23e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a242:	f003 030f 	and.w	r3, r3, #15
 800a246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a24a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10f      	bne.n	800a272 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a256:	f003 0320 	and.w	r3, r3, #32
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d009      	beq.n	800a272 <HAL_UART_IRQHandler+0x66>
 800a25e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a262:	f003 0320 	and.w	r3, r3, #32
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fc05 	bl	800aa7a <UART_Receive_IT>
      return;
 800a270:	e256      	b.n	800a720 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a272:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 80de 	beq.w	800a438 <HAL_UART_IRQHandler+0x22c>
 800a27c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a280:	f003 0301 	and.w	r3, r3, #1
 800a284:	2b00      	cmp	r3, #0
 800a286:	d106      	bne.n	800a296 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a28c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 80d1 	beq.w	800a438 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00b      	beq.n	800a2ba <HAL_UART_IRQHandler+0xae>
 800a2a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d005      	beq.n	800a2ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b2:	f043 0201 	orr.w	r2, r3, #1
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2be:	f003 0304 	and.w	r3, r3, #4
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00b      	beq.n	800a2de <HAL_UART_IRQHandler+0xd2>
 800a2c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d005      	beq.n	800a2de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d6:	f043 0202 	orr.w	r2, r3, #2
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2e2:	f003 0302 	and.w	r3, r3, #2
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00b      	beq.n	800a302 <HAL_UART_IRQHandler+0xf6>
 800a2ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2ee:	f003 0301 	and.w	r3, r3, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fa:	f043 0204 	orr.w	r2, r3, #4
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a306:	f003 0308 	and.w	r3, r3, #8
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d011      	beq.n	800a332 <HAL_UART_IRQHandler+0x126>
 800a30e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a312:	f003 0320 	and.w	r3, r3, #32
 800a316:	2b00      	cmp	r3, #0
 800a318:	d105      	bne.n	800a326 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a31a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d005      	beq.n	800a332 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	f043 0208 	orr.w	r2, r3, #8
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 81ed 	beq.w	800a716 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a340:	f003 0320 	and.w	r3, r3, #32
 800a344:	2b00      	cmp	r3, #0
 800a346:	d008      	beq.n	800a35a <HAL_UART_IRQHandler+0x14e>
 800a348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a34c:	f003 0320 	and.w	r3, r3, #32
 800a350:	2b00      	cmp	r3, #0
 800a352:	d002      	beq.n	800a35a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fb90 	bl	800aa7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	695b      	ldr	r3, [r3, #20]
 800a360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a364:	2b40      	cmp	r3, #64	; 0x40
 800a366:	bf0c      	ite	eq
 800a368:	2301      	moveq	r3, #1
 800a36a:	2300      	movne	r3, #0
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a376:	f003 0308 	and.w	r3, r3, #8
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d103      	bne.n	800a386 <HAL_UART_IRQHandler+0x17a>
 800a37e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a382:	2b00      	cmp	r3, #0
 800a384:	d04f      	beq.n	800a426 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fa98 	bl	800a8bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a396:	2b40      	cmp	r3, #64	; 0x40
 800a398:	d141      	bne.n	800a41e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3314      	adds	r3, #20
 800a3a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a3a8:	e853 3f00 	ldrex	r3, [r3]
 800a3ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a3b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3314      	adds	r3, #20
 800a3c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a3c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a3ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a3d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a3d6:	e841 2300 	strex	r3, r2, [r1]
 800a3da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a3de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1d9      	bne.n	800a39a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d013      	beq.n	800a416 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f2:	4a7d      	ldr	r2, [pc, #500]	; (800a5e8 <HAL_UART_IRQHandler+0x3dc>)
 800a3f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fb f894 	bl	8005528 <HAL_DMA_Abort_IT>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d016      	beq.n	800a434 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a410:	4610      	mov	r0, r2
 800a412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a414:	e00e      	b.n	800a434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f99a 	bl	800a750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a41c:	e00a      	b.n	800a434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f996 	bl	800a750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a424:	e006      	b.n	800a434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f992 	bl	800a750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a432:	e170      	b.n	800a716 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a434:	bf00      	nop
    return;
 800a436:	e16e      	b.n	800a716 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	f040 814a 	bne.w	800a6d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a446:	f003 0310 	and.w	r3, r3, #16
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f000 8143 	beq.w	800a6d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a454:	f003 0310 	and.w	r3, r3, #16
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f000 813c 	beq.w	800a6d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a45e:	2300      	movs	r3, #0
 800a460:	60bb      	str	r3, [r7, #8]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	60bb      	str	r3, [r7, #8]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	60bb      	str	r3, [r7, #8]
 800a472:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a47e:	2b40      	cmp	r3, #64	; 0x40
 800a480:	f040 80b4 	bne.w	800a5ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a490:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 8140 	beq.w	800a71a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a49e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	f080 8139 	bcs.w	800a71a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b4:	69db      	ldr	r3, [r3, #28]
 800a4b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ba:	f000 8088 	beq.w	800a5ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	330c      	adds	r3, #12
 800a4c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4cc:	e853 3f00 	ldrex	r3, [r3]
 800a4d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a4d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	330c      	adds	r3, #12
 800a4e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a4ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a4ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a4f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a4fa:	e841 2300 	strex	r3, r2, [r1]
 800a4fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a506:	2b00      	cmp	r3, #0
 800a508:	d1d9      	bne.n	800a4be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3314      	adds	r3, #20
 800a510:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a514:	e853 3f00 	ldrex	r3, [r3]
 800a518:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a51a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a51c:	f023 0301 	bic.w	r3, r3, #1
 800a520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3314      	adds	r3, #20
 800a52a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a52e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a532:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a534:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a536:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a53a:	e841 2300 	strex	r3, r2, [r1]
 800a53e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1e1      	bne.n	800a50a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3314      	adds	r3, #20
 800a54c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a550:	e853 3f00 	ldrex	r3, [r3]
 800a554:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a55c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3314      	adds	r3, #20
 800a566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a56a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a56c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a570:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a572:	e841 2300 	strex	r3, r2, [r1]
 800a576:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1e3      	bne.n	800a546 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2220      	movs	r2, #32
 800a582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	330c      	adds	r3, #12
 800a592:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a596:	e853 3f00 	ldrex	r3, [r3]
 800a59a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a59c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a59e:	f023 0310 	bic.w	r3, r3, #16
 800a5a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	330c      	adds	r3, #12
 800a5ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a5b0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a5b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5b8:	e841 2300 	strex	r3, r2, [r1]
 800a5bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a5be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d1e3      	bne.n	800a58c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fa ff3d 	bl	8005448 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7f7 ff9a 	bl	8002518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a5e4:	e099      	b.n	800a71a <HAL_UART_IRQHandler+0x50e>
 800a5e6:	bf00      	nop
 800a5e8:	0800a983 	.word	0x0800a983
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a600:	b29b      	uxth	r3, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	f000 808b 	beq.w	800a71e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 8086 	beq.w	800a71e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	330c      	adds	r3, #12
 800a618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61c:	e853 3f00 	ldrex	r3, [r3]
 800a620:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	330c      	adds	r3, #12
 800a632:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a636:	647a      	str	r2, [r7, #68]	; 0x44
 800a638:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a63c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a63e:	e841 2300 	strex	r3, r2, [r1]
 800a642:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1e3      	bne.n	800a612 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3314      	adds	r3, #20
 800a650:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	e853 3f00 	ldrex	r3, [r3]
 800a658:	623b      	str	r3, [r7, #32]
   return(result);
 800a65a:	6a3b      	ldr	r3, [r7, #32]
 800a65c:	f023 0301 	bic.w	r3, r3, #1
 800a660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	3314      	adds	r3, #20
 800a66a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a66e:	633a      	str	r2, [r7, #48]	; 0x30
 800a670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a676:	e841 2300 	strex	r3, r2, [r1]
 800a67a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1e3      	bne.n	800a64a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2220      	movs	r2, #32
 800a686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	330c      	adds	r3, #12
 800a696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	e853 3f00 	ldrex	r3, [r3]
 800a69e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f023 0310 	bic.w	r3, r3, #16
 800a6a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	330c      	adds	r3, #12
 800a6b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a6b4:	61fa      	str	r2, [r7, #28]
 800a6b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b8:	69b9      	ldr	r1, [r7, #24]
 800a6ba:	69fa      	ldr	r2, [r7, #28]
 800a6bc:	e841 2300 	strex	r3, r2, [r1]
 800a6c0:	617b      	str	r3, [r7, #20]
   return(result);
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1e3      	bne.n	800a690 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f7f7 ff22 	bl	8002518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a6d4:	e023      	b.n	800a71e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d009      	beq.n	800a6f6 <HAL_UART_IRQHandler+0x4ea>
 800a6e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d003      	beq.n	800a6f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f95b 	bl	800a9aa <UART_Transmit_IT>
    return;
 800a6f4:	e014      	b.n	800a720 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a6f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00e      	beq.n	800a720 <HAL_UART_IRQHandler+0x514>
 800a702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d008      	beq.n	800a720 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f99b 	bl	800aa4a <UART_EndTransmit_IT>
    return;
 800a714:	e004      	b.n	800a720 <HAL_UART_IRQHandler+0x514>
    return;
 800a716:	bf00      	nop
 800a718:	e002      	b.n	800a720 <HAL_UART_IRQHandler+0x514>
      return;
 800a71a:	bf00      	nop
 800a71c:	e000      	b.n	800a720 <HAL_UART_IRQHandler+0x514>
      return;
 800a71e:	bf00      	nop
  }
}
 800a720:	37e8      	adds	r7, #232	; 0xe8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop

0800a728 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b090      	sub	sp, #64	; 0x40
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	603b      	str	r3, [r7, #0]
 800a770:	4613      	mov	r3, r2
 800a772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a774:	e050      	b.n	800a818 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77c:	d04c      	beq.n	800a818 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a77e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a780:	2b00      	cmp	r3, #0
 800a782:	d007      	beq.n	800a794 <UART_WaitOnFlagUntilTimeout+0x30>
 800a784:	f7f9 fff0 	bl	8004768 <HAL_GetTick>
 800a788:	4602      	mov	r2, r0
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a790:	429a      	cmp	r2, r3
 800a792:	d241      	bcs.n	800a818 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	330c      	adds	r3, #12
 800a79a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79e:	e853 3f00 	ldrex	r3, [r3]
 800a7a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	330c      	adds	r3, #12
 800a7b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7b4:	637a      	str	r2, [r7, #52]	; 0x34
 800a7b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a7ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7bc:	e841 2300 	strex	r3, r2, [r1]
 800a7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d1e5      	bne.n	800a794 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3314      	adds	r3, #20
 800a7ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	e853 3f00 	ldrex	r3, [r3]
 800a7d6:	613b      	str	r3, [r7, #16]
   return(result);
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	f023 0301 	bic.w	r3, r3, #1
 800a7de:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3314      	adds	r3, #20
 800a7e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7e8:	623a      	str	r2, [r7, #32]
 800a7ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ec:	69f9      	ldr	r1, [r7, #28]
 800a7ee:	6a3a      	ldr	r2, [r7, #32]
 800a7f0:	e841 2300 	strex	r3, r2, [r1]
 800a7f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d1e5      	bne.n	800a7c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2220      	movs	r2, #32
 800a800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2220      	movs	r2, #32
 800a808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a814:	2303      	movs	r3, #3
 800a816:	e00f      	b.n	800a838 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	681a      	ldr	r2, [r3, #0]
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	4013      	ands	r3, r2
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	429a      	cmp	r2, r3
 800a826:	bf0c      	ite	eq
 800a828:	2301      	moveq	r3, #1
 800a82a:	2300      	movne	r3, #0
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	461a      	mov	r2, r3
 800a830:	79fb      	ldrb	r3, [r7, #7]
 800a832:	429a      	cmp	r2, r3
 800a834:	d09f      	beq.n	800a776 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3740      	adds	r7, #64	; 0x40
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	4613      	mov	r3, r2
 800a84c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	88fa      	ldrh	r2, [r7, #6]
 800a858:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	88fa      	ldrh	r2, [r7, #6]
 800a85e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2222      	movs	r2, #34	; 0x22
 800a86a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d007      	beq.n	800a88e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68da      	ldr	r2, [r3, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a88c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	695a      	ldr	r2, [r3, #20]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f042 0201 	orr.w	r2, r2, #1
 800a89c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	68da      	ldr	r2, [r3, #12]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f042 0220 	orr.w	r2, r2, #32
 800a8ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b095      	sub	sp, #84	; 0x54
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	330c      	adds	r3, #12
 800a8ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ce:	e853 3f00 	ldrex	r3, [r3]
 800a8d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	330c      	adds	r3, #12
 800a8e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a8e4:	643a      	str	r2, [r7, #64]	; 0x40
 800a8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a8ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8ec:	e841 2300 	strex	r3, r2, [r1]
 800a8f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e5      	bne.n	800a8c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	3314      	adds	r3, #20
 800a8fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	e853 3f00 	ldrex	r3, [r3]
 800a906:	61fb      	str	r3, [r7, #28]
   return(result);
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	f023 0301 	bic.w	r3, r3, #1
 800a90e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3314      	adds	r3, #20
 800a916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a918:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a91a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a91e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a920:	e841 2300 	strex	r3, r2, [r1]
 800a924:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1e5      	bne.n	800a8f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a930:	2b01      	cmp	r3, #1
 800a932:	d119      	bne.n	800a968 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	330c      	adds	r3, #12
 800a93a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	e853 3f00 	ldrex	r3, [r3]
 800a942:	60bb      	str	r3, [r7, #8]
   return(result);
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	f023 0310 	bic.w	r3, r3, #16
 800a94a:	647b      	str	r3, [r7, #68]	; 0x44
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	330c      	adds	r3, #12
 800a952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a954:	61ba      	str	r2, [r7, #24]
 800a956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a958:	6979      	ldr	r1, [r7, #20]
 800a95a:	69ba      	ldr	r2, [r7, #24]
 800a95c:	e841 2300 	strex	r3, r2, [r1]
 800a960:	613b      	str	r3, [r7, #16]
   return(result);
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e5      	bne.n	800a934 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2220      	movs	r2, #32
 800a96c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a976:	bf00      	nop
 800a978:	3754      	adds	r7, #84	; 0x54
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f7ff fed7 	bl	800a750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9a2:	bf00      	nop
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b085      	sub	sp, #20
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b21      	cmp	r3, #33	; 0x21
 800a9bc:	d13e      	bne.n	800aa3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9c6:	d114      	bne.n	800a9f2 <UART_Transmit_IT+0x48>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d110      	bne.n	800a9f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	881b      	ldrh	r3, [r3, #0]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	1c9a      	adds	r2, r3, #2
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	621a      	str	r2, [r3, #32]
 800a9f0:	e008      	b.n	800aa04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	1c59      	adds	r1, r3, #1
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	6211      	str	r1, [r2, #32]
 800a9fc:	781a      	ldrb	r2, [r3, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	4619      	mov	r1, r3
 800aa12:	84d1      	strh	r1, [r2, #38]	; 0x26
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10f      	bne.n	800aa38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68da      	ldr	r2, [r3, #12]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	e000      	b.n	800aa3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aa3c:	2302      	movs	r3, #2
  }
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b082      	sub	sp, #8
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68da      	ldr	r2, [r3, #12]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2220      	movs	r2, #32
 800aa66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f7ff fe5c 	bl	800a728 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aa70:	2300      	movs	r3, #0
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3708      	adds	r7, #8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b08c      	sub	sp, #48	; 0x30
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	2b22      	cmp	r3, #34	; 0x22
 800aa8c:	f040 80ab 	bne.w	800abe6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa98:	d117      	bne.n	800aaca <UART_Receive_IT+0x50>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d113      	bne.n	800aaca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaaa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac2:	1c9a      	adds	r2, r3, #2
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	629a      	str	r2, [r3, #40]	; 0x28
 800aac8:	e026      	b.n	800ab18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aace:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800aad0:	2300      	movs	r3, #0
 800aad2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aadc:	d007      	beq.n	800aaee <UART_Receive_IT+0x74>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10a      	bne.n	800aafc <UART_Receive_IT+0x82>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d106      	bne.n	800aafc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf8:	701a      	strb	r2, [r3, #0]
 800aafa:	e008      	b.n	800ab0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	4619      	mov	r1, r3
 800ab26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d15a      	bne.n	800abe2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68da      	ldr	r2, [r3, #12]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f022 0220 	bic.w	r2, r2, #32
 800ab3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68da      	ldr	r2, [r3, #12]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	695a      	ldr	r2, [r3, #20]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f022 0201 	bic.w	r2, r2, #1
 800ab5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2220      	movs	r2, #32
 800ab60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d135      	bne.n	800abd8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	330c      	adds	r3, #12
 800ab78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	e853 3f00 	ldrex	r3, [r3]
 800ab80:	613b      	str	r3, [r7, #16]
   return(result);
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	f023 0310 	bic.w	r3, r3, #16
 800ab88:	627b      	str	r3, [r7, #36]	; 0x24
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	330c      	adds	r3, #12
 800ab90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab92:	623a      	str	r2, [r7, #32]
 800ab94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	69f9      	ldr	r1, [r7, #28]
 800ab98:	6a3a      	ldr	r2, [r7, #32]
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	61bb      	str	r3, [r7, #24]
   return(result);
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e5      	bne.n	800ab72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 0310 	and.w	r3, r3, #16
 800abb0:	2b10      	cmp	r3, #16
 800abb2:	d10a      	bne.n	800abca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800abb4:	2300      	movs	r3, #0
 800abb6:	60fb      	str	r3, [r7, #12]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	60fb      	str	r3, [r7, #12]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abce:	4619      	mov	r1, r3
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f7f7 fca1 	bl	8002518 <HAL_UARTEx_RxEventCallback>
 800abd6:	e002      	b.n	800abde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7ff fdaf 	bl	800a73c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	e002      	b.n	800abe8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	e000      	b.n	800abe8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800abe6:	2302      	movs	r3, #2
  }
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3730      	adds	r7, #48	; 0x30
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abf4:	b0c0      	sub	sp, #256	; 0x100
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800abfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	4bcf      	ldr	r3, [pc, #828]	; (800af40 <UART_SetConfig+0x350>)
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d904      	bls.n	800ac12 <UART_SetConfig+0x22>
 800ac08:	f640 6161 	movw	r1, #3681	; 0xe61
 800ac0c:	48cd      	ldr	r0, [pc, #820]	; (800af44 <UART_SetConfig+0x354>)
 800ac0e:	f7f8 f8b2 	bl	8002d76 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800ac12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00a      	beq.n	800ac32 <UART_SetConfig+0x42>
 800ac1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac26:	d004      	beq.n	800ac32 <UART_SetConfig+0x42>
 800ac28:	f640 6162 	movw	r1, #3682	; 0xe62
 800ac2c:	48c5      	ldr	r0, [pc, #788]	; (800af44 <UART_SetConfig+0x354>)
 800ac2e:	f7f8 f8a2 	bl	8002d76 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800ac32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d010      	beq.n	800ac5e <UART_SetConfig+0x6e>
 800ac3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac46:	d00a      	beq.n	800ac5e <UART_SetConfig+0x6e>
 800ac48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ac52:	d004      	beq.n	800ac5e <UART_SetConfig+0x6e>
 800ac54:	f640 6163 	movw	r1, #3683	; 0xe63
 800ac58:	48ba      	ldr	r0, [pc, #744]	; (800af44 <UART_SetConfig+0x354>)
 800ac5a:	f7f8 f88c 	bl	8002d76 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800ac5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac62:	695a      	ldr	r2, [r3, #20]
 800ac64:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800ac68:	4013      	ands	r3, r2
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d104      	bne.n	800ac78 <UART_SetConfig+0x88>
 800ac6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac72:	695b      	ldr	r3, [r3, #20]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d104      	bne.n	800ac82 <UART_SetConfig+0x92>
 800ac78:	f640 6164 	movw	r1, #3684	; 0xe64
 800ac7c:	48b1      	ldr	r0, [pc, #708]	; (800af44 <UART_SetConfig+0x354>)
 800ac7e:	f7f8 f87a 	bl	8002d76 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ac8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac92:	68d9      	ldr	r1, [r3, #12]
 800ac94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	ea40 0301 	orr.w	r3, r0, r1
 800ac9e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aca4:	689a      	ldr	r2, [r3, #8]
 800aca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	431a      	orrs	r2, r3
 800acae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acb2:	695b      	ldr	r3, [r3, #20]
 800acb4:	431a      	orrs	r2, r3
 800acb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acba:	69db      	ldr	r3, [r3, #28]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800acc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800acce:	f021 010c 	bic.w	r1, r1, #12
 800acd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800acdc:	430b      	orrs	r3, r1
 800acde:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ace0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	695b      	ldr	r3, [r3, #20]
 800ace8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800acec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acf0:	6999      	ldr	r1, [r3, #24]
 800acf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	ea40 0301 	orr.w	r3, r0, r1
 800acfc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800acfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	4b90      	ldr	r3, [pc, #576]	; (800af48 <UART_SetConfig+0x358>)
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d005      	beq.n	800ad16 <UART_SetConfig+0x126>
 800ad0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	4b8e      	ldr	r3, [pc, #568]	; (800af4c <UART_SetConfig+0x35c>)
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d104      	bne.n	800ad20 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ad16:	f7fd fa49 	bl	80081ac <HAL_RCC_GetPCLK2Freq>
 800ad1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ad1e:	e003      	b.n	800ad28 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad20:	f7fd fa30 	bl	8008184 <HAL_RCC_GetPCLK1Freq>
 800ad24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad2c:	69db      	ldr	r3, [r3, #28]
 800ad2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad32:	f040 810f 	bne.w	800af54 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ad40:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ad44:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ad48:	4622      	mov	r2, r4
 800ad4a:	462b      	mov	r3, r5
 800ad4c:	1891      	adds	r1, r2, r2
 800ad4e:	65b9      	str	r1, [r7, #88]	; 0x58
 800ad50:	415b      	adcs	r3, r3
 800ad52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ad58:	4621      	mov	r1, r4
 800ad5a:	eb12 0801 	adds.w	r8, r2, r1
 800ad5e:	4629      	mov	r1, r5
 800ad60:	eb43 0901 	adc.w	r9, r3, r1
 800ad64:	f04f 0200 	mov.w	r2, #0
 800ad68:	f04f 0300 	mov.w	r3, #0
 800ad6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad78:	4690      	mov	r8, r2
 800ad7a:	4699      	mov	r9, r3
 800ad7c:	4623      	mov	r3, r4
 800ad7e:	eb18 0303 	adds.w	r3, r8, r3
 800ad82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad86:	462b      	mov	r3, r5
 800ad88:	eb49 0303 	adc.w	r3, r9, r3
 800ad8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ad90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad9c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ada0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ada4:	460b      	mov	r3, r1
 800ada6:	18db      	adds	r3, r3, r3
 800ada8:	653b      	str	r3, [r7, #80]	; 0x50
 800adaa:	4613      	mov	r3, r2
 800adac:	eb42 0303 	adc.w	r3, r2, r3
 800adb0:	657b      	str	r3, [r7, #84]	; 0x54
 800adb2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800adb6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800adba:	f7f5 ffcd 	bl	8000d58 <__aeabi_uldivmod>
 800adbe:	4602      	mov	r2, r0
 800adc0:	460b      	mov	r3, r1
 800adc2:	4b63      	ldr	r3, [pc, #396]	; (800af50 <UART_SetConfig+0x360>)
 800adc4:	fba3 2302 	umull	r2, r3, r3, r2
 800adc8:	095b      	lsrs	r3, r3, #5
 800adca:	011c      	lsls	r4, r3, #4
 800adcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800add0:	2200      	movs	r2, #0
 800add2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800add6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800adda:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800adde:	4642      	mov	r2, r8
 800ade0:	464b      	mov	r3, r9
 800ade2:	1891      	adds	r1, r2, r2
 800ade4:	64b9      	str	r1, [r7, #72]	; 0x48
 800ade6:	415b      	adcs	r3, r3
 800ade8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800adee:	4641      	mov	r1, r8
 800adf0:	eb12 0a01 	adds.w	sl, r2, r1
 800adf4:	4649      	mov	r1, r9
 800adf6:	eb43 0b01 	adc.w	fp, r3, r1
 800adfa:	f04f 0200 	mov.w	r2, #0
 800adfe:	f04f 0300 	mov.w	r3, #0
 800ae02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ae06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ae0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae0e:	4692      	mov	sl, r2
 800ae10:	469b      	mov	fp, r3
 800ae12:	4643      	mov	r3, r8
 800ae14:	eb1a 0303 	adds.w	r3, sl, r3
 800ae18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae1c:	464b      	mov	r3, r9
 800ae1e:	eb4b 0303 	adc.w	r3, fp, r3
 800ae22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae32:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ae36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	18db      	adds	r3, r3, r3
 800ae3e:	643b      	str	r3, [r7, #64]	; 0x40
 800ae40:	4613      	mov	r3, r2
 800ae42:	eb42 0303 	adc.w	r3, r2, r3
 800ae46:	647b      	str	r3, [r7, #68]	; 0x44
 800ae48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ae4c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ae50:	f7f5 ff82 	bl	8000d58 <__aeabi_uldivmod>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	4611      	mov	r1, r2
 800ae5a:	4b3d      	ldr	r3, [pc, #244]	; (800af50 <UART_SetConfig+0x360>)
 800ae5c:	fba3 2301 	umull	r2, r3, r3, r1
 800ae60:	095b      	lsrs	r3, r3, #5
 800ae62:	2264      	movs	r2, #100	; 0x64
 800ae64:	fb02 f303 	mul.w	r3, r2, r3
 800ae68:	1acb      	subs	r3, r1, r3
 800ae6a:	00db      	lsls	r3, r3, #3
 800ae6c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ae70:	4b37      	ldr	r3, [pc, #220]	; (800af50 <UART_SetConfig+0x360>)
 800ae72:	fba3 2302 	umull	r2, r3, r3, r2
 800ae76:	095b      	lsrs	r3, r3, #5
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ae7e:	441c      	add	r4, r3
 800ae80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae84:	2200      	movs	r2, #0
 800ae86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae8a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ae8e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ae92:	4642      	mov	r2, r8
 800ae94:	464b      	mov	r3, r9
 800ae96:	1891      	adds	r1, r2, r2
 800ae98:	63b9      	str	r1, [r7, #56]	; 0x38
 800ae9a:	415b      	adcs	r3, r3
 800ae9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae9e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aea2:	4641      	mov	r1, r8
 800aea4:	1851      	adds	r1, r2, r1
 800aea6:	6339      	str	r1, [r7, #48]	; 0x30
 800aea8:	4649      	mov	r1, r9
 800aeaa:	414b      	adcs	r3, r1
 800aeac:	637b      	str	r3, [r7, #52]	; 0x34
 800aeae:	f04f 0200 	mov.w	r2, #0
 800aeb2:	f04f 0300 	mov.w	r3, #0
 800aeb6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aeba:	4659      	mov	r1, fp
 800aebc:	00cb      	lsls	r3, r1, #3
 800aebe:	4651      	mov	r1, sl
 800aec0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aec4:	4651      	mov	r1, sl
 800aec6:	00ca      	lsls	r2, r1, #3
 800aec8:	4610      	mov	r0, r2
 800aeca:	4619      	mov	r1, r3
 800aecc:	4603      	mov	r3, r0
 800aece:	4642      	mov	r2, r8
 800aed0:	189b      	adds	r3, r3, r2
 800aed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aed6:	464b      	mov	r3, r9
 800aed8:	460a      	mov	r2, r1
 800aeda:	eb42 0303 	adc.w	r3, r2, r3
 800aede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aeee:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aef2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aef6:	460b      	mov	r3, r1
 800aef8:	18db      	adds	r3, r3, r3
 800aefa:	62bb      	str	r3, [r7, #40]	; 0x28
 800aefc:	4613      	mov	r3, r2
 800aefe:	eb42 0303 	adc.w	r3, r2, r3
 800af02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800af08:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800af0c:	f7f5 ff24 	bl	8000d58 <__aeabi_uldivmod>
 800af10:	4602      	mov	r2, r0
 800af12:	460b      	mov	r3, r1
 800af14:	4b0e      	ldr	r3, [pc, #56]	; (800af50 <UART_SetConfig+0x360>)
 800af16:	fba3 1302 	umull	r1, r3, r3, r2
 800af1a:	095b      	lsrs	r3, r3, #5
 800af1c:	2164      	movs	r1, #100	; 0x64
 800af1e:	fb01 f303 	mul.w	r3, r1, r3
 800af22:	1ad3      	subs	r3, r2, r3
 800af24:	00db      	lsls	r3, r3, #3
 800af26:	3332      	adds	r3, #50	; 0x32
 800af28:	4a09      	ldr	r2, [pc, #36]	; (800af50 <UART_SetConfig+0x360>)
 800af2a:	fba2 2303 	umull	r2, r3, r2, r3
 800af2e:	095b      	lsrs	r3, r3, #5
 800af30:	f003 0207 	and.w	r2, r3, #7
 800af34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4422      	add	r2, r4
 800af3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800af3e:	e108      	b.n	800b152 <UART_SetConfig+0x562>
 800af40:	00a037a0 	.word	0x00a037a0
 800af44:	08010ad4 	.word	0x08010ad4
 800af48:	40011000 	.word	0x40011000
 800af4c:	40011400 	.word	0x40011400
 800af50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af58:	2200      	movs	r2, #0
 800af5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800af5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800af62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800af66:	4642      	mov	r2, r8
 800af68:	464b      	mov	r3, r9
 800af6a:	1891      	adds	r1, r2, r2
 800af6c:	6239      	str	r1, [r7, #32]
 800af6e:	415b      	adcs	r3, r3
 800af70:	627b      	str	r3, [r7, #36]	; 0x24
 800af72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800af76:	4641      	mov	r1, r8
 800af78:	1854      	adds	r4, r2, r1
 800af7a:	4649      	mov	r1, r9
 800af7c:	eb43 0501 	adc.w	r5, r3, r1
 800af80:	f04f 0200 	mov.w	r2, #0
 800af84:	f04f 0300 	mov.w	r3, #0
 800af88:	00eb      	lsls	r3, r5, #3
 800af8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800af8e:	00e2      	lsls	r2, r4, #3
 800af90:	4614      	mov	r4, r2
 800af92:	461d      	mov	r5, r3
 800af94:	4643      	mov	r3, r8
 800af96:	18e3      	adds	r3, r4, r3
 800af98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800af9c:	464b      	mov	r3, r9
 800af9e:	eb45 0303 	adc.w	r3, r5, r3
 800afa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800afa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800afb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800afb6:	f04f 0200 	mov.w	r2, #0
 800afba:	f04f 0300 	mov.w	r3, #0
 800afbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800afc2:	4629      	mov	r1, r5
 800afc4:	008b      	lsls	r3, r1, #2
 800afc6:	4621      	mov	r1, r4
 800afc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800afcc:	4621      	mov	r1, r4
 800afce:	008a      	lsls	r2, r1, #2
 800afd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800afd4:	f7f5 fec0 	bl	8000d58 <__aeabi_uldivmod>
 800afd8:	4602      	mov	r2, r0
 800afda:	460b      	mov	r3, r1
 800afdc:	4b60      	ldr	r3, [pc, #384]	; (800b160 <UART_SetConfig+0x570>)
 800afde:	fba3 2302 	umull	r2, r3, r3, r2
 800afe2:	095b      	lsrs	r3, r3, #5
 800afe4:	011c      	lsls	r4, r3, #4
 800afe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afea:	2200      	movs	r2, #0
 800afec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aff0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aff4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aff8:	4642      	mov	r2, r8
 800affa:	464b      	mov	r3, r9
 800affc:	1891      	adds	r1, r2, r2
 800affe:	61b9      	str	r1, [r7, #24]
 800b000:	415b      	adcs	r3, r3
 800b002:	61fb      	str	r3, [r7, #28]
 800b004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b008:	4641      	mov	r1, r8
 800b00a:	1851      	adds	r1, r2, r1
 800b00c:	6139      	str	r1, [r7, #16]
 800b00e:	4649      	mov	r1, r9
 800b010:	414b      	adcs	r3, r1
 800b012:	617b      	str	r3, [r7, #20]
 800b014:	f04f 0200 	mov.w	r2, #0
 800b018:	f04f 0300 	mov.w	r3, #0
 800b01c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b020:	4659      	mov	r1, fp
 800b022:	00cb      	lsls	r3, r1, #3
 800b024:	4651      	mov	r1, sl
 800b026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b02a:	4651      	mov	r1, sl
 800b02c:	00ca      	lsls	r2, r1, #3
 800b02e:	4610      	mov	r0, r2
 800b030:	4619      	mov	r1, r3
 800b032:	4603      	mov	r3, r0
 800b034:	4642      	mov	r2, r8
 800b036:	189b      	adds	r3, r3, r2
 800b038:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b03c:	464b      	mov	r3, r9
 800b03e:	460a      	mov	r2, r1
 800b040:	eb42 0303 	adc.w	r3, r2, r3
 800b044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	67bb      	str	r3, [r7, #120]	; 0x78
 800b052:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b054:	f04f 0200 	mov.w	r2, #0
 800b058:	f04f 0300 	mov.w	r3, #0
 800b05c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b060:	4649      	mov	r1, r9
 800b062:	008b      	lsls	r3, r1, #2
 800b064:	4641      	mov	r1, r8
 800b066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b06a:	4641      	mov	r1, r8
 800b06c:	008a      	lsls	r2, r1, #2
 800b06e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b072:	f7f5 fe71 	bl	8000d58 <__aeabi_uldivmod>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4b39      	ldr	r3, [pc, #228]	; (800b160 <UART_SetConfig+0x570>)
 800b07c:	fba3 1302 	umull	r1, r3, r3, r2
 800b080:	095b      	lsrs	r3, r3, #5
 800b082:	2164      	movs	r1, #100	; 0x64
 800b084:	fb01 f303 	mul.w	r3, r1, r3
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	011b      	lsls	r3, r3, #4
 800b08c:	3332      	adds	r3, #50	; 0x32
 800b08e:	4a34      	ldr	r2, [pc, #208]	; (800b160 <UART_SetConfig+0x570>)
 800b090:	fba2 2303 	umull	r2, r3, r2, r3
 800b094:	095b      	lsrs	r3, r3, #5
 800b096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b09a:	441c      	add	r4, r3
 800b09c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	673b      	str	r3, [r7, #112]	; 0x70
 800b0a4:	677a      	str	r2, [r7, #116]	; 0x74
 800b0a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b0aa:	4642      	mov	r2, r8
 800b0ac:	464b      	mov	r3, r9
 800b0ae:	1891      	adds	r1, r2, r2
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	415b      	adcs	r3, r3
 800b0b4:	60fb      	str	r3, [r7, #12]
 800b0b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b0ba:	4641      	mov	r1, r8
 800b0bc:	1851      	adds	r1, r2, r1
 800b0be:	6039      	str	r1, [r7, #0]
 800b0c0:	4649      	mov	r1, r9
 800b0c2:	414b      	adcs	r3, r1
 800b0c4:	607b      	str	r3, [r7, #4]
 800b0c6:	f04f 0200 	mov.w	r2, #0
 800b0ca:	f04f 0300 	mov.w	r3, #0
 800b0ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b0d2:	4659      	mov	r1, fp
 800b0d4:	00cb      	lsls	r3, r1, #3
 800b0d6:	4651      	mov	r1, sl
 800b0d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0dc:	4651      	mov	r1, sl
 800b0de:	00ca      	lsls	r2, r1, #3
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	4642      	mov	r2, r8
 800b0e8:	189b      	adds	r3, r3, r2
 800b0ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800b0ec:	464b      	mov	r3, r9
 800b0ee:	460a      	mov	r2, r1
 800b0f0:	eb42 0303 	adc.w	r3, r2, r3
 800b0f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b0f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	663b      	str	r3, [r7, #96]	; 0x60
 800b100:	667a      	str	r2, [r7, #100]	; 0x64
 800b102:	f04f 0200 	mov.w	r2, #0
 800b106:	f04f 0300 	mov.w	r3, #0
 800b10a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b10e:	4649      	mov	r1, r9
 800b110:	008b      	lsls	r3, r1, #2
 800b112:	4641      	mov	r1, r8
 800b114:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b118:	4641      	mov	r1, r8
 800b11a:	008a      	lsls	r2, r1, #2
 800b11c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b120:	f7f5 fe1a 	bl	8000d58 <__aeabi_uldivmod>
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	4b0d      	ldr	r3, [pc, #52]	; (800b160 <UART_SetConfig+0x570>)
 800b12a:	fba3 1302 	umull	r1, r3, r3, r2
 800b12e:	095b      	lsrs	r3, r3, #5
 800b130:	2164      	movs	r1, #100	; 0x64
 800b132:	fb01 f303 	mul.w	r3, r1, r3
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	011b      	lsls	r3, r3, #4
 800b13a:	3332      	adds	r3, #50	; 0x32
 800b13c:	4a08      	ldr	r2, [pc, #32]	; (800b160 <UART_SetConfig+0x570>)
 800b13e:	fba2 2303 	umull	r2, r3, r2, r3
 800b142:	095b      	lsrs	r3, r3, #5
 800b144:	f003 020f 	and.w	r2, r3, #15
 800b148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4422      	add	r2, r4
 800b150:	609a      	str	r2, [r3, #8]
}
 800b152:	bf00      	nop
 800b154:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b158:	46bd      	mov	sp, r7
 800b15a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b15e:	bf00      	nop
 800b160:	51eb851f 	.word	0x51eb851f

0800b164 <atof>:
 800b164:	2100      	movs	r1, #0
 800b166:	f001 bd43 	b.w	800cbf0 <strtod>
	...

0800b16c <__errno>:
 800b16c:	4b01      	ldr	r3, [pc, #4]	; (800b174 <__errno+0x8>)
 800b16e:	6818      	ldr	r0, [r3, #0]
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	2000001c 	.word	0x2000001c

0800b178 <__libc_init_array>:
 800b178:	b570      	push	{r4, r5, r6, lr}
 800b17a:	4d0d      	ldr	r5, [pc, #52]	; (800b1b0 <__libc_init_array+0x38>)
 800b17c:	4c0d      	ldr	r4, [pc, #52]	; (800b1b4 <__libc_init_array+0x3c>)
 800b17e:	1b64      	subs	r4, r4, r5
 800b180:	10a4      	asrs	r4, r4, #2
 800b182:	2600      	movs	r6, #0
 800b184:	42a6      	cmp	r6, r4
 800b186:	d109      	bne.n	800b19c <__libc_init_array+0x24>
 800b188:	4d0b      	ldr	r5, [pc, #44]	; (800b1b8 <__libc_init_array+0x40>)
 800b18a:	4c0c      	ldr	r4, [pc, #48]	; (800b1bc <__libc_init_array+0x44>)
 800b18c:	f005 fae6 	bl	801075c <_init>
 800b190:	1b64      	subs	r4, r4, r5
 800b192:	10a4      	asrs	r4, r4, #2
 800b194:	2600      	movs	r6, #0
 800b196:	42a6      	cmp	r6, r4
 800b198:	d105      	bne.n	800b1a6 <__libc_init_array+0x2e>
 800b19a:	bd70      	pop	{r4, r5, r6, pc}
 800b19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1a0:	4798      	blx	r3
 800b1a2:	3601      	adds	r6, #1
 800b1a4:	e7ee      	b.n	800b184 <__libc_init_array+0xc>
 800b1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1aa:	4798      	blx	r3
 800b1ac:	3601      	adds	r6, #1
 800b1ae:	e7f2      	b.n	800b196 <__libc_init_array+0x1e>
 800b1b0:	080110a0 	.word	0x080110a0
 800b1b4:	080110a0 	.word	0x080110a0
 800b1b8:	080110a0 	.word	0x080110a0
 800b1bc:	080110a4 	.word	0x080110a4

0800b1c0 <memset>:
 800b1c0:	4402      	add	r2, r0
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d100      	bne.n	800b1ca <memset+0xa>
 800b1c8:	4770      	bx	lr
 800b1ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ce:	e7f9      	b.n	800b1c4 <memset+0x4>

0800b1d0 <__cvt>:
 800b1d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d4:	ec55 4b10 	vmov	r4, r5, d0
 800b1d8:	2d00      	cmp	r5, #0
 800b1da:	460e      	mov	r6, r1
 800b1dc:	4619      	mov	r1, r3
 800b1de:	462b      	mov	r3, r5
 800b1e0:	bfbb      	ittet	lt
 800b1e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b1e6:	461d      	movlt	r5, r3
 800b1e8:	2300      	movge	r3, #0
 800b1ea:	232d      	movlt	r3, #45	; 0x2d
 800b1ec:	700b      	strb	r3, [r1, #0]
 800b1ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b1f4:	4691      	mov	r9, r2
 800b1f6:	f023 0820 	bic.w	r8, r3, #32
 800b1fa:	bfbc      	itt	lt
 800b1fc:	4622      	movlt	r2, r4
 800b1fe:	4614      	movlt	r4, r2
 800b200:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b204:	d005      	beq.n	800b212 <__cvt+0x42>
 800b206:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b20a:	d100      	bne.n	800b20e <__cvt+0x3e>
 800b20c:	3601      	adds	r6, #1
 800b20e:	2102      	movs	r1, #2
 800b210:	e000      	b.n	800b214 <__cvt+0x44>
 800b212:	2103      	movs	r1, #3
 800b214:	ab03      	add	r3, sp, #12
 800b216:	9301      	str	r3, [sp, #4]
 800b218:	ab02      	add	r3, sp, #8
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	ec45 4b10 	vmov	d0, r4, r5
 800b220:	4653      	mov	r3, sl
 800b222:	4632      	mov	r2, r6
 800b224:	f001 fe7c 	bl	800cf20 <_dtoa_r>
 800b228:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b22c:	4607      	mov	r7, r0
 800b22e:	d102      	bne.n	800b236 <__cvt+0x66>
 800b230:	f019 0f01 	tst.w	r9, #1
 800b234:	d022      	beq.n	800b27c <__cvt+0xac>
 800b236:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b23a:	eb07 0906 	add.w	r9, r7, r6
 800b23e:	d110      	bne.n	800b262 <__cvt+0x92>
 800b240:	783b      	ldrb	r3, [r7, #0]
 800b242:	2b30      	cmp	r3, #48	; 0x30
 800b244:	d10a      	bne.n	800b25c <__cvt+0x8c>
 800b246:	2200      	movs	r2, #0
 800b248:	2300      	movs	r3, #0
 800b24a:	4620      	mov	r0, r4
 800b24c:	4629      	mov	r1, r5
 800b24e:	f7f5 fc53 	bl	8000af8 <__aeabi_dcmpeq>
 800b252:	b918      	cbnz	r0, 800b25c <__cvt+0x8c>
 800b254:	f1c6 0601 	rsb	r6, r6, #1
 800b258:	f8ca 6000 	str.w	r6, [sl]
 800b25c:	f8da 3000 	ldr.w	r3, [sl]
 800b260:	4499      	add	r9, r3
 800b262:	2200      	movs	r2, #0
 800b264:	2300      	movs	r3, #0
 800b266:	4620      	mov	r0, r4
 800b268:	4629      	mov	r1, r5
 800b26a:	f7f5 fc45 	bl	8000af8 <__aeabi_dcmpeq>
 800b26e:	b108      	cbz	r0, 800b274 <__cvt+0xa4>
 800b270:	f8cd 900c 	str.w	r9, [sp, #12]
 800b274:	2230      	movs	r2, #48	; 0x30
 800b276:	9b03      	ldr	r3, [sp, #12]
 800b278:	454b      	cmp	r3, r9
 800b27a:	d307      	bcc.n	800b28c <__cvt+0xbc>
 800b27c:	9b03      	ldr	r3, [sp, #12]
 800b27e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b280:	1bdb      	subs	r3, r3, r7
 800b282:	4638      	mov	r0, r7
 800b284:	6013      	str	r3, [r2, #0]
 800b286:	b004      	add	sp, #16
 800b288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28c:	1c59      	adds	r1, r3, #1
 800b28e:	9103      	str	r1, [sp, #12]
 800b290:	701a      	strb	r2, [r3, #0]
 800b292:	e7f0      	b.n	800b276 <__cvt+0xa6>

0800b294 <__exponent>:
 800b294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b296:	4603      	mov	r3, r0
 800b298:	2900      	cmp	r1, #0
 800b29a:	bfb8      	it	lt
 800b29c:	4249      	neglt	r1, r1
 800b29e:	f803 2b02 	strb.w	r2, [r3], #2
 800b2a2:	bfb4      	ite	lt
 800b2a4:	222d      	movlt	r2, #45	; 0x2d
 800b2a6:	222b      	movge	r2, #43	; 0x2b
 800b2a8:	2909      	cmp	r1, #9
 800b2aa:	7042      	strb	r2, [r0, #1]
 800b2ac:	dd2a      	ble.n	800b304 <__exponent+0x70>
 800b2ae:	f10d 0407 	add.w	r4, sp, #7
 800b2b2:	46a4      	mov	ip, r4
 800b2b4:	270a      	movs	r7, #10
 800b2b6:	46a6      	mov	lr, r4
 800b2b8:	460a      	mov	r2, r1
 800b2ba:	fb91 f6f7 	sdiv	r6, r1, r7
 800b2be:	fb07 1516 	mls	r5, r7, r6, r1
 800b2c2:	3530      	adds	r5, #48	; 0x30
 800b2c4:	2a63      	cmp	r2, #99	; 0x63
 800b2c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b2ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	dcf1      	bgt.n	800b2b6 <__exponent+0x22>
 800b2d2:	3130      	adds	r1, #48	; 0x30
 800b2d4:	f1ae 0502 	sub.w	r5, lr, #2
 800b2d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b2dc:	1c44      	adds	r4, r0, #1
 800b2de:	4629      	mov	r1, r5
 800b2e0:	4561      	cmp	r1, ip
 800b2e2:	d30a      	bcc.n	800b2fa <__exponent+0x66>
 800b2e4:	f10d 0209 	add.w	r2, sp, #9
 800b2e8:	eba2 020e 	sub.w	r2, r2, lr
 800b2ec:	4565      	cmp	r5, ip
 800b2ee:	bf88      	it	hi
 800b2f0:	2200      	movhi	r2, #0
 800b2f2:	4413      	add	r3, r2
 800b2f4:	1a18      	subs	r0, r3, r0
 800b2f6:	b003      	add	sp, #12
 800b2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b302:	e7ed      	b.n	800b2e0 <__exponent+0x4c>
 800b304:	2330      	movs	r3, #48	; 0x30
 800b306:	3130      	adds	r1, #48	; 0x30
 800b308:	7083      	strb	r3, [r0, #2]
 800b30a:	70c1      	strb	r1, [r0, #3]
 800b30c:	1d03      	adds	r3, r0, #4
 800b30e:	e7f1      	b.n	800b2f4 <__exponent+0x60>

0800b310 <_printf_float>:
 800b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b314:	ed2d 8b02 	vpush	{d8}
 800b318:	b08d      	sub	sp, #52	; 0x34
 800b31a:	460c      	mov	r4, r1
 800b31c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b320:	4616      	mov	r6, r2
 800b322:	461f      	mov	r7, r3
 800b324:	4605      	mov	r5, r0
 800b326:	f002 ff6b 	bl	800e200 <_localeconv_r>
 800b32a:	f8d0 a000 	ldr.w	sl, [r0]
 800b32e:	4650      	mov	r0, sl
 800b330:	f7f4 ff60 	bl	80001f4 <strlen>
 800b334:	2300      	movs	r3, #0
 800b336:	930a      	str	r3, [sp, #40]	; 0x28
 800b338:	6823      	ldr	r3, [r4, #0]
 800b33a:	9305      	str	r3, [sp, #20]
 800b33c:	f8d8 3000 	ldr.w	r3, [r8]
 800b340:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b344:	3307      	adds	r3, #7
 800b346:	f023 0307 	bic.w	r3, r3, #7
 800b34a:	f103 0208 	add.w	r2, r3, #8
 800b34e:	f8c8 2000 	str.w	r2, [r8]
 800b352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b356:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b35a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b35e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b362:	9307      	str	r3, [sp, #28]
 800b364:	f8cd 8018 	str.w	r8, [sp, #24]
 800b368:	ee08 0a10 	vmov	s16, r0
 800b36c:	4b9f      	ldr	r3, [pc, #636]	; (800b5ec <_printf_float+0x2dc>)
 800b36e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b372:	f04f 32ff 	mov.w	r2, #4294967295
 800b376:	f7f5 fbf1 	bl	8000b5c <__aeabi_dcmpun>
 800b37a:	bb88      	cbnz	r0, 800b3e0 <_printf_float+0xd0>
 800b37c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b380:	4b9a      	ldr	r3, [pc, #616]	; (800b5ec <_printf_float+0x2dc>)
 800b382:	f04f 32ff 	mov.w	r2, #4294967295
 800b386:	f7f5 fbcb 	bl	8000b20 <__aeabi_dcmple>
 800b38a:	bb48      	cbnz	r0, 800b3e0 <_printf_float+0xd0>
 800b38c:	2200      	movs	r2, #0
 800b38e:	2300      	movs	r3, #0
 800b390:	4640      	mov	r0, r8
 800b392:	4649      	mov	r1, r9
 800b394:	f7f5 fbba 	bl	8000b0c <__aeabi_dcmplt>
 800b398:	b110      	cbz	r0, 800b3a0 <_printf_float+0x90>
 800b39a:	232d      	movs	r3, #45	; 0x2d
 800b39c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3a0:	4b93      	ldr	r3, [pc, #588]	; (800b5f0 <_printf_float+0x2e0>)
 800b3a2:	4894      	ldr	r0, [pc, #592]	; (800b5f4 <_printf_float+0x2e4>)
 800b3a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b3a8:	bf94      	ite	ls
 800b3aa:	4698      	movls	r8, r3
 800b3ac:	4680      	movhi	r8, r0
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	6123      	str	r3, [r4, #16]
 800b3b2:	9b05      	ldr	r3, [sp, #20]
 800b3b4:	f023 0204 	bic.w	r2, r3, #4
 800b3b8:	6022      	str	r2, [r4, #0]
 800b3ba:	f04f 0900 	mov.w	r9, #0
 800b3be:	9700      	str	r7, [sp, #0]
 800b3c0:	4633      	mov	r3, r6
 800b3c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b3c4:	4621      	mov	r1, r4
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	f000 f9d8 	bl	800b77c <_printf_common>
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	f040 8090 	bne.w	800b4f2 <_printf_float+0x1e2>
 800b3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d6:	b00d      	add	sp, #52	; 0x34
 800b3d8:	ecbd 8b02 	vpop	{d8}
 800b3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e0:	4642      	mov	r2, r8
 800b3e2:	464b      	mov	r3, r9
 800b3e4:	4640      	mov	r0, r8
 800b3e6:	4649      	mov	r1, r9
 800b3e8:	f7f5 fbb8 	bl	8000b5c <__aeabi_dcmpun>
 800b3ec:	b140      	cbz	r0, 800b400 <_printf_float+0xf0>
 800b3ee:	464b      	mov	r3, r9
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	bfbc      	itt	lt
 800b3f4:	232d      	movlt	r3, #45	; 0x2d
 800b3f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b3fa:	487f      	ldr	r0, [pc, #508]	; (800b5f8 <_printf_float+0x2e8>)
 800b3fc:	4b7f      	ldr	r3, [pc, #508]	; (800b5fc <_printf_float+0x2ec>)
 800b3fe:	e7d1      	b.n	800b3a4 <_printf_float+0x94>
 800b400:	6863      	ldr	r3, [r4, #4]
 800b402:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b406:	9206      	str	r2, [sp, #24]
 800b408:	1c5a      	adds	r2, r3, #1
 800b40a:	d13f      	bne.n	800b48c <_printf_float+0x17c>
 800b40c:	2306      	movs	r3, #6
 800b40e:	6063      	str	r3, [r4, #4]
 800b410:	9b05      	ldr	r3, [sp, #20]
 800b412:	6861      	ldr	r1, [r4, #4]
 800b414:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b418:	2300      	movs	r3, #0
 800b41a:	9303      	str	r3, [sp, #12]
 800b41c:	ab0a      	add	r3, sp, #40	; 0x28
 800b41e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b422:	ab09      	add	r3, sp, #36	; 0x24
 800b424:	ec49 8b10 	vmov	d0, r8, r9
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	6022      	str	r2, [r4, #0]
 800b42c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b430:	4628      	mov	r0, r5
 800b432:	f7ff fecd 	bl	800b1d0 <__cvt>
 800b436:	9b06      	ldr	r3, [sp, #24]
 800b438:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b43a:	2b47      	cmp	r3, #71	; 0x47
 800b43c:	4680      	mov	r8, r0
 800b43e:	d108      	bne.n	800b452 <_printf_float+0x142>
 800b440:	1cc8      	adds	r0, r1, #3
 800b442:	db02      	blt.n	800b44a <_printf_float+0x13a>
 800b444:	6863      	ldr	r3, [r4, #4]
 800b446:	4299      	cmp	r1, r3
 800b448:	dd41      	ble.n	800b4ce <_printf_float+0x1be>
 800b44a:	f1ab 0b02 	sub.w	fp, fp, #2
 800b44e:	fa5f fb8b 	uxtb.w	fp, fp
 800b452:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b456:	d820      	bhi.n	800b49a <_printf_float+0x18a>
 800b458:	3901      	subs	r1, #1
 800b45a:	465a      	mov	r2, fp
 800b45c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b460:	9109      	str	r1, [sp, #36]	; 0x24
 800b462:	f7ff ff17 	bl	800b294 <__exponent>
 800b466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b468:	1813      	adds	r3, r2, r0
 800b46a:	2a01      	cmp	r2, #1
 800b46c:	4681      	mov	r9, r0
 800b46e:	6123      	str	r3, [r4, #16]
 800b470:	dc02      	bgt.n	800b478 <_printf_float+0x168>
 800b472:	6822      	ldr	r2, [r4, #0]
 800b474:	07d2      	lsls	r2, r2, #31
 800b476:	d501      	bpl.n	800b47c <_printf_float+0x16c>
 800b478:	3301      	adds	r3, #1
 800b47a:	6123      	str	r3, [r4, #16]
 800b47c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b480:	2b00      	cmp	r3, #0
 800b482:	d09c      	beq.n	800b3be <_printf_float+0xae>
 800b484:	232d      	movs	r3, #45	; 0x2d
 800b486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b48a:	e798      	b.n	800b3be <_printf_float+0xae>
 800b48c:	9a06      	ldr	r2, [sp, #24]
 800b48e:	2a47      	cmp	r2, #71	; 0x47
 800b490:	d1be      	bne.n	800b410 <_printf_float+0x100>
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1bc      	bne.n	800b410 <_printf_float+0x100>
 800b496:	2301      	movs	r3, #1
 800b498:	e7b9      	b.n	800b40e <_printf_float+0xfe>
 800b49a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b49e:	d118      	bne.n	800b4d2 <_printf_float+0x1c2>
 800b4a0:	2900      	cmp	r1, #0
 800b4a2:	6863      	ldr	r3, [r4, #4]
 800b4a4:	dd0b      	ble.n	800b4be <_printf_float+0x1ae>
 800b4a6:	6121      	str	r1, [r4, #16]
 800b4a8:	b913      	cbnz	r3, 800b4b0 <_printf_float+0x1a0>
 800b4aa:	6822      	ldr	r2, [r4, #0]
 800b4ac:	07d0      	lsls	r0, r2, #31
 800b4ae:	d502      	bpl.n	800b4b6 <_printf_float+0x1a6>
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	440b      	add	r3, r1
 800b4b4:	6123      	str	r3, [r4, #16]
 800b4b6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b4b8:	f04f 0900 	mov.w	r9, #0
 800b4bc:	e7de      	b.n	800b47c <_printf_float+0x16c>
 800b4be:	b913      	cbnz	r3, 800b4c6 <_printf_float+0x1b6>
 800b4c0:	6822      	ldr	r2, [r4, #0]
 800b4c2:	07d2      	lsls	r2, r2, #31
 800b4c4:	d501      	bpl.n	800b4ca <_printf_float+0x1ba>
 800b4c6:	3302      	adds	r3, #2
 800b4c8:	e7f4      	b.n	800b4b4 <_printf_float+0x1a4>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e7f2      	b.n	800b4b4 <_printf_float+0x1a4>
 800b4ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b4d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d4:	4299      	cmp	r1, r3
 800b4d6:	db05      	blt.n	800b4e4 <_printf_float+0x1d4>
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	6121      	str	r1, [r4, #16]
 800b4dc:	07d8      	lsls	r0, r3, #31
 800b4de:	d5ea      	bpl.n	800b4b6 <_printf_float+0x1a6>
 800b4e0:	1c4b      	adds	r3, r1, #1
 800b4e2:	e7e7      	b.n	800b4b4 <_printf_float+0x1a4>
 800b4e4:	2900      	cmp	r1, #0
 800b4e6:	bfd4      	ite	le
 800b4e8:	f1c1 0202 	rsble	r2, r1, #2
 800b4ec:	2201      	movgt	r2, #1
 800b4ee:	4413      	add	r3, r2
 800b4f0:	e7e0      	b.n	800b4b4 <_printf_float+0x1a4>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	055a      	lsls	r2, r3, #21
 800b4f6:	d407      	bmi.n	800b508 <_printf_float+0x1f8>
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	4642      	mov	r2, r8
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	4628      	mov	r0, r5
 800b500:	47b8      	blx	r7
 800b502:	3001      	adds	r0, #1
 800b504:	d12c      	bne.n	800b560 <_printf_float+0x250>
 800b506:	e764      	b.n	800b3d2 <_printf_float+0xc2>
 800b508:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b50c:	f240 80e0 	bls.w	800b6d0 <_printf_float+0x3c0>
 800b510:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b514:	2200      	movs	r2, #0
 800b516:	2300      	movs	r3, #0
 800b518:	f7f5 faee 	bl	8000af8 <__aeabi_dcmpeq>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	d034      	beq.n	800b58a <_printf_float+0x27a>
 800b520:	4a37      	ldr	r2, [pc, #220]	; (800b600 <_printf_float+0x2f0>)
 800b522:	2301      	movs	r3, #1
 800b524:	4631      	mov	r1, r6
 800b526:	4628      	mov	r0, r5
 800b528:	47b8      	blx	r7
 800b52a:	3001      	adds	r0, #1
 800b52c:	f43f af51 	beq.w	800b3d2 <_printf_float+0xc2>
 800b530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b534:	429a      	cmp	r2, r3
 800b536:	db02      	blt.n	800b53e <_printf_float+0x22e>
 800b538:	6823      	ldr	r3, [r4, #0]
 800b53a:	07d8      	lsls	r0, r3, #31
 800b53c:	d510      	bpl.n	800b560 <_printf_float+0x250>
 800b53e:	ee18 3a10 	vmov	r3, s16
 800b542:	4652      	mov	r2, sl
 800b544:	4631      	mov	r1, r6
 800b546:	4628      	mov	r0, r5
 800b548:	47b8      	blx	r7
 800b54a:	3001      	adds	r0, #1
 800b54c:	f43f af41 	beq.w	800b3d2 <_printf_float+0xc2>
 800b550:	f04f 0800 	mov.w	r8, #0
 800b554:	f104 091a 	add.w	r9, r4, #26
 800b558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b55a:	3b01      	subs	r3, #1
 800b55c:	4543      	cmp	r3, r8
 800b55e:	dc09      	bgt.n	800b574 <_printf_float+0x264>
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	079b      	lsls	r3, r3, #30
 800b564:	f100 8105 	bmi.w	800b772 <_printf_float+0x462>
 800b568:	68e0      	ldr	r0, [r4, #12]
 800b56a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b56c:	4298      	cmp	r0, r3
 800b56e:	bfb8      	it	lt
 800b570:	4618      	movlt	r0, r3
 800b572:	e730      	b.n	800b3d6 <_printf_float+0xc6>
 800b574:	2301      	movs	r3, #1
 800b576:	464a      	mov	r2, r9
 800b578:	4631      	mov	r1, r6
 800b57a:	4628      	mov	r0, r5
 800b57c:	47b8      	blx	r7
 800b57e:	3001      	adds	r0, #1
 800b580:	f43f af27 	beq.w	800b3d2 <_printf_float+0xc2>
 800b584:	f108 0801 	add.w	r8, r8, #1
 800b588:	e7e6      	b.n	800b558 <_printf_float+0x248>
 800b58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	dc39      	bgt.n	800b604 <_printf_float+0x2f4>
 800b590:	4a1b      	ldr	r2, [pc, #108]	; (800b600 <_printf_float+0x2f0>)
 800b592:	2301      	movs	r3, #1
 800b594:	4631      	mov	r1, r6
 800b596:	4628      	mov	r0, r5
 800b598:	47b8      	blx	r7
 800b59a:	3001      	adds	r0, #1
 800b59c:	f43f af19 	beq.w	800b3d2 <_printf_float+0xc2>
 800b5a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	d102      	bne.n	800b5ae <_printf_float+0x29e>
 800b5a8:	6823      	ldr	r3, [r4, #0]
 800b5aa:	07d9      	lsls	r1, r3, #31
 800b5ac:	d5d8      	bpl.n	800b560 <_printf_float+0x250>
 800b5ae:	ee18 3a10 	vmov	r3, s16
 800b5b2:	4652      	mov	r2, sl
 800b5b4:	4631      	mov	r1, r6
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	47b8      	blx	r7
 800b5ba:	3001      	adds	r0, #1
 800b5bc:	f43f af09 	beq.w	800b3d2 <_printf_float+0xc2>
 800b5c0:	f04f 0900 	mov.w	r9, #0
 800b5c4:	f104 0a1a 	add.w	sl, r4, #26
 800b5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ca:	425b      	negs	r3, r3
 800b5cc:	454b      	cmp	r3, r9
 800b5ce:	dc01      	bgt.n	800b5d4 <_printf_float+0x2c4>
 800b5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5d2:	e792      	b.n	800b4fa <_printf_float+0x1ea>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	4652      	mov	r2, sl
 800b5d8:	4631      	mov	r1, r6
 800b5da:	4628      	mov	r0, r5
 800b5dc:	47b8      	blx	r7
 800b5de:	3001      	adds	r0, #1
 800b5e0:	f43f aef7 	beq.w	800b3d2 <_printf_float+0xc2>
 800b5e4:	f109 0901 	add.w	r9, r9, #1
 800b5e8:	e7ee      	b.n	800b5c8 <_printf_float+0x2b8>
 800b5ea:	bf00      	nop
 800b5ec:	7fefffff 	.word	0x7fefffff
 800b5f0:	08010b2c 	.word	0x08010b2c
 800b5f4:	08010b30 	.word	0x08010b30
 800b5f8:	08010b38 	.word	0x08010b38
 800b5fc:	08010b34 	.word	0x08010b34
 800b600:	08010b3c 	.word	0x08010b3c
 800b604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b606:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b608:	429a      	cmp	r2, r3
 800b60a:	bfa8      	it	ge
 800b60c:	461a      	movge	r2, r3
 800b60e:	2a00      	cmp	r2, #0
 800b610:	4691      	mov	r9, r2
 800b612:	dc37      	bgt.n	800b684 <_printf_float+0x374>
 800b614:	f04f 0b00 	mov.w	fp, #0
 800b618:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b61c:	f104 021a 	add.w	r2, r4, #26
 800b620:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b622:	9305      	str	r3, [sp, #20]
 800b624:	eba3 0309 	sub.w	r3, r3, r9
 800b628:	455b      	cmp	r3, fp
 800b62a:	dc33      	bgt.n	800b694 <_printf_float+0x384>
 800b62c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b630:	429a      	cmp	r2, r3
 800b632:	db3b      	blt.n	800b6ac <_printf_float+0x39c>
 800b634:	6823      	ldr	r3, [r4, #0]
 800b636:	07da      	lsls	r2, r3, #31
 800b638:	d438      	bmi.n	800b6ac <_printf_float+0x39c>
 800b63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b63c:	9a05      	ldr	r2, [sp, #20]
 800b63e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b640:	1a9a      	subs	r2, r3, r2
 800b642:	eba3 0901 	sub.w	r9, r3, r1
 800b646:	4591      	cmp	r9, r2
 800b648:	bfa8      	it	ge
 800b64a:	4691      	movge	r9, r2
 800b64c:	f1b9 0f00 	cmp.w	r9, #0
 800b650:	dc35      	bgt.n	800b6be <_printf_float+0x3ae>
 800b652:	f04f 0800 	mov.w	r8, #0
 800b656:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b65a:	f104 0a1a 	add.w	sl, r4, #26
 800b65e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b662:	1a9b      	subs	r3, r3, r2
 800b664:	eba3 0309 	sub.w	r3, r3, r9
 800b668:	4543      	cmp	r3, r8
 800b66a:	f77f af79 	ble.w	800b560 <_printf_float+0x250>
 800b66e:	2301      	movs	r3, #1
 800b670:	4652      	mov	r2, sl
 800b672:	4631      	mov	r1, r6
 800b674:	4628      	mov	r0, r5
 800b676:	47b8      	blx	r7
 800b678:	3001      	adds	r0, #1
 800b67a:	f43f aeaa 	beq.w	800b3d2 <_printf_float+0xc2>
 800b67e:	f108 0801 	add.w	r8, r8, #1
 800b682:	e7ec      	b.n	800b65e <_printf_float+0x34e>
 800b684:	4613      	mov	r3, r2
 800b686:	4631      	mov	r1, r6
 800b688:	4642      	mov	r2, r8
 800b68a:	4628      	mov	r0, r5
 800b68c:	47b8      	blx	r7
 800b68e:	3001      	adds	r0, #1
 800b690:	d1c0      	bne.n	800b614 <_printf_float+0x304>
 800b692:	e69e      	b.n	800b3d2 <_printf_float+0xc2>
 800b694:	2301      	movs	r3, #1
 800b696:	4631      	mov	r1, r6
 800b698:	4628      	mov	r0, r5
 800b69a:	9205      	str	r2, [sp, #20]
 800b69c:	47b8      	blx	r7
 800b69e:	3001      	adds	r0, #1
 800b6a0:	f43f ae97 	beq.w	800b3d2 <_printf_float+0xc2>
 800b6a4:	9a05      	ldr	r2, [sp, #20]
 800b6a6:	f10b 0b01 	add.w	fp, fp, #1
 800b6aa:	e7b9      	b.n	800b620 <_printf_float+0x310>
 800b6ac:	ee18 3a10 	vmov	r3, s16
 800b6b0:	4652      	mov	r2, sl
 800b6b2:	4631      	mov	r1, r6
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	47b8      	blx	r7
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	d1be      	bne.n	800b63a <_printf_float+0x32a>
 800b6bc:	e689      	b.n	800b3d2 <_printf_float+0xc2>
 800b6be:	9a05      	ldr	r2, [sp, #20]
 800b6c0:	464b      	mov	r3, r9
 800b6c2:	4442      	add	r2, r8
 800b6c4:	4631      	mov	r1, r6
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	47b8      	blx	r7
 800b6ca:	3001      	adds	r0, #1
 800b6cc:	d1c1      	bne.n	800b652 <_printf_float+0x342>
 800b6ce:	e680      	b.n	800b3d2 <_printf_float+0xc2>
 800b6d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6d2:	2a01      	cmp	r2, #1
 800b6d4:	dc01      	bgt.n	800b6da <_printf_float+0x3ca>
 800b6d6:	07db      	lsls	r3, r3, #31
 800b6d8:	d538      	bpl.n	800b74c <_printf_float+0x43c>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	4642      	mov	r2, r8
 800b6de:	4631      	mov	r1, r6
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	47b8      	blx	r7
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	f43f ae74 	beq.w	800b3d2 <_printf_float+0xc2>
 800b6ea:	ee18 3a10 	vmov	r3, s16
 800b6ee:	4652      	mov	r2, sl
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	47b8      	blx	r7
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	f43f ae6b 	beq.w	800b3d2 <_printf_float+0xc2>
 800b6fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b700:	2200      	movs	r2, #0
 800b702:	2300      	movs	r3, #0
 800b704:	f7f5 f9f8 	bl	8000af8 <__aeabi_dcmpeq>
 800b708:	b9d8      	cbnz	r0, 800b742 <_printf_float+0x432>
 800b70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b70c:	f108 0201 	add.w	r2, r8, #1
 800b710:	3b01      	subs	r3, #1
 800b712:	4631      	mov	r1, r6
 800b714:	4628      	mov	r0, r5
 800b716:	47b8      	blx	r7
 800b718:	3001      	adds	r0, #1
 800b71a:	d10e      	bne.n	800b73a <_printf_float+0x42a>
 800b71c:	e659      	b.n	800b3d2 <_printf_float+0xc2>
 800b71e:	2301      	movs	r3, #1
 800b720:	4652      	mov	r2, sl
 800b722:	4631      	mov	r1, r6
 800b724:	4628      	mov	r0, r5
 800b726:	47b8      	blx	r7
 800b728:	3001      	adds	r0, #1
 800b72a:	f43f ae52 	beq.w	800b3d2 <_printf_float+0xc2>
 800b72e:	f108 0801 	add.w	r8, r8, #1
 800b732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b734:	3b01      	subs	r3, #1
 800b736:	4543      	cmp	r3, r8
 800b738:	dcf1      	bgt.n	800b71e <_printf_float+0x40e>
 800b73a:	464b      	mov	r3, r9
 800b73c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b740:	e6dc      	b.n	800b4fc <_printf_float+0x1ec>
 800b742:	f04f 0800 	mov.w	r8, #0
 800b746:	f104 0a1a 	add.w	sl, r4, #26
 800b74a:	e7f2      	b.n	800b732 <_printf_float+0x422>
 800b74c:	2301      	movs	r3, #1
 800b74e:	4642      	mov	r2, r8
 800b750:	e7df      	b.n	800b712 <_printf_float+0x402>
 800b752:	2301      	movs	r3, #1
 800b754:	464a      	mov	r2, r9
 800b756:	4631      	mov	r1, r6
 800b758:	4628      	mov	r0, r5
 800b75a:	47b8      	blx	r7
 800b75c:	3001      	adds	r0, #1
 800b75e:	f43f ae38 	beq.w	800b3d2 <_printf_float+0xc2>
 800b762:	f108 0801 	add.w	r8, r8, #1
 800b766:	68e3      	ldr	r3, [r4, #12]
 800b768:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b76a:	1a5b      	subs	r3, r3, r1
 800b76c:	4543      	cmp	r3, r8
 800b76e:	dcf0      	bgt.n	800b752 <_printf_float+0x442>
 800b770:	e6fa      	b.n	800b568 <_printf_float+0x258>
 800b772:	f04f 0800 	mov.w	r8, #0
 800b776:	f104 0919 	add.w	r9, r4, #25
 800b77a:	e7f4      	b.n	800b766 <_printf_float+0x456>

0800b77c <_printf_common>:
 800b77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b780:	4616      	mov	r6, r2
 800b782:	4699      	mov	r9, r3
 800b784:	688a      	ldr	r2, [r1, #8]
 800b786:	690b      	ldr	r3, [r1, #16]
 800b788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b78c:	4293      	cmp	r3, r2
 800b78e:	bfb8      	it	lt
 800b790:	4613      	movlt	r3, r2
 800b792:	6033      	str	r3, [r6, #0]
 800b794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b798:	4607      	mov	r7, r0
 800b79a:	460c      	mov	r4, r1
 800b79c:	b10a      	cbz	r2, 800b7a2 <_printf_common+0x26>
 800b79e:	3301      	adds	r3, #1
 800b7a0:	6033      	str	r3, [r6, #0]
 800b7a2:	6823      	ldr	r3, [r4, #0]
 800b7a4:	0699      	lsls	r1, r3, #26
 800b7a6:	bf42      	ittt	mi
 800b7a8:	6833      	ldrmi	r3, [r6, #0]
 800b7aa:	3302      	addmi	r3, #2
 800b7ac:	6033      	strmi	r3, [r6, #0]
 800b7ae:	6825      	ldr	r5, [r4, #0]
 800b7b0:	f015 0506 	ands.w	r5, r5, #6
 800b7b4:	d106      	bne.n	800b7c4 <_printf_common+0x48>
 800b7b6:	f104 0a19 	add.w	sl, r4, #25
 800b7ba:	68e3      	ldr	r3, [r4, #12]
 800b7bc:	6832      	ldr	r2, [r6, #0]
 800b7be:	1a9b      	subs	r3, r3, r2
 800b7c0:	42ab      	cmp	r3, r5
 800b7c2:	dc26      	bgt.n	800b812 <_printf_common+0x96>
 800b7c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7c8:	1e13      	subs	r3, r2, #0
 800b7ca:	6822      	ldr	r2, [r4, #0]
 800b7cc:	bf18      	it	ne
 800b7ce:	2301      	movne	r3, #1
 800b7d0:	0692      	lsls	r2, r2, #26
 800b7d2:	d42b      	bmi.n	800b82c <_printf_common+0xb0>
 800b7d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7d8:	4649      	mov	r1, r9
 800b7da:	4638      	mov	r0, r7
 800b7dc:	47c0      	blx	r8
 800b7de:	3001      	adds	r0, #1
 800b7e0:	d01e      	beq.n	800b820 <_printf_common+0xa4>
 800b7e2:	6823      	ldr	r3, [r4, #0]
 800b7e4:	68e5      	ldr	r5, [r4, #12]
 800b7e6:	6832      	ldr	r2, [r6, #0]
 800b7e8:	f003 0306 	and.w	r3, r3, #6
 800b7ec:	2b04      	cmp	r3, #4
 800b7ee:	bf08      	it	eq
 800b7f0:	1aad      	subeq	r5, r5, r2
 800b7f2:	68a3      	ldr	r3, [r4, #8]
 800b7f4:	6922      	ldr	r2, [r4, #16]
 800b7f6:	bf0c      	ite	eq
 800b7f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7fc:	2500      	movne	r5, #0
 800b7fe:	4293      	cmp	r3, r2
 800b800:	bfc4      	itt	gt
 800b802:	1a9b      	subgt	r3, r3, r2
 800b804:	18ed      	addgt	r5, r5, r3
 800b806:	2600      	movs	r6, #0
 800b808:	341a      	adds	r4, #26
 800b80a:	42b5      	cmp	r5, r6
 800b80c:	d11a      	bne.n	800b844 <_printf_common+0xc8>
 800b80e:	2000      	movs	r0, #0
 800b810:	e008      	b.n	800b824 <_printf_common+0xa8>
 800b812:	2301      	movs	r3, #1
 800b814:	4652      	mov	r2, sl
 800b816:	4649      	mov	r1, r9
 800b818:	4638      	mov	r0, r7
 800b81a:	47c0      	blx	r8
 800b81c:	3001      	adds	r0, #1
 800b81e:	d103      	bne.n	800b828 <_printf_common+0xac>
 800b820:	f04f 30ff 	mov.w	r0, #4294967295
 800b824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b828:	3501      	adds	r5, #1
 800b82a:	e7c6      	b.n	800b7ba <_printf_common+0x3e>
 800b82c:	18e1      	adds	r1, r4, r3
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	2030      	movs	r0, #48	; 0x30
 800b832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b836:	4422      	add	r2, r4
 800b838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b83c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b840:	3302      	adds	r3, #2
 800b842:	e7c7      	b.n	800b7d4 <_printf_common+0x58>
 800b844:	2301      	movs	r3, #1
 800b846:	4622      	mov	r2, r4
 800b848:	4649      	mov	r1, r9
 800b84a:	4638      	mov	r0, r7
 800b84c:	47c0      	blx	r8
 800b84e:	3001      	adds	r0, #1
 800b850:	d0e6      	beq.n	800b820 <_printf_common+0xa4>
 800b852:	3601      	adds	r6, #1
 800b854:	e7d9      	b.n	800b80a <_printf_common+0x8e>
	...

0800b858 <_printf_i>:
 800b858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b85c:	7e0f      	ldrb	r7, [r1, #24]
 800b85e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b860:	2f78      	cmp	r7, #120	; 0x78
 800b862:	4691      	mov	r9, r2
 800b864:	4680      	mov	r8, r0
 800b866:	460c      	mov	r4, r1
 800b868:	469a      	mov	sl, r3
 800b86a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b86e:	d807      	bhi.n	800b880 <_printf_i+0x28>
 800b870:	2f62      	cmp	r7, #98	; 0x62
 800b872:	d80a      	bhi.n	800b88a <_printf_i+0x32>
 800b874:	2f00      	cmp	r7, #0
 800b876:	f000 80d8 	beq.w	800ba2a <_printf_i+0x1d2>
 800b87a:	2f58      	cmp	r7, #88	; 0x58
 800b87c:	f000 80a3 	beq.w	800b9c6 <_printf_i+0x16e>
 800b880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b888:	e03a      	b.n	800b900 <_printf_i+0xa8>
 800b88a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b88e:	2b15      	cmp	r3, #21
 800b890:	d8f6      	bhi.n	800b880 <_printf_i+0x28>
 800b892:	a101      	add	r1, pc, #4	; (adr r1, 800b898 <_printf_i+0x40>)
 800b894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b898:	0800b8f1 	.word	0x0800b8f1
 800b89c:	0800b905 	.word	0x0800b905
 800b8a0:	0800b881 	.word	0x0800b881
 800b8a4:	0800b881 	.word	0x0800b881
 800b8a8:	0800b881 	.word	0x0800b881
 800b8ac:	0800b881 	.word	0x0800b881
 800b8b0:	0800b905 	.word	0x0800b905
 800b8b4:	0800b881 	.word	0x0800b881
 800b8b8:	0800b881 	.word	0x0800b881
 800b8bc:	0800b881 	.word	0x0800b881
 800b8c0:	0800b881 	.word	0x0800b881
 800b8c4:	0800ba11 	.word	0x0800ba11
 800b8c8:	0800b935 	.word	0x0800b935
 800b8cc:	0800b9f3 	.word	0x0800b9f3
 800b8d0:	0800b881 	.word	0x0800b881
 800b8d4:	0800b881 	.word	0x0800b881
 800b8d8:	0800ba33 	.word	0x0800ba33
 800b8dc:	0800b881 	.word	0x0800b881
 800b8e0:	0800b935 	.word	0x0800b935
 800b8e4:	0800b881 	.word	0x0800b881
 800b8e8:	0800b881 	.word	0x0800b881
 800b8ec:	0800b9fb 	.word	0x0800b9fb
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	1d1a      	adds	r2, r3, #4
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	602a      	str	r2, [r5, #0]
 800b8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b900:	2301      	movs	r3, #1
 800b902:	e0a3      	b.n	800ba4c <_printf_i+0x1f4>
 800b904:	6820      	ldr	r0, [r4, #0]
 800b906:	6829      	ldr	r1, [r5, #0]
 800b908:	0606      	lsls	r6, r0, #24
 800b90a:	f101 0304 	add.w	r3, r1, #4
 800b90e:	d50a      	bpl.n	800b926 <_printf_i+0xce>
 800b910:	680e      	ldr	r6, [r1, #0]
 800b912:	602b      	str	r3, [r5, #0]
 800b914:	2e00      	cmp	r6, #0
 800b916:	da03      	bge.n	800b920 <_printf_i+0xc8>
 800b918:	232d      	movs	r3, #45	; 0x2d
 800b91a:	4276      	negs	r6, r6
 800b91c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b920:	485e      	ldr	r0, [pc, #376]	; (800ba9c <_printf_i+0x244>)
 800b922:	230a      	movs	r3, #10
 800b924:	e019      	b.n	800b95a <_printf_i+0x102>
 800b926:	680e      	ldr	r6, [r1, #0]
 800b928:	602b      	str	r3, [r5, #0]
 800b92a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b92e:	bf18      	it	ne
 800b930:	b236      	sxthne	r6, r6
 800b932:	e7ef      	b.n	800b914 <_printf_i+0xbc>
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	6820      	ldr	r0, [r4, #0]
 800b938:	1d19      	adds	r1, r3, #4
 800b93a:	6029      	str	r1, [r5, #0]
 800b93c:	0601      	lsls	r1, r0, #24
 800b93e:	d501      	bpl.n	800b944 <_printf_i+0xec>
 800b940:	681e      	ldr	r6, [r3, #0]
 800b942:	e002      	b.n	800b94a <_printf_i+0xf2>
 800b944:	0646      	lsls	r6, r0, #25
 800b946:	d5fb      	bpl.n	800b940 <_printf_i+0xe8>
 800b948:	881e      	ldrh	r6, [r3, #0]
 800b94a:	4854      	ldr	r0, [pc, #336]	; (800ba9c <_printf_i+0x244>)
 800b94c:	2f6f      	cmp	r7, #111	; 0x6f
 800b94e:	bf0c      	ite	eq
 800b950:	2308      	moveq	r3, #8
 800b952:	230a      	movne	r3, #10
 800b954:	2100      	movs	r1, #0
 800b956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b95a:	6865      	ldr	r5, [r4, #4]
 800b95c:	60a5      	str	r5, [r4, #8]
 800b95e:	2d00      	cmp	r5, #0
 800b960:	bfa2      	ittt	ge
 800b962:	6821      	ldrge	r1, [r4, #0]
 800b964:	f021 0104 	bicge.w	r1, r1, #4
 800b968:	6021      	strge	r1, [r4, #0]
 800b96a:	b90e      	cbnz	r6, 800b970 <_printf_i+0x118>
 800b96c:	2d00      	cmp	r5, #0
 800b96e:	d04d      	beq.n	800ba0c <_printf_i+0x1b4>
 800b970:	4615      	mov	r5, r2
 800b972:	fbb6 f1f3 	udiv	r1, r6, r3
 800b976:	fb03 6711 	mls	r7, r3, r1, r6
 800b97a:	5dc7      	ldrb	r7, [r0, r7]
 800b97c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b980:	4637      	mov	r7, r6
 800b982:	42bb      	cmp	r3, r7
 800b984:	460e      	mov	r6, r1
 800b986:	d9f4      	bls.n	800b972 <_printf_i+0x11a>
 800b988:	2b08      	cmp	r3, #8
 800b98a:	d10b      	bne.n	800b9a4 <_printf_i+0x14c>
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	07de      	lsls	r6, r3, #31
 800b990:	d508      	bpl.n	800b9a4 <_printf_i+0x14c>
 800b992:	6923      	ldr	r3, [r4, #16]
 800b994:	6861      	ldr	r1, [r4, #4]
 800b996:	4299      	cmp	r1, r3
 800b998:	bfde      	ittt	le
 800b99a:	2330      	movle	r3, #48	; 0x30
 800b99c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9a4:	1b52      	subs	r2, r2, r5
 800b9a6:	6122      	str	r2, [r4, #16]
 800b9a8:	f8cd a000 	str.w	sl, [sp]
 800b9ac:	464b      	mov	r3, r9
 800b9ae:	aa03      	add	r2, sp, #12
 800b9b0:	4621      	mov	r1, r4
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	f7ff fee2 	bl	800b77c <_printf_common>
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	d14c      	bne.n	800ba56 <_printf_i+0x1fe>
 800b9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c0:	b004      	add	sp, #16
 800b9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c6:	4835      	ldr	r0, [pc, #212]	; (800ba9c <_printf_i+0x244>)
 800b9c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b9cc:	6829      	ldr	r1, [r5, #0]
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b9d4:	6029      	str	r1, [r5, #0]
 800b9d6:	061d      	lsls	r5, r3, #24
 800b9d8:	d514      	bpl.n	800ba04 <_printf_i+0x1ac>
 800b9da:	07df      	lsls	r7, r3, #31
 800b9dc:	bf44      	itt	mi
 800b9de:	f043 0320 	orrmi.w	r3, r3, #32
 800b9e2:	6023      	strmi	r3, [r4, #0]
 800b9e4:	b91e      	cbnz	r6, 800b9ee <_printf_i+0x196>
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	f023 0320 	bic.w	r3, r3, #32
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	2310      	movs	r3, #16
 800b9f0:	e7b0      	b.n	800b954 <_printf_i+0xfc>
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	f043 0320 	orr.w	r3, r3, #32
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	2378      	movs	r3, #120	; 0x78
 800b9fc:	4828      	ldr	r0, [pc, #160]	; (800baa0 <_printf_i+0x248>)
 800b9fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba02:	e7e3      	b.n	800b9cc <_printf_i+0x174>
 800ba04:	0659      	lsls	r1, r3, #25
 800ba06:	bf48      	it	mi
 800ba08:	b2b6      	uxthmi	r6, r6
 800ba0a:	e7e6      	b.n	800b9da <_printf_i+0x182>
 800ba0c:	4615      	mov	r5, r2
 800ba0e:	e7bb      	b.n	800b988 <_printf_i+0x130>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	6826      	ldr	r6, [r4, #0]
 800ba14:	6961      	ldr	r1, [r4, #20]
 800ba16:	1d18      	adds	r0, r3, #4
 800ba18:	6028      	str	r0, [r5, #0]
 800ba1a:	0635      	lsls	r5, r6, #24
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	d501      	bpl.n	800ba24 <_printf_i+0x1cc>
 800ba20:	6019      	str	r1, [r3, #0]
 800ba22:	e002      	b.n	800ba2a <_printf_i+0x1d2>
 800ba24:	0670      	lsls	r0, r6, #25
 800ba26:	d5fb      	bpl.n	800ba20 <_printf_i+0x1c8>
 800ba28:	8019      	strh	r1, [r3, #0]
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	6123      	str	r3, [r4, #16]
 800ba2e:	4615      	mov	r5, r2
 800ba30:	e7ba      	b.n	800b9a8 <_printf_i+0x150>
 800ba32:	682b      	ldr	r3, [r5, #0]
 800ba34:	1d1a      	adds	r2, r3, #4
 800ba36:	602a      	str	r2, [r5, #0]
 800ba38:	681d      	ldr	r5, [r3, #0]
 800ba3a:	6862      	ldr	r2, [r4, #4]
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f7f4 fbe6 	bl	8000210 <memchr>
 800ba44:	b108      	cbz	r0, 800ba4a <_printf_i+0x1f2>
 800ba46:	1b40      	subs	r0, r0, r5
 800ba48:	6060      	str	r0, [r4, #4]
 800ba4a:	6863      	ldr	r3, [r4, #4]
 800ba4c:	6123      	str	r3, [r4, #16]
 800ba4e:	2300      	movs	r3, #0
 800ba50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba54:	e7a8      	b.n	800b9a8 <_printf_i+0x150>
 800ba56:	6923      	ldr	r3, [r4, #16]
 800ba58:	462a      	mov	r2, r5
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	47d0      	blx	sl
 800ba60:	3001      	adds	r0, #1
 800ba62:	d0ab      	beq.n	800b9bc <_printf_i+0x164>
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	079b      	lsls	r3, r3, #30
 800ba68:	d413      	bmi.n	800ba92 <_printf_i+0x23a>
 800ba6a:	68e0      	ldr	r0, [r4, #12]
 800ba6c:	9b03      	ldr	r3, [sp, #12]
 800ba6e:	4298      	cmp	r0, r3
 800ba70:	bfb8      	it	lt
 800ba72:	4618      	movlt	r0, r3
 800ba74:	e7a4      	b.n	800b9c0 <_printf_i+0x168>
 800ba76:	2301      	movs	r3, #1
 800ba78:	4632      	mov	r2, r6
 800ba7a:	4649      	mov	r1, r9
 800ba7c:	4640      	mov	r0, r8
 800ba7e:	47d0      	blx	sl
 800ba80:	3001      	adds	r0, #1
 800ba82:	d09b      	beq.n	800b9bc <_printf_i+0x164>
 800ba84:	3501      	adds	r5, #1
 800ba86:	68e3      	ldr	r3, [r4, #12]
 800ba88:	9903      	ldr	r1, [sp, #12]
 800ba8a:	1a5b      	subs	r3, r3, r1
 800ba8c:	42ab      	cmp	r3, r5
 800ba8e:	dcf2      	bgt.n	800ba76 <_printf_i+0x21e>
 800ba90:	e7eb      	b.n	800ba6a <_printf_i+0x212>
 800ba92:	2500      	movs	r5, #0
 800ba94:	f104 0619 	add.w	r6, r4, #25
 800ba98:	e7f5      	b.n	800ba86 <_printf_i+0x22e>
 800ba9a:	bf00      	nop
 800ba9c:	08010b3e 	.word	0x08010b3e
 800baa0:	08010b4f 	.word	0x08010b4f

0800baa4 <_scanf_float>:
 800baa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa8:	b087      	sub	sp, #28
 800baaa:	4617      	mov	r7, r2
 800baac:	9303      	str	r3, [sp, #12]
 800baae:	688b      	ldr	r3, [r1, #8]
 800bab0:	1e5a      	subs	r2, r3, #1
 800bab2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bab6:	bf83      	ittte	hi
 800bab8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800babc:	195b      	addhi	r3, r3, r5
 800babe:	9302      	strhi	r3, [sp, #8]
 800bac0:	2300      	movls	r3, #0
 800bac2:	bf86      	itte	hi
 800bac4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bac8:	608b      	strhi	r3, [r1, #8]
 800baca:	9302      	strls	r3, [sp, #8]
 800bacc:	680b      	ldr	r3, [r1, #0]
 800bace:	468b      	mov	fp, r1
 800bad0:	2500      	movs	r5, #0
 800bad2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bad6:	f84b 3b1c 	str.w	r3, [fp], #28
 800bada:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bade:	4680      	mov	r8, r0
 800bae0:	460c      	mov	r4, r1
 800bae2:	465e      	mov	r6, fp
 800bae4:	46aa      	mov	sl, r5
 800bae6:	46a9      	mov	r9, r5
 800bae8:	9501      	str	r5, [sp, #4]
 800baea:	68a2      	ldr	r2, [r4, #8]
 800baec:	b152      	cbz	r2, 800bb04 <_scanf_float+0x60>
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2b4e      	cmp	r3, #78	; 0x4e
 800baf4:	d864      	bhi.n	800bbc0 <_scanf_float+0x11c>
 800baf6:	2b40      	cmp	r3, #64	; 0x40
 800baf8:	d83c      	bhi.n	800bb74 <_scanf_float+0xd0>
 800bafa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bafe:	b2c8      	uxtb	r0, r1
 800bb00:	280e      	cmp	r0, #14
 800bb02:	d93a      	bls.n	800bb7a <_scanf_float+0xd6>
 800bb04:	f1b9 0f00 	cmp.w	r9, #0
 800bb08:	d003      	beq.n	800bb12 <_scanf_float+0x6e>
 800bb0a:	6823      	ldr	r3, [r4, #0]
 800bb0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb10:	6023      	str	r3, [r4, #0]
 800bb12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb16:	f1ba 0f01 	cmp.w	sl, #1
 800bb1a:	f200 8113 	bhi.w	800bd44 <_scanf_float+0x2a0>
 800bb1e:	455e      	cmp	r6, fp
 800bb20:	f200 8105 	bhi.w	800bd2e <_scanf_float+0x28a>
 800bb24:	2501      	movs	r5, #1
 800bb26:	4628      	mov	r0, r5
 800bb28:	b007      	add	sp, #28
 800bb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bb32:	2a0d      	cmp	r2, #13
 800bb34:	d8e6      	bhi.n	800bb04 <_scanf_float+0x60>
 800bb36:	a101      	add	r1, pc, #4	; (adr r1, 800bb3c <_scanf_float+0x98>)
 800bb38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bb3c:	0800bc7b 	.word	0x0800bc7b
 800bb40:	0800bb05 	.word	0x0800bb05
 800bb44:	0800bb05 	.word	0x0800bb05
 800bb48:	0800bb05 	.word	0x0800bb05
 800bb4c:	0800bcdb 	.word	0x0800bcdb
 800bb50:	0800bcb3 	.word	0x0800bcb3
 800bb54:	0800bb05 	.word	0x0800bb05
 800bb58:	0800bb05 	.word	0x0800bb05
 800bb5c:	0800bc89 	.word	0x0800bc89
 800bb60:	0800bb05 	.word	0x0800bb05
 800bb64:	0800bb05 	.word	0x0800bb05
 800bb68:	0800bb05 	.word	0x0800bb05
 800bb6c:	0800bb05 	.word	0x0800bb05
 800bb70:	0800bc41 	.word	0x0800bc41
 800bb74:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bb78:	e7db      	b.n	800bb32 <_scanf_float+0x8e>
 800bb7a:	290e      	cmp	r1, #14
 800bb7c:	d8c2      	bhi.n	800bb04 <_scanf_float+0x60>
 800bb7e:	a001      	add	r0, pc, #4	; (adr r0, 800bb84 <_scanf_float+0xe0>)
 800bb80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bb84:	0800bc33 	.word	0x0800bc33
 800bb88:	0800bb05 	.word	0x0800bb05
 800bb8c:	0800bc33 	.word	0x0800bc33
 800bb90:	0800bcc7 	.word	0x0800bcc7
 800bb94:	0800bb05 	.word	0x0800bb05
 800bb98:	0800bbe1 	.word	0x0800bbe1
 800bb9c:	0800bc1d 	.word	0x0800bc1d
 800bba0:	0800bc1d 	.word	0x0800bc1d
 800bba4:	0800bc1d 	.word	0x0800bc1d
 800bba8:	0800bc1d 	.word	0x0800bc1d
 800bbac:	0800bc1d 	.word	0x0800bc1d
 800bbb0:	0800bc1d 	.word	0x0800bc1d
 800bbb4:	0800bc1d 	.word	0x0800bc1d
 800bbb8:	0800bc1d 	.word	0x0800bc1d
 800bbbc:	0800bc1d 	.word	0x0800bc1d
 800bbc0:	2b6e      	cmp	r3, #110	; 0x6e
 800bbc2:	d809      	bhi.n	800bbd8 <_scanf_float+0x134>
 800bbc4:	2b60      	cmp	r3, #96	; 0x60
 800bbc6:	d8b2      	bhi.n	800bb2e <_scanf_float+0x8a>
 800bbc8:	2b54      	cmp	r3, #84	; 0x54
 800bbca:	d077      	beq.n	800bcbc <_scanf_float+0x218>
 800bbcc:	2b59      	cmp	r3, #89	; 0x59
 800bbce:	d199      	bne.n	800bb04 <_scanf_float+0x60>
 800bbd0:	2d07      	cmp	r5, #7
 800bbd2:	d197      	bne.n	800bb04 <_scanf_float+0x60>
 800bbd4:	2508      	movs	r5, #8
 800bbd6:	e029      	b.n	800bc2c <_scanf_float+0x188>
 800bbd8:	2b74      	cmp	r3, #116	; 0x74
 800bbda:	d06f      	beq.n	800bcbc <_scanf_float+0x218>
 800bbdc:	2b79      	cmp	r3, #121	; 0x79
 800bbde:	e7f6      	b.n	800bbce <_scanf_float+0x12a>
 800bbe0:	6821      	ldr	r1, [r4, #0]
 800bbe2:	05c8      	lsls	r0, r1, #23
 800bbe4:	d51a      	bpl.n	800bc1c <_scanf_float+0x178>
 800bbe6:	9b02      	ldr	r3, [sp, #8]
 800bbe8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bbec:	6021      	str	r1, [r4, #0]
 800bbee:	f109 0901 	add.w	r9, r9, #1
 800bbf2:	b11b      	cbz	r3, 800bbfc <_scanf_float+0x158>
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	3201      	adds	r2, #1
 800bbf8:	9302      	str	r3, [sp, #8]
 800bbfa:	60a2      	str	r2, [r4, #8]
 800bbfc:	68a3      	ldr	r3, [r4, #8]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	60a3      	str	r3, [r4, #8]
 800bc02:	6923      	ldr	r3, [r4, #16]
 800bc04:	3301      	adds	r3, #1
 800bc06:	6123      	str	r3, [r4, #16]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	607b      	str	r3, [r7, #4]
 800bc10:	f340 8084 	ble.w	800bd1c <_scanf_float+0x278>
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	3301      	adds	r3, #1
 800bc18:	603b      	str	r3, [r7, #0]
 800bc1a:	e766      	b.n	800baea <_scanf_float+0x46>
 800bc1c:	eb1a 0f05 	cmn.w	sl, r5
 800bc20:	f47f af70 	bne.w	800bb04 <_scanf_float+0x60>
 800bc24:	6822      	ldr	r2, [r4, #0]
 800bc26:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bc2a:	6022      	str	r2, [r4, #0]
 800bc2c:	f806 3b01 	strb.w	r3, [r6], #1
 800bc30:	e7e4      	b.n	800bbfc <_scanf_float+0x158>
 800bc32:	6822      	ldr	r2, [r4, #0]
 800bc34:	0610      	lsls	r0, r2, #24
 800bc36:	f57f af65 	bpl.w	800bb04 <_scanf_float+0x60>
 800bc3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc3e:	e7f4      	b.n	800bc2a <_scanf_float+0x186>
 800bc40:	f1ba 0f00 	cmp.w	sl, #0
 800bc44:	d10e      	bne.n	800bc64 <_scanf_float+0x1c0>
 800bc46:	f1b9 0f00 	cmp.w	r9, #0
 800bc4a:	d10e      	bne.n	800bc6a <_scanf_float+0x1c6>
 800bc4c:	6822      	ldr	r2, [r4, #0]
 800bc4e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bc52:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bc56:	d108      	bne.n	800bc6a <_scanf_float+0x1c6>
 800bc58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bc5c:	6022      	str	r2, [r4, #0]
 800bc5e:	f04f 0a01 	mov.w	sl, #1
 800bc62:	e7e3      	b.n	800bc2c <_scanf_float+0x188>
 800bc64:	f1ba 0f02 	cmp.w	sl, #2
 800bc68:	d055      	beq.n	800bd16 <_scanf_float+0x272>
 800bc6a:	2d01      	cmp	r5, #1
 800bc6c:	d002      	beq.n	800bc74 <_scanf_float+0x1d0>
 800bc6e:	2d04      	cmp	r5, #4
 800bc70:	f47f af48 	bne.w	800bb04 <_scanf_float+0x60>
 800bc74:	3501      	adds	r5, #1
 800bc76:	b2ed      	uxtb	r5, r5
 800bc78:	e7d8      	b.n	800bc2c <_scanf_float+0x188>
 800bc7a:	f1ba 0f01 	cmp.w	sl, #1
 800bc7e:	f47f af41 	bne.w	800bb04 <_scanf_float+0x60>
 800bc82:	f04f 0a02 	mov.w	sl, #2
 800bc86:	e7d1      	b.n	800bc2c <_scanf_float+0x188>
 800bc88:	b97d      	cbnz	r5, 800bcaa <_scanf_float+0x206>
 800bc8a:	f1b9 0f00 	cmp.w	r9, #0
 800bc8e:	f47f af3c 	bne.w	800bb0a <_scanf_float+0x66>
 800bc92:	6822      	ldr	r2, [r4, #0]
 800bc94:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bc98:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bc9c:	f47f af39 	bne.w	800bb12 <_scanf_float+0x6e>
 800bca0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bca4:	6022      	str	r2, [r4, #0]
 800bca6:	2501      	movs	r5, #1
 800bca8:	e7c0      	b.n	800bc2c <_scanf_float+0x188>
 800bcaa:	2d03      	cmp	r5, #3
 800bcac:	d0e2      	beq.n	800bc74 <_scanf_float+0x1d0>
 800bcae:	2d05      	cmp	r5, #5
 800bcb0:	e7de      	b.n	800bc70 <_scanf_float+0x1cc>
 800bcb2:	2d02      	cmp	r5, #2
 800bcb4:	f47f af26 	bne.w	800bb04 <_scanf_float+0x60>
 800bcb8:	2503      	movs	r5, #3
 800bcba:	e7b7      	b.n	800bc2c <_scanf_float+0x188>
 800bcbc:	2d06      	cmp	r5, #6
 800bcbe:	f47f af21 	bne.w	800bb04 <_scanf_float+0x60>
 800bcc2:	2507      	movs	r5, #7
 800bcc4:	e7b2      	b.n	800bc2c <_scanf_float+0x188>
 800bcc6:	6822      	ldr	r2, [r4, #0]
 800bcc8:	0591      	lsls	r1, r2, #22
 800bcca:	f57f af1b 	bpl.w	800bb04 <_scanf_float+0x60>
 800bcce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bcd2:	6022      	str	r2, [r4, #0]
 800bcd4:	f8cd 9004 	str.w	r9, [sp, #4]
 800bcd8:	e7a8      	b.n	800bc2c <_scanf_float+0x188>
 800bcda:	6822      	ldr	r2, [r4, #0]
 800bcdc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bce0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bce4:	d006      	beq.n	800bcf4 <_scanf_float+0x250>
 800bce6:	0550      	lsls	r0, r2, #21
 800bce8:	f57f af0c 	bpl.w	800bb04 <_scanf_float+0x60>
 800bcec:	f1b9 0f00 	cmp.w	r9, #0
 800bcf0:	f43f af0f 	beq.w	800bb12 <_scanf_float+0x6e>
 800bcf4:	0591      	lsls	r1, r2, #22
 800bcf6:	bf58      	it	pl
 800bcf8:	9901      	ldrpl	r1, [sp, #4]
 800bcfa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bcfe:	bf58      	it	pl
 800bd00:	eba9 0101 	subpl.w	r1, r9, r1
 800bd04:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bd08:	bf58      	it	pl
 800bd0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bd0e:	6022      	str	r2, [r4, #0]
 800bd10:	f04f 0900 	mov.w	r9, #0
 800bd14:	e78a      	b.n	800bc2c <_scanf_float+0x188>
 800bd16:	f04f 0a03 	mov.w	sl, #3
 800bd1a:	e787      	b.n	800bc2c <_scanf_float+0x188>
 800bd1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd20:	4639      	mov	r1, r7
 800bd22:	4640      	mov	r0, r8
 800bd24:	4798      	blx	r3
 800bd26:	2800      	cmp	r0, #0
 800bd28:	f43f aedf 	beq.w	800baea <_scanf_float+0x46>
 800bd2c:	e6ea      	b.n	800bb04 <_scanf_float+0x60>
 800bd2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd36:	463a      	mov	r2, r7
 800bd38:	4640      	mov	r0, r8
 800bd3a:	4798      	blx	r3
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	6123      	str	r3, [r4, #16]
 800bd42:	e6ec      	b.n	800bb1e <_scanf_float+0x7a>
 800bd44:	1e6b      	subs	r3, r5, #1
 800bd46:	2b06      	cmp	r3, #6
 800bd48:	d825      	bhi.n	800bd96 <_scanf_float+0x2f2>
 800bd4a:	2d02      	cmp	r5, #2
 800bd4c:	d836      	bhi.n	800bdbc <_scanf_float+0x318>
 800bd4e:	455e      	cmp	r6, fp
 800bd50:	f67f aee8 	bls.w	800bb24 <_scanf_float+0x80>
 800bd54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd5c:	463a      	mov	r2, r7
 800bd5e:	4640      	mov	r0, r8
 800bd60:	4798      	blx	r3
 800bd62:	6923      	ldr	r3, [r4, #16]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	6123      	str	r3, [r4, #16]
 800bd68:	e7f1      	b.n	800bd4e <_scanf_float+0x2aa>
 800bd6a:	9802      	ldr	r0, [sp, #8]
 800bd6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd70:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bd74:	9002      	str	r0, [sp, #8]
 800bd76:	463a      	mov	r2, r7
 800bd78:	4640      	mov	r0, r8
 800bd7a:	4798      	blx	r3
 800bd7c:	6923      	ldr	r3, [r4, #16]
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	6123      	str	r3, [r4, #16]
 800bd82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd86:	fa5f fa8a 	uxtb.w	sl, sl
 800bd8a:	f1ba 0f02 	cmp.w	sl, #2
 800bd8e:	d1ec      	bne.n	800bd6a <_scanf_float+0x2c6>
 800bd90:	3d03      	subs	r5, #3
 800bd92:	b2ed      	uxtb	r5, r5
 800bd94:	1b76      	subs	r6, r6, r5
 800bd96:	6823      	ldr	r3, [r4, #0]
 800bd98:	05da      	lsls	r2, r3, #23
 800bd9a:	d52f      	bpl.n	800bdfc <_scanf_float+0x358>
 800bd9c:	055b      	lsls	r3, r3, #21
 800bd9e:	d510      	bpl.n	800bdc2 <_scanf_float+0x31e>
 800bda0:	455e      	cmp	r6, fp
 800bda2:	f67f aebf 	bls.w	800bb24 <_scanf_float+0x80>
 800bda6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bdae:	463a      	mov	r2, r7
 800bdb0:	4640      	mov	r0, r8
 800bdb2:	4798      	blx	r3
 800bdb4:	6923      	ldr	r3, [r4, #16]
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	6123      	str	r3, [r4, #16]
 800bdba:	e7f1      	b.n	800bda0 <_scanf_float+0x2fc>
 800bdbc:	46aa      	mov	sl, r5
 800bdbe:	9602      	str	r6, [sp, #8]
 800bdc0:	e7df      	b.n	800bd82 <_scanf_float+0x2de>
 800bdc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bdc6:	6923      	ldr	r3, [r4, #16]
 800bdc8:	2965      	cmp	r1, #101	; 0x65
 800bdca:	f103 33ff 	add.w	r3, r3, #4294967295
 800bdce:	f106 35ff 	add.w	r5, r6, #4294967295
 800bdd2:	6123      	str	r3, [r4, #16]
 800bdd4:	d00c      	beq.n	800bdf0 <_scanf_float+0x34c>
 800bdd6:	2945      	cmp	r1, #69	; 0x45
 800bdd8:	d00a      	beq.n	800bdf0 <_scanf_float+0x34c>
 800bdda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdde:	463a      	mov	r2, r7
 800bde0:	4640      	mov	r0, r8
 800bde2:	4798      	blx	r3
 800bde4:	6923      	ldr	r3, [r4, #16]
 800bde6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bdea:	3b01      	subs	r3, #1
 800bdec:	1eb5      	subs	r5, r6, #2
 800bdee:	6123      	str	r3, [r4, #16]
 800bdf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdf4:	463a      	mov	r2, r7
 800bdf6:	4640      	mov	r0, r8
 800bdf8:	4798      	blx	r3
 800bdfa:	462e      	mov	r6, r5
 800bdfc:	6825      	ldr	r5, [r4, #0]
 800bdfe:	f015 0510 	ands.w	r5, r5, #16
 800be02:	d159      	bne.n	800beb8 <_scanf_float+0x414>
 800be04:	7035      	strb	r5, [r6, #0]
 800be06:	6823      	ldr	r3, [r4, #0]
 800be08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800be0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be10:	d11b      	bne.n	800be4a <_scanf_float+0x3a6>
 800be12:	9b01      	ldr	r3, [sp, #4]
 800be14:	454b      	cmp	r3, r9
 800be16:	eba3 0209 	sub.w	r2, r3, r9
 800be1a:	d123      	bne.n	800be64 <_scanf_float+0x3c0>
 800be1c:	2200      	movs	r2, #0
 800be1e:	4659      	mov	r1, fp
 800be20:	4640      	mov	r0, r8
 800be22:	f000 fedf 	bl	800cbe4 <_strtod_r>
 800be26:	6822      	ldr	r2, [r4, #0]
 800be28:	9b03      	ldr	r3, [sp, #12]
 800be2a:	f012 0f02 	tst.w	r2, #2
 800be2e:	ec57 6b10 	vmov	r6, r7, d0
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	d021      	beq.n	800be7a <_scanf_float+0x3d6>
 800be36:	9903      	ldr	r1, [sp, #12]
 800be38:	1d1a      	adds	r2, r3, #4
 800be3a:	600a      	str	r2, [r1, #0]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	e9c3 6700 	strd	r6, r7, [r3]
 800be42:	68e3      	ldr	r3, [r4, #12]
 800be44:	3301      	adds	r3, #1
 800be46:	60e3      	str	r3, [r4, #12]
 800be48:	e66d      	b.n	800bb26 <_scanf_float+0x82>
 800be4a:	9b04      	ldr	r3, [sp, #16]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d0e5      	beq.n	800be1c <_scanf_float+0x378>
 800be50:	9905      	ldr	r1, [sp, #20]
 800be52:	230a      	movs	r3, #10
 800be54:	462a      	mov	r2, r5
 800be56:	3101      	adds	r1, #1
 800be58:	4640      	mov	r0, r8
 800be5a:	f000 ffb3 	bl	800cdc4 <_strtol_r>
 800be5e:	9b04      	ldr	r3, [sp, #16]
 800be60:	9e05      	ldr	r6, [sp, #20]
 800be62:	1ac2      	subs	r2, r0, r3
 800be64:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800be68:	429e      	cmp	r6, r3
 800be6a:	bf28      	it	cs
 800be6c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800be70:	4912      	ldr	r1, [pc, #72]	; (800bebc <_scanf_float+0x418>)
 800be72:	4630      	mov	r0, r6
 800be74:	f000 f860 	bl	800bf38 <siprintf>
 800be78:	e7d0      	b.n	800be1c <_scanf_float+0x378>
 800be7a:	9903      	ldr	r1, [sp, #12]
 800be7c:	f012 0f04 	tst.w	r2, #4
 800be80:	f103 0204 	add.w	r2, r3, #4
 800be84:	600a      	str	r2, [r1, #0]
 800be86:	d1d9      	bne.n	800be3c <_scanf_float+0x398>
 800be88:	f8d3 8000 	ldr.w	r8, [r3]
 800be8c:	ee10 2a10 	vmov	r2, s0
 800be90:	ee10 0a10 	vmov	r0, s0
 800be94:	463b      	mov	r3, r7
 800be96:	4639      	mov	r1, r7
 800be98:	f7f4 fe60 	bl	8000b5c <__aeabi_dcmpun>
 800be9c:	b128      	cbz	r0, 800beaa <_scanf_float+0x406>
 800be9e:	4808      	ldr	r0, [pc, #32]	; (800bec0 <_scanf_float+0x41c>)
 800bea0:	f000 f810 	bl	800bec4 <nanf>
 800bea4:	ed88 0a00 	vstr	s0, [r8]
 800bea8:	e7cb      	b.n	800be42 <_scanf_float+0x39e>
 800beaa:	4630      	mov	r0, r6
 800beac:	4639      	mov	r1, r7
 800beae:	f7f4 feb3 	bl	8000c18 <__aeabi_d2f>
 800beb2:	f8c8 0000 	str.w	r0, [r8]
 800beb6:	e7c4      	b.n	800be42 <_scanf_float+0x39e>
 800beb8:	2500      	movs	r5, #0
 800beba:	e634      	b.n	800bb26 <_scanf_float+0x82>
 800bebc:	08010b60 	.word	0x08010b60
 800bec0:	08010c67 	.word	0x08010c67

0800bec4 <nanf>:
 800bec4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800becc <nanf+0x8>
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	7fc00000 	.word	0x7fc00000

0800bed0 <sniprintf>:
 800bed0:	b40c      	push	{r2, r3}
 800bed2:	b530      	push	{r4, r5, lr}
 800bed4:	4b17      	ldr	r3, [pc, #92]	; (800bf34 <sniprintf+0x64>)
 800bed6:	1e0c      	subs	r4, r1, #0
 800bed8:	681d      	ldr	r5, [r3, #0]
 800beda:	b09d      	sub	sp, #116	; 0x74
 800bedc:	da08      	bge.n	800bef0 <sniprintf+0x20>
 800bede:	238b      	movs	r3, #139	; 0x8b
 800bee0:	602b      	str	r3, [r5, #0]
 800bee2:	f04f 30ff 	mov.w	r0, #4294967295
 800bee6:	b01d      	add	sp, #116	; 0x74
 800bee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800beec:	b002      	add	sp, #8
 800beee:	4770      	bx	lr
 800bef0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bef4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bef8:	bf14      	ite	ne
 800befa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800befe:	4623      	moveq	r3, r4
 800bf00:	9304      	str	r3, [sp, #16]
 800bf02:	9307      	str	r3, [sp, #28]
 800bf04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf08:	9002      	str	r0, [sp, #8]
 800bf0a:	9006      	str	r0, [sp, #24]
 800bf0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bf10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bf12:	ab21      	add	r3, sp, #132	; 0x84
 800bf14:	a902      	add	r1, sp, #8
 800bf16:	4628      	mov	r0, r5
 800bf18:	9301      	str	r3, [sp, #4]
 800bf1a:	f002 ffb1 	bl	800ee80 <_svfiprintf_r>
 800bf1e:	1c43      	adds	r3, r0, #1
 800bf20:	bfbc      	itt	lt
 800bf22:	238b      	movlt	r3, #139	; 0x8b
 800bf24:	602b      	strlt	r3, [r5, #0]
 800bf26:	2c00      	cmp	r4, #0
 800bf28:	d0dd      	beq.n	800bee6 <sniprintf+0x16>
 800bf2a:	9b02      	ldr	r3, [sp, #8]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	701a      	strb	r2, [r3, #0]
 800bf30:	e7d9      	b.n	800bee6 <sniprintf+0x16>
 800bf32:	bf00      	nop
 800bf34:	2000001c 	.word	0x2000001c

0800bf38 <siprintf>:
 800bf38:	b40e      	push	{r1, r2, r3}
 800bf3a:	b500      	push	{lr}
 800bf3c:	b09c      	sub	sp, #112	; 0x70
 800bf3e:	ab1d      	add	r3, sp, #116	; 0x74
 800bf40:	9002      	str	r0, [sp, #8]
 800bf42:	9006      	str	r0, [sp, #24]
 800bf44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf48:	4809      	ldr	r0, [pc, #36]	; (800bf70 <siprintf+0x38>)
 800bf4a:	9107      	str	r1, [sp, #28]
 800bf4c:	9104      	str	r1, [sp, #16]
 800bf4e:	4909      	ldr	r1, [pc, #36]	; (800bf74 <siprintf+0x3c>)
 800bf50:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf54:	9105      	str	r1, [sp, #20]
 800bf56:	6800      	ldr	r0, [r0, #0]
 800bf58:	9301      	str	r3, [sp, #4]
 800bf5a:	a902      	add	r1, sp, #8
 800bf5c:	f002 ff90 	bl	800ee80 <_svfiprintf_r>
 800bf60:	9b02      	ldr	r3, [sp, #8]
 800bf62:	2200      	movs	r2, #0
 800bf64:	701a      	strb	r2, [r3, #0]
 800bf66:	b01c      	add	sp, #112	; 0x70
 800bf68:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf6c:	b003      	add	sp, #12
 800bf6e:	4770      	bx	lr
 800bf70:	2000001c 	.word	0x2000001c
 800bf74:	ffff0208 	.word	0xffff0208

0800bf78 <strncpy>:
 800bf78:	b510      	push	{r4, lr}
 800bf7a:	3901      	subs	r1, #1
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	b132      	cbz	r2, 800bf8e <strncpy+0x16>
 800bf80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bf84:	f803 4b01 	strb.w	r4, [r3], #1
 800bf88:	3a01      	subs	r2, #1
 800bf8a:	2c00      	cmp	r4, #0
 800bf8c:	d1f7      	bne.n	800bf7e <strncpy+0x6>
 800bf8e:	441a      	add	r2, r3
 800bf90:	2100      	movs	r1, #0
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d100      	bne.n	800bf98 <strncpy+0x20>
 800bf96:	bd10      	pop	{r4, pc}
 800bf98:	f803 1b01 	strb.w	r1, [r3], #1
 800bf9c:	e7f9      	b.n	800bf92 <strncpy+0x1a>

0800bf9e <sulp>:
 800bf9e:	b570      	push	{r4, r5, r6, lr}
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	460d      	mov	r5, r1
 800bfa4:	ec45 4b10 	vmov	d0, r4, r5
 800bfa8:	4616      	mov	r6, r2
 800bfaa:	f002 fcc7 	bl	800e93c <__ulp>
 800bfae:	ec51 0b10 	vmov	r0, r1, d0
 800bfb2:	b17e      	cbz	r6, 800bfd4 <sulp+0x36>
 800bfb4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bfb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	dd09      	ble.n	800bfd4 <sulp+0x36>
 800bfc0:	051b      	lsls	r3, r3, #20
 800bfc2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bfc6:	2400      	movs	r4, #0
 800bfc8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bfcc:	4622      	mov	r2, r4
 800bfce:	462b      	mov	r3, r5
 800bfd0:	f7f4 fb2a 	bl	8000628 <__aeabi_dmul>
 800bfd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bfd8 <_strtod_l>:
 800bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfdc:	ed2d 8b02 	vpush	{d8}
 800bfe0:	b09d      	sub	sp, #116	; 0x74
 800bfe2:	461f      	mov	r7, r3
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	9318      	str	r3, [sp, #96]	; 0x60
 800bfe8:	4ba2      	ldr	r3, [pc, #648]	; (800c274 <_strtod_l+0x29c>)
 800bfea:	9213      	str	r2, [sp, #76]	; 0x4c
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	9305      	str	r3, [sp, #20]
 800bff0:	4604      	mov	r4, r0
 800bff2:	4618      	mov	r0, r3
 800bff4:	4688      	mov	r8, r1
 800bff6:	f7f4 f8fd 	bl	80001f4 <strlen>
 800bffa:	f04f 0a00 	mov.w	sl, #0
 800bffe:	4605      	mov	r5, r0
 800c000:	f04f 0b00 	mov.w	fp, #0
 800c004:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c008:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c00a:	781a      	ldrb	r2, [r3, #0]
 800c00c:	2a2b      	cmp	r2, #43	; 0x2b
 800c00e:	d04e      	beq.n	800c0ae <_strtod_l+0xd6>
 800c010:	d83b      	bhi.n	800c08a <_strtod_l+0xb2>
 800c012:	2a0d      	cmp	r2, #13
 800c014:	d834      	bhi.n	800c080 <_strtod_l+0xa8>
 800c016:	2a08      	cmp	r2, #8
 800c018:	d834      	bhi.n	800c084 <_strtod_l+0xac>
 800c01a:	2a00      	cmp	r2, #0
 800c01c:	d03e      	beq.n	800c09c <_strtod_l+0xc4>
 800c01e:	2300      	movs	r3, #0
 800c020:	930a      	str	r3, [sp, #40]	; 0x28
 800c022:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c024:	7833      	ldrb	r3, [r6, #0]
 800c026:	2b30      	cmp	r3, #48	; 0x30
 800c028:	f040 80b0 	bne.w	800c18c <_strtod_l+0x1b4>
 800c02c:	7873      	ldrb	r3, [r6, #1]
 800c02e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c032:	2b58      	cmp	r3, #88	; 0x58
 800c034:	d168      	bne.n	800c108 <_strtod_l+0x130>
 800c036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c038:	9301      	str	r3, [sp, #4]
 800c03a:	ab18      	add	r3, sp, #96	; 0x60
 800c03c:	9702      	str	r7, [sp, #8]
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	4a8d      	ldr	r2, [pc, #564]	; (800c278 <_strtod_l+0x2a0>)
 800c042:	ab19      	add	r3, sp, #100	; 0x64
 800c044:	a917      	add	r1, sp, #92	; 0x5c
 800c046:	4620      	mov	r0, r4
 800c048:	f001 fdd2 	bl	800dbf0 <__gethex>
 800c04c:	f010 0707 	ands.w	r7, r0, #7
 800c050:	4605      	mov	r5, r0
 800c052:	d005      	beq.n	800c060 <_strtod_l+0x88>
 800c054:	2f06      	cmp	r7, #6
 800c056:	d12c      	bne.n	800c0b2 <_strtod_l+0xda>
 800c058:	3601      	adds	r6, #1
 800c05a:	2300      	movs	r3, #0
 800c05c:	9617      	str	r6, [sp, #92]	; 0x5c
 800c05e:	930a      	str	r3, [sp, #40]	; 0x28
 800c060:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c062:	2b00      	cmp	r3, #0
 800c064:	f040 8590 	bne.w	800cb88 <_strtod_l+0xbb0>
 800c068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c06a:	b1eb      	cbz	r3, 800c0a8 <_strtod_l+0xd0>
 800c06c:	4652      	mov	r2, sl
 800c06e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c072:	ec43 2b10 	vmov	d0, r2, r3
 800c076:	b01d      	add	sp, #116	; 0x74
 800c078:	ecbd 8b02 	vpop	{d8}
 800c07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c080:	2a20      	cmp	r2, #32
 800c082:	d1cc      	bne.n	800c01e <_strtod_l+0x46>
 800c084:	3301      	adds	r3, #1
 800c086:	9317      	str	r3, [sp, #92]	; 0x5c
 800c088:	e7be      	b.n	800c008 <_strtod_l+0x30>
 800c08a:	2a2d      	cmp	r2, #45	; 0x2d
 800c08c:	d1c7      	bne.n	800c01e <_strtod_l+0x46>
 800c08e:	2201      	movs	r2, #1
 800c090:	920a      	str	r2, [sp, #40]	; 0x28
 800c092:	1c5a      	adds	r2, r3, #1
 800c094:	9217      	str	r2, [sp, #92]	; 0x5c
 800c096:	785b      	ldrb	r3, [r3, #1]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d1c2      	bne.n	800c022 <_strtod_l+0x4a>
 800c09c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c09e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f040 856e 	bne.w	800cb84 <_strtod_l+0xbac>
 800c0a8:	4652      	mov	r2, sl
 800c0aa:	465b      	mov	r3, fp
 800c0ac:	e7e1      	b.n	800c072 <_strtod_l+0x9a>
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	e7ee      	b.n	800c090 <_strtod_l+0xb8>
 800c0b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c0b4:	b13a      	cbz	r2, 800c0c6 <_strtod_l+0xee>
 800c0b6:	2135      	movs	r1, #53	; 0x35
 800c0b8:	a81a      	add	r0, sp, #104	; 0x68
 800c0ba:	f002 fd4a 	bl	800eb52 <__copybits>
 800c0be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f002 f909 	bl	800e2d8 <_Bfree>
 800c0c6:	3f01      	subs	r7, #1
 800c0c8:	2f04      	cmp	r7, #4
 800c0ca:	d806      	bhi.n	800c0da <_strtod_l+0x102>
 800c0cc:	e8df f007 	tbb	[pc, r7]
 800c0d0:	1714030a 	.word	0x1714030a
 800c0d4:	0a          	.byte	0x0a
 800c0d5:	00          	.byte	0x00
 800c0d6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c0da:	0728      	lsls	r0, r5, #28
 800c0dc:	d5c0      	bpl.n	800c060 <_strtod_l+0x88>
 800c0de:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c0e2:	e7bd      	b.n	800c060 <_strtod_l+0x88>
 800c0e4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c0e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c0ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c0ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c0f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c0f6:	e7f0      	b.n	800c0da <_strtod_l+0x102>
 800c0f8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c27c <_strtod_l+0x2a4>
 800c0fc:	e7ed      	b.n	800c0da <_strtod_l+0x102>
 800c0fe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c102:	f04f 3aff 	mov.w	sl, #4294967295
 800c106:	e7e8      	b.n	800c0da <_strtod_l+0x102>
 800c108:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c10a:	1c5a      	adds	r2, r3, #1
 800c10c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c10e:	785b      	ldrb	r3, [r3, #1]
 800c110:	2b30      	cmp	r3, #48	; 0x30
 800c112:	d0f9      	beq.n	800c108 <_strtod_l+0x130>
 800c114:	2b00      	cmp	r3, #0
 800c116:	d0a3      	beq.n	800c060 <_strtod_l+0x88>
 800c118:	2301      	movs	r3, #1
 800c11a:	f04f 0900 	mov.w	r9, #0
 800c11e:	9304      	str	r3, [sp, #16]
 800c120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c122:	9308      	str	r3, [sp, #32]
 800c124:	f8cd 901c 	str.w	r9, [sp, #28]
 800c128:	464f      	mov	r7, r9
 800c12a:	220a      	movs	r2, #10
 800c12c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c12e:	7806      	ldrb	r6, [r0, #0]
 800c130:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c134:	b2d9      	uxtb	r1, r3
 800c136:	2909      	cmp	r1, #9
 800c138:	d92a      	bls.n	800c190 <_strtod_l+0x1b8>
 800c13a:	9905      	ldr	r1, [sp, #20]
 800c13c:	462a      	mov	r2, r5
 800c13e:	f003 f913 	bl	800f368 <strncmp>
 800c142:	b398      	cbz	r0, 800c1ac <_strtod_l+0x1d4>
 800c144:	2000      	movs	r0, #0
 800c146:	4632      	mov	r2, r6
 800c148:	463d      	mov	r5, r7
 800c14a:	9005      	str	r0, [sp, #20]
 800c14c:	4603      	mov	r3, r0
 800c14e:	2a65      	cmp	r2, #101	; 0x65
 800c150:	d001      	beq.n	800c156 <_strtod_l+0x17e>
 800c152:	2a45      	cmp	r2, #69	; 0x45
 800c154:	d118      	bne.n	800c188 <_strtod_l+0x1b0>
 800c156:	b91d      	cbnz	r5, 800c160 <_strtod_l+0x188>
 800c158:	9a04      	ldr	r2, [sp, #16]
 800c15a:	4302      	orrs	r2, r0
 800c15c:	d09e      	beq.n	800c09c <_strtod_l+0xc4>
 800c15e:	2500      	movs	r5, #0
 800c160:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c164:	f108 0201 	add.w	r2, r8, #1
 800c168:	9217      	str	r2, [sp, #92]	; 0x5c
 800c16a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c16e:	2a2b      	cmp	r2, #43	; 0x2b
 800c170:	d075      	beq.n	800c25e <_strtod_l+0x286>
 800c172:	2a2d      	cmp	r2, #45	; 0x2d
 800c174:	d07b      	beq.n	800c26e <_strtod_l+0x296>
 800c176:	f04f 0c00 	mov.w	ip, #0
 800c17a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c17e:	2909      	cmp	r1, #9
 800c180:	f240 8082 	bls.w	800c288 <_strtod_l+0x2b0>
 800c184:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c188:	2600      	movs	r6, #0
 800c18a:	e09d      	b.n	800c2c8 <_strtod_l+0x2f0>
 800c18c:	2300      	movs	r3, #0
 800c18e:	e7c4      	b.n	800c11a <_strtod_l+0x142>
 800c190:	2f08      	cmp	r7, #8
 800c192:	bfd8      	it	le
 800c194:	9907      	ldrle	r1, [sp, #28]
 800c196:	f100 0001 	add.w	r0, r0, #1
 800c19a:	bfda      	itte	le
 800c19c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c1a0:	9307      	strle	r3, [sp, #28]
 800c1a2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c1a6:	3701      	adds	r7, #1
 800c1a8:	9017      	str	r0, [sp, #92]	; 0x5c
 800c1aa:	e7bf      	b.n	800c12c <_strtod_l+0x154>
 800c1ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1ae:	195a      	adds	r2, r3, r5
 800c1b0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c1b2:	5d5a      	ldrb	r2, [r3, r5]
 800c1b4:	2f00      	cmp	r7, #0
 800c1b6:	d037      	beq.n	800c228 <_strtod_l+0x250>
 800c1b8:	9005      	str	r0, [sp, #20]
 800c1ba:	463d      	mov	r5, r7
 800c1bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c1c0:	2b09      	cmp	r3, #9
 800c1c2:	d912      	bls.n	800c1ea <_strtod_l+0x212>
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e7c2      	b.n	800c14e <_strtod_l+0x176>
 800c1c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1ca:	1c5a      	adds	r2, r3, #1
 800c1cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c1ce:	785a      	ldrb	r2, [r3, #1]
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	2a30      	cmp	r2, #48	; 0x30
 800c1d4:	d0f8      	beq.n	800c1c8 <_strtod_l+0x1f0>
 800c1d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c1da:	2b08      	cmp	r3, #8
 800c1dc:	f200 84d9 	bhi.w	800cb92 <_strtod_l+0xbba>
 800c1e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1e2:	9005      	str	r0, [sp, #20]
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	9308      	str	r3, [sp, #32]
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	3a30      	subs	r2, #48	; 0x30
 800c1ec:	f100 0301 	add.w	r3, r0, #1
 800c1f0:	d014      	beq.n	800c21c <_strtod_l+0x244>
 800c1f2:	9905      	ldr	r1, [sp, #20]
 800c1f4:	4419      	add	r1, r3
 800c1f6:	9105      	str	r1, [sp, #20]
 800c1f8:	462b      	mov	r3, r5
 800c1fa:	eb00 0e05 	add.w	lr, r0, r5
 800c1fe:	210a      	movs	r1, #10
 800c200:	4573      	cmp	r3, lr
 800c202:	d113      	bne.n	800c22c <_strtod_l+0x254>
 800c204:	182b      	adds	r3, r5, r0
 800c206:	2b08      	cmp	r3, #8
 800c208:	f105 0501 	add.w	r5, r5, #1
 800c20c:	4405      	add	r5, r0
 800c20e:	dc1c      	bgt.n	800c24a <_strtod_l+0x272>
 800c210:	9907      	ldr	r1, [sp, #28]
 800c212:	230a      	movs	r3, #10
 800c214:	fb03 2301 	mla	r3, r3, r1, r2
 800c218:	9307      	str	r3, [sp, #28]
 800c21a:	2300      	movs	r3, #0
 800c21c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c21e:	1c51      	adds	r1, r2, #1
 800c220:	9117      	str	r1, [sp, #92]	; 0x5c
 800c222:	7852      	ldrb	r2, [r2, #1]
 800c224:	4618      	mov	r0, r3
 800c226:	e7c9      	b.n	800c1bc <_strtod_l+0x1e4>
 800c228:	4638      	mov	r0, r7
 800c22a:	e7d2      	b.n	800c1d2 <_strtod_l+0x1fa>
 800c22c:	2b08      	cmp	r3, #8
 800c22e:	dc04      	bgt.n	800c23a <_strtod_l+0x262>
 800c230:	9e07      	ldr	r6, [sp, #28]
 800c232:	434e      	muls	r6, r1
 800c234:	9607      	str	r6, [sp, #28]
 800c236:	3301      	adds	r3, #1
 800c238:	e7e2      	b.n	800c200 <_strtod_l+0x228>
 800c23a:	f103 0c01 	add.w	ip, r3, #1
 800c23e:	f1bc 0f10 	cmp.w	ip, #16
 800c242:	bfd8      	it	le
 800c244:	fb01 f909 	mulle.w	r9, r1, r9
 800c248:	e7f5      	b.n	800c236 <_strtod_l+0x25e>
 800c24a:	2d10      	cmp	r5, #16
 800c24c:	bfdc      	itt	le
 800c24e:	230a      	movle	r3, #10
 800c250:	fb03 2909 	mlale	r9, r3, r9, r2
 800c254:	e7e1      	b.n	800c21a <_strtod_l+0x242>
 800c256:	2300      	movs	r3, #0
 800c258:	9305      	str	r3, [sp, #20]
 800c25a:	2301      	movs	r3, #1
 800c25c:	e77c      	b.n	800c158 <_strtod_l+0x180>
 800c25e:	f04f 0c00 	mov.w	ip, #0
 800c262:	f108 0202 	add.w	r2, r8, #2
 800c266:	9217      	str	r2, [sp, #92]	; 0x5c
 800c268:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c26c:	e785      	b.n	800c17a <_strtod_l+0x1a2>
 800c26e:	f04f 0c01 	mov.w	ip, #1
 800c272:	e7f6      	b.n	800c262 <_strtod_l+0x28a>
 800c274:	08010e48 	.word	0x08010e48
 800c278:	08010b68 	.word	0x08010b68
 800c27c:	7ff00000 	.word	0x7ff00000
 800c280:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c282:	1c51      	adds	r1, r2, #1
 800c284:	9117      	str	r1, [sp, #92]	; 0x5c
 800c286:	7852      	ldrb	r2, [r2, #1]
 800c288:	2a30      	cmp	r2, #48	; 0x30
 800c28a:	d0f9      	beq.n	800c280 <_strtod_l+0x2a8>
 800c28c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c290:	2908      	cmp	r1, #8
 800c292:	f63f af79 	bhi.w	800c188 <_strtod_l+0x1b0>
 800c296:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c29a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c29c:	9206      	str	r2, [sp, #24]
 800c29e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c2a0:	1c51      	adds	r1, r2, #1
 800c2a2:	9117      	str	r1, [sp, #92]	; 0x5c
 800c2a4:	7852      	ldrb	r2, [r2, #1]
 800c2a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c2aa:	2e09      	cmp	r6, #9
 800c2ac:	d937      	bls.n	800c31e <_strtod_l+0x346>
 800c2ae:	9e06      	ldr	r6, [sp, #24]
 800c2b0:	1b89      	subs	r1, r1, r6
 800c2b2:	2908      	cmp	r1, #8
 800c2b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c2b8:	dc02      	bgt.n	800c2c0 <_strtod_l+0x2e8>
 800c2ba:	4576      	cmp	r6, lr
 800c2bc:	bfa8      	it	ge
 800c2be:	4676      	movge	r6, lr
 800c2c0:	f1bc 0f00 	cmp.w	ip, #0
 800c2c4:	d000      	beq.n	800c2c8 <_strtod_l+0x2f0>
 800c2c6:	4276      	negs	r6, r6
 800c2c8:	2d00      	cmp	r5, #0
 800c2ca:	d14d      	bne.n	800c368 <_strtod_l+0x390>
 800c2cc:	9904      	ldr	r1, [sp, #16]
 800c2ce:	4301      	orrs	r1, r0
 800c2d0:	f47f aec6 	bne.w	800c060 <_strtod_l+0x88>
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f47f aee1 	bne.w	800c09c <_strtod_l+0xc4>
 800c2da:	2a69      	cmp	r2, #105	; 0x69
 800c2dc:	d027      	beq.n	800c32e <_strtod_l+0x356>
 800c2de:	dc24      	bgt.n	800c32a <_strtod_l+0x352>
 800c2e0:	2a49      	cmp	r2, #73	; 0x49
 800c2e2:	d024      	beq.n	800c32e <_strtod_l+0x356>
 800c2e4:	2a4e      	cmp	r2, #78	; 0x4e
 800c2e6:	f47f aed9 	bne.w	800c09c <_strtod_l+0xc4>
 800c2ea:	499f      	ldr	r1, [pc, #636]	; (800c568 <_strtod_l+0x590>)
 800c2ec:	a817      	add	r0, sp, #92	; 0x5c
 800c2ee:	f001 fed7 	bl	800e0a0 <__match>
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	f43f aed2 	beq.w	800c09c <_strtod_l+0xc4>
 800c2f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	2b28      	cmp	r3, #40	; 0x28
 800c2fe:	d12d      	bne.n	800c35c <_strtod_l+0x384>
 800c300:	499a      	ldr	r1, [pc, #616]	; (800c56c <_strtod_l+0x594>)
 800c302:	aa1a      	add	r2, sp, #104	; 0x68
 800c304:	a817      	add	r0, sp, #92	; 0x5c
 800c306:	f001 fedf 	bl	800e0c8 <__hexnan>
 800c30a:	2805      	cmp	r0, #5
 800c30c:	d126      	bne.n	800c35c <_strtod_l+0x384>
 800c30e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c310:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c314:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c318:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c31c:	e6a0      	b.n	800c060 <_strtod_l+0x88>
 800c31e:	210a      	movs	r1, #10
 800c320:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c324:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c328:	e7b9      	b.n	800c29e <_strtod_l+0x2c6>
 800c32a:	2a6e      	cmp	r2, #110	; 0x6e
 800c32c:	e7db      	b.n	800c2e6 <_strtod_l+0x30e>
 800c32e:	4990      	ldr	r1, [pc, #576]	; (800c570 <_strtod_l+0x598>)
 800c330:	a817      	add	r0, sp, #92	; 0x5c
 800c332:	f001 feb5 	bl	800e0a0 <__match>
 800c336:	2800      	cmp	r0, #0
 800c338:	f43f aeb0 	beq.w	800c09c <_strtod_l+0xc4>
 800c33c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c33e:	498d      	ldr	r1, [pc, #564]	; (800c574 <_strtod_l+0x59c>)
 800c340:	3b01      	subs	r3, #1
 800c342:	a817      	add	r0, sp, #92	; 0x5c
 800c344:	9317      	str	r3, [sp, #92]	; 0x5c
 800c346:	f001 feab 	bl	800e0a0 <__match>
 800c34a:	b910      	cbnz	r0, 800c352 <_strtod_l+0x37a>
 800c34c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c34e:	3301      	adds	r3, #1
 800c350:	9317      	str	r3, [sp, #92]	; 0x5c
 800c352:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c584 <_strtod_l+0x5ac>
 800c356:	f04f 0a00 	mov.w	sl, #0
 800c35a:	e681      	b.n	800c060 <_strtod_l+0x88>
 800c35c:	4886      	ldr	r0, [pc, #536]	; (800c578 <_strtod_l+0x5a0>)
 800c35e:	f002 ffeb 	bl	800f338 <nan>
 800c362:	ec5b ab10 	vmov	sl, fp, d0
 800c366:	e67b      	b.n	800c060 <_strtod_l+0x88>
 800c368:	9b05      	ldr	r3, [sp, #20]
 800c36a:	9807      	ldr	r0, [sp, #28]
 800c36c:	1af3      	subs	r3, r6, r3
 800c36e:	2f00      	cmp	r7, #0
 800c370:	bf08      	it	eq
 800c372:	462f      	moveq	r7, r5
 800c374:	2d10      	cmp	r5, #16
 800c376:	9306      	str	r3, [sp, #24]
 800c378:	46a8      	mov	r8, r5
 800c37a:	bfa8      	it	ge
 800c37c:	f04f 0810 	movge.w	r8, #16
 800c380:	f7f4 f8d8 	bl	8000534 <__aeabi_ui2d>
 800c384:	2d09      	cmp	r5, #9
 800c386:	4682      	mov	sl, r0
 800c388:	468b      	mov	fp, r1
 800c38a:	dd13      	ble.n	800c3b4 <_strtod_l+0x3dc>
 800c38c:	4b7b      	ldr	r3, [pc, #492]	; (800c57c <_strtod_l+0x5a4>)
 800c38e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c392:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c396:	f7f4 f947 	bl	8000628 <__aeabi_dmul>
 800c39a:	4682      	mov	sl, r0
 800c39c:	4648      	mov	r0, r9
 800c39e:	468b      	mov	fp, r1
 800c3a0:	f7f4 f8c8 	bl	8000534 <__aeabi_ui2d>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4650      	mov	r0, sl
 800c3aa:	4659      	mov	r1, fp
 800c3ac:	f7f3 ff86 	bl	80002bc <__adddf3>
 800c3b0:	4682      	mov	sl, r0
 800c3b2:	468b      	mov	fp, r1
 800c3b4:	2d0f      	cmp	r5, #15
 800c3b6:	dc38      	bgt.n	800c42a <_strtod_l+0x452>
 800c3b8:	9b06      	ldr	r3, [sp, #24]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f43f ae50 	beq.w	800c060 <_strtod_l+0x88>
 800c3c0:	dd24      	ble.n	800c40c <_strtod_l+0x434>
 800c3c2:	2b16      	cmp	r3, #22
 800c3c4:	dc0b      	bgt.n	800c3de <_strtod_l+0x406>
 800c3c6:	496d      	ldr	r1, [pc, #436]	; (800c57c <_strtod_l+0x5a4>)
 800c3c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c3cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3d0:	4652      	mov	r2, sl
 800c3d2:	465b      	mov	r3, fp
 800c3d4:	f7f4 f928 	bl	8000628 <__aeabi_dmul>
 800c3d8:	4682      	mov	sl, r0
 800c3da:	468b      	mov	fp, r1
 800c3dc:	e640      	b.n	800c060 <_strtod_l+0x88>
 800c3de:	9a06      	ldr	r2, [sp, #24]
 800c3e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	db20      	blt.n	800c42a <_strtod_l+0x452>
 800c3e8:	4c64      	ldr	r4, [pc, #400]	; (800c57c <_strtod_l+0x5a4>)
 800c3ea:	f1c5 050f 	rsb	r5, r5, #15
 800c3ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c3f2:	4652      	mov	r2, sl
 800c3f4:	465b      	mov	r3, fp
 800c3f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3fa:	f7f4 f915 	bl	8000628 <__aeabi_dmul>
 800c3fe:	9b06      	ldr	r3, [sp, #24]
 800c400:	1b5d      	subs	r5, r3, r5
 800c402:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c406:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c40a:	e7e3      	b.n	800c3d4 <_strtod_l+0x3fc>
 800c40c:	9b06      	ldr	r3, [sp, #24]
 800c40e:	3316      	adds	r3, #22
 800c410:	db0b      	blt.n	800c42a <_strtod_l+0x452>
 800c412:	9b05      	ldr	r3, [sp, #20]
 800c414:	1b9e      	subs	r6, r3, r6
 800c416:	4b59      	ldr	r3, [pc, #356]	; (800c57c <_strtod_l+0x5a4>)
 800c418:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c41c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c420:	4650      	mov	r0, sl
 800c422:	4659      	mov	r1, fp
 800c424:	f7f4 fa2a 	bl	800087c <__aeabi_ddiv>
 800c428:	e7d6      	b.n	800c3d8 <_strtod_l+0x400>
 800c42a:	9b06      	ldr	r3, [sp, #24]
 800c42c:	eba5 0808 	sub.w	r8, r5, r8
 800c430:	4498      	add	r8, r3
 800c432:	f1b8 0f00 	cmp.w	r8, #0
 800c436:	dd74      	ble.n	800c522 <_strtod_l+0x54a>
 800c438:	f018 030f 	ands.w	r3, r8, #15
 800c43c:	d00a      	beq.n	800c454 <_strtod_l+0x47c>
 800c43e:	494f      	ldr	r1, [pc, #316]	; (800c57c <_strtod_l+0x5a4>)
 800c440:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c444:	4652      	mov	r2, sl
 800c446:	465b      	mov	r3, fp
 800c448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c44c:	f7f4 f8ec 	bl	8000628 <__aeabi_dmul>
 800c450:	4682      	mov	sl, r0
 800c452:	468b      	mov	fp, r1
 800c454:	f038 080f 	bics.w	r8, r8, #15
 800c458:	d04f      	beq.n	800c4fa <_strtod_l+0x522>
 800c45a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c45e:	dd22      	ble.n	800c4a6 <_strtod_l+0x4ce>
 800c460:	2500      	movs	r5, #0
 800c462:	462e      	mov	r6, r5
 800c464:	9507      	str	r5, [sp, #28]
 800c466:	9505      	str	r5, [sp, #20]
 800c468:	2322      	movs	r3, #34	; 0x22
 800c46a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c584 <_strtod_l+0x5ac>
 800c46e:	6023      	str	r3, [r4, #0]
 800c470:	f04f 0a00 	mov.w	sl, #0
 800c474:	9b07      	ldr	r3, [sp, #28]
 800c476:	2b00      	cmp	r3, #0
 800c478:	f43f adf2 	beq.w	800c060 <_strtod_l+0x88>
 800c47c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c47e:	4620      	mov	r0, r4
 800c480:	f001 ff2a 	bl	800e2d8 <_Bfree>
 800c484:	9905      	ldr	r1, [sp, #20]
 800c486:	4620      	mov	r0, r4
 800c488:	f001 ff26 	bl	800e2d8 <_Bfree>
 800c48c:	4631      	mov	r1, r6
 800c48e:	4620      	mov	r0, r4
 800c490:	f001 ff22 	bl	800e2d8 <_Bfree>
 800c494:	9907      	ldr	r1, [sp, #28]
 800c496:	4620      	mov	r0, r4
 800c498:	f001 ff1e 	bl	800e2d8 <_Bfree>
 800c49c:	4629      	mov	r1, r5
 800c49e:	4620      	mov	r0, r4
 800c4a0:	f001 ff1a 	bl	800e2d8 <_Bfree>
 800c4a4:	e5dc      	b.n	800c060 <_strtod_l+0x88>
 800c4a6:	4b36      	ldr	r3, [pc, #216]	; (800c580 <_strtod_l+0x5a8>)
 800c4a8:	9304      	str	r3, [sp, #16]
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c4b0:	4650      	mov	r0, sl
 800c4b2:	4659      	mov	r1, fp
 800c4b4:	4699      	mov	r9, r3
 800c4b6:	f1b8 0f01 	cmp.w	r8, #1
 800c4ba:	dc21      	bgt.n	800c500 <_strtod_l+0x528>
 800c4bc:	b10b      	cbz	r3, 800c4c2 <_strtod_l+0x4ea>
 800c4be:	4682      	mov	sl, r0
 800c4c0:	468b      	mov	fp, r1
 800c4c2:	4b2f      	ldr	r3, [pc, #188]	; (800c580 <_strtod_l+0x5a8>)
 800c4c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c4c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c4cc:	4652      	mov	r2, sl
 800c4ce:	465b      	mov	r3, fp
 800c4d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c4d4:	f7f4 f8a8 	bl	8000628 <__aeabi_dmul>
 800c4d8:	4b2a      	ldr	r3, [pc, #168]	; (800c584 <_strtod_l+0x5ac>)
 800c4da:	460a      	mov	r2, r1
 800c4dc:	400b      	ands	r3, r1
 800c4de:	492a      	ldr	r1, [pc, #168]	; (800c588 <_strtod_l+0x5b0>)
 800c4e0:	428b      	cmp	r3, r1
 800c4e2:	4682      	mov	sl, r0
 800c4e4:	d8bc      	bhi.n	800c460 <_strtod_l+0x488>
 800c4e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c4ea:	428b      	cmp	r3, r1
 800c4ec:	bf86      	itte	hi
 800c4ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c58c <_strtod_l+0x5b4>
 800c4f2:	f04f 3aff 	movhi.w	sl, #4294967295
 800c4f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	9304      	str	r3, [sp, #16]
 800c4fe:	e084      	b.n	800c60a <_strtod_l+0x632>
 800c500:	f018 0f01 	tst.w	r8, #1
 800c504:	d005      	beq.n	800c512 <_strtod_l+0x53a>
 800c506:	9b04      	ldr	r3, [sp, #16]
 800c508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50c:	f7f4 f88c 	bl	8000628 <__aeabi_dmul>
 800c510:	2301      	movs	r3, #1
 800c512:	9a04      	ldr	r2, [sp, #16]
 800c514:	3208      	adds	r2, #8
 800c516:	f109 0901 	add.w	r9, r9, #1
 800c51a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c51e:	9204      	str	r2, [sp, #16]
 800c520:	e7c9      	b.n	800c4b6 <_strtod_l+0x4de>
 800c522:	d0ea      	beq.n	800c4fa <_strtod_l+0x522>
 800c524:	f1c8 0800 	rsb	r8, r8, #0
 800c528:	f018 020f 	ands.w	r2, r8, #15
 800c52c:	d00a      	beq.n	800c544 <_strtod_l+0x56c>
 800c52e:	4b13      	ldr	r3, [pc, #76]	; (800c57c <_strtod_l+0x5a4>)
 800c530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c534:	4650      	mov	r0, sl
 800c536:	4659      	mov	r1, fp
 800c538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53c:	f7f4 f99e 	bl	800087c <__aeabi_ddiv>
 800c540:	4682      	mov	sl, r0
 800c542:	468b      	mov	fp, r1
 800c544:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c548:	d0d7      	beq.n	800c4fa <_strtod_l+0x522>
 800c54a:	f1b8 0f1f 	cmp.w	r8, #31
 800c54e:	dd1f      	ble.n	800c590 <_strtod_l+0x5b8>
 800c550:	2500      	movs	r5, #0
 800c552:	462e      	mov	r6, r5
 800c554:	9507      	str	r5, [sp, #28]
 800c556:	9505      	str	r5, [sp, #20]
 800c558:	2322      	movs	r3, #34	; 0x22
 800c55a:	f04f 0a00 	mov.w	sl, #0
 800c55e:	f04f 0b00 	mov.w	fp, #0
 800c562:	6023      	str	r3, [r4, #0]
 800c564:	e786      	b.n	800c474 <_strtod_l+0x49c>
 800c566:	bf00      	nop
 800c568:	08010b39 	.word	0x08010b39
 800c56c:	08010b7c 	.word	0x08010b7c
 800c570:	08010b31 	.word	0x08010b31
 800c574:	08010d6c 	.word	0x08010d6c
 800c578:	08010c67 	.word	0x08010c67
 800c57c:	08010ee0 	.word	0x08010ee0
 800c580:	08010eb8 	.word	0x08010eb8
 800c584:	7ff00000 	.word	0x7ff00000
 800c588:	7ca00000 	.word	0x7ca00000
 800c58c:	7fefffff 	.word	0x7fefffff
 800c590:	f018 0310 	ands.w	r3, r8, #16
 800c594:	bf18      	it	ne
 800c596:	236a      	movne	r3, #106	; 0x6a
 800c598:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c948 <_strtod_l+0x970>
 800c59c:	9304      	str	r3, [sp, #16]
 800c59e:	4650      	mov	r0, sl
 800c5a0:	4659      	mov	r1, fp
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f018 0f01 	tst.w	r8, #1
 800c5a8:	d004      	beq.n	800c5b4 <_strtod_l+0x5dc>
 800c5aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c5ae:	f7f4 f83b 	bl	8000628 <__aeabi_dmul>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c5b8:	f109 0908 	add.w	r9, r9, #8
 800c5bc:	d1f2      	bne.n	800c5a4 <_strtod_l+0x5cc>
 800c5be:	b10b      	cbz	r3, 800c5c4 <_strtod_l+0x5ec>
 800c5c0:	4682      	mov	sl, r0
 800c5c2:	468b      	mov	fp, r1
 800c5c4:	9b04      	ldr	r3, [sp, #16]
 800c5c6:	b1c3      	cbz	r3, 800c5fa <_strtod_l+0x622>
 800c5c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c5cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	4659      	mov	r1, fp
 800c5d4:	dd11      	ble.n	800c5fa <_strtod_l+0x622>
 800c5d6:	2b1f      	cmp	r3, #31
 800c5d8:	f340 8124 	ble.w	800c824 <_strtod_l+0x84c>
 800c5dc:	2b34      	cmp	r3, #52	; 0x34
 800c5de:	bfde      	ittt	le
 800c5e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c5e4:	f04f 33ff 	movle.w	r3, #4294967295
 800c5e8:	fa03 f202 	lslle.w	r2, r3, r2
 800c5ec:	f04f 0a00 	mov.w	sl, #0
 800c5f0:	bfcc      	ite	gt
 800c5f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c5f6:	ea02 0b01 	andle.w	fp, r2, r1
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	4650      	mov	r0, sl
 800c600:	4659      	mov	r1, fp
 800c602:	f7f4 fa79 	bl	8000af8 <__aeabi_dcmpeq>
 800c606:	2800      	cmp	r0, #0
 800c608:	d1a2      	bne.n	800c550 <_strtod_l+0x578>
 800c60a:	9b07      	ldr	r3, [sp, #28]
 800c60c:	9300      	str	r3, [sp, #0]
 800c60e:	9908      	ldr	r1, [sp, #32]
 800c610:	462b      	mov	r3, r5
 800c612:	463a      	mov	r2, r7
 800c614:	4620      	mov	r0, r4
 800c616:	f001 fec7 	bl	800e3a8 <__s2b>
 800c61a:	9007      	str	r0, [sp, #28]
 800c61c:	2800      	cmp	r0, #0
 800c61e:	f43f af1f 	beq.w	800c460 <_strtod_l+0x488>
 800c622:	9b05      	ldr	r3, [sp, #20]
 800c624:	1b9e      	subs	r6, r3, r6
 800c626:	9b06      	ldr	r3, [sp, #24]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	bfb4      	ite	lt
 800c62c:	4633      	movlt	r3, r6
 800c62e:	2300      	movge	r3, #0
 800c630:	930c      	str	r3, [sp, #48]	; 0x30
 800c632:	9b06      	ldr	r3, [sp, #24]
 800c634:	2500      	movs	r5, #0
 800c636:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c63a:	9312      	str	r3, [sp, #72]	; 0x48
 800c63c:	462e      	mov	r6, r5
 800c63e:	9b07      	ldr	r3, [sp, #28]
 800c640:	4620      	mov	r0, r4
 800c642:	6859      	ldr	r1, [r3, #4]
 800c644:	f001 fe08 	bl	800e258 <_Balloc>
 800c648:	9005      	str	r0, [sp, #20]
 800c64a:	2800      	cmp	r0, #0
 800c64c:	f43f af0c 	beq.w	800c468 <_strtod_l+0x490>
 800c650:	9b07      	ldr	r3, [sp, #28]
 800c652:	691a      	ldr	r2, [r3, #16]
 800c654:	3202      	adds	r2, #2
 800c656:	f103 010c 	add.w	r1, r3, #12
 800c65a:	0092      	lsls	r2, r2, #2
 800c65c:	300c      	adds	r0, #12
 800c65e:	f001 fded 	bl	800e23c <memcpy>
 800c662:	ec4b ab10 	vmov	d0, sl, fp
 800c666:	aa1a      	add	r2, sp, #104	; 0x68
 800c668:	a919      	add	r1, sp, #100	; 0x64
 800c66a:	4620      	mov	r0, r4
 800c66c:	f002 f9e2 	bl	800ea34 <__d2b>
 800c670:	ec4b ab18 	vmov	d8, sl, fp
 800c674:	9018      	str	r0, [sp, #96]	; 0x60
 800c676:	2800      	cmp	r0, #0
 800c678:	f43f aef6 	beq.w	800c468 <_strtod_l+0x490>
 800c67c:	2101      	movs	r1, #1
 800c67e:	4620      	mov	r0, r4
 800c680:	f001 ff2c 	bl	800e4dc <__i2b>
 800c684:	4606      	mov	r6, r0
 800c686:	2800      	cmp	r0, #0
 800c688:	f43f aeee 	beq.w	800c468 <_strtod_l+0x490>
 800c68c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c68e:	9904      	ldr	r1, [sp, #16]
 800c690:	2b00      	cmp	r3, #0
 800c692:	bfab      	itete	ge
 800c694:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c696:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c698:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c69a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c69e:	bfac      	ite	ge
 800c6a0:	eb03 0902 	addge.w	r9, r3, r2
 800c6a4:	1ad7      	sublt	r7, r2, r3
 800c6a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c6a8:	eba3 0801 	sub.w	r8, r3, r1
 800c6ac:	4490      	add	r8, r2
 800c6ae:	4ba1      	ldr	r3, [pc, #644]	; (800c934 <_strtod_l+0x95c>)
 800c6b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c6b4:	4598      	cmp	r8, r3
 800c6b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c6ba:	f280 80c7 	bge.w	800c84c <_strtod_l+0x874>
 800c6be:	eba3 0308 	sub.w	r3, r3, r8
 800c6c2:	2b1f      	cmp	r3, #31
 800c6c4:	eba2 0203 	sub.w	r2, r2, r3
 800c6c8:	f04f 0101 	mov.w	r1, #1
 800c6cc:	f300 80b1 	bgt.w	800c832 <_strtod_l+0x85a>
 800c6d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c6d4:	930d      	str	r3, [sp, #52]	; 0x34
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	9308      	str	r3, [sp, #32]
 800c6da:	eb09 0802 	add.w	r8, r9, r2
 800c6de:	9b04      	ldr	r3, [sp, #16]
 800c6e0:	45c1      	cmp	r9, r8
 800c6e2:	4417      	add	r7, r2
 800c6e4:	441f      	add	r7, r3
 800c6e6:	464b      	mov	r3, r9
 800c6e8:	bfa8      	it	ge
 800c6ea:	4643      	movge	r3, r8
 800c6ec:	42bb      	cmp	r3, r7
 800c6ee:	bfa8      	it	ge
 800c6f0:	463b      	movge	r3, r7
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	bfc2      	ittt	gt
 800c6f6:	eba8 0803 	subgt.w	r8, r8, r3
 800c6fa:	1aff      	subgt	r7, r7, r3
 800c6fc:	eba9 0903 	subgt.w	r9, r9, r3
 800c700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c702:	2b00      	cmp	r3, #0
 800c704:	dd17      	ble.n	800c736 <_strtod_l+0x75e>
 800c706:	4631      	mov	r1, r6
 800c708:	461a      	mov	r2, r3
 800c70a:	4620      	mov	r0, r4
 800c70c:	f001 ffa6 	bl	800e65c <__pow5mult>
 800c710:	4606      	mov	r6, r0
 800c712:	2800      	cmp	r0, #0
 800c714:	f43f aea8 	beq.w	800c468 <_strtod_l+0x490>
 800c718:	4601      	mov	r1, r0
 800c71a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c71c:	4620      	mov	r0, r4
 800c71e:	f001 fef3 	bl	800e508 <__multiply>
 800c722:	900b      	str	r0, [sp, #44]	; 0x2c
 800c724:	2800      	cmp	r0, #0
 800c726:	f43f ae9f 	beq.w	800c468 <_strtod_l+0x490>
 800c72a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c72c:	4620      	mov	r0, r4
 800c72e:	f001 fdd3 	bl	800e2d8 <_Bfree>
 800c732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c734:	9318      	str	r3, [sp, #96]	; 0x60
 800c736:	f1b8 0f00 	cmp.w	r8, #0
 800c73a:	f300 808c 	bgt.w	800c856 <_strtod_l+0x87e>
 800c73e:	9b06      	ldr	r3, [sp, #24]
 800c740:	2b00      	cmp	r3, #0
 800c742:	dd08      	ble.n	800c756 <_strtod_l+0x77e>
 800c744:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c746:	9905      	ldr	r1, [sp, #20]
 800c748:	4620      	mov	r0, r4
 800c74a:	f001 ff87 	bl	800e65c <__pow5mult>
 800c74e:	9005      	str	r0, [sp, #20]
 800c750:	2800      	cmp	r0, #0
 800c752:	f43f ae89 	beq.w	800c468 <_strtod_l+0x490>
 800c756:	2f00      	cmp	r7, #0
 800c758:	dd08      	ble.n	800c76c <_strtod_l+0x794>
 800c75a:	9905      	ldr	r1, [sp, #20]
 800c75c:	463a      	mov	r2, r7
 800c75e:	4620      	mov	r0, r4
 800c760:	f001 ffd6 	bl	800e710 <__lshift>
 800c764:	9005      	str	r0, [sp, #20]
 800c766:	2800      	cmp	r0, #0
 800c768:	f43f ae7e 	beq.w	800c468 <_strtod_l+0x490>
 800c76c:	f1b9 0f00 	cmp.w	r9, #0
 800c770:	dd08      	ble.n	800c784 <_strtod_l+0x7ac>
 800c772:	4631      	mov	r1, r6
 800c774:	464a      	mov	r2, r9
 800c776:	4620      	mov	r0, r4
 800c778:	f001 ffca 	bl	800e710 <__lshift>
 800c77c:	4606      	mov	r6, r0
 800c77e:	2800      	cmp	r0, #0
 800c780:	f43f ae72 	beq.w	800c468 <_strtod_l+0x490>
 800c784:	9a05      	ldr	r2, [sp, #20]
 800c786:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c788:	4620      	mov	r0, r4
 800c78a:	f002 f84d 	bl	800e828 <__mdiff>
 800c78e:	4605      	mov	r5, r0
 800c790:	2800      	cmp	r0, #0
 800c792:	f43f ae69 	beq.w	800c468 <_strtod_l+0x490>
 800c796:	68c3      	ldr	r3, [r0, #12]
 800c798:	930b      	str	r3, [sp, #44]	; 0x2c
 800c79a:	2300      	movs	r3, #0
 800c79c:	60c3      	str	r3, [r0, #12]
 800c79e:	4631      	mov	r1, r6
 800c7a0:	f002 f826 	bl	800e7f0 <__mcmp>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	da60      	bge.n	800c86a <_strtod_l+0x892>
 800c7a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7aa:	ea53 030a 	orrs.w	r3, r3, sl
 800c7ae:	f040 8082 	bne.w	800c8b6 <_strtod_l+0x8de>
 800c7b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d17d      	bne.n	800c8b6 <_strtod_l+0x8de>
 800c7ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c7be:	0d1b      	lsrs	r3, r3, #20
 800c7c0:	051b      	lsls	r3, r3, #20
 800c7c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c7c6:	d976      	bls.n	800c8b6 <_strtod_l+0x8de>
 800c7c8:	696b      	ldr	r3, [r5, #20]
 800c7ca:	b913      	cbnz	r3, 800c7d2 <_strtod_l+0x7fa>
 800c7cc:	692b      	ldr	r3, [r5, #16]
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	dd71      	ble.n	800c8b6 <_strtod_l+0x8de>
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	f001 ff9a 	bl	800e710 <__lshift>
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4605      	mov	r5, r0
 800c7e0:	f002 f806 	bl	800e7f0 <__mcmp>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	dd66      	ble.n	800c8b6 <_strtod_l+0x8de>
 800c7e8:	9904      	ldr	r1, [sp, #16]
 800c7ea:	4a53      	ldr	r2, [pc, #332]	; (800c938 <_strtod_l+0x960>)
 800c7ec:	465b      	mov	r3, fp
 800c7ee:	2900      	cmp	r1, #0
 800c7f0:	f000 8081 	beq.w	800c8f6 <_strtod_l+0x91e>
 800c7f4:	ea02 010b 	and.w	r1, r2, fp
 800c7f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c7fc:	dc7b      	bgt.n	800c8f6 <_strtod_l+0x91e>
 800c7fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c802:	f77f aea9 	ble.w	800c558 <_strtod_l+0x580>
 800c806:	4b4d      	ldr	r3, [pc, #308]	; (800c93c <_strtod_l+0x964>)
 800c808:	4650      	mov	r0, sl
 800c80a:	4659      	mov	r1, fp
 800c80c:	2200      	movs	r2, #0
 800c80e:	f7f3 ff0b 	bl	8000628 <__aeabi_dmul>
 800c812:	460b      	mov	r3, r1
 800c814:	4303      	orrs	r3, r0
 800c816:	bf08      	it	eq
 800c818:	2322      	moveq	r3, #34	; 0x22
 800c81a:	4682      	mov	sl, r0
 800c81c:	468b      	mov	fp, r1
 800c81e:	bf08      	it	eq
 800c820:	6023      	streq	r3, [r4, #0]
 800c822:	e62b      	b.n	800c47c <_strtod_l+0x4a4>
 800c824:	f04f 32ff 	mov.w	r2, #4294967295
 800c828:	fa02 f303 	lsl.w	r3, r2, r3
 800c82c:	ea03 0a0a 	and.w	sl, r3, sl
 800c830:	e6e3      	b.n	800c5fa <_strtod_l+0x622>
 800c832:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c836:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c83a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c83e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c842:	fa01 f308 	lsl.w	r3, r1, r8
 800c846:	9308      	str	r3, [sp, #32]
 800c848:	910d      	str	r1, [sp, #52]	; 0x34
 800c84a:	e746      	b.n	800c6da <_strtod_l+0x702>
 800c84c:	2300      	movs	r3, #0
 800c84e:	9308      	str	r3, [sp, #32]
 800c850:	2301      	movs	r3, #1
 800c852:	930d      	str	r3, [sp, #52]	; 0x34
 800c854:	e741      	b.n	800c6da <_strtod_l+0x702>
 800c856:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c858:	4642      	mov	r2, r8
 800c85a:	4620      	mov	r0, r4
 800c85c:	f001 ff58 	bl	800e710 <__lshift>
 800c860:	9018      	str	r0, [sp, #96]	; 0x60
 800c862:	2800      	cmp	r0, #0
 800c864:	f47f af6b 	bne.w	800c73e <_strtod_l+0x766>
 800c868:	e5fe      	b.n	800c468 <_strtod_l+0x490>
 800c86a:	465f      	mov	r7, fp
 800c86c:	d16e      	bne.n	800c94c <_strtod_l+0x974>
 800c86e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c870:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c874:	b342      	cbz	r2, 800c8c8 <_strtod_l+0x8f0>
 800c876:	4a32      	ldr	r2, [pc, #200]	; (800c940 <_strtod_l+0x968>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d128      	bne.n	800c8ce <_strtod_l+0x8f6>
 800c87c:	9b04      	ldr	r3, [sp, #16]
 800c87e:	4651      	mov	r1, sl
 800c880:	b1eb      	cbz	r3, 800c8be <_strtod_l+0x8e6>
 800c882:	4b2d      	ldr	r3, [pc, #180]	; (800c938 <_strtod_l+0x960>)
 800c884:	403b      	ands	r3, r7
 800c886:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c88a:	f04f 32ff 	mov.w	r2, #4294967295
 800c88e:	d819      	bhi.n	800c8c4 <_strtod_l+0x8ec>
 800c890:	0d1b      	lsrs	r3, r3, #20
 800c892:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c896:	fa02 f303 	lsl.w	r3, r2, r3
 800c89a:	4299      	cmp	r1, r3
 800c89c:	d117      	bne.n	800c8ce <_strtod_l+0x8f6>
 800c89e:	4b29      	ldr	r3, [pc, #164]	; (800c944 <_strtod_l+0x96c>)
 800c8a0:	429f      	cmp	r7, r3
 800c8a2:	d102      	bne.n	800c8aa <_strtod_l+0x8d2>
 800c8a4:	3101      	adds	r1, #1
 800c8a6:	f43f addf 	beq.w	800c468 <_strtod_l+0x490>
 800c8aa:	4b23      	ldr	r3, [pc, #140]	; (800c938 <_strtod_l+0x960>)
 800c8ac:	403b      	ands	r3, r7
 800c8ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c8b2:	f04f 0a00 	mov.w	sl, #0
 800c8b6:	9b04      	ldr	r3, [sp, #16]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1a4      	bne.n	800c806 <_strtod_l+0x82e>
 800c8bc:	e5de      	b.n	800c47c <_strtod_l+0x4a4>
 800c8be:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c2:	e7ea      	b.n	800c89a <_strtod_l+0x8c2>
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	e7e8      	b.n	800c89a <_strtod_l+0x8c2>
 800c8c8:	ea53 030a 	orrs.w	r3, r3, sl
 800c8cc:	d08c      	beq.n	800c7e8 <_strtod_l+0x810>
 800c8ce:	9b08      	ldr	r3, [sp, #32]
 800c8d0:	b1db      	cbz	r3, 800c90a <_strtod_l+0x932>
 800c8d2:	423b      	tst	r3, r7
 800c8d4:	d0ef      	beq.n	800c8b6 <_strtod_l+0x8de>
 800c8d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8d8:	9a04      	ldr	r2, [sp, #16]
 800c8da:	4650      	mov	r0, sl
 800c8dc:	4659      	mov	r1, fp
 800c8de:	b1c3      	cbz	r3, 800c912 <_strtod_l+0x93a>
 800c8e0:	f7ff fb5d 	bl	800bf9e <sulp>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	ec51 0b18 	vmov	r0, r1, d8
 800c8ec:	f7f3 fce6 	bl	80002bc <__adddf3>
 800c8f0:	4682      	mov	sl, r0
 800c8f2:	468b      	mov	fp, r1
 800c8f4:	e7df      	b.n	800c8b6 <_strtod_l+0x8de>
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c8fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c900:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c904:	f04f 3aff 	mov.w	sl, #4294967295
 800c908:	e7d5      	b.n	800c8b6 <_strtod_l+0x8de>
 800c90a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c90c:	ea13 0f0a 	tst.w	r3, sl
 800c910:	e7e0      	b.n	800c8d4 <_strtod_l+0x8fc>
 800c912:	f7ff fb44 	bl	800bf9e <sulp>
 800c916:	4602      	mov	r2, r0
 800c918:	460b      	mov	r3, r1
 800c91a:	ec51 0b18 	vmov	r0, r1, d8
 800c91e:	f7f3 fccb 	bl	80002b8 <__aeabi_dsub>
 800c922:	2200      	movs	r2, #0
 800c924:	2300      	movs	r3, #0
 800c926:	4682      	mov	sl, r0
 800c928:	468b      	mov	fp, r1
 800c92a:	f7f4 f8e5 	bl	8000af8 <__aeabi_dcmpeq>
 800c92e:	2800      	cmp	r0, #0
 800c930:	d0c1      	beq.n	800c8b6 <_strtod_l+0x8de>
 800c932:	e611      	b.n	800c558 <_strtod_l+0x580>
 800c934:	fffffc02 	.word	0xfffffc02
 800c938:	7ff00000 	.word	0x7ff00000
 800c93c:	39500000 	.word	0x39500000
 800c940:	000fffff 	.word	0x000fffff
 800c944:	7fefffff 	.word	0x7fefffff
 800c948:	08010b90 	.word	0x08010b90
 800c94c:	4631      	mov	r1, r6
 800c94e:	4628      	mov	r0, r5
 800c950:	f002 f8cc 	bl	800eaec <__ratio>
 800c954:	ec59 8b10 	vmov	r8, r9, d0
 800c958:	ee10 0a10 	vmov	r0, s0
 800c95c:	2200      	movs	r2, #0
 800c95e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c962:	4649      	mov	r1, r9
 800c964:	f7f4 f8dc 	bl	8000b20 <__aeabi_dcmple>
 800c968:	2800      	cmp	r0, #0
 800c96a:	d07a      	beq.n	800ca62 <_strtod_l+0xa8a>
 800c96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d04a      	beq.n	800ca08 <_strtod_l+0xa30>
 800c972:	4b95      	ldr	r3, [pc, #596]	; (800cbc8 <_strtod_l+0xbf0>)
 800c974:	2200      	movs	r2, #0
 800c976:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c97a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cbc8 <_strtod_l+0xbf0>
 800c97e:	f04f 0800 	mov.w	r8, #0
 800c982:	4b92      	ldr	r3, [pc, #584]	; (800cbcc <_strtod_l+0xbf4>)
 800c984:	403b      	ands	r3, r7
 800c986:	930d      	str	r3, [sp, #52]	; 0x34
 800c988:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c98a:	4b91      	ldr	r3, [pc, #580]	; (800cbd0 <_strtod_l+0xbf8>)
 800c98c:	429a      	cmp	r2, r3
 800c98e:	f040 80b0 	bne.w	800caf2 <_strtod_l+0xb1a>
 800c992:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c996:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c99a:	ec4b ab10 	vmov	d0, sl, fp
 800c99e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c9a2:	f001 ffcb 	bl	800e93c <__ulp>
 800c9a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c9aa:	ec53 2b10 	vmov	r2, r3, d0
 800c9ae:	f7f3 fe3b 	bl	8000628 <__aeabi_dmul>
 800c9b2:	4652      	mov	r2, sl
 800c9b4:	465b      	mov	r3, fp
 800c9b6:	f7f3 fc81 	bl	80002bc <__adddf3>
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	4983      	ldr	r1, [pc, #524]	; (800cbcc <_strtod_l+0xbf4>)
 800c9be:	4a85      	ldr	r2, [pc, #532]	; (800cbd4 <_strtod_l+0xbfc>)
 800c9c0:	4019      	ands	r1, r3
 800c9c2:	4291      	cmp	r1, r2
 800c9c4:	4682      	mov	sl, r0
 800c9c6:	d960      	bls.n	800ca8a <_strtod_l+0xab2>
 800c9c8:	ee18 3a90 	vmov	r3, s17
 800c9cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d104      	bne.n	800c9de <_strtod_l+0xa06>
 800c9d4:	ee18 3a10 	vmov	r3, s16
 800c9d8:	3301      	adds	r3, #1
 800c9da:	f43f ad45 	beq.w	800c468 <_strtod_l+0x490>
 800c9de:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cbe0 <_strtod_l+0xc08>
 800c9e2:	f04f 3aff 	mov.w	sl, #4294967295
 800c9e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	f001 fc75 	bl	800e2d8 <_Bfree>
 800c9ee:	9905      	ldr	r1, [sp, #20]
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f001 fc71 	bl	800e2d8 <_Bfree>
 800c9f6:	4631      	mov	r1, r6
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f001 fc6d 	bl	800e2d8 <_Bfree>
 800c9fe:	4629      	mov	r1, r5
 800ca00:	4620      	mov	r0, r4
 800ca02:	f001 fc69 	bl	800e2d8 <_Bfree>
 800ca06:	e61a      	b.n	800c63e <_strtod_l+0x666>
 800ca08:	f1ba 0f00 	cmp.w	sl, #0
 800ca0c:	d11b      	bne.n	800ca46 <_strtod_l+0xa6e>
 800ca0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca12:	b9f3      	cbnz	r3, 800ca52 <_strtod_l+0xa7a>
 800ca14:	4b6c      	ldr	r3, [pc, #432]	; (800cbc8 <_strtod_l+0xbf0>)
 800ca16:	2200      	movs	r2, #0
 800ca18:	4640      	mov	r0, r8
 800ca1a:	4649      	mov	r1, r9
 800ca1c:	f7f4 f876 	bl	8000b0c <__aeabi_dcmplt>
 800ca20:	b9d0      	cbnz	r0, 800ca58 <_strtod_l+0xa80>
 800ca22:	4640      	mov	r0, r8
 800ca24:	4649      	mov	r1, r9
 800ca26:	4b6c      	ldr	r3, [pc, #432]	; (800cbd8 <_strtod_l+0xc00>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f7f3 fdfd 	bl	8000628 <__aeabi_dmul>
 800ca2e:	4680      	mov	r8, r0
 800ca30:	4689      	mov	r9, r1
 800ca32:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ca36:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ca3a:	9315      	str	r3, [sp, #84]	; 0x54
 800ca3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ca40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ca44:	e79d      	b.n	800c982 <_strtod_l+0x9aa>
 800ca46:	f1ba 0f01 	cmp.w	sl, #1
 800ca4a:	d102      	bne.n	800ca52 <_strtod_l+0xa7a>
 800ca4c:	2f00      	cmp	r7, #0
 800ca4e:	f43f ad83 	beq.w	800c558 <_strtod_l+0x580>
 800ca52:	4b62      	ldr	r3, [pc, #392]	; (800cbdc <_strtod_l+0xc04>)
 800ca54:	2200      	movs	r2, #0
 800ca56:	e78e      	b.n	800c976 <_strtod_l+0x99e>
 800ca58:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800cbd8 <_strtod_l+0xc00>
 800ca5c:	f04f 0800 	mov.w	r8, #0
 800ca60:	e7e7      	b.n	800ca32 <_strtod_l+0xa5a>
 800ca62:	4b5d      	ldr	r3, [pc, #372]	; (800cbd8 <_strtod_l+0xc00>)
 800ca64:	4640      	mov	r0, r8
 800ca66:	4649      	mov	r1, r9
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f7f3 fddd 	bl	8000628 <__aeabi_dmul>
 800ca6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca70:	4680      	mov	r8, r0
 800ca72:	4689      	mov	r9, r1
 800ca74:	b933      	cbnz	r3, 800ca84 <_strtod_l+0xaac>
 800ca76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca7a:	900e      	str	r0, [sp, #56]	; 0x38
 800ca7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ca82:	e7dd      	b.n	800ca40 <_strtod_l+0xa68>
 800ca84:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ca88:	e7f9      	b.n	800ca7e <_strtod_l+0xaa6>
 800ca8a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ca8e:	9b04      	ldr	r3, [sp, #16]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1a8      	bne.n	800c9e6 <_strtod_l+0xa0e>
 800ca94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca9a:	0d1b      	lsrs	r3, r3, #20
 800ca9c:	051b      	lsls	r3, r3, #20
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d1a1      	bne.n	800c9e6 <_strtod_l+0xa0e>
 800caa2:	4640      	mov	r0, r8
 800caa4:	4649      	mov	r1, r9
 800caa6:	f7f4 f96f 	bl	8000d88 <__aeabi_d2lz>
 800caaa:	f7f3 fd8f 	bl	80005cc <__aeabi_l2d>
 800caae:	4602      	mov	r2, r0
 800cab0:	460b      	mov	r3, r1
 800cab2:	4640      	mov	r0, r8
 800cab4:	4649      	mov	r1, r9
 800cab6:	f7f3 fbff 	bl	80002b8 <__aeabi_dsub>
 800caba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cabc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cac0:	ea43 030a 	orr.w	r3, r3, sl
 800cac4:	4313      	orrs	r3, r2
 800cac6:	4680      	mov	r8, r0
 800cac8:	4689      	mov	r9, r1
 800caca:	d055      	beq.n	800cb78 <_strtod_l+0xba0>
 800cacc:	a336      	add	r3, pc, #216	; (adr r3, 800cba8 <_strtod_l+0xbd0>)
 800cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad2:	f7f4 f81b 	bl	8000b0c <__aeabi_dcmplt>
 800cad6:	2800      	cmp	r0, #0
 800cad8:	f47f acd0 	bne.w	800c47c <_strtod_l+0x4a4>
 800cadc:	a334      	add	r3, pc, #208	; (adr r3, 800cbb0 <_strtod_l+0xbd8>)
 800cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae2:	4640      	mov	r0, r8
 800cae4:	4649      	mov	r1, r9
 800cae6:	f7f4 f82f 	bl	8000b48 <__aeabi_dcmpgt>
 800caea:	2800      	cmp	r0, #0
 800caec:	f43f af7b 	beq.w	800c9e6 <_strtod_l+0xa0e>
 800caf0:	e4c4      	b.n	800c47c <_strtod_l+0x4a4>
 800caf2:	9b04      	ldr	r3, [sp, #16]
 800caf4:	b333      	cbz	r3, 800cb44 <_strtod_l+0xb6c>
 800caf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800caf8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cafc:	d822      	bhi.n	800cb44 <_strtod_l+0xb6c>
 800cafe:	a32e      	add	r3, pc, #184	; (adr r3, 800cbb8 <_strtod_l+0xbe0>)
 800cb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb04:	4640      	mov	r0, r8
 800cb06:	4649      	mov	r1, r9
 800cb08:	f7f4 f80a 	bl	8000b20 <__aeabi_dcmple>
 800cb0c:	b1a0      	cbz	r0, 800cb38 <_strtod_l+0xb60>
 800cb0e:	4649      	mov	r1, r9
 800cb10:	4640      	mov	r0, r8
 800cb12:	f7f4 f861 	bl	8000bd8 <__aeabi_d2uiz>
 800cb16:	2801      	cmp	r0, #1
 800cb18:	bf38      	it	cc
 800cb1a:	2001      	movcc	r0, #1
 800cb1c:	f7f3 fd0a 	bl	8000534 <__aeabi_ui2d>
 800cb20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb22:	4680      	mov	r8, r0
 800cb24:	4689      	mov	r9, r1
 800cb26:	bb23      	cbnz	r3, 800cb72 <_strtod_l+0xb9a>
 800cb28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb2c:	9010      	str	r0, [sp, #64]	; 0x40
 800cb2e:	9311      	str	r3, [sp, #68]	; 0x44
 800cb30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cb34:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cb38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb3c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cb40:	1a9b      	subs	r3, r3, r2
 800cb42:	9309      	str	r3, [sp, #36]	; 0x24
 800cb44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb48:	eeb0 0a48 	vmov.f32	s0, s16
 800cb4c:	eef0 0a68 	vmov.f32	s1, s17
 800cb50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cb54:	f001 fef2 	bl	800e93c <__ulp>
 800cb58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb5c:	ec53 2b10 	vmov	r2, r3, d0
 800cb60:	f7f3 fd62 	bl	8000628 <__aeabi_dmul>
 800cb64:	ec53 2b18 	vmov	r2, r3, d8
 800cb68:	f7f3 fba8 	bl	80002bc <__adddf3>
 800cb6c:	4682      	mov	sl, r0
 800cb6e:	468b      	mov	fp, r1
 800cb70:	e78d      	b.n	800ca8e <_strtod_l+0xab6>
 800cb72:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800cb76:	e7db      	b.n	800cb30 <_strtod_l+0xb58>
 800cb78:	a311      	add	r3, pc, #68	; (adr r3, 800cbc0 <_strtod_l+0xbe8>)
 800cb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7e:	f7f3 ffc5 	bl	8000b0c <__aeabi_dcmplt>
 800cb82:	e7b2      	b.n	800caea <_strtod_l+0xb12>
 800cb84:	2300      	movs	r3, #0
 800cb86:	930a      	str	r3, [sp, #40]	; 0x28
 800cb88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cb8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb8c:	6013      	str	r3, [r2, #0]
 800cb8e:	f7ff ba6b 	b.w	800c068 <_strtod_l+0x90>
 800cb92:	2a65      	cmp	r2, #101	; 0x65
 800cb94:	f43f ab5f 	beq.w	800c256 <_strtod_l+0x27e>
 800cb98:	2a45      	cmp	r2, #69	; 0x45
 800cb9a:	f43f ab5c 	beq.w	800c256 <_strtod_l+0x27e>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	f7ff bb94 	b.w	800c2cc <_strtod_l+0x2f4>
 800cba4:	f3af 8000 	nop.w
 800cba8:	94a03595 	.word	0x94a03595
 800cbac:	3fdfffff 	.word	0x3fdfffff
 800cbb0:	35afe535 	.word	0x35afe535
 800cbb4:	3fe00000 	.word	0x3fe00000
 800cbb8:	ffc00000 	.word	0xffc00000
 800cbbc:	41dfffff 	.word	0x41dfffff
 800cbc0:	94a03595 	.word	0x94a03595
 800cbc4:	3fcfffff 	.word	0x3fcfffff
 800cbc8:	3ff00000 	.word	0x3ff00000
 800cbcc:	7ff00000 	.word	0x7ff00000
 800cbd0:	7fe00000 	.word	0x7fe00000
 800cbd4:	7c9fffff 	.word	0x7c9fffff
 800cbd8:	3fe00000 	.word	0x3fe00000
 800cbdc:	bff00000 	.word	0xbff00000
 800cbe0:	7fefffff 	.word	0x7fefffff

0800cbe4 <_strtod_r>:
 800cbe4:	4b01      	ldr	r3, [pc, #4]	; (800cbec <_strtod_r+0x8>)
 800cbe6:	f7ff b9f7 	b.w	800bfd8 <_strtod_l>
 800cbea:	bf00      	nop
 800cbec:	20000084 	.word	0x20000084

0800cbf0 <strtod>:
 800cbf0:	460a      	mov	r2, r1
 800cbf2:	4601      	mov	r1, r0
 800cbf4:	4802      	ldr	r0, [pc, #8]	; (800cc00 <strtod+0x10>)
 800cbf6:	4b03      	ldr	r3, [pc, #12]	; (800cc04 <strtod+0x14>)
 800cbf8:	6800      	ldr	r0, [r0, #0]
 800cbfa:	f7ff b9ed 	b.w	800bfd8 <_strtod_l>
 800cbfe:	bf00      	nop
 800cc00:	2000001c 	.word	0x2000001c
 800cc04:	20000084 	.word	0x20000084

0800cc08 <strtok>:
 800cc08:	4b16      	ldr	r3, [pc, #88]	; (800cc64 <strtok+0x5c>)
 800cc0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc0c:	681e      	ldr	r6, [r3, #0]
 800cc0e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800cc10:	4605      	mov	r5, r0
 800cc12:	b9fc      	cbnz	r4, 800cc54 <strtok+0x4c>
 800cc14:	2050      	movs	r0, #80	; 0x50
 800cc16:	9101      	str	r1, [sp, #4]
 800cc18:	f001 faf6 	bl	800e208 <malloc>
 800cc1c:	9901      	ldr	r1, [sp, #4]
 800cc1e:	65b0      	str	r0, [r6, #88]	; 0x58
 800cc20:	4602      	mov	r2, r0
 800cc22:	b920      	cbnz	r0, 800cc2e <strtok+0x26>
 800cc24:	4b10      	ldr	r3, [pc, #64]	; (800cc68 <strtok+0x60>)
 800cc26:	4811      	ldr	r0, [pc, #68]	; (800cc6c <strtok+0x64>)
 800cc28:	2157      	movs	r1, #87	; 0x57
 800cc2a:	f000 f8cd 	bl	800cdc8 <__assert_func>
 800cc2e:	e9c0 4400 	strd	r4, r4, [r0]
 800cc32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cc36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cc3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800cc3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800cc42:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800cc46:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800cc4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800cc4e:	6184      	str	r4, [r0, #24]
 800cc50:	7704      	strb	r4, [r0, #28]
 800cc52:	6244      	str	r4, [r0, #36]	; 0x24
 800cc54:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800cc56:	2301      	movs	r3, #1
 800cc58:	4628      	mov	r0, r5
 800cc5a:	b002      	add	sp, #8
 800cc5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc60:	f000 b806 	b.w	800cc70 <__strtok_r>
 800cc64:	2000001c 	.word	0x2000001c
 800cc68:	08010bb8 	.word	0x08010bb8
 800cc6c:	08010bcf 	.word	0x08010bcf

0800cc70 <__strtok_r>:
 800cc70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc72:	b908      	cbnz	r0, 800cc78 <__strtok_r+0x8>
 800cc74:	6810      	ldr	r0, [r2, #0]
 800cc76:	b188      	cbz	r0, 800cc9c <__strtok_r+0x2c>
 800cc78:	4604      	mov	r4, r0
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cc80:	460f      	mov	r7, r1
 800cc82:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cc86:	b91e      	cbnz	r6, 800cc90 <__strtok_r+0x20>
 800cc88:	b965      	cbnz	r5, 800cca4 <__strtok_r+0x34>
 800cc8a:	6015      	str	r5, [r2, #0]
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	e005      	b.n	800cc9c <__strtok_r+0x2c>
 800cc90:	42b5      	cmp	r5, r6
 800cc92:	d1f6      	bne.n	800cc82 <__strtok_r+0x12>
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1f0      	bne.n	800cc7a <__strtok_r+0xa>
 800cc98:	6014      	str	r4, [r2, #0]
 800cc9a:	7003      	strb	r3, [r0, #0]
 800cc9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc9e:	461c      	mov	r4, r3
 800cca0:	e00c      	b.n	800ccbc <__strtok_r+0x4c>
 800cca2:	b915      	cbnz	r5, 800ccaa <__strtok_r+0x3a>
 800cca4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cca8:	460e      	mov	r6, r1
 800ccaa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ccae:	42ab      	cmp	r3, r5
 800ccb0:	d1f7      	bne.n	800cca2 <__strtok_r+0x32>
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d0f3      	beq.n	800cc9e <__strtok_r+0x2e>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ccbc:	6014      	str	r4, [r2, #0]
 800ccbe:	e7ed      	b.n	800cc9c <__strtok_r+0x2c>

0800ccc0 <_strtol_l.constprop.0>:
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc6:	d001      	beq.n	800cccc <_strtol_l.constprop.0+0xc>
 800ccc8:	2b24      	cmp	r3, #36	; 0x24
 800ccca:	d906      	bls.n	800ccda <_strtol_l.constprop.0+0x1a>
 800cccc:	f7fe fa4e 	bl	800b16c <__errno>
 800ccd0:	2316      	movs	r3, #22
 800ccd2:	6003      	str	r3, [r0, #0]
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cdc0 <_strtol_l.constprop.0+0x100>
 800ccde:	460d      	mov	r5, r1
 800cce0:	462e      	mov	r6, r5
 800cce2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cce6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ccea:	f017 0708 	ands.w	r7, r7, #8
 800ccee:	d1f7      	bne.n	800cce0 <_strtol_l.constprop.0+0x20>
 800ccf0:	2c2d      	cmp	r4, #45	; 0x2d
 800ccf2:	d132      	bne.n	800cd5a <_strtol_l.constprop.0+0x9a>
 800ccf4:	782c      	ldrb	r4, [r5, #0]
 800ccf6:	2701      	movs	r7, #1
 800ccf8:	1cb5      	adds	r5, r6, #2
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d05b      	beq.n	800cdb6 <_strtol_l.constprop.0+0xf6>
 800ccfe:	2b10      	cmp	r3, #16
 800cd00:	d109      	bne.n	800cd16 <_strtol_l.constprop.0+0x56>
 800cd02:	2c30      	cmp	r4, #48	; 0x30
 800cd04:	d107      	bne.n	800cd16 <_strtol_l.constprop.0+0x56>
 800cd06:	782c      	ldrb	r4, [r5, #0]
 800cd08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cd0c:	2c58      	cmp	r4, #88	; 0x58
 800cd0e:	d14d      	bne.n	800cdac <_strtol_l.constprop.0+0xec>
 800cd10:	786c      	ldrb	r4, [r5, #1]
 800cd12:	2310      	movs	r3, #16
 800cd14:	3502      	adds	r5, #2
 800cd16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cd1a:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd1e:	f04f 0c00 	mov.w	ip, #0
 800cd22:	fbb8 f9f3 	udiv	r9, r8, r3
 800cd26:	4666      	mov	r6, ip
 800cd28:	fb03 8a19 	mls	sl, r3, r9, r8
 800cd2c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cd30:	f1be 0f09 	cmp.w	lr, #9
 800cd34:	d816      	bhi.n	800cd64 <_strtol_l.constprop.0+0xa4>
 800cd36:	4674      	mov	r4, lr
 800cd38:	42a3      	cmp	r3, r4
 800cd3a:	dd24      	ble.n	800cd86 <_strtol_l.constprop.0+0xc6>
 800cd3c:	f1bc 0f00 	cmp.w	ip, #0
 800cd40:	db1e      	blt.n	800cd80 <_strtol_l.constprop.0+0xc0>
 800cd42:	45b1      	cmp	r9, r6
 800cd44:	d31c      	bcc.n	800cd80 <_strtol_l.constprop.0+0xc0>
 800cd46:	d101      	bne.n	800cd4c <_strtol_l.constprop.0+0x8c>
 800cd48:	45a2      	cmp	sl, r4
 800cd4a:	db19      	blt.n	800cd80 <_strtol_l.constprop.0+0xc0>
 800cd4c:	fb06 4603 	mla	r6, r6, r3, r4
 800cd50:	f04f 0c01 	mov.w	ip, #1
 800cd54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd58:	e7e8      	b.n	800cd2c <_strtol_l.constprop.0+0x6c>
 800cd5a:	2c2b      	cmp	r4, #43	; 0x2b
 800cd5c:	bf04      	itt	eq
 800cd5e:	782c      	ldrbeq	r4, [r5, #0]
 800cd60:	1cb5      	addeq	r5, r6, #2
 800cd62:	e7ca      	b.n	800ccfa <_strtol_l.constprop.0+0x3a>
 800cd64:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cd68:	f1be 0f19 	cmp.w	lr, #25
 800cd6c:	d801      	bhi.n	800cd72 <_strtol_l.constprop.0+0xb2>
 800cd6e:	3c37      	subs	r4, #55	; 0x37
 800cd70:	e7e2      	b.n	800cd38 <_strtol_l.constprop.0+0x78>
 800cd72:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cd76:	f1be 0f19 	cmp.w	lr, #25
 800cd7a:	d804      	bhi.n	800cd86 <_strtol_l.constprop.0+0xc6>
 800cd7c:	3c57      	subs	r4, #87	; 0x57
 800cd7e:	e7db      	b.n	800cd38 <_strtol_l.constprop.0+0x78>
 800cd80:	f04f 3cff 	mov.w	ip, #4294967295
 800cd84:	e7e6      	b.n	800cd54 <_strtol_l.constprop.0+0x94>
 800cd86:	f1bc 0f00 	cmp.w	ip, #0
 800cd8a:	da05      	bge.n	800cd98 <_strtol_l.constprop.0+0xd8>
 800cd8c:	2322      	movs	r3, #34	; 0x22
 800cd8e:	6003      	str	r3, [r0, #0]
 800cd90:	4646      	mov	r6, r8
 800cd92:	b942      	cbnz	r2, 800cda6 <_strtol_l.constprop.0+0xe6>
 800cd94:	4630      	mov	r0, r6
 800cd96:	e79e      	b.n	800ccd6 <_strtol_l.constprop.0+0x16>
 800cd98:	b107      	cbz	r7, 800cd9c <_strtol_l.constprop.0+0xdc>
 800cd9a:	4276      	negs	r6, r6
 800cd9c:	2a00      	cmp	r2, #0
 800cd9e:	d0f9      	beq.n	800cd94 <_strtol_l.constprop.0+0xd4>
 800cda0:	f1bc 0f00 	cmp.w	ip, #0
 800cda4:	d000      	beq.n	800cda8 <_strtol_l.constprop.0+0xe8>
 800cda6:	1e69      	subs	r1, r5, #1
 800cda8:	6011      	str	r1, [r2, #0]
 800cdaa:	e7f3      	b.n	800cd94 <_strtol_l.constprop.0+0xd4>
 800cdac:	2430      	movs	r4, #48	; 0x30
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1b1      	bne.n	800cd16 <_strtol_l.constprop.0+0x56>
 800cdb2:	2308      	movs	r3, #8
 800cdb4:	e7af      	b.n	800cd16 <_strtol_l.constprop.0+0x56>
 800cdb6:	2c30      	cmp	r4, #48	; 0x30
 800cdb8:	d0a5      	beq.n	800cd06 <_strtol_l.constprop.0+0x46>
 800cdba:	230a      	movs	r3, #10
 800cdbc:	e7ab      	b.n	800cd16 <_strtol_l.constprop.0+0x56>
 800cdbe:	bf00      	nop
 800cdc0:	08010c69 	.word	0x08010c69

0800cdc4 <_strtol_r>:
 800cdc4:	f7ff bf7c 	b.w	800ccc0 <_strtol_l.constprop.0>

0800cdc8 <__assert_func>:
 800cdc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdca:	4614      	mov	r4, r2
 800cdcc:	461a      	mov	r2, r3
 800cdce:	4b09      	ldr	r3, [pc, #36]	; (800cdf4 <__assert_func+0x2c>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4605      	mov	r5, r0
 800cdd4:	68d8      	ldr	r0, [r3, #12]
 800cdd6:	b14c      	cbz	r4, 800cdec <__assert_func+0x24>
 800cdd8:	4b07      	ldr	r3, [pc, #28]	; (800cdf8 <__assert_func+0x30>)
 800cdda:	9100      	str	r1, [sp, #0]
 800cddc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cde0:	4906      	ldr	r1, [pc, #24]	; (800cdfc <__assert_func+0x34>)
 800cde2:	462b      	mov	r3, r5
 800cde4:	f000 fe8a 	bl	800dafc <fiprintf>
 800cde8:	f002 fba0 	bl	800f52c <abort>
 800cdec:	4b04      	ldr	r3, [pc, #16]	; (800ce00 <__assert_func+0x38>)
 800cdee:	461c      	mov	r4, r3
 800cdf0:	e7f3      	b.n	800cdda <__assert_func+0x12>
 800cdf2:	bf00      	nop
 800cdf4:	2000001c 	.word	0x2000001c
 800cdf8:	08010c2c 	.word	0x08010c2c
 800cdfc:	08010c39 	.word	0x08010c39
 800ce00:	08010c67 	.word	0x08010c67

0800ce04 <quorem>:
 800ce04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce08:	6903      	ldr	r3, [r0, #16]
 800ce0a:	690c      	ldr	r4, [r1, #16]
 800ce0c:	42a3      	cmp	r3, r4
 800ce0e:	4607      	mov	r7, r0
 800ce10:	f2c0 8081 	blt.w	800cf16 <quorem+0x112>
 800ce14:	3c01      	subs	r4, #1
 800ce16:	f101 0814 	add.w	r8, r1, #20
 800ce1a:	f100 0514 	add.w	r5, r0, #20
 800ce1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce22:	9301      	str	r3, [sp, #4]
 800ce24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ce28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ce34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ce38:	fbb2 f6f3 	udiv	r6, r2, r3
 800ce3c:	d331      	bcc.n	800cea2 <quorem+0x9e>
 800ce3e:	f04f 0e00 	mov.w	lr, #0
 800ce42:	4640      	mov	r0, r8
 800ce44:	46ac      	mov	ip, r5
 800ce46:	46f2      	mov	sl, lr
 800ce48:	f850 2b04 	ldr.w	r2, [r0], #4
 800ce4c:	b293      	uxth	r3, r2
 800ce4e:	fb06 e303 	mla	r3, r6, r3, lr
 800ce52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	ebaa 0303 	sub.w	r3, sl, r3
 800ce5c:	f8dc a000 	ldr.w	sl, [ip]
 800ce60:	0c12      	lsrs	r2, r2, #16
 800ce62:	fa13 f38a 	uxtah	r3, r3, sl
 800ce66:	fb06 e202 	mla	r2, r6, r2, lr
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	9b00      	ldr	r3, [sp, #0]
 800ce6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ce72:	b292      	uxth	r2, r2
 800ce74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ce78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce7c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ce80:	4581      	cmp	r9, r0
 800ce82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce86:	f84c 3b04 	str.w	r3, [ip], #4
 800ce8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ce8e:	d2db      	bcs.n	800ce48 <quorem+0x44>
 800ce90:	f855 300b 	ldr.w	r3, [r5, fp]
 800ce94:	b92b      	cbnz	r3, 800cea2 <quorem+0x9e>
 800ce96:	9b01      	ldr	r3, [sp, #4]
 800ce98:	3b04      	subs	r3, #4
 800ce9a:	429d      	cmp	r5, r3
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	d32e      	bcc.n	800cefe <quorem+0xfa>
 800cea0:	613c      	str	r4, [r7, #16]
 800cea2:	4638      	mov	r0, r7
 800cea4:	f001 fca4 	bl	800e7f0 <__mcmp>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	db24      	blt.n	800cef6 <quorem+0xf2>
 800ceac:	3601      	adds	r6, #1
 800ceae:	4628      	mov	r0, r5
 800ceb0:	f04f 0c00 	mov.w	ip, #0
 800ceb4:	f858 2b04 	ldr.w	r2, [r8], #4
 800ceb8:	f8d0 e000 	ldr.w	lr, [r0]
 800cebc:	b293      	uxth	r3, r2
 800cebe:	ebac 0303 	sub.w	r3, ip, r3
 800cec2:	0c12      	lsrs	r2, r2, #16
 800cec4:	fa13 f38e 	uxtah	r3, r3, lr
 800cec8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cecc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ced6:	45c1      	cmp	r9, r8
 800ced8:	f840 3b04 	str.w	r3, [r0], #4
 800cedc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cee0:	d2e8      	bcs.n	800ceb4 <quorem+0xb0>
 800cee2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ceea:	b922      	cbnz	r2, 800cef6 <quorem+0xf2>
 800ceec:	3b04      	subs	r3, #4
 800ceee:	429d      	cmp	r5, r3
 800cef0:	461a      	mov	r2, r3
 800cef2:	d30a      	bcc.n	800cf0a <quorem+0x106>
 800cef4:	613c      	str	r4, [r7, #16]
 800cef6:	4630      	mov	r0, r6
 800cef8:	b003      	add	sp, #12
 800cefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefe:	6812      	ldr	r2, [r2, #0]
 800cf00:	3b04      	subs	r3, #4
 800cf02:	2a00      	cmp	r2, #0
 800cf04:	d1cc      	bne.n	800cea0 <quorem+0x9c>
 800cf06:	3c01      	subs	r4, #1
 800cf08:	e7c7      	b.n	800ce9a <quorem+0x96>
 800cf0a:	6812      	ldr	r2, [r2, #0]
 800cf0c:	3b04      	subs	r3, #4
 800cf0e:	2a00      	cmp	r2, #0
 800cf10:	d1f0      	bne.n	800cef4 <quorem+0xf0>
 800cf12:	3c01      	subs	r4, #1
 800cf14:	e7eb      	b.n	800ceee <quorem+0xea>
 800cf16:	2000      	movs	r0, #0
 800cf18:	e7ee      	b.n	800cef8 <quorem+0xf4>
 800cf1a:	0000      	movs	r0, r0
 800cf1c:	0000      	movs	r0, r0
	...

0800cf20 <_dtoa_r>:
 800cf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf24:	ed2d 8b04 	vpush	{d8-d9}
 800cf28:	ec57 6b10 	vmov	r6, r7, d0
 800cf2c:	b093      	sub	sp, #76	; 0x4c
 800cf2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cf30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cf34:	9106      	str	r1, [sp, #24]
 800cf36:	ee10 aa10 	vmov	sl, s0
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf3e:	930c      	str	r3, [sp, #48]	; 0x30
 800cf40:	46bb      	mov	fp, r7
 800cf42:	b975      	cbnz	r5, 800cf62 <_dtoa_r+0x42>
 800cf44:	2010      	movs	r0, #16
 800cf46:	f001 f95f 	bl	800e208 <malloc>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	6260      	str	r0, [r4, #36]	; 0x24
 800cf4e:	b920      	cbnz	r0, 800cf5a <_dtoa_r+0x3a>
 800cf50:	4ba7      	ldr	r3, [pc, #668]	; (800d1f0 <_dtoa_r+0x2d0>)
 800cf52:	21ea      	movs	r1, #234	; 0xea
 800cf54:	48a7      	ldr	r0, [pc, #668]	; (800d1f4 <_dtoa_r+0x2d4>)
 800cf56:	f7ff ff37 	bl	800cdc8 <__assert_func>
 800cf5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cf5e:	6005      	str	r5, [r0, #0]
 800cf60:	60c5      	str	r5, [r0, #12]
 800cf62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf64:	6819      	ldr	r1, [r3, #0]
 800cf66:	b151      	cbz	r1, 800cf7e <_dtoa_r+0x5e>
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	604a      	str	r2, [r1, #4]
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	4093      	lsls	r3, r2
 800cf70:	608b      	str	r3, [r1, #8]
 800cf72:	4620      	mov	r0, r4
 800cf74:	f001 f9b0 	bl	800e2d8 <_Bfree>
 800cf78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	601a      	str	r2, [r3, #0]
 800cf7e:	1e3b      	subs	r3, r7, #0
 800cf80:	bfaa      	itet	ge
 800cf82:	2300      	movge	r3, #0
 800cf84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cf88:	f8c8 3000 	strge.w	r3, [r8]
 800cf8c:	4b9a      	ldr	r3, [pc, #616]	; (800d1f8 <_dtoa_r+0x2d8>)
 800cf8e:	bfbc      	itt	lt
 800cf90:	2201      	movlt	r2, #1
 800cf92:	f8c8 2000 	strlt.w	r2, [r8]
 800cf96:	ea33 030b 	bics.w	r3, r3, fp
 800cf9a:	d11b      	bne.n	800cfd4 <_dtoa_r+0xb4>
 800cf9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf9e:	f242 730f 	movw	r3, #9999	; 0x270f
 800cfa2:	6013      	str	r3, [r2, #0]
 800cfa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfa8:	4333      	orrs	r3, r6
 800cfaa:	f000 8592 	beq.w	800dad2 <_dtoa_r+0xbb2>
 800cfae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfb0:	b963      	cbnz	r3, 800cfcc <_dtoa_r+0xac>
 800cfb2:	4b92      	ldr	r3, [pc, #584]	; (800d1fc <_dtoa_r+0x2dc>)
 800cfb4:	e022      	b.n	800cffc <_dtoa_r+0xdc>
 800cfb6:	4b92      	ldr	r3, [pc, #584]	; (800d200 <_dtoa_r+0x2e0>)
 800cfb8:	9301      	str	r3, [sp, #4]
 800cfba:	3308      	adds	r3, #8
 800cfbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cfbe:	6013      	str	r3, [r2, #0]
 800cfc0:	9801      	ldr	r0, [sp, #4]
 800cfc2:	b013      	add	sp, #76	; 0x4c
 800cfc4:	ecbd 8b04 	vpop	{d8-d9}
 800cfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfcc:	4b8b      	ldr	r3, [pc, #556]	; (800d1fc <_dtoa_r+0x2dc>)
 800cfce:	9301      	str	r3, [sp, #4]
 800cfd0:	3303      	adds	r3, #3
 800cfd2:	e7f3      	b.n	800cfbc <_dtoa_r+0x9c>
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	4650      	mov	r0, sl
 800cfda:	4659      	mov	r1, fp
 800cfdc:	f7f3 fd8c 	bl	8000af8 <__aeabi_dcmpeq>
 800cfe0:	ec4b ab19 	vmov	d9, sl, fp
 800cfe4:	4680      	mov	r8, r0
 800cfe6:	b158      	cbz	r0, 800d000 <_dtoa_r+0xe0>
 800cfe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfea:	2301      	movs	r3, #1
 800cfec:	6013      	str	r3, [r2, #0]
 800cfee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f000 856b 	beq.w	800dacc <_dtoa_r+0xbac>
 800cff6:	4883      	ldr	r0, [pc, #524]	; (800d204 <_dtoa_r+0x2e4>)
 800cff8:	6018      	str	r0, [r3, #0]
 800cffa:	1e43      	subs	r3, r0, #1
 800cffc:	9301      	str	r3, [sp, #4]
 800cffe:	e7df      	b.n	800cfc0 <_dtoa_r+0xa0>
 800d000:	ec4b ab10 	vmov	d0, sl, fp
 800d004:	aa10      	add	r2, sp, #64	; 0x40
 800d006:	a911      	add	r1, sp, #68	; 0x44
 800d008:	4620      	mov	r0, r4
 800d00a:	f001 fd13 	bl	800ea34 <__d2b>
 800d00e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d012:	ee08 0a10 	vmov	s16, r0
 800d016:	2d00      	cmp	r5, #0
 800d018:	f000 8084 	beq.w	800d124 <_dtoa_r+0x204>
 800d01c:	ee19 3a90 	vmov	r3, s19
 800d020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d024:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d028:	4656      	mov	r6, sl
 800d02a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d02e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d032:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d036:	4b74      	ldr	r3, [pc, #464]	; (800d208 <_dtoa_r+0x2e8>)
 800d038:	2200      	movs	r2, #0
 800d03a:	4630      	mov	r0, r6
 800d03c:	4639      	mov	r1, r7
 800d03e:	f7f3 f93b 	bl	80002b8 <__aeabi_dsub>
 800d042:	a365      	add	r3, pc, #404	; (adr r3, 800d1d8 <_dtoa_r+0x2b8>)
 800d044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d048:	f7f3 faee 	bl	8000628 <__aeabi_dmul>
 800d04c:	a364      	add	r3, pc, #400	; (adr r3, 800d1e0 <_dtoa_r+0x2c0>)
 800d04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d052:	f7f3 f933 	bl	80002bc <__adddf3>
 800d056:	4606      	mov	r6, r0
 800d058:	4628      	mov	r0, r5
 800d05a:	460f      	mov	r7, r1
 800d05c:	f7f3 fa7a 	bl	8000554 <__aeabi_i2d>
 800d060:	a361      	add	r3, pc, #388	; (adr r3, 800d1e8 <_dtoa_r+0x2c8>)
 800d062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d066:	f7f3 fadf 	bl	8000628 <__aeabi_dmul>
 800d06a:	4602      	mov	r2, r0
 800d06c:	460b      	mov	r3, r1
 800d06e:	4630      	mov	r0, r6
 800d070:	4639      	mov	r1, r7
 800d072:	f7f3 f923 	bl	80002bc <__adddf3>
 800d076:	4606      	mov	r6, r0
 800d078:	460f      	mov	r7, r1
 800d07a:	f7f3 fd85 	bl	8000b88 <__aeabi_d2iz>
 800d07e:	2200      	movs	r2, #0
 800d080:	9000      	str	r0, [sp, #0]
 800d082:	2300      	movs	r3, #0
 800d084:	4630      	mov	r0, r6
 800d086:	4639      	mov	r1, r7
 800d088:	f7f3 fd40 	bl	8000b0c <__aeabi_dcmplt>
 800d08c:	b150      	cbz	r0, 800d0a4 <_dtoa_r+0x184>
 800d08e:	9800      	ldr	r0, [sp, #0]
 800d090:	f7f3 fa60 	bl	8000554 <__aeabi_i2d>
 800d094:	4632      	mov	r2, r6
 800d096:	463b      	mov	r3, r7
 800d098:	f7f3 fd2e 	bl	8000af8 <__aeabi_dcmpeq>
 800d09c:	b910      	cbnz	r0, 800d0a4 <_dtoa_r+0x184>
 800d09e:	9b00      	ldr	r3, [sp, #0]
 800d0a0:	3b01      	subs	r3, #1
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	9b00      	ldr	r3, [sp, #0]
 800d0a6:	2b16      	cmp	r3, #22
 800d0a8:	d85a      	bhi.n	800d160 <_dtoa_r+0x240>
 800d0aa:	9a00      	ldr	r2, [sp, #0]
 800d0ac:	4b57      	ldr	r3, [pc, #348]	; (800d20c <_dtoa_r+0x2ec>)
 800d0ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	ec51 0b19 	vmov	r0, r1, d9
 800d0ba:	f7f3 fd27 	bl	8000b0c <__aeabi_dcmplt>
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d050      	beq.n	800d164 <_dtoa_r+0x244>
 800d0c2:	9b00      	ldr	r3, [sp, #0]
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0ce:	1b5d      	subs	r5, r3, r5
 800d0d0:	1e6b      	subs	r3, r5, #1
 800d0d2:	9305      	str	r3, [sp, #20]
 800d0d4:	bf45      	ittet	mi
 800d0d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d0da:	9304      	strmi	r3, [sp, #16]
 800d0dc:	2300      	movpl	r3, #0
 800d0de:	2300      	movmi	r3, #0
 800d0e0:	bf4c      	ite	mi
 800d0e2:	9305      	strmi	r3, [sp, #20]
 800d0e4:	9304      	strpl	r3, [sp, #16]
 800d0e6:	9b00      	ldr	r3, [sp, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	db3d      	blt.n	800d168 <_dtoa_r+0x248>
 800d0ec:	9b05      	ldr	r3, [sp, #20]
 800d0ee:	9a00      	ldr	r2, [sp, #0]
 800d0f0:	920a      	str	r2, [sp, #40]	; 0x28
 800d0f2:	4413      	add	r3, r2
 800d0f4:	9305      	str	r3, [sp, #20]
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	9307      	str	r3, [sp, #28]
 800d0fa:	9b06      	ldr	r3, [sp, #24]
 800d0fc:	2b09      	cmp	r3, #9
 800d0fe:	f200 8089 	bhi.w	800d214 <_dtoa_r+0x2f4>
 800d102:	2b05      	cmp	r3, #5
 800d104:	bfc4      	itt	gt
 800d106:	3b04      	subgt	r3, #4
 800d108:	9306      	strgt	r3, [sp, #24]
 800d10a:	9b06      	ldr	r3, [sp, #24]
 800d10c:	f1a3 0302 	sub.w	r3, r3, #2
 800d110:	bfcc      	ite	gt
 800d112:	2500      	movgt	r5, #0
 800d114:	2501      	movle	r5, #1
 800d116:	2b03      	cmp	r3, #3
 800d118:	f200 8087 	bhi.w	800d22a <_dtoa_r+0x30a>
 800d11c:	e8df f003 	tbb	[pc, r3]
 800d120:	59383a2d 	.word	0x59383a2d
 800d124:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d128:	441d      	add	r5, r3
 800d12a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d12e:	2b20      	cmp	r3, #32
 800d130:	bfc1      	itttt	gt
 800d132:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d136:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d13a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d13e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d142:	bfda      	itte	le
 800d144:	f1c3 0320 	rsble	r3, r3, #32
 800d148:	fa06 f003 	lslle.w	r0, r6, r3
 800d14c:	4318      	orrgt	r0, r3
 800d14e:	f7f3 f9f1 	bl	8000534 <__aeabi_ui2d>
 800d152:	2301      	movs	r3, #1
 800d154:	4606      	mov	r6, r0
 800d156:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d15a:	3d01      	subs	r5, #1
 800d15c:	930e      	str	r3, [sp, #56]	; 0x38
 800d15e:	e76a      	b.n	800d036 <_dtoa_r+0x116>
 800d160:	2301      	movs	r3, #1
 800d162:	e7b2      	b.n	800d0ca <_dtoa_r+0x1aa>
 800d164:	900b      	str	r0, [sp, #44]	; 0x2c
 800d166:	e7b1      	b.n	800d0cc <_dtoa_r+0x1ac>
 800d168:	9b04      	ldr	r3, [sp, #16]
 800d16a:	9a00      	ldr	r2, [sp, #0]
 800d16c:	1a9b      	subs	r3, r3, r2
 800d16e:	9304      	str	r3, [sp, #16]
 800d170:	4253      	negs	r3, r2
 800d172:	9307      	str	r3, [sp, #28]
 800d174:	2300      	movs	r3, #0
 800d176:	930a      	str	r3, [sp, #40]	; 0x28
 800d178:	e7bf      	b.n	800d0fa <_dtoa_r+0x1da>
 800d17a:	2300      	movs	r3, #0
 800d17c:	9308      	str	r3, [sp, #32]
 800d17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d180:	2b00      	cmp	r3, #0
 800d182:	dc55      	bgt.n	800d230 <_dtoa_r+0x310>
 800d184:	2301      	movs	r3, #1
 800d186:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d18a:	461a      	mov	r2, r3
 800d18c:	9209      	str	r2, [sp, #36]	; 0x24
 800d18e:	e00c      	b.n	800d1aa <_dtoa_r+0x28a>
 800d190:	2301      	movs	r3, #1
 800d192:	e7f3      	b.n	800d17c <_dtoa_r+0x25c>
 800d194:	2300      	movs	r3, #0
 800d196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d198:	9308      	str	r3, [sp, #32]
 800d19a:	9b00      	ldr	r3, [sp, #0]
 800d19c:	4413      	add	r3, r2
 800d19e:	9302      	str	r3, [sp, #8]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	9303      	str	r3, [sp, #12]
 800d1a6:	bfb8      	it	lt
 800d1a8:	2301      	movlt	r3, #1
 800d1aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	6042      	str	r2, [r0, #4]
 800d1b0:	2204      	movs	r2, #4
 800d1b2:	f102 0614 	add.w	r6, r2, #20
 800d1b6:	429e      	cmp	r6, r3
 800d1b8:	6841      	ldr	r1, [r0, #4]
 800d1ba:	d93d      	bls.n	800d238 <_dtoa_r+0x318>
 800d1bc:	4620      	mov	r0, r4
 800d1be:	f001 f84b 	bl	800e258 <_Balloc>
 800d1c2:	9001      	str	r0, [sp, #4]
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d13b      	bne.n	800d240 <_dtoa_r+0x320>
 800d1c8:	4b11      	ldr	r3, [pc, #68]	; (800d210 <_dtoa_r+0x2f0>)
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d1d0:	e6c0      	b.n	800cf54 <_dtoa_r+0x34>
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e7df      	b.n	800d196 <_dtoa_r+0x276>
 800d1d6:	bf00      	nop
 800d1d8:	636f4361 	.word	0x636f4361
 800d1dc:	3fd287a7 	.word	0x3fd287a7
 800d1e0:	8b60c8b3 	.word	0x8b60c8b3
 800d1e4:	3fc68a28 	.word	0x3fc68a28
 800d1e8:	509f79fb 	.word	0x509f79fb
 800d1ec:	3fd34413 	.word	0x3fd34413
 800d1f0:	08010bb8 	.word	0x08010bb8
 800d1f4:	08010d76 	.word	0x08010d76
 800d1f8:	7ff00000 	.word	0x7ff00000
 800d1fc:	08010d72 	.word	0x08010d72
 800d200:	08010d69 	.word	0x08010d69
 800d204:	08010b3d 	.word	0x08010b3d
 800d208:	3ff80000 	.word	0x3ff80000
 800d20c:	08010ee0 	.word	0x08010ee0
 800d210:	08010dd1 	.word	0x08010dd1
 800d214:	2501      	movs	r5, #1
 800d216:	2300      	movs	r3, #0
 800d218:	9306      	str	r3, [sp, #24]
 800d21a:	9508      	str	r5, [sp, #32]
 800d21c:	f04f 33ff 	mov.w	r3, #4294967295
 800d220:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d224:	2200      	movs	r2, #0
 800d226:	2312      	movs	r3, #18
 800d228:	e7b0      	b.n	800d18c <_dtoa_r+0x26c>
 800d22a:	2301      	movs	r3, #1
 800d22c:	9308      	str	r3, [sp, #32]
 800d22e:	e7f5      	b.n	800d21c <_dtoa_r+0x2fc>
 800d230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d232:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d236:	e7b8      	b.n	800d1aa <_dtoa_r+0x28a>
 800d238:	3101      	adds	r1, #1
 800d23a:	6041      	str	r1, [r0, #4]
 800d23c:	0052      	lsls	r2, r2, #1
 800d23e:	e7b8      	b.n	800d1b2 <_dtoa_r+0x292>
 800d240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d242:	9a01      	ldr	r2, [sp, #4]
 800d244:	601a      	str	r2, [r3, #0]
 800d246:	9b03      	ldr	r3, [sp, #12]
 800d248:	2b0e      	cmp	r3, #14
 800d24a:	f200 809d 	bhi.w	800d388 <_dtoa_r+0x468>
 800d24e:	2d00      	cmp	r5, #0
 800d250:	f000 809a 	beq.w	800d388 <_dtoa_r+0x468>
 800d254:	9b00      	ldr	r3, [sp, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	dd32      	ble.n	800d2c0 <_dtoa_r+0x3a0>
 800d25a:	4ab7      	ldr	r2, [pc, #732]	; (800d538 <_dtoa_r+0x618>)
 800d25c:	f003 030f 	and.w	r3, r3, #15
 800d260:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d264:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d268:	9b00      	ldr	r3, [sp, #0]
 800d26a:	05d8      	lsls	r0, r3, #23
 800d26c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d270:	d516      	bpl.n	800d2a0 <_dtoa_r+0x380>
 800d272:	4bb2      	ldr	r3, [pc, #712]	; (800d53c <_dtoa_r+0x61c>)
 800d274:	ec51 0b19 	vmov	r0, r1, d9
 800d278:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d27c:	f7f3 fafe 	bl	800087c <__aeabi_ddiv>
 800d280:	f007 070f 	and.w	r7, r7, #15
 800d284:	4682      	mov	sl, r0
 800d286:	468b      	mov	fp, r1
 800d288:	2503      	movs	r5, #3
 800d28a:	4eac      	ldr	r6, [pc, #688]	; (800d53c <_dtoa_r+0x61c>)
 800d28c:	b957      	cbnz	r7, 800d2a4 <_dtoa_r+0x384>
 800d28e:	4642      	mov	r2, r8
 800d290:	464b      	mov	r3, r9
 800d292:	4650      	mov	r0, sl
 800d294:	4659      	mov	r1, fp
 800d296:	f7f3 faf1 	bl	800087c <__aeabi_ddiv>
 800d29a:	4682      	mov	sl, r0
 800d29c:	468b      	mov	fp, r1
 800d29e:	e028      	b.n	800d2f2 <_dtoa_r+0x3d2>
 800d2a0:	2502      	movs	r5, #2
 800d2a2:	e7f2      	b.n	800d28a <_dtoa_r+0x36a>
 800d2a4:	07f9      	lsls	r1, r7, #31
 800d2a6:	d508      	bpl.n	800d2ba <_dtoa_r+0x39a>
 800d2a8:	4640      	mov	r0, r8
 800d2aa:	4649      	mov	r1, r9
 800d2ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d2b0:	f7f3 f9ba 	bl	8000628 <__aeabi_dmul>
 800d2b4:	3501      	adds	r5, #1
 800d2b6:	4680      	mov	r8, r0
 800d2b8:	4689      	mov	r9, r1
 800d2ba:	107f      	asrs	r7, r7, #1
 800d2bc:	3608      	adds	r6, #8
 800d2be:	e7e5      	b.n	800d28c <_dtoa_r+0x36c>
 800d2c0:	f000 809b 	beq.w	800d3fa <_dtoa_r+0x4da>
 800d2c4:	9b00      	ldr	r3, [sp, #0]
 800d2c6:	4f9d      	ldr	r7, [pc, #628]	; (800d53c <_dtoa_r+0x61c>)
 800d2c8:	425e      	negs	r6, r3
 800d2ca:	4b9b      	ldr	r3, [pc, #620]	; (800d538 <_dtoa_r+0x618>)
 800d2cc:	f006 020f 	and.w	r2, r6, #15
 800d2d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d8:	ec51 0b19 	vmov	r0, r1, d9
 800d2dc:	f7f3 f9a4 	bl	8000628 <__aeabi_dmul>
 800d2e0:	1136      	asrs	r6, r6, #4
 800d2e2:	4682      	mov	sl, r0
 800d2e4:	468b      	mov	fp, r1
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	2502      	movs	r5, #2
 800d2ea:	2e00      	cmp	r6, #0
 800d2ec:	d17a      	bne.n	800d3e4 <_dtoa_r+0x4c4>
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d1d3      	bne.n	800d29a <_dtoa_r+0x37a>
 800d2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f000 8082 	beq.w	800d3fe <_dtoa_r+0x4de>
 800d2fa:	4b91      	ldr	r3, [pc, #580]	; (800d540 <_dtoa_r+0x620>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	4650      	mov	r0, sl
 800d300:	4659      	mov	r1, fp
 800d302:	f7f3 fc03 	bl	8000b0c <__aeabi_dcmplt>
 800d306:	2800      	cmp	r0, #0
 800d308:	d079      	beq.n	800d3fe <_dtoa_r+0x4de>
 800d30a:	9b03      	ldr	r3, [sp, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d076      	beq.n	800d3fe <_dtoa_r+0x4de>
 800d310:	9b02      	ldr	r3, [sp, #8]
 800d312:	2b00      	cmp	r3, #0
 800d314:	dd36      	ble.n	800d384 <_dtoa_r+0x464>
 800d316:	9b00      	ldr	r3, [sp, #0]
 800d318:	4650      	mov	r0, sl
 800d31a:	4659      	mov	r1, fp
 800d31c:	1e5f      	subs	r7, r3, #1
 800d31e:	2200      	movs	r2, #0
 800d320:	4b88      	ldr	r3, [pc, #544]	; (800d544 <_dtoa_r+0x624>)
 800d322:	f7f3 f981 	bl	8000628 <__aeabi_dmul>
 800d326:	9e02      	ldr	r6, [sp, #8]
 800d328:	4682      	mov	sl, r0
 800d32a:	468b      	mov	fp, r1
 800d32c:	3501      	adds	r5, #1
 800d32e:	4628      	mov	r0, r5
 800d330:	f7f3 f910 	bl	8000554 <__aeabi_i2d>
 800d334:	4652      	mov	r2, sl
 800d336:	465b      	mov	r3, fp
 800d338:	f7f3 f976 	bl	8000628 <__aeabi_dmul>
 800d33c:	4b82      	ldr	r3, [pc, #520]	; (800d548 <_dtoa_r+0x628>)
 800d33e:	2200      	movs	r2, #0
 800d340:	f7f2 ffbc 	bl	80002bc <__adddf3>
 800d344:	46d0      	mov	r8, sl
 800d346:	46d9      	mov	r9, fp
 800d348:	4682      	mov	sl, r0
 800d34a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d34e:	2e00      	cmp	r6, #0
 800d350:	d158      	bne.n	800d404 <_dtoa_r+0x4e4>
 800d352:	4b7e      	ldr	r3, [pc, #504]	; (800d54c <_dtoa_r+0x62c>)
 800d354:	2200      	movs	r2, #0
 800d356:	4640      	mov	r0, r8
 800d358:	4649      	mov	r1, r9
 800d35a:	f7f2 ffad 	bl	80002b8 <__aeabi_dsub>
 800d35e:	4652      	mov	r2, sl
 800d360:	465b      	mov	r3, fp
 800d362:	4680      	mov	r8, r0
 800d364:	4689      	mov	r9, r1
 800d366:	f7f3 fbef 	bl	8000b48 <__aeabi_dcmpgt>
 800d36a:	2800      	cmp	r0, #0
 800d36c:	f040 8295 	bne.w	800d89a <_dtoa_r+0x97a>
 800d370:	4652      	mov	r2, sl
 800d372:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d376:	4640      	mov	r0, r8
 800d378:	4649      	mov	r1, r9
 800d37a:	f7f3 fbc7 	bl	8000b0c <__aeabi_dcmplt>
 800d37e:	2800      	cmp	r0, #0
 800d380:	f040 8289 	bne.w	800d896 <_dtoa_r+0x976>
 800d384:	ec5b ab19 	vmov	sl, fp, d9
 800d388:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	f2c0 8148 	blt.w	800d620 <_dtoa_r+0x700>
 800d390:	9a00      	ldr	r2, [sp, #0]
 800d392:	2a0e      	cmp	r2, #14
 800d394:	f300 8144 	bgt.w	800d620 <_dtoa_r+0x700>
 800d398:	4b67      	ldr	r3, [pc, #412]	; (800d538 <_dtoa_r+0x618>)
 800d39a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d39e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d3a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f280 80d5 	bge.w	800d554 <_dtoa_r+0x634>
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f300 80d1 	bgt.w	800d554 <_dtoa_r+0x634>
 800d3b2:	f040 826f 	bne.w	800d894 <_dtoa_r+0x974>
 800d3b6:	4b65      	ldr	r3, [pc, #404]	; (800d54c <_dtoa_r+0x62c>)
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	4640      	mov	r0, r8
 800d3bc:	4649      	mov	r1, r9
 800d3be:	f7f3 f933 	bl	8000628 <__aeabi_dmul>
 800d3c2:	4652      	mov	r2, sl
 800d3c4:	465b      	mov	r3, fp
 800d3c6:	f7f3 fbb5 	bl	8000b34 <__aeabi_dcmpge>
 800d3ca:	9e03      	ldr	r6, [sp, #12]
 800d3cc:	4637      	mov	r7, r6
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	f040 8245 	bne.w	800d85e <_dtoa_r+0x93e>
 800d3d4:	9d01      	ldr	r5, [sp, #4]
 800d3d6:	2331      	movs	r3, #49	; 0x31
 800d3d8:	f805 3b01 	strb.w	r3, [r5], #1
 800d3dc:	9b00      	ldr	r3, [sp, #0]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	e240      	b.n	800d866 <_dtoa_r+0x946>
 800d3e4:	07f2      	lsls	r2, r6, #31
 800d3e6:	d505      	bpl.n	800d3f4 <_dtoa_r+0x4d4>
 800d3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3ec:	f7f3 f91c 	bl	8000628 <__aeabi_dmul>
 800d3f0:	3501      	adds	r5, #1
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	1076      	asrs	r6, r6, #1
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	e777      	b.n	800d2ea <_dtoa_r+0x3ca>
 800d3fa:	2502      	movs	r5, #2
 800d3fc:	e779      	b.n	800d2f2 <_dtoa_r+0x3d2>
 800d3fe:	9f00      	ldr	r7, [sp, #0]
 800d400:	9e03      	ldr	r6, [sp, #12]
 800d402:	e794      	b.n	800d32e <_dtoa_r+0x40e>
 800d404:	9901      	ldr	r1, [sp, #4]
 800d406:	4b4c      	ldr	r3, [pc, #304]	; (800d538 <_dtoa_r+0x618>)
 800d408:	4431      	add	r1, r6
 800d40a:	910d      	str	r1, [sp, #52]	; 0x34
 800d40c:	9908      	ldr	r1, [sp, #32]
 800d40e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d412:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d416:	2900      	cmp	r1, #0
 800d418:	d043      	beq.n	800d4a2 <_dtoa_r+0x582>
 800d41a:	494d      	ldr	r1, [pc, #308]	; (800d550 <_dtoa_r+0x630>)
 800d41c:	2000      	movs	r0, #0
 800d41e:	f7f3 fa2d 	bl	800087c <__aeabi_ddiv>
 800d422:	4652      	mov	r2, sl
 800d424:	465b      	mov	r3, fp
 800d426:	f7f2 ff47 	bl	80002b8 <__aeabi_dsub>
 800d42a:	9d01      	ldr	r5, [sp, #4]
 800d42c:	4682      	mov	sl, r0
 800d42e:	468b      	mov	fp, r1
 800d430:	4649      	mov	r1, r9
 800d432:	4640      	mov	r0, r8
 800d434:	f7f3 fba8 	bl	8000b88 <__aeabi_d2iz>
 800d438:	4606      	mov	r6, r0
 800d43a:	f7f3 f88b 	bl	8000554 <__aeabi_i2d>
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	4640      	mov	r0, r8
 800d444:	4649      	mov	r1, r9
 800d446:	f7f2 ff37 	bl	80002b8 <__aeabi_dsub>
 800d44a:	3630      	adds	r6, #48	; 0x30
 800d44c:	f805 6b01 	strb.w	r6, [r5], #1
 800d450:	4652      	mov	r2, sl
 800d452:	465b      	mov	r3, fp
 800d454:	4680      	mov	r8, r0
 800d456:	4689      	mov	r9, r1
 800d458:	f7f3 fb58 	bl	8000b0c <__aeabi_dcmplt>
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d163      	bne.n	800d528 <_dtoa_r+0x608>
 800d460:	4642      	mov	r2, r8
 800d462:	464b      	mov	r3, r9
 800d464:	4936      	ldr	r1, [pc, #216]	; (800d540 <_dtoa_r+0x620>)
 800d466:	2000      	movs	r0, #0
 800d468:	f7f2 ff26 	bl	80002b8 <__aeabi_dsub>
 800d46c:	4652      	mov	r2, sl
 800d46e:	465b      	mov	r3, fp
 800d470:	f7f3 fb4c 	bl	8000b0c <__aeabi_dcmplt>
 800d474:	2800      	cmp	r0, #0
 800d476:	f040 80b5 	bne.w	800d5e4 <_dtoa_r+0x6c4>
 800d47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d47c:	429d      	cmp	r5, r3
 800d47e:	d081      	beq.n	800d384 <_dtoa_r+0x464>
 800d480:	4b30      	ldr	r3, [pc, #192]	; (800d544 <_dtoa_r+0x624>)
 800d482:	2200      	movs	r2, #0
 800d484:	4650      	mov	r0, sl
 800d486:	4659      	mov	r1, fp
 800d488:	f7f3 f8ce 	bl	8000628 <__aeabi_dmul>
 800d48c:	4b2d      	ldr	r3, [pc, #180]	; (800d544 <_dtoa_r+0x624>)
 800d48e:	4682      	mov	sl, r0
 800d490:	468b      	mov	fp, r1
 800d492:	4640      	mov	r0, r8
 800d494:	4649      	mov	r1, r9
 800d496:	2200      	movs	r2, #0
 800d498:	f7f3 f8c6 	bl	8000628 <__aeabi_dmul>
 800d49c:	4680      	mov	r8, r0
 800d49e:	4689      	mov	r9, r1
 800d4a0:	e7c6      	b.n	800d430 <_dtoa_r+0x510>
 800d4a2:	4650      	mov	r0, sl
 800d4a4:	4659      	mov	r1, fp
 800d4a6:	f7f3 f8bf 	bl	8000628 <__aeabi_dmul>
 800d4aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4ac:	9d01      	ldr	r5, [sp, #4]
 800d4ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4b0:	4682      	mov	sl, r0
 800d4b2:	468b      	mov	fp, r1
 800d4b4:	4649      	mov	r1, r9
 800d4b6:	4640      	mov	r0, r8
 800d4b8:	f7f3 fb66 	bl	8000b88 <__aeabi_d2iz>
 800d4bc:	4606      	mov	r6, r0
 800d4be:	f7f3 f849 	bl	8000554 <__aeabi_i2d>
 800d4c2:	3630      	adds	r6, #48	; 0x30
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	4640      	mov	r0, r8
 800d4ca:	4649      	mov	r1, r9
 800d4cc:	f7f2 fef4 	bl	80002b8 <__aeabi_dsub>
 800d4d0:	f805 6b01 	strb.w	r6, [r5], #1
 800d4d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4d6:	429d      	cmp	r5, r3
 800d4d8:	4680      	mov	r8, r0
 800d4da:	4689      	mov	r9, r1
 800d4dc:	f04f 0200 	mov.w	r2, #0
 800d4e0:	d124      	bne.n	800d52c <_dtoa_r+0x60c>
 800d4e2:	4b1b      	ldr	r3, [pc, #108]	; (800d550 <_dtoa_r+0x630>)
 800d4e4:	4650      	mov	r0, sl
 800d4e6:	4659      	mov	r1, fp
 800d4e8:	f7f2 fee8 	bl	80002bc <__adddf3>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	4640      	mov	r0, r8
 800d4f2:	4649      	mov	r1, r9
 800d4f4:	f7f3 fb28 	bl	8000b48 <__aeabi_dcmpgt>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d173      	bne.n	800d5e4 <_dtoa_r+0x6c4>
 800d4fc:	4652      	mov	r2, sl
 800d4fe:	465b      	mov	r3, fp
 800d500:	4913      	ldr	r1, [pc, #76]	; (800d550 <_dtoa_r+0x630>)
 800d502:	2000      	movs	r0, #0
 800d504:	f7f2 fed8 	bl	80002b8 <__aeabi_dsub>
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	4640      	mov	r0, r8
 800d50e:	4649      	mov	r1, r9
 800d510:	f7f3 fafc 	bl	8000b0c <__aeabi_dcmplt>
 800d514:	2800      	cmp	r0, #0
 800d516:	f43f af35 	beq.w	800d384 <_dtoa_r+0x464>
 800d51a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d51c:	1e6b      	subs	r3, r5, #1
 800d51e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d520:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d524:	2b30      	cmp	r3, #48	; 0x30
 800d526:	d0f8      	beq.n	800d51a <_dtoa_r+0x5fa>
 800d528:	9700      	str	r7, [sp, #0]
 800d52a:	e049      	b.n	800d5c0 <_dtoa_r+0x6a0>
 800d52c:	4b05      	ldr	r3, [pc, #20]	; (800d544 <_dtoa_r+0x624>)
 800d52e:	f7f3 f87b 	bl	8000628 <__aeabi_dmul>
 800d532:	4680      	mov	r8, r0
 800d534:	4689      	mov	r9, r1
 800d536:	e7bd      	b.n	800d4b4 <_dtoa_r+0x594>
 800d538:	08010ee0 	.word	0x08010ee0
 800d53c:	08010eb8 	.word	0x08010eb8
 800d540:	3ff00000 	.word	0x3ff00000
 800d544:	40240000 	.word	0x40240000
 800d548:	401c0000 	.word	0x401c0000
 800d54c:	40140000 	.word	0x40140000
 800d550:	3fe00000 	.word	0x3fe00000
 800d554:	9d01      	ldr	r5, [sp, #4]
 800d556:	4656      	mov	r6, sl
 800d558:	465f      	mov	r7, fp
 800d55a:	4642      	mov	r2, r8
 800d55c:	464b      	mov	r3, r9
 800d55e:	4630      	mov	r0, r6
 800d560:	4639      	mov	r1, r7
 800d562:	f7f3 f98b 	bl	800087c <__aeabi_ddiv>
 800d566:	f7f3 fb0f 	bl	8000b88 <__aeabi_d2iz>
 800d56a:	4682      	mov	sl, r0
 800d56c:	f7f2 fff2 	bl	8000554 <__aeabi_i2d>
 800d570:	4642      	mov	r2, r8
 800d572:	464b      	mov	r3, r9
 800d574:	f7f3 f858 	bl	8000628 <__aeabi_dmul>
 800d578:	4602      	mov	r2, r0
 800d57a:	460b      	mov	r3, r1
 800d57c:	4630      	mov	r0, r6
 800d57e:	4639      	mov	r1, r7
 800d580:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d584:	f7f2 fe98 	bl	80002b8 <__aeabi_dsub>
 800d588:	f805 6b01 	strb.w	r6, [r5], #1
 800d58c:	9e01      	ldr	r6, [sp, #4]
 800d58e:	9f03      	ldr	r7, [sp, #12]
 800d590:	1bae      	subs	r6, r5, r6
 800d592:	42b7      	cmp	r7, r6
 800d594:	4602      	mov	r2, r0
 800d596:	460b      	mov	r3, r1
 800d598:	d135      	bne.n	800d606 <_dtoa_r+0x6e6>
 800d59a:	f7f2 fe8f 	bl	80002bc <__adddf3>
 800d59e:	4642      	mov	r2, r8
 800d5a0:	464b      	mov	r3, r9
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	460f      	mov	r7, r1
 800d5a6:	f7f3 facf 	bl	8000b48 <__aeabi_dcmpgt>
 800d5aa:	b9d0      	cbnz	r0, 800d5e2 <_dtoa_r+0x6c2>
 800d5ac:	4642      	mov	r2, r8
 800d5ae:	464b      	mov	r3, r9
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	4639      	mov	r1, r7
 800d5b4:	f7f3 faa0 	bl	8000af8 <__aeabi_dcmpeq>
 800d5b8:	b110      	cbz	r0, 800d5c0 <_dtoa_r+0x6a0>
 800d5ba:	f01a 0f01 	tst.w	sl, #1
 800d5be:	d110      	bne.n	800d5e2 <_dtoa_r+0x6c2>
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	ee18 1a10 	vmov	r1, s16
 800d5c6:	f000 fe87 	bl	800e2d8 <_Bfree>
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	9800      	ldr	r0, [sp, #0]
 800d5ce:	702b      	strb	r3, [r5, #0]
 800d5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5d2:	3001      	adds	r0, #1
 800d5d4:	6018      	str	r0, [r3, #0]
 800d5d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	f43f acf1 	beq.w	800cfc0 <_dtoa_r+0xa0>
 800d5de:	601d      	str	r5, [r3, #0]
 800d5e0:	e4ee      	b.n	800cfc0 <_dtoa_r+0xa0>
 800d5e2:	9f00      	ldr	r7, [sp, #0]
 800d5e4:	462b      	mov	r3, r5
 800d5e6:	461d      	mov	r5, r3
 800d5e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5ec:	2a39      	cmp	r2, #57	; 0x39
 800d5ee:	d106      	bne.n	800d5fe <_dtoa_r+0x6de>
 800d5f0:	9a01      	ldr	r2, [sp, #4]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d1f7      	bne.n	800d5e6 <_dtoa_r+0x6c6>
 800d5f6:	9901      	ldr	r1, [sp, #4]
 800d5f8:	2230      	movs	r2, #48	; 0x30
 800d5fa:	3701      	adds	r7, #1
 800d5fc:	700a      	strb	r2, [r1, #0]
 800d5fe:	781a      	ldrb	r2, [r3, #0]
 800d600:	3201      	adds	r2, #1
 800d602:	701a      	strb	r2, [r3, #0]
 800d604:	e790      	b.n	800d528 <_dtoa_r+0x608>
 800d606:	4ba6      	ldr	r3, [pc, #664]	; (800d8a0 <_dtoa_r+0x980>)
 800d608:	2200      	movs	r2, #0
 800d60a:	f7f3 f80d 	bl	8000628 <__aeabi_dmul>
 800d60e:	2200      	movs	r2, #0
 800d610:	2300      	movs	r3, #0
 800d612:	4606      	mov	r6, r0
 800d614:	460f      	mov	r7, r1
 800d616:	f7f3 fa6f 	bl	8000af8 <__aeabi_dcmpeq>
 800d61a:	2800      	cmp	r0, #0
 800d61c:	d09d      	beq.n	800d55a <_dtoa_r+0x63a>
 800d61e:	e7cf      	b.n	800d5c0 <_dtoa_r+0x6a0>
 800d620:	9a08      	ldr	r2, [sp, #32]
 800d622:	2a00      	cmp	r2, #0
 800d624:	f000 80d7 	beq.w	800d7d6 <_dtoa_r+0x8b6>
 800d628:	9a06      	ldr	r2, [sp, #24]
 800d62a:	2a01      	cmp	r2, #1
 800d62c:	f300 80ba 	bgt.w	800d7a4 <_dtoa_r+0x884>
 800d630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d632:	2a00      	cmp	r2, #0
 800d634:	f000 80b2 	beq.w	800d79c <_dtoa_r+0x87c>
 800d638:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d63c:	9e07      	ldr	r6, [sp, #28]
 800d63e:	9d04      	ldr	r5, [sp, #16]
 800d640:	9a04      	ldr	r2, [sp, #16]
 800d642:	441a      	add	r2, r3
 800d644:	9204      	str	r2, [sp, #16]
 800d646:	9a05      	ldr	r2, [sp, #20]
 800d648:	2101      	movs	r1, #1
 800d64a:	441a      	add	r2, r3
 800d64c:	4620      	mov	r0, r4
 800d64e:	9205      	str	r2, [sp, #20]
 800d650:	f000 ff44 	bl	800e4dc <__i2b>
 800d654:	4607      	mov	r7, r0
 800d656:	2d00      	cmp	r5, #0
 800d658:	dd0c      	ble.n	800d674 <_dtoa_r+0x754>
 800d65a:	9b05      	ldr	r3, [sp, #20]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	dd09      	ble.n	800d674 <_dtoa_r+0x754>
 800d660:	42ab      	cmp	r3, r5
 800d662:	9a04      	ldr	r2, [sp, #16]
 800d664:	bfa8      	it	ge
 800d666:	462b      	movge	r3, r5
 800d668:	1ad2      	subs	r2, r2, r3
 800d66a:	9204      	str	r2, [sp, #16]
 800d66c:	9a05      	ldr	r2, [sp, #20]
 800d66e:	1aed      	subs	r5, r5, r3
 800d670:	1ad3      	subs	r3, r2, r3
 800d672:	9305      	str	r3, [sp, #20]
 800d674:	9b07      	ldr	r3, [sp, #28]
 800d676:	b31b      	cbz	r3, 800d6c0 <_dtoa_r+0x7a0>
 800d678:	9b08      	ldr	r3, [sp, #32]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	f000 80af 	beq.w	800d7de <_dtoa_r+0x8be>
 800d680:	2e00      	cmp	r6, #0
 800d682:	dd13      	ble.n	800d6ac <_dtoa_r+0x78c>
 800d684:	4639      	mov	r1, r7
 800d686:	4632      	mov	r2, r6
 800d688:	4620      	mov	r0, r4
 800d68a:	f000 ffe7 	bl	800e65c <__pow5mult>
 800d68e:	ee18 2a10 	vmov	r2, s16
 800d692:	4601      	mov	r1, r0
 800d694:	4607      	mov	r7, r0
 800d696:	4620      	mov	r0, r4
 800d698:	f000 ff36 	bl	800e508 <__multiply>
 800d69c:	ee18 1a10 	vmov	r1, s16
 800d6a0:	4680      	mov	r8, r0
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f000 fe18 	bl	800e2d8 <_Bfree>
 800d6a8:	ee08 8a10 	vmov	s16, r8
 800d6ac:	9b07      	ldr	r3, [sp, #28]
 800d6ae:	1b9a      	subs	r2, r3, r6
 800d6b0:	d006      	beq.n	800d6c0 <_dtoa_r+0x7a0>
 800d6b2:	ee18 1a10 	vmov	r1, s16
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	f000 ffd0 	bl	800e65c <__pow5mult>
 800d6bc:	ee08 0a10 	vmov	s16, r0
 800d6c0:	2101      	movs	r1, #1
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	f000 ff0a 	bl	800e4dc <__i2b>
 800d6c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	4606      	mov	r6, r0
 800d6ce:	f340 8088 	ble.w	800d7e2 <_dtoa_r+0x8c2>
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	4601      	mov	r1, r0
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f000 ffc0 	bl	800e65c <__pow5mult>
 800d6dc:	9b06      	ldr	r3, [sp, #24]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	4606      	mov	r6, r0
 800d6e2:	f340 8081 	ble.w	800d7e8 <_dtoa_r+0x8c8>
 800d6e6:	f04f 0800 	mov.w	r8, #0
 800d6ea:	6933      	ldr	r3, [r6, #16]
 800d6ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d6f0:	6918      	ldr	r0, [r3, #16]
 800d6f2:	f000 fea3 	bl	800e43c <__hi0bits>
 800d6f6:	f1c0 0020 	rsb	r0, r0, #32
 800d6fa:	9b05      	ldr	r3, [sp, #20]
 800d6fc:	4418      	add	r0, r3
 800d6fe:	f010 001f 	ands.w	r0, r0, #31
 800d702:	f000 8092 	beq.w	800d82a <_dtoa_r+0x90a>
 800d706:	f1c0 0320 	rsb	r3, r0, #32
 800d70a:	2b04      	cmp	r3, #4
 800d70c:	f340 808a 	ble.w	800d824 <_dtoa_r+0x904>
 800d710:	f1c0 001c 	rsb	r0, r0, #28
 800d714:	9b04      	ldr	r3, [sp, #16]
 800d716:	4403      	add	r3, r0
 800d718:	9304      	str	r3, [sp, #16]
 800d71a:	9b05      	ldr	r3, [sp, #20]
 800d71c:	4403      	add	r3, r0
 800d71e:	4405      	add	r5, r0
 800d720:	9305      	str	r3, [sp, #20]
 800d722:	9b04      	ldr	r3, [sp, #16]
 800d724:	2b00      	cmp	r3, #0
 800d726:	dd07      	ble.n	800d738 <_dtoa_r+0x818>
 800d728:	ee18 1a10 	vmov	r1, s16
 800d72c:	461a      	mov	r2, r3
 800d72e:	4620      	mov	r0, r4
 800d730:	f000 ffee 	bl	800e710 <__lshift>
 800d734:	ee08 0a10 	vmov	s16, r0
 800d738:	9b05      	ldr	r3, [sp, #20]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	dd05      	ble.n	800d74a <_dtoa_r+0x82a>
 800d73e:	4631      	mov	r1, r6
 800d740:	461a      	mov	r2, r3
 800d742:	4620      	mov	r0, r4
 800d744:	f000 ffe4 	bl	800e710 <__lshift>
 800d748:	4606      	mov	r6, r0
 800d74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d06e      	beq.n	800d82e <_dtoa_r+0x90e>
 800d750:	ee18 0a10 	vmov	r0, s16
 800d754:	4631      	mov	r1, r6
 800d756:	f001 f84b 	bl	800e7f0 <__mcmp>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	da67      	bge.n	800d82e <_dtoa_r+0x90e>
 800d75e:	9b00      	ldr	r3, [sp, #0]
 800d760:	3b01      	subs	r3, #1
 800d762:	ee18 1a10 	vmov	r1, s16
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	220a      	movs	r2, #10
 800d76a:	2300      	movs	r3, #0
 800d76c:	4620      	mov	r0, r4
 800d76e:	f000 fdd5 	bl	800e31c <__multadd>
 800d772:	9b08      	ldr	r3, [sp, #32]
 800d774:	ee08 0a10 	vmov	s16, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f000 81b1 	beq.w	800dae0 <_dtoa_r+0xbc0>
 800d77e:	2300      	movs	r3, #0
 800d780:	4639      	mov	r1, r7
 800d782:	220a      	movs	r2, #10
 800d784:	4620      	mov	r0, r4
 800d786:	f000 fdc9 	bl	800e31c <__multadd>
 800d78a:	9b02      	ldr	r3, [sp, #8]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	4607      	mov	r7, r0
 800d790:	f300 808e 	bgt.w	800d8b0 <_dtoa_r+0x990>
 800d794:	9b06      	ldr	r3, [sp, #24]
 800d796:	2b02      	cmp	r3, #2
 800d798:	dc51      	bgt.n	800d83e <_dtoa_r+0x91e>
 800d79a:	e089      	b.n	800d8b0 <_dtoa_r+0x990>
 800d79c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d79e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d7a2:	e74b      	b.n	800d63c <_dtoa_r+0x71c>
 800d7a4:	9b03      	ldr	r3, [sp, #12]
 800d7a6:	1e5e      	subs	r6, r3, #1
 800d7a8:	9b07      	ldr	r3, [sp, #28]
 800d7aa:	42b3      	cmp	r3, r6
 800d7ac:	bfbf      	itttt	lt
 800d7ae:	9b07      	ldrlt	r3, [sp, #28]
 800d7b0:	9607      	strlt	r6, [sp, #28]
 800d7b2:	1af2      	sublt	r2, r6, r3
 800d7b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d7b6:	bfb6      	itet	lt
 800d7b8:	189b      	addlt	r3, r3, r2
 800d7ba:	1b9e      	subge	r6, r3, r6
 800d7bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d7be:	9b03      	ldr	r3, [sp, #12]
 800d7c0:	bfb8      	it	lt
 800d7c2:	2600      	movlt	r6, #0
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	bfb7      	itett	lt
 800d7c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d7cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d7d0:	1a9d      	sublt	r5, r3, r2
 800d7d2:	2300      	movlt	r3, #0
 800d7d4:	e734      	b.n	800d640 <_dtoa_r+0x720>
 800d7d6:	9e07      	ldr	r6, [sp, #28]
 800d7d8:	9d04      	ldr	r5, [sp, #16]
 800d7da:	9f08      	ldr	r7, [sp, #32]
 800d7dc:	e73b      	b.n	800d656 <_dtoa_r+0x736>
 800d7de:	9a07      	ldr	r2, [sp, #28]
 800d7e0:	e767      	b.n	800d6b2 <_dtoa_r+0x792>
 800d7e2:	9b06      	ldr	r3, [sp, #24]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	dc18      	bgt.n	800d81a <_dtoa_r+0x8fa>
 800d7e8:	f1ba 0f00 	cmp.w	sl, #0
 800d7ec:	d115      	bne.n	800d81a <_dtoa_r+0x8fa>
 800d7ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7f2:	b993      	cbnz	r3, 800d81a <_dtoa_r+0x8fa>
 800d7f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d7f8:	0d1b      	lsrs	r3, r3, #20
 800d7fa:	051b      	lsls	r3, r3, #20
 800d7fc:	b183      	cbz	r3, 800d820 <_dtoa_r+0x900>
 800d7fe:	9b04      	ldr	r3, [sp, #16]
 800d800:	3301      	adds	r3, #1
 800d802:	9304      	str	r3, [sp, #16]
 800d804:	9b05      	ldr	r3, [sp, #20]
 800d806:	3301      	adds	r3, #1
 800d808:	9305      	str	r3, [sp, #20]
 800d80a:	f04f 0801 	mov.w	r8, #1
 800d80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d810:	2b00      	cmp	r3, #0
 800d812:	f47f af6a 	bne.w	800d6ea <_dtoa_r+0x7ca>
 800d816:	2001      	movs	r0, #1
 800d818:	e76f      	b.n	800d6fa <_dtoa_r+0x7da>
 800d81a:	f04f 0800 	mov.w	r8, #0
 800d81e:	e7f6      	b.n	800d80e <_dtoa_r+0x8ee>
 800d820:	4698      	mov	r8, r3
 800d822:	e7f4      	b.n	800d80e <_dtoa_r+0x8ee>
 800d824:	f43f af7d 	beq.w	800d722 <_dtoa_r+0x802>
 800d828:	4618      	mov	r0, r3
 800d82a:	301c      	adds	r0, #28
 800d82c:	e772      	b.n	800d714 <_dtoa_r+0x7f4>
 800d82e:	9b03      	ldr	r3, [sp, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	dc37      	bgt.n	800d8a4 <_dtoa_r+0x984>
 800d834:	9b06      	ldr	r3, [sp, #24]
 800d836:	2b02      	cmp	r3, #2
 800d838:	dd34      	ble.n	800d8a4 <_dtoa_r+0x984>
 800d83a:	9b03      	ldr	r3, [sp, #12]
 800d83c:	9302      	str	r3, [sp, #8]
 800d83e:	9b02      	ldr	r3, [sp, #8]
 800d840:	b96b      	cbnz	r3, 800d85e <_dtoa_r+0x93e>
 800d842:	4631      	mov	r1, r6
 800d844:	2205      	movs	r2, #5
 800d846:	4620      	mov	r0, r4
 800d848:	f000 fd68 	bl	800e31c <__multadd>
 800d84c:	4601      	mov	r1, r0
 800d84e:	4606      	mov	r6, r0
 800d850:	ee18 0a10 	vmov	r0, s16
 800d854:	f000 ffcc 	bl	800e7f0 <__mcmp>
 800d858:	2800      	cmp	r0, #0
 800d85a:	f73f adbb 	bgt.w	800d3d4 <_dtoa_r+0x4b4>
 800d85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d860:	9d01      	ldr	r5, [sp, #4]
 800d862:	43db      	mvns	r3, r3
 800d864:	9300      	str	r3, [sp, #0]
 800d866:	f04f 0800 	mov.w	r8, #0
 800d86a:	4631      	mov	r1, r6
 800d86c:	4620      	mov	r0, r4
 800d86e:	f000 fd33 	bl	800e2d8 <_Bfree>
 800d872:	2f00      	cmp	r7, #0
 800d874:	f43f aea4 	beq.w	800d5c0 <_dtoa_r+0x6a0>
 800d878:	f1b8 0f00 	cmp.w	r8, #0
 800d87c:	d005      	beq.n	800d88a <_dtoa_r+0x96a>
 800d87e:	45b8      	cmp	r8, r7
 800d880:	d003      	beq.n	800d88a <_dtoa_r+0x96a>
 800d882:	4641      	mov	r1, r8
 800d884:	4620      	mov	r0, r4
 800d886:	f000 fd27 	bl	800e2d8 <_Bfree>
 800d88a:	4639      	mov	r1, r7
 800d88c:	4620      	mov	r0, r4
 800d88e:	f000 fd23 	bl	800e2d8 <_Bfree>
 800d892:	e695      	b.n	800d5c0 <_dtoa_r+0x6a0>
 800d894:	2600      	movs	r6, #0
 800d896:	4637      	mov	r7, r6
 800d898:	e7e1      	b.n	800d85e <_dtoa_r+0x93e>
 800d89a:	9700      	str	r7, [sp, #0]
 800d89c:	4637      	mov	r7, r6
 800d89e:	e599      	b.n	800d3d4 <_dtoa_r+0x4b4>
 800d8a0:	40240000 	.word	0x40240000
 800d8a4:	9b08      	ldr	r3, [sp, #32]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f000 80ca 	beq.w	800da40 <_dtoa_r+0xb20>
 800d8ac:	9b03      	ldr	r3, [sp, #12]
 800d8ae:	9302      	str	r3, [sp, #8]
 800d8b0:	2d00      	cmp	r5, #0
 800d8b2:	dd05      	ble.n	800d8c0 <_dtoa_r+0x9a0>
 800d8b4:	4639      	mov	r1, r7
 800d8b6:	462a      	mov	r2, r5
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f000 ff29 	bl	800e710 <__lshift>
 800d8be:	4607      	mov	r7, r0
 800d8c0:	f1b8 0f00 	cmp.w	r8, #0
 800d8c4:	d05b      	beq.n	800d97e <_dtoa_r+0xa5e>
 800d8c6:	6879      	ldr	r1, [r7, #4]
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	f000 fcc5 	bl	800e258 <_Balloc>
 800d8ce:	4605      	mov	r5, r0
 800d8d0:	b928      	cbnz	r0, 800d8de <_dtoa_r+0x9be>
 800d8d2:	4b87      	ldr	r3, [pc, #540]	; (800daf0 <_dtoa_r+0xbd0>)
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d8da:	f7ff bb3b 	b.w	800cf54 <_dtoa_r+0x34>
 800d8de:	693a      	ldr	r2, [r7, #16]
 800d8e0:	3202      	adds	r2, #2
 800d8e2:	0092      	lsls	r2, r2, #2
 800d8e4:	f107 010c 	add.w	r1, r7, #12
 800d8e8:	300c      	adds	r0, #12
 800d8ea:	f000 fca7 	bl	800e23c <memcpy>
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f000 ff0c 	bl	800e710 <__lshift>
 800d8f8:	9b01      	ldr	r3, [sp, #4]
 800d8fa:	f103 0901 	add.w	r9, r3, #1
 800d8fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d902:	4413      	add	r3, r2
 800d904:	9305      	str	r3, [sp, #20]
 800d906:	f00a 0301 	and.w	r3, sl, #1
 800d90a:	46b8      	mov	r8, r7
 800d90c:	9304      	str	r3, [sp, #16]
 800d90e:	4607      	mov	r7, r0
 800d910:	4631      	mov	r1, r6
 800d912:	ee18 0a10 	vmov	r0, s16
 800d916:	f7ff fa75 	bl	800ce04 <quorem>
 800d91a:	4641      	mov	r1, r8
 800d91c:	9002      	str	r0, [sp, #8]
 800d91e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d922:	ee18 0a10 	vmov	r0, s16
 800d926:	f000 ff63 	bl	800e7f0 <__mcmp>
 800d92a:	463a      	mov	r2, r7
 800d92c:	9003      	str	r0, [sp, #12]
 800d92e:	4631      	mov	r1, r6
 800d930:	4620      	mov	r0, r4
 800d932:	f000 ff79 	bl	800e828 <__mdiff>
 800d936:	68c2      	ldr	r2, [r0, #12]
 800d938:	f109 3bff 	add.w	fp, r9, #4294967295
 800d93c:	4605      	mov	r5, r0
 800d93e:	bb02      	cbnz	r2, 800d982 <_dtoa_r+0xa62>
 800d940:	4601      	mov	r1, r0
 800d942:	ee18 0a10 	vmov	r0, s16
 800d946:	f000 ff53 	bl	800e7f0 <__mcmp>
 800d94a:	4602      	mov	r2, r0
 800d94c:	4629      	mov	r1, r5
 800d94e:	4620      	mov	r0, r4
 800d950:	9207      	str	r2, [sp, #28]
 800d952:	f000 fcc1 	bl	800e2d8 <_Bfree>
 800d956:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d95a:	ea43 0102 	orr.w	r1, r3, r2
 800d95e:	9b04      	ldr	r3, [sp, #16]
 800d960:	430b      	orrs	r3, r1
 800d962:	464d      	mov	r5, r9
 800d964:	d10f      	bne.n	800d986 <_dtoa_r+0xa66>
 800d966:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d96a:	d02a      	beq.n	800d9c2 <_dtoa_r+0xaa2>
 800d96c:	9b03      	ldr	r3, [sp, #12]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	dd02      	ble.n	800d978 <_dtoa_r+0xa58>
 800d972:	9b02      	ldr	r3, [sp, #8]
 800d974:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d978:	f88b a000 	strb.w	sl, [fp]
 800d97c:	e775      	b.n	800d86a <_dtoa_r+0x94a>
 800d97e:	4638      	mov	r0, r7
 800d980:	e7ba      	b.n	800d8f8 <_dtoa_r+0x9d8>
 800d982:	2201      	movs	r2, #1
 800d984:	e7e2      	b.n	800d94c <_dtoa_r+0xa2c>
 800d986:	9b03      	ldr	r3, [sp, #12]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	db04      	blt.n	800d996 <_dtoa_r+0xa76>
 800d98c:	9906      	ldr	r1, [sp, #24]
 800d98e:	430b      	orrs	r3, r1
 800d990:	9904      	ldr	r1, [sp, #16]
 800d992:	430b      	orrs	r3, r1
 800d994:	d122      	bne.n	800d9dc <_dtoa_r+0xabc>
 800d996:	2a00      	cmp	r2, #0
 800d998:	ddee      	ble.n	800d978 <_dtoa_r+0xa58>
 800d99a:	ee18 1a10 	vmov	r1, s16
 800d99e:	2201      	movs	r2, #1
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f000 feb5 	bl	800e710 <__lshift>
 800d9a6:	4631      	mov	r1, r6
 800d9a8:	ee08 0a10 	vmov	s16, r0
 800d9ac:	f000 ff20 	bl	800e7f0 <__mcmp>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	dc03      	bgt.n	800d9bc <_dtoa_r+0xa9c>
 800d9b4:	d1e0      	bne.n	800d978 <_dtoa_r+0xa58>
 800d9b6:	f01a 0f01 	tst.w	sl, #1
 800d9ba:	d0dd      	beq.n	800d978 <_dtoa_r+0xa58>
 800d9bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d9c0:	d1d7      	bne.n	800d972 <_dtoa_r+0xa52>
 800d9c2:	2339      	movs	r3, #57	; 0x39
 800d9c4:	f88b 3000 	strb.w	r3, [fp]
 800d9c8:	462b      	mov	r3, r5
 800d9ca:	461d      	mov	r5, r3
 800d9cc:	3b01      	subs	r3, #1
 800d9ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d9d2:	2a39      	cmp	r2, #57	; 0x39
 800d9d4:	d071      	beq.n	800daba <_dtoa_r+0xb9a>
 800d9d6:	3201      	adds	r2, #1
 800d9d8:	701a      	strb	r2, [r3, #0]
 800d9da:	e746      	b.n	800d86a <_dtoa_r+0x94a>
 800d9dc:	2a00      	cmp	r2, #0
 800d9de:	dd07      	ble.n	800d9f0 <_dtoa_r+0xad0>
 800d9e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d9e4:	d0ed      	beq.n	800d9c2 <_dtoa_r+0xaa2>
 800d9e6:	f10a 0301 	add.w	r3, sl, #1
 800d9ea:	f88b 3000 	strb.w	r3, [fp]
 800d9ee:	e73c      	b.n	800d86a <_dtoa_r+0x94a>
 800d9f0:	9b05      	ldr	r3, [sp, #20]
 800d9f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d9f6:	4599      	cmp	r9, r3
 800d9f8:	d047      	beq.n	800da8a <_dtoa_r+0xb6a>
 800d9fa:	ee18 1a10 	vmov	r1, s16
 800d9fe:	2300      	movs	r3, #0
 800da00:	220a      	movs	r2, #10
 800da02:	4620      	mov	r0, r4
 800da04:	f000 fc8a 	bl	800e31c <__multadd>
 800da08:	45b8      	cmp	r8, r7
 800da0a:	ee08 0a10 	vmov	s16, r0
 800da0e:	f04f 0300 	mov.w	r3, #0
 800da12:	f04f 020a 	mov.w	r2, #10
 800da16:	4641      	mov	r1, r8
 800da18:	4620      	mov	r0, r4
 800da1a:	d106      	bne.n	800da2a <_dtoa_r+0xb0a>
 800da1c:	f000 fc7e 	bl	800e31c <__multadd>
 800da20:	4680      	mov	r8, r0
 800da22:	4607      	mov	r7, r0
 800da24:	f109 0901 	add.w	r9, r9, #1
 800da28:	e772      	b.n	800d910 <_dtoa_r+0x9f0>
 800da2a:	f000 fc77 	bl	800e31c <__multadd>
 800da2e:	4639      	mov	r1, r7
 800da30:	4680      	mov	r8, r0
 800da32:	2300      	movs	r3, #0
 800da34:	220a      	movs	r2, #10
 800da36:	4620      	mov	r0, r4
 800da38:	f000 fc70 	bl	800e31c <__multadd>
 800da3c:	4607      	mov	r7, r0
 800da3e:	e7f1      	b.n	800da24 <_dtoa_r+0xb04>
 800da40:	9b03      	ldr	r3, [sp, #12]
 800da42:	9302      	str	r3, [sp, #8]
 800da44:	9d01      	ldr	r5, [sp, #4]
 800da46:	ee18 0a10 	vmov	r0, s16
 800da4a:	4631      	mov	r1, r6
 800da4c:	f7ff f9da 	bl	800ce04 <quorem>
 800da50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800da54:	9b01      	ldr	r3, [sp, #4]
 800da56:	f805 ab01 	strb.w	sl, [r5], #1
 800da5a:	1aea      	subs	r2, r5, r3
 800da5c:	9b02      	ldr	r3, [sp, #8]
 800da5e:	4293      	cmp	r3, r2
 800da60:	dd09      	ble.n	800da76 <_dtoa_r+0xb56>
 800da62:	ee18 1a10 	vmov	r1, s16
 800da66:	2300      	movs	r3, #0
 800da68:	220a      	movs	r2, #10
 800da6a:	4620      	mov	r0, r4
 800da6c:	f000 fc56 	bl	800e31c <__multadd>
 800da70:	ee08 0a10 	vmov	s16, r0
 800da74:	e7e7      	b.n	800da46 <_dtoa_r+0xb26>
 800da76:	9b02      	ldr	r3, [sp, #8]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	bfc8      	it	gt
 800da7c:	461d      	movgt	r5, r3
 800da7e:	9b01      	ldr	r3, [sp, #4]
 800da80:	bfd8      	it	le
 800da82:	2501      	movle	r5, #1
 800da84:	441d      	add	r5, r3
 800da86:	f04f 0800 	mov.w	r8, #0
 800da8a:	ee18 1a10 	vmov	r1, s16
 800da8e:	2201      	movs	r2, #1
 800da90:	4620      	mov	r0, r4
 800da92:	f000 fe3d 	bl	800e710 <__lshift>
 800da96:	4631      	mov	r1, r6
 800da98:	ee08 0a10 	vmov	s16, r0
 800da9c:	f000 fea8 	bl	800e7f0 <__mcmp>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	dc91      	bgt.n	800d9c8 <_dtoa_r+0xaa8>
 800daa4:	d102      	bne.n	800daac <_dtoa_r+0xb8c>
 800daa6:	f01a 0f01 	tst.w	sl, #1
 800daaa:	d18d      	bne.n	800d9c8 <_dtoa_r+0xaa8>
 800daac:	462b      	mov	r3, r5
 800daae:	461d      	mov	r5, r3
 800dab0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dab4:	2a30      	cmp	r2, #48	; 0x30
 800dab6:	d0fa      	beq.n	800daae <_dtoa_r+0xb8e>
 800dab8:	e6d7      	b.n	800d86a <_dtoa_r+0x94a>
 800daba:	9a01      	ldr	r2, [sp, #4]
 800dabc:	429a      	cmp	r2, r3
 800dabe:	d184      	bne.n	800d9ca <_dtoa_r+0xaaa>
 800dac0:	9b00      	ldr	r3, [sp, #0]
 800dac2:	3301      	adds	r3, #1
 800dac4:	9300      	str	r3, [sp, #0]
 800dac6:	2331      	movs	r3, #49	; 0x31
 800dac8:	7013      	strb	r3, [r2, #0]
 800daca:	e6ce      	b.n	800d86a <_dtoa_r+0x94a>
 800dacc:	4b09      	ldr	r3, [pc, #36]	; (800daf4 <_dtoa_r+0xbd4>)
 800dace:	f7ff ba95 	b.w	800cffc <_dtoa_r+0xdc>
 800dad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f47f aa6e 	bne.w	800cfb6 <_dtoa_r+0x96>
 800dada:	4b07      	ldr	r3, [pc, #28]	; (800daf8 <_dtoa_r+0xbd8>)
 800dadc:	f7ff ba8e 	b.w	800cffc <_dtoa_r+0xdc>
 800dae0:	9b02      	ldr	r3, [sp, #8]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	dcae      	bgt.n	800da44 <_dtoa_r+0xb24>
 800dae6:	9b06      	ldr	r3, [sp, #24]
 800dae8:	2b02      	cmp	r3, #2
 800daea:	f73f aea8 	bgt.w	800d83e <_dtoa_r+0x91e>
 800daee:	e7a9      	b.n	800da44 <_dtoa_r+0xb24>
 800daf0:	08010dd1 	.word	0x08010dd1
 800daf4:	08010b3c 	.word	0x08010b3c
 800daf8:	08010d69 	.word	0x08010d69

0800dafc <fiprintf>:
 800dafc:	b40e      	push	{r1, r2, r3}
 800dafe:	b503      	push	{r0, r1, lr}
 800db00:	4601      	mov	r1, r0
 800db02:	ab03      	add	r3, sp, #12
 800db04:	4805      	ldr	r0, [pc, #20]	; (800db1c <fiprintf+0x20>)
 800db06:	f853 2b04 	ldr.w	r2, [r3], #4
 800db0a:	6800      	ldr	r0, [r0, #0]
 800db0c:	9301      	str	r3, [sp, #4]
 800db0e:	f001 fae1 	bl	800f0d4 <_vfiprintf_r>
 800db12:	b002      	add	sp, #8
 800db14:	f85d eb04 	ldr.w	lr, [sp], #4
 800db18:	b003      	add	sp, #12
 800db1a:	4770      	bx	lr
 800db1c:	2000001c 	.word	0x2000001c

0800db20 <rshift>:
 800db20:	6903      	ldr	r3, [r0, #16]
 800db22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800db26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800db2e:	f100 0414 	add.w	r4, r0, #20
 800db32:	dd45      	ble.n	800dbc0 <rshift+0xa0>
 800db34:	f011 011f 	ands.w	r1, r1, #31
 800db38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800db3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800db40:	d10c      	bne.n	800db5c <rshift+0x3c>
 800db42:	f100 0710 	add.w	r7, r0, #16
 800db46:	4629      	mov	r1, r5
 800db48:	42b1      	cmp	r1, r6
 800db4a:	d334      	bcc.n	800dbb6 <rshift+0x96>
 800db4c:	1a9b      	subs	r3, r3, r2
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	1eea      	subs	r2, r5, #3
 800db52:	4296      	cmp	r6, r2
 800db54:	bf38      	it	cc
 800db56:	2300      	movcc	r3, #0
 800db58:	4423      	add	r3, r4
 800db5a:	e015      	b.n	800db88 <rshift+0x68>
 800db5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800db60:	f1c1 0820 	rsb	r8, r1, #32
 800db64:	40cf      	lsrs	r7, r1
 800db66:	f105 0e04 	add.w	lr, r5, #4
 800db6a:	46a1      	mov	r9, r4
 800db6c:	4576      	cmp	r6, lr
 800db6e:	46f4      	mov	ip, lr
 800db70:	d815      	bhi.n	800db9e <rshift+0x7e>
 800db72:	1a9a      	subs	r2, r3, r2
 800db74:	0092      	lsls	r2, r2, #2
 800db76:	3a04      	subs	r2, #4
 800db78:	3501      	adds	r5, #1
 800db7a:	42ae      	cmp	r6, r5
 800db7c:	bf38      	it	cc
 800db7e:	2200      	movcc	r2, #0
 800db80:	18a3      	adds	r3, r4, r2
 800db82:	50a7      	str	r7, [r4, r2]
 800db84:	b107      	cbz	r7, 800db88 <rshift+0x68>
 800db86:	3304      	adds	r3, #4
 800db88:	1b1a      	subs	r2, r3, r4
 800db8a:	42a3      	cmp	r3, r4
 800db8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800db90:	bf08      	it	eq
 800db92:	2300      	moveq	r3, #0
 800db94:	6102      	str	r2, [r0, #16]
 800db96:	bf08      	it	eq
 800db98:	6143      	streq	r3, [r0, #20]
 800db9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db9e:	f8dc c000 	ldr.w	ip, [ip]
 800dba2:	fa0c fc08 	lsl.w	ip, ip, r8
 800dba6:	ea4c 0707 	orr.w	r7, ip, r7
 800dbaa:	f849 7b04 	str.w	r7, [r9], #4
 800dbae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dbb2:	40cf      	lsrs	r7, r1
 800dbb4:	e7da      	b.n	800db6c <rshift+0x4c>
 800dbb6:	f851 cb04 	ldr.w	ip, [r1], #4
 800dbba:	f847 cf04 	str.w	ip, [r7, #4]!
 800dbbe:	e7c3      	b.n	800db48 <rshift+0x28>
 800dbc0:	4623      	mov	r3, r4
 800dbc2:	e7e1      	b.n	800db88 <rshift+0x68>

0800dbc4 <__hexdig_fun>:
 800dbc4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dbc8:	2b09      	cmp	r3, #9
 800dbca:	d802      	bhi.n	800dbd2 <__hexdig_fun+0xe>
 800dbcc:	3820      	subs	r0, #32
 800dbce:	b2c0      	uxtb	r0, r0
 800dbd0:	4770      	bx	lr
 800dbd2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dbd6:	2b05      	cmp	r3, #5
 800dbd8:	d801      	bhi.n	800dbde <__hexdig_fun+0x1a>
 800dbda:	3847      	subs	r0, #71	; 0x47
 800dbdc:	e7f7      	b.n	800dbce <__hexdig_fun+0xa>
 800dbde:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dbe2:	2b05      	cmp	r3, #5
 800dbe4:	d801      	bhi.n	800dbea <__hexdig_fun+0x26>
 800dbe6:	3827      	subs	r0, #39	; 0x27
 800dbe8:	e7f1      	b.n	800dbce <__hexdig_fun+0xa>
 800dbea:	2000      	movs	r0, #0
 800dbec:	4770      	bx	lr
	...

0800dbf0 <__gethex>:
 800dbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf4:	ed2d 8b02 	vpush	{d8}
 800dbf8:	b089      	sub	sp, #36	; 0x24
 800dbfa:	ee08 0a10 	vmov	s16, r0
 800dbfe:	9304      	str	r3, [sp, #16]
 800dc00:	4bb4      	ldr	r3, [pc, #720]	; (800ded4 <__gethex+0x2e4>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	9301      	str	r3, [sp, #4]
 800dc06:	4618      	mov	r0, r3
 800dc08:	468b      	mov	fp, r1
 800dc0a:	4690      	mov	r8, r2
 800dc0c:	f7f2 faf2 	bl	80001f4 <strlen>
 800dc10:	9b01      	ldr	r3, [sp, #4]
 800dc12:	f8db 2000 	ldr.w	r2, [fp]
 800dc16:	4403      	add	r3, r0
 800dc18:	4682      	mov	sl, r0
 800dc1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dc1e:	9305      	str	r3, [sp, #20]
 800dc20:	1c93      	adds	r3, r2, #2
 800dc22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dc26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dc2a:	32fe      	adds	r2, #254	; 0xfe
 800dc2c:	18d1      	adds	r1, r2, r3
 800dc2e:	461f      	mov	r7, r3
 800dc30:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dc34:	9100      	str	r1, [sp, #0]
 800dc36:	2830      	cmp	r0, #48	; 0x30
 800dc38:	d0f8      	beq.n	800dc2c <__gethex+0x3c>
 800dc3a:	f7ff ffc3 	bl	800dbc4 <__hexdig_fun>
 800dc3e:	4604      	mov	r4, r0
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d13a      	bne.n	800dcba <__gethex+0xca>
 800dc44:	9901      	ldr	r1, [sp, #4]
 800dc46:	4652      	mov	r2, sl
 800dc48:	4638      	mov	r0, r7
 800dc4a:	f001 fb8d 	bl	800f368 <strncmp>
 800dc4e:	4605      	mov	r5, r0
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d168      	bne.n	800dd26 <__gethex+0x136>
 800dc54:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dc58:	eb07 060a 	add.w	r6, r7, sl
 800dc5c:	f7ff ffb2 	bl	800dbc4 <__hexdig_fun>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d062      	beq.n	800dd2a <__gethex+0x13a>
 800dc64:	4633      	mov	r3, r6
 800dc66:	7818      	ldrb	r0, [r3, #0]
 800dc68:	2830      	cmp	r0, #48	; 0x30
 800dc6a:	461f      	mov	r7, r3
 800dc6c:	f103 0301 	add.w	r3, r3, #1
 800dc70:	d0f9      	beq.n	800dc66 <__gethex+0x76>
 800dc72:	f7ff ffa7 	bl	800dbc4 <__hexdig_fun>
 800dc76:	2301      	movs	r3, #1
 800dc78:	fab0 f480 	clz	r4, r0
 800dc7c:	0964      	lsrs	r4, r4, #5
 800dc7e:	4635      	mov	r5, r6
 800dc80:	9300      	str	r3, [sp, #0]
 800dc82:	463a      	mov	r2, r7
 800dc84:	4616      	mov	r6, r2
 800dc86:	3201      	adds	r2, #1
 800dc88:	7830      	ldrb	r0, [r6, #0]
 800dc8a:	f7ff ff9b 	bl	800dbc4 <__hexdig_fun>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	d1f8      	bne.n	800dc84 <__gethex+0x94>
 800dc92:	9901      	ldr	r1, [sp, #4]
 800dc94:	4652      	mov	r2, sl
 800dc96:	4630      	mov	r0, r6
 800dc98:	f001 fb66 	bl	800f368 <strncmp>
 800dc9c:	b980      	cbnz	r0, 800dcc0 <__gethex+0xd0>
 800dc9e:	b94d      	cbnz	r5, 800dcb4 <__gethex+0xc4>
 800dca0:	eb06 050a 	add.w	r5, r6, sl
 800dca4:	462a      	mov	r2, r5
 800dca6:	4616      	mov	r6, r2
 800dca8:	3201      	adds	r2, #1
 800dcaa:	7830      	ldrb	r0, [r6, #0]
 800dcac:	f7ff ff8a 	bl	800dbc4 <__hexdig_fun>
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	d1f8      	bne.n	800dca6 <__gethex+0xb6>
 800dcb4:	1bad      	subs	r5, r5, r6
 800dcb6:	00ad      	lsls	r5, r5, #2
 800dcb8:	e004      	b.n	800dcc4 <__gethex+0xd4>
 800dcba:	2400      	movs	r4, #0
 800dcbc:	4625      	mov	r5, r4
 800dcbe:	e7e0      	b.n	800dc82 <__gethex+0x92>
 800dcc0:	2d00      	cmp	r5, #0
 800dcc2:	d1f7      	bne.n	800dcb4 <__gethex+0xc4>
 800dcc4:	7833      	ldrb	r3, [r6, #0]
 800dcc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dcca:	2b50      	cmp	r3, #80	; 0x50
 800dccc:	d13b      	bne.n	800dd46 <__gethex+0x156>
 800dcce:	7873      	ldrb	r3, [r6, #1]
 800dcd0:	2b2b      	cmp	r3, #43	; 0x2b
 800dcd2:	d02c      	beq.n	800dd2e <__gethex+0x13e>
 800dcd4:	2b2d      	cmp	r3, #45	; 0x2d
 800dcd6:	d02e      	beq.n	800dd36 <__gethex+0x146>
 800dcd8:	1c71      	adds	r1, r6, #1
 800dcda:	f04f 0900 	mov.w	r9, #0
 800dcde:	7808      	ldrb	r0, [r1, #0]
 800dce0:	f7ff ff70 	bl	800dbc4 <__hexdig_fun>
 800dce4:	1e43      	subs	r3, r0, #1
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	2b18      	cmp	r3, #24
 800dcea:	d82c      	bhi.n	800dd46 <__gethex+0x156>
 800dcec:	f1a0 0210 	sub.w	r2, r0, #16
 800dcf0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dcf4:	f7ff ff66 	bl	800dbc4 <__hexdig_fun>
 800dcf8:	1e43      	subs	r3, r0, #1
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	2b18      	cmp	r3, #24
 800dcfe:	d91d      	bls.n	800dd3c <__gethex+0x14c>
 800dd00:	f1b9 0f00 	cmp.w	r9, #0
 800dd04:	d000      	beq.n	800dd08 <__gethex+0x118>
 800dd06:	4252      	negs	r2, r2
 800dd08:	4415      	add	r5, r2
 800dd0a:	f8cb 1000 	str.w	r1, [fp]
 800dd0e:	b1e4      	cbz	r4, 800dd4a <__gethex+0x15a>
 800dd10:	9b00      	ldr	r3, [sp, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	bf14      	ite	ne
 800dd16:	2700      	movne	r7, #0
 800dd18:	2706      	moveq	r7, #6
 800dd1a:	4638      	mov	r0, r7
 800dd1c:	b009      	add	sp, #36	; 0x24
 800dd1e:	ecbd 8b02 	vpop	{d8}
 800dd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd26:	463e      	mov	r6, r7
 800dd28:	4625      	mov	r5, r4
 800dd2a:	2401      	movs	r4, #1
 800dd2c:	e7ca      	b.n	800dcc4 <__gethex+0xd4>
 800dd2e:	f04f 0900 	mov.w	r9, #0
 800dd32:	1cb1      	adds	r1, r6, #2
 800dd34:	e7d3      	b.n	800dcde <__gethex+0xee>
 800dd36:	f04f 0901 	mov.w	r9, #1
 800dd3a:	e7fa      	b.n	800dd32 <__gethex+0x142>
 800dd3c:	230a      	movs	r3, #10
 800dd3e:	fb03 0202 	mla	r2, r3, r2, r0
 800dd42:	3a10      	subs	r2, #16
 800dd44:	e7d4      	b.n	800dcf0 <__gethex+0x100>
 800dd46:	4631      	mov	r1, r6
 800dd48:	e7df      	b.n	800dd0a <__gethex+0x11a>
 800dd4a:	1bf3      	subs	r3, r6, r7
 800dd4c:	3b01      	subs	r3, #1
 800dd4e:	4621      	mov	r1, r4
 800dd50:	2b07      	cmp	r3, #7
 800dd52:	dc0b      	bgt.n	800dd6c <__gethex+0x17c>
 800dd54:	ee18 0a10 	vmov	r0, s16
 800dd58:	f000 fa7e 	bl	800e258 <_Balloc>
 800dd5c:	4604      	mov	r4, r0
 800dd5e:	b940      	cbnz	r0, 800dd72 <__gethex+0x182>
 800dd60:	4b5d      	ldr	r3, [pc, #372]	; (800ded8 <__gethex+0x2e8>)
 800dd62:	4602      	mov	r2, r0
 800dd64:	21de      	movs	r1, #222	; 0xde
 800dd66:	485d      	ldr	r0, [pc, #372]	; (800dedc <__gethex+0x2ec>)
 800dd68:	f7ff f82e 	bl	800cdc8 <__assert_func>
 800dd6c:	3101      	adds	r1, #1
 800dd6e:	105b      	asrs	r3, r3, #1
 800dd70:	e7ee      	b.n	800dd50 <__gethex+0x160>
 800dd72:	f100 0914 	add.w	r9, r0, #20
 800dd76:	f04f 0b00 	mov.w	fp, #0
 800dd7a:	f1ca 0301 	rsb	r3, sl, #1
 800dd7e:	f8cd 9008 	str.w	r9, [sp, #8]
 800dd82:	f8cd b000 	str.w	fp, [sp]
 800dd86:	9306      	str	r3, [sp, #24]
 800dd88:	42b7      	cmp	r7, r6
 800dd8a:	d340      	bcc.n	800de0e <__gethex+0x21e>
 800dd8c:	9802      	ldr	r0, [sp, #8]
 800dd8e:	9b00      	ldr	r3, [sp, #0]
 800dd90:	f840 3b04 	str.w	r3, [r0], #4
 800dd94:	eba0 0009 	sub.w	r0, r0, r9
 800dd98:	1080      	asrs	r0, r0, #2
 800dd9a:	0146      	lsls	r6, r0, #5
 800dd9c:	6120      	str	r0, [r4, #16]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f000 fb4c 	bl	800e43c <__hi0bits>
 800dda4:	1a30      	subs	r0, r6, r0
 800dda6:	f8d8 6000 	ldr.w	r6, [r8]
 800ddaa:	42b0      	cmp	r0, r6
 800ddac:	dd63      	ble.n	800de76 <__gethex+0x286>
 800ddae:	1b87      	subs	r7, r0, r6
 800ddb0:	4639      	mov	r1, r7
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	f000 fef0 	bl	800eb98 <__any_on>
 800ddb8:	4682      	mov	sl, r0
 800ddba:	b1a8      	cbz	r0, 800dde8 <__gethex+0x1f8>
 800ddbc:	1e7b      	subs	r3, r7, #1
 800ddbe:	1159      	asrs	r1, r3, #5
 800ddc0:	f003 021f 	and.w	r2, r3, #31
 800ddc4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ddc8:	f04f 0a01 	mov.w	sl, #1
 800ddcc:	fa0a f202 	lsl.w	r2, sl, r2
 800ddd0:	420a      	tst	r2, r1
 800ddd2:	d009      	beq.n	800dde8 <__gethex+0x1f8>
 800ddd4:	4553      	cmp	r3, sl
 800ddd6:	dd05      	ble.n	800dde4 <__gethex+0x1f4>
 800ddd8:	1eb9      	subs	r1, r7, #2
 800ddda:	4620      	mov	r0, r4
 800dddc:	f000 fedc 	bl	800eb98 <__any_on>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	d145      	bne.n	800de70 <__gethex+0x280>
 800dde4:	f04f 0a02 	mov.w	sl, #2
 800dde8:	4639      	mov	r1, r7
 800ddea:	4620      	mov	r0, r4
 800ddec:	f7ff fe98 	bl	800db20 <rshift>
 800ddf0:	443d      	add	r5, r7
 800ddf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddf6:	42ab      	cmp	r3, r5
 800ddf8:	da4c      	bge.n	800de94 <__gethex+0x2a4>
 800ddfa:	ee18 0a10 	vmov	r0, s16
 800ddfe:	4621      	mov	r1, r4
 800de00:	f000 fa6a 	bl	800e2d8 <_Bfree>
 800de04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800de06:	2300      	movs	r3, #0
 800de08:	6013      	str	r3, [r2, #0]
 800de0a:	27a3      	movs	r7, #163	; 0xa3
 800de0c:	e785      	b.n	800dd1a <__gethex+0x12a>
 800de0e:	1e73      	subs	r3, r6, #1
 800de10:	9a05      	ldr	r2, [sp, #20]
 800de12:	9303      	str	r3, [sp, #12]
 800de14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800de18:	4293      	cmp	r3, r2
 800de1a:	d019      	beq.n	800de50 <__gethex+0x260>
 800de1c:	f1bb 0f20 	cmp.w	fp, #32
 800de20:	d107      	bne.n	800de32 <__gethex+0x242>
 800de22:	9b02      	ldr	r3, [sp, #8]
 800de24:	9a00      	ldr	r2, [sp, #0]
 800de26:	f843 2b04 	str.w	r2, [r3], #4
 800de2a:	9302      	str	r3, [sp, #8]
 800de2c:	2300      	movs	r3, #0
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	469b      	mov	fp, r3
 800de32:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800de36:	f7ff fec5 	bl	800dbc4 <__hexdig_fun>
 800de3a:	9b00      	ldr	r3, [sp, #0]
 800de3c:	f000 000f 	and.w	r0, r0, #15
 800de40:	fa00 f00b 	lsl.w	r0, r0, fp
 800de44:	4303      	orrs	r3, r0
 800de46:	9300      	str	r3, [sp, #0]
 800de48:	f10b 0b04 	add.w	fp, fp, #4
 800de4c:	9b03      	ldr	r3, [sp, #12]
 800de4e:	e00d      	b.n	800de6c <__gethex+0x27c>
 800de50:	9b03      	ldr	r3, [sp, #12]
 800de52:	9a06      	ldr	r2, [sp, #24]
 800de54:	4413      	add	r3, r2
 800de56:	42bb      	cmp	r3, r7
 800de58:	d3e0      	bcc.n	800de1c <__gethex+0x22c>
 800de5a:	4618      	mov	r0, r3
 800de5c:	9901      	ldr	r1, [sp, #4]
 800de5e:	9307      	str	r3, [sp, #28]
 800de60:	4652      	mov	r2, sl
 800de62:	f001 fa81 	bl	800f368 <strncmp>
 800de66:	9b07      	ldr	r3, [sp, #28]
 800de68:	2800      	cmp	r0, #0
 800de6a:	d1d7      	bne.n	800de1c <__gethex+0x22c>
 800de6c:	461e      	mov	r6, r3
 800de6e:	e78b      	b.n	800dd88 <__gethex+0x198>
 800de70:	f04f 0a03 	mov.w	sl, #3
 800de74:	e7b8      	b.n	800dde8 <__gethex+0x1f8>
 800de76:	da0a      	bge.n	800de8e <__gethex+0x29e>
 800de78:	1a37      	subs	r7, r6, r0
 800de7a:	4621      	mov	r1, r4
 800de7c:	ee18 0a10 	vmov	r0, s16
 800de80:	463a      	mov	r2, r7
 800de82:	f000 fc45 	bl	800e710 <__lshift>
 800de86:	1bed      	subs	r5, r5, r7
 800de88:	4604      	mov	r4, r0
 800de8a:	f100 0914 	add.w	r9, r0, #20
 800de8e:	f04f 0a00 	mov.w	sl, #0
 800de92:	e7ae      	b.n	800ddf2 <__gethex+0x202>
 800de94:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800de98:	42a8      	cmp	r0, r5
 800de9a:	dd72      	ble.n	800df82 <__gethex+0x392>
 800de9c:	1b45      	subs	r5, r0, r5
 800de9e:	42ae      	cmp	r6, r5
 800dea0:	dc36      	bgt.n	800df10 <__gethex+0x320>
 800dea2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dea6:	2b02      	cmp	r3, #2
 800dea8:	d02a      	beq.n	800df00 <__gethex+0x310>
 800deaa:	2b03      	cmp	r3, #3
 800deac:	d02c      	beq.n	800df08 <__gethex+0x318>
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d11c      	bne.n	800deec <__gethex+0x2fc>
 800deb2:	42ae      	cmp	r6, r5
 800deb4:	d11a      	bne.n	800deec <__gethex+0x2fc>
 800deb6:	2e01      	cmp	r6, #1
 800deb8:	d112      	bne.n	800dee0 <__gethex+0x2f0>
 800deba:	9a04      	ldr	r2, [sp, #16]
 800debc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dec0:	6013      	str	r3, [r2, #0]
 800dec2:	2301      	movs	r3, #1
 800dec4:	6123      	str	r3, [r4, #16]
 800dec6:	f8c9 3000 	str.w	r3, [r9]
 800deca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800decc:	2762      	movs	r7, #98	; 0x62
 800dece:	601c      	str	r4, [r3, #0]
 800ded0:	e723      	b.n	800dd1a <__gethex+0x12a>
 800ded2:	bf00      	nop
 800ded4:	08010e48 	.word	0x08010e48
 800ded8:	08010dd1 	.word	0x08010dd1
 800dedc:	08010de2 	.word	0x08010de2
 800dee0:	1e71      	subs	r1, r6, #1
 800dee2:	4620      	mov	r0, r4
 800dee4:	f000 fe58 	bl	800eb98 <__any_on>
 800dee8:	2800      	cmp	r0, #0
 800deea:	d1e6      	bne.n	800deba <__gethex+0x2ca>
 800deec:	ee18 0a10 	vmov	r0, s16
 800def0:	4621      	mov	r1, r4
 800def2:	f000 f9f1 	bl	800e2d8 <_Bfree>
 800def6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800def8:	2300      	movs	r3, #0
 800defa:	6013      	str	r3, [r2, #0]
 800defc:	2750      	movs	r7, #80	; 0x50
 800defe:	e70c      	b.n	800dd1a <__gethex+0x12a>
 800df00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1f2      	bne.n	800deec <__gethex+0x2fc>
 800df06:	e7d8      	b.n	800deba <__gethex+0x2ca>
 800df08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d1d5      	bne.n	800deba <__gethex+0x2ca>
 800df0e:	e7ed      	b.n	800deec <__gethex+0x2fc>
 800df10:	1e6f      	subs	r7, r5, #1
 800df12:	f1ba 0f00 	cmp.w	sl, #0
 800df16:	d131      	bne.n	800df7c <__gethex+0x38c>
 800df18:	b127      	cbz	r7, 800df24 <__gethex+0x334>
 800df1a:	4639      	mov	r1, r7
 800df1c:	4620      	mov	r0, r4
 800df1e:	f000 fe3b 	bl	800eb98 <__any_on>
 800df22:	4682      	mov	sl, r0
 800df24:	117b      	asrs	r3, r7, #5
 800df26:	2101      	movs	r1, #1
 800df28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800df2c:	f007 071f 	and.w	r7, r7, #31
 800df30:	fa01 f707 	lsl.w	r7, r1, r7
 800df34:	421f      	tst	r7, r3
 800df36:	4629      	mov	r1, r5
 800df38:	4620      	mov	r0, r4
 800df3a:	bf18      	it	ne
 800df3c:	f04a 0a02 	orrne.w	sl, sl, #2
 800df40:	1b76      	subs	r6, r6, r5
 800df42:	f7ff fded 	bl	800db20 <rshift>
 800df46:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800df4a:	2702      	movs	r7, #2
 800df4c:	f1ba 0f00 	cmp.w	sl, #0
 800df50:	d048      	beq.n	800dfe4 <__gethex+0x3f4>
 800df52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df56:	2b02      	cmp	r3, #2
 800df58:	d015      	beq.n	800df86 <__gethex+0x396>
 800df5a:	2b03      	cmp	r3, #3
 800df5c:	d017      	beq.n	800df8e <__gethex+0x39e>
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d109      	bne.n	800df76 <__gethex+0x386>
 800df62:	f01a 0f02 	tst.w	sl, #2
 800df66:	d006      	beq.n	800df76 <__gethex+0x386>
 800df68:	f8d9 0000 	ldr.w	r0, [r9]
 800df6c:	ea4a 0a00 	orr.w	sl, sl, r0
 800df70:	f01a 0f01 	tst.w	sl, #1
 800df74:	d10e      	bne.n	800df94 <__gethex+0x3a4>
 800df76:	f047 0710 	orr.w	r7, r7, #16
 800df7a:	e033      	b.n	800dfe4 <__gethex+0x3f4>
 800df7c:	f04f 0a01 	mov.w	sl, #1
 800df80:	e7d0      	b.n	800df24 <__gethex+0x334>
 800df82:	2701      	movs	r7, #1
 800df84:	e7e2      	b.n	800df4c <__gethex+0x35c>
 800df86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df88:	f1c3 0301 	rsb	r3, r3, #1
 800df8c:	9315      	str	r3, [sp, #84]	; 0x54
 800df8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df90:	2b00      	cmp	r3, #0
 800df92:	d0f0      	beq.n	800df76 <__gethex+0x386>
 800df94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800df98:	f104 0314 	add.w	r3, r4, #20
 800df9c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dfa0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dfa4:	f04f 0c00 	mov.w	ip, #0
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfae:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dfb2:	d01c      	beq.n	800dfee <__gethex+0x3fe>
 800dfb4:	3201      	adds	r2, #1
 800dfb6:	6002      	str	r2, [r0, #0]
 800dfb8:	2f02      	cmp	r7, #2
 800dfba:	f104 0314 	add.w	r3, r4, #20
 800dfbe:	d13f      	bne.n	800e040 <__gethex+0x450>
 800dfc0:	f8d8 2000 	ldr.w	r2, [r8]
 800dfc4:	3a01      	subs	r2, #1
 800dfc6:	42b2      	cmp	r2, r6
 800dfc8:	d10a      	bne.n	800dfe0 <__gethex+0x3f0>
 800dfca:	1171      	asrs	r1, r6, #5
 800dfcc:	2201      	movs	r2, #1
 800dfce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dfd2:	f006 061f 	and.w	r6, r6, #31
 800dfd6:	fa02 f606 	lsl.w	r6, r2, r6
 800dfda:	421e      	tst	r6, r3
 800dfdc:	bf18      	it	ne
 800dfde:	4617      	movne	r7, r2
 800dfe0:	f047 0720 	orr.w	r7, r7, #32
 800dfe4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dfe6:	601c      	str	r4, [r3, #0]
 800dfe8:	9b04      	ldr	r3, [sp, #16]
 800dfea:	601d      	str	r5, [r3, #0]
 800dfec:	e695      	b.n	800dd1a <__gethex+0x12a>
 800dfee:	4299      	cmp	r1, r3
 800dff0:	f843 cc04 	str.w	ip, [r3, #-4]
 800dff4:	d8d8      	bhi.n	800dfa8 <__gethex+0x3b8>
 800dff6:	68a3      	ldr	r3, [r4, #8]
 800dff8:	459b      	cmp	fp, r3
 800dffa:	db19      	blt.n	800e030 <__gethex+0x440>
 800dffc:	6861      	ldr	r1, [r4, #4]
 800dffe:	ee18 0a10 	vmov	r0, s16
 800e002:	3101      	adds	r1, #1
 800e004:	f000 f928 	bl	800e258 <_Balloc>
 800e008:	4681      	mov	r9, r0
 800e00a:	b918      	cbnz	r0, 800e014 <__gethex+0x424>
 800e00c:	4b1a      	ldr	r3, [pc, #104]	; (800e078 <__gethex+0x488>)
 800e00e:	4602      	mov	r2, r0
 800e010:	2184      	movs	r1, #132	; 0x84
 800e012:	e6a8      	b.n	800dd66 <__gethex+0x176>
 800e014:	6922      	ldr	r2, [r4, #16]
 800e016:	3202      	adds	r2, #2
 800e018:	f104 010c 	add.w	r1, r4, #12
 800e01c:	0092      	lsls	r2, r2, #2
 800e01e:	300c      	adds	r0, #12
 800e020:	f000 f90c 	bl	800e23c <memcpy>
 800e024:	4621      	mov	r1, r4
 800e026:	ee18 0a10 	vmov	r0, s16
 800e02a:	f000 f955 	bl	800e2d8 <_Bfree>
 800e02e:	464c      	mov	r4, r9
 800e030:	6923      	ldr	r3, [r4, #16]
 800e032:	1c5a      	adds	r2, r3, #1
 800e034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e038:	6122      	str	r2, [r4, #16]
 800e03a:	2201      	movs	r2, #1
 800e03c:	615a      	str	r2, [r3, #20]
 800e03e:	e7bb      	b.n	800dfb8 <__gethex+0x3c8>
 800e040:	6922      	ldr	r2, [r4, #16]
 800e042:	455a      	cmp	r2, fp
 800e044:	dd0b      	ble.n	800e05e <__gethex+0x46e>
 800e046:	2101      	movs	r1, #1
 800e048:	4620      	mov	r0, r4
 800e04a:	f7ff fd69 	bl	800db20 <rshift>
 800e04e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e052:	3501      	adds	r5, #1
 800e054:	42ab      	cmp	r3, r5
 800e056:	f6ff aed0 	blt.w	800ddfa <__gethex+0x20a>
 800e05a:	2701      	movs	r7, #1
 800e05c:	e7c0      	b.n	800dfe0 <__gethex+0x3f0>
 800e05e:	f016 061f 	ands.w	r6, r6, #31
 800e062:	d0fa      	beq.n	800e05a <__gethex+0x46a>
 800e064:	4453      	add	r3, sl
 800e066:	f1c6 0620 	rsb	r6, r6, #32
 800e06a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e06e:	f000 f9e5 	bl	800e43c <__hi0bits>
 800e072:	42b0      	cmp	r0, r6
 800e074:	dbe7      	blt.n	800e046 <__gethex+0x456>
 800e076:	e7f0      	b.n	800e05a <__gethex+0x46a>
 800e078:	08010dd1 	.word	0x08010dd1

0800e07c <L_shift>:
 800e07c:	f1c2 0208 	rsb	r2, r2, #8
 800e080:	0092      	lsls	r2, r2, #2
 800e082:	b570      	push	{r4, r5, r6, lr}
 800e084:	f1c2 0620 	rsb	r6, r2, #32
 800e088:	6843      	ldr	r3, [r0, #4]
 800e08a:	6804      	ldr	r4, [r0, #0]
 800e08c:	fa03 f506 	lsl.w	r5, r3, r6
 800e090:	432c      	orrs	r4, r5
 800e092:	40d3      	lsrs	r3, r2
 800e094:	6004      	str	r4, [r0, #0]
 800e096:	f840 3f04 	str.w	r3, [r0, #4]!
 800e09a:	4288      	cmp	r0, r1
 800e09c:	d3f4      	bcc.n	800e088 <L_shift+0xc>
 800e09e:	bd70      	pop	{r4, r5, r6, pc}

0800e0a0 <__match>:
 800e0a0:	b530      	push	{r4, r5, lr}
 800e0a2:	6803      	ldr	r3, [r0, #0]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0aa:	b914      	cbnz	r4, 800e0b2 <__match+0x12>
 800e0ac:	6003      	str	r3, [r0, #0]
 800e0ae:	2001      	movs	r0, #1
 800e0b0:	bd30      	pop	{r4, r5, pc}
 800e0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e0ba:	2d19      	cmp	r5, #25
 800e0bc:	bf98      	it	ls
 800e0be:	3220      	addls	r2, #32
 800e0c0:	42a2      	cmp	r2, r4
 800e0c2:	d0f0      	beq.n	800e0a6 <__match+0x6>
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	e7f3      	b.n	800e0b0 <__match+0x10>

0800e0c8 <__hexnan>:
 800e0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0cc:	680b      	ldr	r3, [r1, #0]
 800e0ce:	115e      	asrs	r6, r3, #5
 800e0d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e0d4:	f013 031f 	ands.w	r3, r3, #31
 800e0d8:	b087      	sub	sp, #28
 800e0da:	bf18      	it	ne
 800e0dc:	3604      	addne	r6, #4
 800e0de:	2500      	movs	r5, #0
 800e0e0:	1f37      	subs	r7, r6, #4
 800e0e2:	4690      	mov	r8, r2
 800e0e4:	6802      	ldr	r2, [r0, #0]
 800e0e6:	9301      	str	r3, [sp, #4]
 800e0e8:	4682      	mov	sl, r0
 800e0ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800e0ee:	46b9      	mov	r9, r7
 800e0f0:	463c      	mov	r4, r7
 800e0f2:	9502      	str	r5, [sp, #8]
 800e0f4:	46ab      	mov	fp, r5
 800e0f6:	7851      	ldrb	r1, [r2, #1]
 800e0f8:	1c53      	adds	r3, r2, #1
 800e0fa:	9303      	str	r3, [sp, #12]
 800e0fc:	b341      	cbz	r1, 800e150 <__hexnan+0x88>
 800e0fe:	4608      	mov	r0, r1
 800e100:	9205      	str	r2, [sp, #20]
 800e102:	9104      	str	r1, [sp, #16]
 800e104:	f7ff fd5e 	bl	800dbc4 <__hexdig_fun>
 800e108:	2800      	cmp	r0, #0
 800e10a:	d14f      	bne.n	800e1ac <__hexnan+0xe4>
 800e10c:	9904      	ldr	r1, [sp, #16]
 800e10e:	9a05      	ldr	r2, [sp, #20]
 800e110:	2920      	cmp	r1, #32
 800e112:	d818      	bhi.n	800e146 <__hexnan+0x7e>
 800e114:	9b02      	ldr	r3, [sp, #8]
 800e116:	459b      	cmp	fp, r3
 800e118:	dd13      	ble.n	800e142 <__hexnan+0x7a>
 800e11a:	454c      	cmp	r4, r9
 800e11c:	d206      	bcs.n	800e12c <__hexnan+0x64>
 800e11e:	2d07      	cmp	r5, #7
 800e120:	dc04      	bgt.n	800e12c <__hexnan+0x64>
 800e122:	462a      	mov	r2, r5
 800e124:	4649      	mov	r1, r9
 800e126:	4620      	mov	r0, r4
 800e128:	f7ff ffa8 	bl	800e07c <L_shift>
 800e12c:	4544      	cmp	r4, r8
 800e12e:	d950      	bls.n	800e1d2 <__hexnan+0x10a>
 800e130:	2300      	movs	r3, #0
 800e132:	f1a4 0904 	sub.w	r9, r4, #4
 800e136:	f844 3c04 	str.w	r3, [r4, #-4]
 800e13a:	f8cd b008 	str.w	fp, [sp, #8]
 800e13e:	464c      	mov	r4, r9
 800e140:	461d      	mov	r5, r3
 800e142:	9a03      	ldr	r2, [sp, #12]
 800e144:	e7d7      	b.n	800e0f6 <__hexnan+0x2e>
 800e146:	2929      	cmp	r1, #41	; 0x29
 800e148:	d156      	bne.n	800e1f8 <__hexnan+0x130>
 800e14a:	3202      	adds	r2, #2
 800e14c:	f8ca 2000 	str.w	r2, [sl]
 800e150:	f1bb 0f00 	cmp.w	fp, #0
 800e154:	d050      	beq.n	800e1f8 <__hexnan+0x130>
 800e156:	454c      	cmp	r4, r9
 800e158:	d206      	bcs.n	800e168 <__hexnan+0xa0>
 800e15a:	2d07      	cmp	r5, #7
 800e15c:	dc04      	bgt.n	800e168 <__hexnan+0xa0>
 800e15e:	462a      	mov	r2, r5
 800e160:	4649      	mov	r1, r9
 800e162:	4620      	mov	r0, r4
 800e164:	f7ff ff8a 	bl	800e07c <L_shift>
 800e168:	4544      	cmp	r4, r8
 800e16a:	d934      	bls.n	800e1d6 <__hexnan+0x10e>
 800e16c:	f1a8 0204 	sub.w	r2, r8, #4
 800e170:	4623      	mov	r3, r4
 800e172:	f853 1b04 	ldr.w	r1, [r3], #4
 800e176:	f842 1f04 	str.w	r1, [r2, #4]!
 800e17a:	429f      	cmp	r7, r3
 800e17c:	d2f9      	bcs.n	800e172 <__hexnan+0xaa>
 800e17e:	1b3b      	subs	r3, r7, r4
 800e180:	f023 0303 	bic.w	r3, r3, #3
 800e184:	3304      	adds	r3, #4
 800e186:	3401      	adds	r4, #1
 800e188:	3e03      	subs	r6, #3
 800e18a:	42b4      	cmp	r4, r6
 800e18c:	bf88      	it	hi
 800e18e:	2304      	movhi	r3, #4
 800e190:	4443      	add	r3, r8
 800e192:	2200      	movs	r2, #0
 800e194:	f843 2b04 	str.w	r2, [r3], #4
 800e198:	429f      	cmp	r7, r3
 800e19a:	d2fb      	bcs.n	800e194 <__hexnan+0xcc>
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	b91b      	cbnz	r3, 800e1a8 <__hexnan+0xe0>
 800e1a0:	4547      	cmp	r7, r8
 800e1a2:	d127      	bne.n	800e1f4 <__hexnan+0x12c>
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	603b      	str	r3, [r7, #0]
 800e1a8:	2005      	movs	r0, #5
 800e1aa:	e026      	b.n	800e1fa <__hexnan+0x132>
 800e1ac:	3501      	adds	r5, #1
 800e1ae:	2d08      	cmp	r5, #8
 800e1b0:	f10b 0b01 	add.w	fp, fp, #1
 800e1b4:	dd06      	ble.n	800e1c4 <__hexnan+0xfc>
 800e1b6:	4544      	cmp	r4, r8
 800e1b8:	d9c3      	bls.n	800e142 <__hexnan+0x7a>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1c0:	2501      	movs	r5, #1
 800e1c2:	3c04      	subs	r4, #4
 800e1c4:	6822      	ldr	r2, [r4, #0]
 800e1c6:	f000 000f 	and.w	r0, r0, #15
 800e1ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e1ce:	6022      	str	r2, [r4, #0]
 800e1d0:	e7b7      	b.n	800e142 <__hexnan+0x7a>
 800e1d2:	2508      	movs	r5, #8
 800e1d4:	e7b5      	b.n	800e142 <__hexnan+0x7a>
 800e1d6:	9b01      	ldr	r3, [sp, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d0df      	beq.n	800e19c <__hexnan+0xd4>
 800e1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1e0:	f1c3 0320 	rsb	r3, r3, #32
 800e1e4:	fa22 f303 	lsr.w	r3, r2, r3
 800e1e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e1ec:	401a      	ands	r2, r3
 800e1ee:	f846 2c04 	str.w	r2, [r6, #-4]
 800e1f2:	e7d3      	b.n	800e19c <__hexnan+0xd4>
 800e1f4:	3f04      	subs	r7, #4
 800e1f6:	e7d1      	b.n	800e19c <__hexnan+0xd4>
 800e1f8:	2004      	movs	r0, #4
 800e1fa:	b007      	add	sp, #28
 800e1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e200 <_localeconv_r>:
 800e200:	4800      	ldr	r0, [pc, #0]	; (800e204 <_localeconv_r+0x4>)
 800e202:	4770      	bx	lr
 800e204:	20000174 	.word	0x20000174

0800e208 <malloc>:
 800e208:	4b02      	ldr	r3, [pc, #8]	; (800e214 <malloc+0xc>)
 800e20a:	4601      	mov	r1, r0
 800e20c:	6818      	ldr	r0, [r3, #0]
 800e20e:	f000 bd67 	b.w	800ece0 <_malloc_r>
 800e212:	bf00      	nop
 800e214:	2000001c 	.word	0x2000001c

0800e218 <__ascii_mbtowc>:
 800e218:	b082      	sub	sp, #8
 800e21a:	b901      	cbnz	r1, 800e21e <__ascii_mbtowc+0x6>
 800e21c:	a901      	add	r1, sp, #4
 800e21e:	b142      	cbz	r2, 800e232 <__ascii_mbtowc+0x1a>
 800e220:	b14b      	cbz	r3, 800e236 <__ascii_mbtowc+0x1e>
 800e222:	7813      	ldrb	r3, [r2, #0]
 800e224:	600b      	str	r3, [r1, #0]
 800e226:	7812      	ldrb	r2, [r2, #0]
 800e228:	1e10      	subs	r0, r2, #0
 800e22a:	bf18      	it	ne
 800e22c:	2001      	movne	r0, #1
 800e22e:	b002      	add	sp, #8
 800e230:	4770      	bx	lr
 800e232:	4610      	mov	r0, r2
 800e234:	e7fb      	b.n	800e22e <__ascii_mbtowc+0x16>
 800e236:	f06f 0001 	mvn.w	r0, #1
 800e23a:	e7f8      	b.n	800e22e <__ascii_mbtowc+0x16>

0800e23c <memcpy>:
 800e23c:	440a      	add	r2, r1
 800e23e:	4291      	cmp	r1, r2
 800e240:	f100 33ff 	add.w	r3, r0, #4294967295
 800e244:	d100      	bne.n	800e248 <memcpy+0xc>
 800e246:	4770      	bx	lr
 800e248:	b510      	push	{r4, lr}
 800e24a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e24e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e252:	4291      	cmp	r1, r2
 800e254:	d1f9      	bne.n	800e24a <memcpy+0xe>
 800e256:	bd10      	pop	{r4, pc}

0800e258 <_Balloc>:
 800e258:	b570      	push	{r4, r5, r6, lr}
 800e25a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e25c:	4604      	mov	r4, r0
 800e25e:	460d      	mov	r5, r1
 800e260:	b976      	cbnz	r6, 800e280 <_Balloc+0x28>
 800e262:	2010      	movs	r0, #16
 800e264:	f7ff ffd0 	bl	800e208 <malloc>
 800e268:	4602      	mov	r2, r0
 800e26a:	6260      	str	r0, [r4, #36]	; 0x24
 800e26c:	b920      	cbnz	r0, 800e278 <_Balloc+0x20>
 800e26e:	4b18      	ldr	r3, [pc, #96]	; (800e2d0 <_Balloc+0x78>)
 800e270:	4818      	ldr	r0, [pc, #96]	; (800e2d4 <_Balloc+0x7c>)
 800e272:	2166      	movs	r1, #102	; 0x66
 800e274:	f7fe fda8 	bl	800cdc8 <__assert_func>
 800e278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e27c:	6006      	str	r6, [r0, #0]
 800e27e:	60c6      	str	r6, [r0, #12]
 800e280:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e282:	68f3      	ldr	r3, [r6, #12]
 800e284:	b183      	cbz	r3, 800e2a8 <_Balloc+0x50>
 800e286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e28e:	b9b8      	cbnz	r0, 800e2c0 <_Balloc+0x68>
 800e290:	2101      	movs	r1, #1
 800e292:	fa01 f605 	lsl.w	r6, r1, r5
 800e296:	1d72      	adds	r2, r6, #5
 800e298:	0092      	lsls	r2, r2, #2
 800e29a:	4620      	mov	r0, r4
 800e29c:	f000 fc9d 	bl	800ebda <_calloc_r>
 800e2a0:	b160      	cbz	r0, 800e2bc <_Balloc+0x64>
 800e2a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e2a6:	e00e      	b.n	800e2c6 <_Balloc+0x6e>
 800e2a8:	2221      	movs	r2, #33	; 0x21
 800e2aa:	2104      	movs	r1, #4
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f000 fc94 	bl	800ebda <_calloc_r>
 800e2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2b4:	60f0      	str	r0, [r6, #12]
 800e2b6:	68db      	ldr	r3, [r3, #12]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d1e4      	bne.n	800e286 <_Balloc+0x2e>
 800e2bc:	2000      	movs	r0, #0
 800e2be:	bd70      	pop	{r4, r5, r6, pc}
 800e2c0:	6802      	ldr	r2, [r0, #0]
 800e2c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e2cc:	e7f7      	b.n	800e2be <_Balloc+0x66>
 800e2ce:	bf00      	nop
 800e2d0:	08010bb8 	.word	0x08010bb8
 800e2d4:	08010e5c 	.word	0x08010e5c

0800e2d8 <_Bfree>:
 800e2d8:	b570      	push	{r4, r5, r6, lr}
 800e2da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e2dc:	4605      	mov	r5, r0
 800e2de:	460c      	mov	r4, r1
 800e2e0:	b976      	cbnz	r6, 800e300 <_Bfree+0x28>
 800e2e2:	2010      	movs	r0, #16
 800e2e4:	f7ff ff90 	bl	800e208 <malloc>
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	6268      	str	r0, [r5, #36]	; 0x24
 800e2ec:	b920      	cbnz	r0, 800e2f8 <_Bfree+0x20>
 800e2ee:	4b09      	ldr	r3, [pc, #36]	; (800e314 <_Bfree+0x3c>)
 800e2f0:	4809      	ldr	r0, [pc, #36]	; (800e318 <_Bfree+0x40>)
 800e2f2:	218a      	movs	r1, #138	; 0x8a
 800e2f4:	f7fe fd68 	bl	800cdc8 <__assert_func>
 800e2f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2fc:	6006      	str	r6, [r0, #0]
 800e2fe:	60c6      	str	r6, [r0, #12]
 800e300:	b13c      	cbz	r4, 800e312 <_Bfree+0x3a>
 800e302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e304:	6862      	ldr	r2, [r4, #4]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e30c:	6021      	str	r1, [r4, #0]
 800e30e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e312:	bd70      	pop	{r4, r5, r6, pc}
 800e314:	08010bb8 	.word	0x08010bb8
 800e318:	08010e5c 	.word	0x08010e5c

0800e31c <__multadd>:
 800e31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e320:	690d      	ldr	r5, [r1, #16]
 800e322:	4607      	mov	r7, r0
 800e324:	460c      	mov	r4, r1
 800e326:	461e      	mov	r6, r3
 800e328:	f101 0c14 	add.w	ip, r1, #20
 800e32c:	2000      	movs	r0, #0
 800e32e:	f8dc 3000 	ldr.w	r3, [ip]
 800e332:	b299      	uxth	r1, r3
 800e334:	fb02 6101 	mla	r1, r2, r1, r6
 800e338:	0c1e      	lsrs	r6, r3, #16
 800e33a:	0c0b      	lsrs	r3, r1, #16
 800e33c:	fb02 3306 	mla	r3, r2, r6, r3
 800e340:	b289      	uxth	r1, r1
 800e342:	3001      	adds	r0, #1
 800e344:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e348:	4285      	cmp	r5, r0
 800e34a:	f84c 1b04 	str.w	r1, [ip], #4
 800e34e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e352:	dcec      	bgt.n	800e32e <__multadd+0x12>
 800e354:	b30e      	cbz	r6, 800e39a <__multadd+0x7e>
 800e356:	68a3      	ldr	r3, [r4, #8]
 800e358:	42ab      	cmp	r3, r5
 800e35a:	dc19      	bgt.n	800e390 <__multadd+0x74>
 800e35c:	6861      	ldr	r1, [r4, #4]
 800e35e:	4638      	mov	r0, r7
 800e360:	3101      	adds	r1, #1
 800e362:	f7ff ff79 	bl	800e258 <_Balloc>
 800e366:	4680      	mov	r8, r0
 800e368:	b928      	cbnz	r0, 800e376 <__multadd+0x5a>
 800e36a:	4602      	mov	r2, r0
 800e36c:	4b0c      	ldr	r3, [pc, #48]	; (800e3a0 <__multadd+0x84>)
 800e36e:	480d      	ldr	r0, [pc, #52]	; (800e3a4 <__multadd+0x88>)
 800e370:	21b5      	movs	r1, #181	; 0xb5
 800e372:	f7fe fd29 	bl	800cdc8 <__assert_func>
 800e376:	6922      	ldr	r2, [r4, #16]
 800e378:	3202      	adds	r2, #2
 800e37a:	f104 010c 	add.w	r1, r4, #12
 800e37e:	0092      	lsls	r2, r2, #2
 800e380:	300c      	adds	r0, #12
 800e382:	f7ff ff5b 	bl	800e23c <memcpy>
 800e386:	4621      	mov	r1, r4
 800e388:	4638      	mov	r0, r7
 800e38a:	f7ff ffa5 	bl	800e2d8 <_Bfree>
 800e38e:	4644      	mov	r4, r8
 800e390:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e394:	3501      	adds	r5, #1
 800e396:	615e      	str	r6, [r3, #20]
 800e398:	6125      	str	r5, [r4, #16]
 800e39a:	4620      	mov	r0, r4
 800e39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a0:	08010dd1 	.word	0x08010dd1
 800e3a4:	08010e5c 	.word	0x08010e5c

0800e3a8 <__s2b>:
 800e3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3ac:	460c      	mov	r4, r1
 800e3ae:	4615      	mov	r5, r2
 800e3b0:	461f      	mov	r7, r3
 800e3b2:	2209      	movs	r2, #9
 800e3b4:	3308      	adds	r3, #8
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3bc:	2100      	movs	r1, #0
 800e3be:	2201      	movs	r2, #1
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	db09      	blt.n	800e3d8 <__s2b+0x30>
 800e3c4:	4630      	mov	r0, r6
 800e3c6:	f7ff ff47 	bl	800e258 <_Balloc>
 800e3ca:	b940      	cbnz	r0, 800e3de <__s2b+0x36>
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	4b19      	ldr	r3, [pc, #100]	; (800e434 <__s2b+0x8c>)
 800e3d0:	4819      	ldr	r0, [pc, #100]	; (800e438 <__s2b+0x90>)
 800e3d2:	21ce      	movs	r1, #206	; 0xce
 800e3d4:	f7fe fcf8 	bl	800cdc8 <__assert_func>
 800e3d8:	0052      	lsls	r2, r2, #1
 800e3da:	3101      	adds	r1, #1
 800e3dc:	e7f0      	b.n	800e3c0 <__s2b+0x18>
 800e3de:	9b08      	ldr	r3, [sp, #32]
 800e3e0:	6143      	str	r3, [r0, #20]
 800e3e2:	2d09      	cmp	r5, #9
 800e3e4:	f04f 0301 	mov.w	r3, #1
 800e3e8:	6103      	str	r3, [r0, #16]
 800e3ea:	dd16      	ble.n	800e41a <__s2b+0x72>
 800e3ec:	f104 0909 	add.w	r9, r4, #9
 800e3f0:	46c8      	mov	r8, r9
 800e3f2:	442c      	add	r4, r5
 800e3f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e3f8:	4601      	mov	r1, r0
 800e3fa:	3b30      	subs	r3, #48	; 0x30
 800e3fc:	220a      	movs	r2, #10
 800e3fe:	4630      	mov	r0, r6
 800e400:	f7ff ff8c 	bl	800e31c <__multadd>
 800e404:	45a0      	cmp	r8, r4
 800e406:	d1f5      	bne.n	800e3f4 <__s2b+0x4c>
 800e408:	f1a5 0408 	sub.w	r4, r5, #8
 800e40c:	444c      	add	r4, r9
 800e40e:	1b2d      	subs	r5, r5, r4
 800e410:	1963      	adds	r3, r4, r5
 800e412:	42bb      	cmp	r3, r7
 800e414:	db04      	blt.n	800e420 <__s2b+0x78>
 800e416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e41a:	340a      	adds	r4, #10
 800e41c:	2509      	movs	r5, #9
 800e41e:	e7f6      	b.n	800e40e <__s2b+0x66>
 800e420:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e424:	4601      	mov	r1, r0
 800e426:	3b30      	subs	r3, #48	; 0x30
 800e428:	220a      	movs	r2, #10
 800e42a:	4630      	mov	r0, r6
 800e42c:	f7ff ff76 	bl	800e31c <__multadd>
 800e430:	e7ee      	b.n	800e410 <__s2b+0x68>
 800e432:	bf00      	nop
 800e434:	08010dd1 	.word	0x08010dd1
 800e438:	08010e5c 	.word	0x08010e5c

0800e43c <__hi0bits>:
 800e43c:	0c03      	lsrs	r3, r0, #16
 800e43e:	041b      	lsls	r3, r3, #16
 800e440:	b9d3      	cbnz	r3, 800e478 <__hi0bits+0x3c>
 800e442:	0400      	lsls	r0, r0, #16
 800e444:	2310      	movs	r3, #16
 800e446:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e44a:	bf04      	itt	eq
 800e44c:	0200      	lsleq	r0, r0, #8
 800e44e:	3308      	addeq	r3, #8
 800e450:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e454:	bf04      	itt	eq
 800e456:	0100      	lsleq	r0, r0, #4
 800e458:	3304      	addeq	r3, #4
 800e45a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e45e:	bf04      	itt	eq
 800e460:	0080      	lsleq	r0, r0, #2
 800e462:	3302      	addeq	r3, #2
 800e464:	2800      	cmp	r0, #0
 800e466:	db05      	blt.n	800e474 <__hi0bits+0x38>
 800e468:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e46c:	f103 0301 	add.w	r3, r3, #1
 800e470:	bf08      	it	eq
 800e472:	2320      	moveq	r3, #32
 800e474:	4618      	mov	r0, r3
 800e476:	4770      	bx	lr
 800e478:	2300      	movs	r3, #0
 800e47a:	e7e4      	b.n	800e446 <__hi0bits+0xa>

0800e47c <__lo0bits>:
 800e47c:	6803      	ldr	r3, [r0, #0]
 800e47e:	f013 0207 	ands.w	r2, r3, #7
 800e482:	4601      	mov	r1, r0
 800e484:	d00b      	beq.n	800e49e <__lo0bits+0x22>
 800e486:	07da      	lsls	r2, r3, #31
 800e488:	d423      	bmi.n	800e4d2 <__lo0bits+0x56>
 800e48a:	0798      	lsls	r0, r3, #30
 800e48c:	bf49      	itett	mi
 800e48e:	085b      	lsrmi	r3, r3, #1
 800e490:	089b      	lsrpl	r3, r3, #2
 800e492:	2001      	movmi	r0, #1
 800e494:	600b      	strmi	r3, [r1, #0]
 800e496:	bf5c      	itt	pl
 800e498:	600b      	strpl	r3, [r1, #0]
 800e49a:	2002      	movpl	r0, #2
 800e49c:	4770      	bx	lr
 800e49e:	b298      	uxth	r0, r3
 800e4a0:	b9a8      	cbnz	r0, 800e4ce <__lo0bits+0x52>
 800e4a2:	0c1b      	lsrs	r3, r3, #16
 800e4a4:	2010      	movs	r0, #16
 800e4a6:	b2da      	uxtb	r2, r3
 800e4a8:	b90a      	cbnz	r2, 800e4ae <__lo0bits+0x32>
 800e4aa:	3008      	adds	r0, #8
 800e4ac:	0a1b      	lsrs	r3, r3, #8
 800e4ae:	071a      	lsls	r2, r3, #28
 800e4b0:	bf04      	itt	eq
 800e4b2:	091b      	lsreq	r3, r3, #4
 800e4b4:	3004      	addeq	r0, #4
 800e4b6:	079a      	lsls	r2, r3, #30
 800e4b8:	bf04      	itt	eq
 800e4ba:	089b      	lsreq	r3, r3, #2
 800e4bc:	3002      	addeq	r0, #2
 800e4be:	07da      	lsls	r2, r3, #31
 800e4c0:	d403      	bmi.n	800e4ca <__lo0bits+0x4e>
 800e4c2:	085b      	lsrs	r3, r3, #1
 800e4c4:	f100 0001 	add.w	r0, r0, #1
 800e4c8:	d005      	beq.n	800e4d6 <__lo0bits+0x5a>
 800e4ca:	600b      	str	r3, [r1, #0]
 800e4cc:	4770      	bx	lr
 800e4ce:	4610      	mov	r0, r2
 800e4d0:	e7e9      	b.n	800e4a6 <__lo0bits+0x2a>
 800e4d2:	2000      	movs	r0, #0
 800e4d4:	4770      	bx	lr
 800e4d6:	2020      	movs	r0, #32
 800e4d8:	4770      	bx	lr
	...

0800e4dc <__i2b>:
 800e4dc:	b510      	push	{r4, lr}
 800e4de:	460c      	mov	r4, r1
 800e4e0:	2101      	movs	r1, #1
 800e4e2:	f7ff feb9 	bl	800e258 <_Balloc>
 800e4e6:	4602      	mov	r2, r0
 800e4e8:	b928      	cbnz	r0, 800e4f6 <__i2b+0x1a>
 800e4ea:	4b05      	ldr	r3, [pc, #20]	; (800e500 <__i2b+0x24>)
 800e4ec:	4805      	ldr	r0, [pc, #20]	; (800e504 <__i2b+0x28>)
 800e4ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e4f2:	f7fe fc69 	bl	800cdc8 <__assert_func>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	6144      	str	r4, [r0, #20]
 800e4fa:	6103      	str	r3, [r0, #16]
 800e4fc:	bd10      	pop	{r4, pc}
 800e4fe:	bf00      	nop
 800e500:	08010dd1 	.word	0x08010dd1
 800e504:	08010e5c 	.word	0x08010e5c

0800e508 <__multiply>:
 800e508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e50c:	4691      	mov	r9, r2
 800e50e:	690a      	ldr	r2, [r1, #16]
 800e510:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e514:	429a      	cmp	r2, r3
 800e516:	bfb8      	it	lt
 800e518:	460b      	movlt	r3, r1
 800e51a:	460c      	mov	r4, r1
 800e51c:	bfbc      	itt	lt
 800e51e:	464c      	movlt	r4, r9
 800e520:	4699      	movlt	r9, r3
 800e522:	6927      	ldr	r7, [r4, #16]
 800e524:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e528:	68a3      	ldr	r3, [r4, #8]
 800e52a:	6861      	ldr	r1, [r4, #4]
 800e52c:	eb07 060a 	add.w	r6, r7, sl
 800e530:	42b3      	cmp	r3, r6
 800e532:	b085      	sub	sp, #20
 800e534:	bfb8      	it	lt
 800e536:	3101      	addlt	r1, #1
 800e538:	f7ff fe8e 	bl	800e258 <_Balloc>
 800e53c:	b930      	cbnz	r0, 800e54c <__multiply+0x44>
 800e53e:	4602      	mov	r2, r0
 800e540:	4b44      	ldr	r3, [pc, #272]	; (800e654 <__multiply+0x14c>)
 800e542:	4845      	ldr	r0, [pc, #276]	; (800e658 <__multiply+0x150>)
 800e544:	f240 115d 	movw	r1, #349	; 0x15d
 800e548:	f7fe fc3e 	bl	800cdc8 <__assert_func>
 800e54c:	f100 0514 	add.w	r5, r0, #20
 800e550:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e554:	462b      	mov	r3, r5
 800e556:	2200      	movs	r2, #0
 800e558:	4543      	cmp	r3, r8
 800e55a:	d321      	bcc.n	800e5a0 <__multiply+0x98>
 800e55c:	f104 0314 	add.w	r3, r4, #20
 800e560:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e564:	f109 0314 	add.w	r3, r9, #20
 800e568:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e56c:	9202      	str	r2, [sp, #8]
 800e56e:	1b3a      	subs	r2, r7, r4
 800e570:	3a15      	subs	r2, #21
 800e572:	f022 0203 	bic.w	r2, r2, #3
 800e576:	3204      	adds	r2, #4
 800e578:	f104 0115 	add.w	r1, r4, #21
 800e57c:	428f      	cmp	r7, r1
 800e57e:	bf38      	it	cc
 800e580:	2204      	movcc	r2, #4
 800e582:	9201      	str	r2, [sp, #4]
 800e584:	9a02      	ldr	r2, [sp, #8]
 800e586:	9303      	str	r3, [sp, #12]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d80c      	bhi.n	800e5a6 <__multiply+0x9e>
 800e58c:	2e00      	cmp	r6, #0
 800e58e:	dd03      	ble.n	800e598 <__multiply+0x90>
 800e590:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e594:	2b00      	cmp	r3, #0
 800e596:	d05a      	beq.n	800e64e <__multiply+0x146>
 800e598:	6106      	str	r6, [r0, #16]
 800e59a:	b005      	add	sp, #20
 800e59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a0:	f843 2b04 	str.w	r2, [r3], #4
 800e5a4:	e7d8      	b.n	800e558 <__multiply+0x50>
 800e5a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800e5aa:	f1ba 0f00 	cmp.w	sl, #0
 800e5ae:	d024      	beq.n	800e5fa <__multiply+0xf2>
 800e5b0:	f104 0e14 	add.w	lr, r4, #20
 800e5b4:	46a9      	mov	r9, r5
 800e5b6:	f04f 0c00 	mov.w	ip, #0
 800e5ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e5be:	f8d9 1000 	ldr.w	r1, [r9]
 800e5c2:	fa1f fb82 	uxth.w	fp, r2
 800e5c6:	b289      	uxth	r1, r1
 800e5c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800e5cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e5d0:	f8d9 2000 	ldr.w	r2, [r9]
 800e5d4:	4461      	add	r1, ip
 800e5d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e5da:	fb0a c20b 	mla	r2, sl, fp, ip
 800e5de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e5e2:	b289      	uxth	r1, r1
 800e5e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e5e8:	4577      	cmp	r7, lr
 800e5ea:	f849 1b04 	str.w	r1, [r9], #4
 800e5ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e5f2:	d8e2      	bhi.n	800e5ba <__multiply+0xb2>
 800e5f4:	9a01      	ldr	r2, [sp, #4]
 800e5f6:	f845 c002 	str.w	ip, [r5, r2]
 800e5fa:	9a03      	ldr	r2, [sp, #12]
 800e5fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e600:	3304      	adds	r3, #4
 800e602:	f1b9 0f00 	cmp.w	r9, #0
 800e606:	d020      	beq.n	800e64a <__multiply+0x142>
 800e608:	6829      	ldr	r1, [r5, #0]
 800e60a:	f104 0c14 	add.w	ip, r4, #20
 800e60e:	46ae      	mov	lr, r5
 800e610:	f04f 0a00 	mov.w	sl, #0
 800e614:	f8bc b000 	ldrh.w	fp, [ip]
 800e618:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e61c:	fb09 220b 	mla	r2, r9, fp, r2
 800e620:	4492      	add	sl, r2
 800e622:	b289      	uxth	r1, r1
 800e624:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e628:	f84e 1b04 	str.w	r1, [lr], #4
 800e62c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e630:	f8be 1000 	ldrh.w	r1, [lr]
 800e634:	0c12      	lsrs	r2, r2, #16
 800e636:	fb09 1102 	mla	r1, r9, r2, r1
 800e63a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e63e:	4567      	cmp	r7, ip
 800e640:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e644:	d8e6      	bhi.n	800e614 <__multiply+0x10c>
 800e646:	9a01      	ldr	r2, [sp, #4]
 800e648:	50a9      	str	r1, [r5, r2]
 800e64a:	3504      	adds	r5, #4
 800e64c:	e79a      	b.n	800e584 <__multiply+0x7c>
 800e64e:	3e01      	subs	r6, #1
 800e650:	e79c      	b.n	800e58c <__multiply+0x84>
 800e652:	bf00      	nop
 800e654:	08010dd1 	.word	0x08010dd1
 800e658:	08010e5c 	.word	0x08010e5c

0800e65c <__pow5mult>:
 800e65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e660:	4615      	mov	r5, r2
 800e662:	f012 0203 	ands.w	r2, r2, #3
 800e666:	4606      	mov	r6, r0
 800e668:	460f      	mov	r7, r1
 800e66a:	d007      	beq.n	800e67c <__pow5mult+0x20>
 800e66c:	4c25      	ldr	r4, [pc, #148]	; (800e704 <__pow5mult+0xa8>)
 800e66e:	3a01      	subs	r2, #1
 800e670:	2300      	movs	r3, #0
 800e672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e676:	f7ff fe51 	bl	800e31c <__multadd>
 800e67a:	4607      	mov	r7, r0
 800e67c:	10ad      	asrs	r5, r5, #2
 800e67e:	d03d      	beq.n	800e6fc <__pow5mult+0xa0>
 800e680:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e682:	b97c      	cbnz	r4, 800e6a4 <__pow5mult+0x48>
 800e684:	2010      	movs	r0, #16
 800e686:	f7ff fdbf 	bl	800e208 <malloc>
 800e68a:	4602      	mov	r2, r0
 800e68c:	6270      	str	r0, [r6, #36]	; 0x24
 800e68e:	b928      	cbnz	r0, 800e69c <__pow5mult+0x40>
 800e690:	4b1d      	ldr	r3, [pc, #116]	; (800e708 <__pow5mult+0xac>)
 800e692:	481e      	ldr	r0, [pc, #120]	; (800e70c <__pow5mult+0xb0>)
 800e694:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e698:	f7fe fb96 	bl	800cdc8 <__assert_func>
 800e69c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6a0:	6004      	str	r4, [r0, #0]
 800e6a2:	60c4      	str	r4, [r0, #12]
 800e6a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e6a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6ac:	b94c      	cbnz	r4, 800e6c2 <__pow5mult+0x66>
 800e6ae:	f240 2171 	movw	r1, #625	; 0x271
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	f7ff ff12 	bl	800e4dc <__i2b>
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6be:	4604      	mov	r4, r0
 800e6c0:	6003      	str	r3, [r0, #0]
 800e6c2:	f04f 0900 	mov.w	r9, #0
 800e6c6:	07eb      	lsls	r3, r5, #31
 800e6c8:	d50a      	bpl.n	800e6e0 <__pow5mult+0x84>
 800e6ca:	4639      	mov	r1, r7
 800e6cc:	4622      	mov	r2, r4
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	f7ff ff1a 	bl	800e508 <__multiply>
 800e6d4:	4639      	mov	r1, r7
 800e6d6:	4680      	mov	r8, r0
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f7ff fdfd 	bl	800e2d8 <_Bfree>
 800e6de:	4647      	mov	r7, r8
 800e6e0:	106d      	asrs	r5, r5, #1
 800e6e2:	d00b      	beq.n	800e6fc <__pow5mult+0xa0>
 800e6e4:	6820      	ldr	r0, [r4, #0]
 800e6e6:	b938      	cbnz	r0, 800e6f8 <__pow5mult+0x9c>
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	f7ff ff0b 	bl	800e508 <__multiply>
 800e6f2:	6020      	str	r0, [r4, #0]
 800e6f4:	f8c0 9000 	str.w	r9, [r0]
 800e6f8:	4604      	mov	r4, r0
 800e6fa:	e7e4      	b.n	800e6c6 <__pow5mult+0x6a>
 800e6fc:	4638      	mov	r0, r7
 800e6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e702:	bf00      	nop
 800e704:	08010fa8 	.word	0x08010fa8
 800e708:	08010bb8 	.word	0x08010bb8
 800e70c:	08010e5c 	.word	0x08010e5c

0800e710 <__lshift>:
 800e710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e714:	460c      	mov	r4, r1
 800e716:	6849      	ldr	r1, [r1, #4]
 800e718:	6923      	ldr	r3, [r4, #16]
 800e71a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e71e:	68a3      	ldr	r3, [r4, #8]
 800e720:	4607      	mov	r7, r0
 800e722:	4691      	mov	r9, r2
 800e724:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e728:	f108 0601 	add.w	r6, r8, #1
 800e72c:	42b3      	cmp	r3, r6
 800e72e:	db0b      	blt.n	800e748 <__lshift+0x38>
 800e730:	4638      	mov	r0, r7
 800e732:	f7ff fd91 	bl	800e258 <_Balloc>
 800e736:	4605      	mov	r5, r0
 800e738:	b948      	cbnz	r0, 800e74e <__lshift+0x3e>
 800e73a:	4602      	mov	r2, r0
 800e73c:	4b2a      	ldr	r3, [pc, #168]	; (800e7e8 <__lshift+0xd8>)
 800e73e:	482b      	ldr	r0, [pc, #172]	; (800e7ec <__lshift+0xdc>)
 800e740:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e744:	f7fe fb40 	bl	800cdc8 <__assert_func>
 800e748:	3101      	adds	r1, #1
 800e74a:	005b      	lsls	r3, r3, #1
 800e74c:	e7ee      	b.n	800e72c <__lshift+0x1c>
 800e74e:	2300      	movs	r3, #0
 800e750:	f100 0114 	add.w	r1, r0, #20
 800e754:	f100 0210 	add.w	r2, r0, #16
 800e758:	4618      	mov	r0, r3
 800e75a:	4553      	cmp	r3, sl
 800e75c:	db37      	blt.n	800e7ce <__lshift+0xbe>
 800e75e:	6920      	ldr	r0, [r4, #16]
 800e760:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e764:	f104 0314 	add.w	r3, r4, #20
 800e768:	f019 091f 	ands.w	r9, r9, #31
 800e76c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e770:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e774:	d02f      	beq.n	800e7d6 <__lshift+0xc6>
 800e776:	f1c9 0e20 	rsb	lr, r9, #32
 800e77a:	468a      	mov	sl, r1
 800e77c:	f04f 0c00 	mov.w	ip, #0
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	fa02 f209 	lsl.w	r2, r2, r9
 800e786:	ea42 020c 	orr.w	r2, r2, ip
 800e78a:	f84a 2b04 	str.w	r2, [sl], #4
 800e78e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e792:	4298      	cmp	r0, r3
 800e794:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e798:	d8f2      	bhi.n	800e780 <__lshift+0x70>
 800e79a:	1b03      	subs	r3, r0, r4
 800e79c:	3b15      	subs	r3, #21
 800e79e:	f023 0303 	bic.w	r3, r3, #3
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	f104 0215 	add.w	r2, r4, #21
 800e7a8:	4290      	cmp	r0, r2
 800e7aa:	bf38      	it	cc
 800e7ac:	2304      	movcc	r3, #4
 800e7ae:	f841 c003 	str.w	ip, [r1, r3]
 800e7b2:	f1bc 0f00 	cmp.w	ip, #0
 800e7b6:	d001      	beq.n	800e7bc <__lshift+0xac>
 800e7b8:	f108 0602 	add.w	r6, r8, #2
 800e7bc:	3e01      	subs	r6, #1
 800e7be:	4638      	mov	r0, r7
 800e7c0:	612e      	str	r6, [r5, #16]
 800e7c2:	4621      	mov	r1, r4
 800e7c4:	f7ff fd88 	bl	800e2d8 <_Bfree>
 800e7c8:	4628      	mov	r0, r5
 800e7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	e7c1      	b.n	800e75a <__lshift+0x4a>
 800e7d6:	3904      	subs	r1, #4
 800e7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7e0:	4298      	cmp	r0, r3
 800e7e2:	d8f9      	bhi.n	800e7d8 <__lshift+0xc8>
 800e7e4:	e7ea      	b.n	800e7bc <__lshift+0xac>
 800e7e6:	bf00      	nop
 800e7e8:	08010dd1 	.word	0x08010dd1
 800e7ec:	08010e5c 	.word	0x08010e5c

0800e7f0 <__mcmp>:
 800e7f0:	b530      	push	{r4, r5, lr}
 800e7f2:	6902      	ldr	r2, [r0, #16]
 800e7f4:	690c      	ldr	r4, [r1, #16]
 800e7f6:	1b12      	subs	r2, r2, r4
 800e7f8:	d10e      	bne.n	800e818 <__mcmp+0x28>
 800e7fa:	f100 0314 	add.w	r3, r0, #20
 800e7fe:	3114      	adds	r1, #20
 800e800:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e804:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e808:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e80c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e810:	42a5      	cmp	r5, r4
 800e812:	d003      	beq.n	800e81c <__mcmp+0x2c>
 800e814:	d305      	bcc.n	800e822 <__mcmp+0x32>
 800e816:	2201      	movs	r2, #1
 800e818:	4610      	mov	r0, r2
 800e81a:	bd30      	pop	{r4, r5, pc}
 800e81c:	4283      	cmp	r3, r0
 800e81e:	d3f3      	bcc.n	800e808 <__mcmp+0x18>
 800e820:	e7fa      	b.n	800e818 <__mcmp+0x28>
 800e822:	f04f 32ff 	mov.w	r2, #4294967295
 800e826:	e7f7      	b.n	800e818 <__mcmp+0x28>

0800e828 <__mdiff>:
 800e828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e82c:	460c      	mov	r4, r1
 800e82e:	4606      	mov	r6, r0
 800e830:	4611      	mov	r1, r2
 800e832:	4620      	mov	r0, r4
 800e834:	4690      	mov	r8, r2
 800e836:	f7ff ffdb 	bl	800e7f0 <__mcmp>
 800e83a:	1e05      	subs	r5, r0, #0
 800e83c:	d110      	bne.n	800e860 <__mdiff+0x38>
 800e83e:	4629      	mov	r1, r5
 800e840:	4630      	mov	r0, r6
 800e842:	f7ff fd09 	bl	800e258 <_Balloc>
 800e846:	b930      	cbnz	r0, 800e856 <__mdiff+0x2e>
 800e848:	4b3a      	ldr	r3, [pc, #232]	; (800e934 <__mdiff+0x10c>)
 800e84a:	4602      	mov	r2, r0
 800e84c:	f240 2132 	movw	r1, #562	; 0x232
 800e850:	4839      	ldr	r0, [pc, #228]	; (800e938 <__mdiff+0x110>)
 800e852:	f7fe fab9 	bl	800cdc8 <__assert_func>
 800e856:	2301      	movs	r3, #1
 800e858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e85c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e860:	bfa4      	itt	ge
 800e862:	4643      	movge	r3, r8
 800e864:	46a0      	movge	r8, r4
 800e866:	4630      	mov	r0, r6
 800e868:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e86c:	bfa6      	itte	ge
 800e86e:	461c      	movge	r4, r3
 800e870:	2500      	movge	r5, #0
 800e872:	2501      	movlt	r5, #1
 800e874:	f7ff fcf0 	bl	800e258 <_Balloc>
 800e878:	b920      	cbnz	r0, 800e884 <__mdiff+0x5c>
 800e87a:	4b2e      	ldr	r3, [pc, #184]	; (800e934 <__mdiff+0x10c>)
 800e87c:	4602      	mov	r2, r0
 800e87e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e882:	e7e5      	b.n	800e850 <__mdiff+0x28>
 800e884:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e888:	6926      	ldr	r6, [r4, #16]
 800e88a:	60c5      	str	r5, [r0, #12]
 800e88c:	f104 0914 	add.w	r9, r4, #20
 800e890:	f108 0514 	add.w	r5, r8, #20
 800e894:	f100 0e14 	add.w	lr, r0, #20
 800e898:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e89c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e8a0:	f108 0210 	add.w	r2, r8, #16
 800e8a4:	46f2      	mov	sl, lr
 800e8a6:	2100      	movs	r1, #0
 800e8a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e8ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e8b0:	fa1f f883 	uxth.w	r8, r3
 800e8b4:	fa11 f18b 	uxtah	r1, r1, fp
 800e8b8:	0c1b      	lsrs	r3, r3, #16
 800e8ba:	eba1 0808 	sub.w	r8, r1, r8
 800e8be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e8c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e8c6:	fa1f f888 	uxth.w	r8, r8
 800e8ca:	1419      	asrs	r1, r3, #16
 800e8cc:	454e      	cmp	r6, r9
 800e8ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e8d2:	f84a 3b04 	str.w	r3, [sl], #4
 800e8d6:	d8e7      	bhi.n	800e8a8 <__mdiff+0x80>
 800e8d8:	1b33      	subs	r3, r6, r4
 800e8da:	3b15      	subs	r3, #21
 800e8dc:	f023 0303 	bic.w	r3, r3, #3
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	3415      	adds	r4, #21
 800e8e4:	42a6      	cmp	r6, r4
 800e8e6:	bf38      	it	cc
 800e8e8:	2304      	movcc	r3, #4
 800e8ea:	441d      	add	r5, r3
 800e8ec:	4473      	add	r3, lr
 800e8ee:	469e      	mov	lr, r3
 800e8f0:	462e      	mov	r6, r5
 800e8f2:	4566      	cmp	r6, ip
 800e8f4:	d30e      	bcc.n	800e914 <__mdiff+0xec>
 800e8f6:	f10c 0203 	add.w	r2, ip, #3
 800e8fa:	1b52      	subs	r2, r2, r5
 800e8fc:	f022 0203 	bic.w	r2, r2, #3
 800e900:	3d03      	subs	r5, #3
 800e902:	45ac      	cmp	ip, r5
 800e904:	bf38      	it	cc
 800e906:	2200      	movcc	r2, #0
 800e908:	441a      	add	r2, r3
 800e90a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e90e:	b17b      	cbz	r3, 800e930 <__mdiff+0x108>
 800e910:	6107      	str	r7, [r0, #16]
 800e912:	e7a3      	b.n	800e85c <__mdiff+0x34>
 800e914:	f856 8b04 	ldr.w	r8, [r6], #4
 800e918:	fa11 f288 	uxtah	r2, r1, r8
 800e91c:	1414      	asrs	r4, r2, #16
 800e91e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e922:	b292      	uxth	r2, r2
 800e924:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e928:	f84e 2b04 	str.w	r2, [lr], #4
 800e92c:	1421      	asrs	r1, r4, #16
 800e92e:	e7e0      	b.n	800e8f2 <__mdiff+0xca>
 800e930:	3f01      	subs	r7, #1
 800e932:	e7ea      	b.n	800e90a <__mdiff+0xe2>
 800e934:	08010dd1 	.word	0x08010dd1
 800e938:	08010e5c 	.word	0x08010e5c

0800e93c <__ulp>:
 800e93c:	b082      	sub	sp, #8
 800e93e:	ed8d 0b00 	vstr	d0, [sp]
 800e942:	9b01      	ldr	r3, [sp, #4]
 800e944:	4912      	ldr	r1, [pc, #72]	; (800e990 <__ulp+0x54>)
 800e946:	4019      	ands	r1, r3
 800e948:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e94c:	2900      	cmp	r1, #0
 800e94e:	dd05      	ble.n	800e95c <__ulp+0x20>
 800e950:	2200      	movs	r2, #0
 800e952:	460b      	mov	r3, r1
 800e954:	ec43 2b10 	vmov	d0, r2, r3
 800e958:	b002      	add	sp, #8
 800e95a:	4770      	bx	lr
 800e95c:	4249      	negs	r1, r1
 800e95e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e962:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e966:	f04f 0200 	mov.w	r2, #0
 800e96a:	f04f 0300 	mov.w	r3, #0
 800e96e:	da04      	bge.n	800e97a <__ulp+0x3e>
 800e970:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e974:	fa41 f300 	asr.w	r3, r1, r0
 800e978:	e7ec      	b.n	800e954 <__ulp+0x18>
 800e97a:	f1a0 0114 	sub.w	r1, r0, #20
 800e97e:	291e      	cmp	r1, #30
 800e980:	bfda      	itte	le
 800e982:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e986:	fa20 f101 	lsrle.w	r1, r0, r1
 800e98a:	2101      	movgt	r1, #1
 800e98c:	460a      	mov	r2, r1
 800e98e:	e7e1      	b.n	800e954 <__ulp+0x18>
 800e990:	7ff00000 	.word	0x7ff00000

0800e994 <__b2d>:
 800e994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e996:	6905      	ldr	r5, [r0, #16]
 800e998:	f100 0714 	add.w	r7, r0, #20
 800e99c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e9a0:	1f2e      	subs	r6, r5, #4
 800e9a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	f7ff fd48 	bl	800e43c <__hi0bits>
 800e9ac:	f1c0 0320 	rsb	r3, r0, #32
 800e9b0:	280a      	cmp	r0, #10
 800e9b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ea30 <__b2d+0x9c>
 800e9b6:	600b      	str	r3, [r1, #0]
 800e9b8:	dc14      	bgt.n	800e9e4 <__b2d+0x50>
 800e9ba:	f1c0 0e0b 	rsb	lr, r0, #11
 800e9be:	fa24 f10e 	lsr.w	r1, r4, lr
 800e9c2:	42b7      	cmp	r7, r6
 800e9c4:	ea41 030c 	orr.w	r3, r1, ip
 800e9c8:	bf34      	ite	cc
 800e9ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e9ce:	2100      	movcs	r1, #0
 800e9d0:	3015      	adds	r0, #21
 800e9d2:	fa04 f000 	lsl.w	r0, r4, r0
 800e9d6:	fa21 f10e 	lsr.w	r1, r1, lr
 800e9da:	ea40 0201 	orr.w	r2, r0, r1
 800e9de:	ec43 2b10 	vmov	d0, r2, r3
 800e9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9e4:	42b7      	cmp	r7, r6
 800e9e6:	bf3a      	itte	cc
 800e9e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e9ec:	f1a5 0608 	subcc.w	r6, r5, #8
 800e9f0:	2100      	movcs	r1, #0
 800e9f2:	380b      	subs	r0, #11
 800e9f4:	d017      	beq.n	800ea26 <__b2d+0x92>
 800e9f6:	f1c0 0c20 	rsb	ip, r0, #32
 800e9fa:	fa04 f500 	lsl.w	r5, r4, r0
 800e9fe:	42be      	cmp	r6, r7
 800ea00:	fa21 f40c 	lsr.w	r4, r1, ip
 800ea04:	ea45 0504 	orr.w	r5, r5, r4
 800ea08:	bf8c      	ite	hi
 800ea0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ea0e:	2400      	movls	r4, #0
 800ea10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ea14:	fa01 f000 	lsl.w	r0, r1, r0
 800ea18:	fa24 f40c 	lsr.w	r4, r4, ip
 800ea1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ea20:	ea40 0204 	orr.w	r2, r0, r4
 800ea24:	e7db      	b.n	800e9de <__b2d+0x4a>
 800ea26:	ea44 030c 	orr.w	r3, r4, ip
 800ea2a:	460a      	mov	r2, r1
 800ea2c:	e7d7      	b.n	800e9de <__b2d+0x4a>
 800ea2e:	bf00      	nop
 800ea30:	3ff00000 	.word	0x3ff00000

0800ea34 <__d2b>:
 800ea34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea38:	4689      	mov	r9, r1
 800ea3a:	2101      	movs	r1, #1
 800ea3c:	ec57 6b10 	vmov	r6, r7, d0
 800ea40:	4690      	mov	r8, r2
 800ea42:	f7ff fc09 	bl	800e258 <_Balloc>
 800ea46:	4604      	mov	r4, r0
 800ea48:	b930      	cbnz	r0, 800ea58 <__d2b+0x24>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	4b25      	ldr	r3, [pc, #148]	; (800eae4 <__d2b+0xb0>)
 800ea4e:	4826      	ldr	r0, [pc, #152]	; (800eae8 <__d2b+0xb4>)
 800ea50:	f240 310a 	movw	r1, #778	; 0x30a
 800ea54:	f7fe f9b8 	bl	800cdc8 <__assert_func>
 800ea58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ea5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ea60:	bb35      	cbnz	r5, 800eab0 <__d2b+0x7c>
 800ea62:	2e00      	cmp	r6, #0
 800ea64:	9301      	str	r3, [sp, #4]
 800ea66:	d028      	beq.n	800eaba <__d2b+0x86>
 800ea68:	4668      	mov	r0, sp
 800ea6a:	9600      	str	r6, [sp, #0]
 800ea6c:	f7ff fd06 	bl	800e47c <__lo0bits>
 800ea70:	9900      	ldr	r1, [sp, #0]
 800ea72:	b300      	cbz	r0, 800eab6 <__d2b+0x82>
 800ea74:	9a01      	ldr	r2, [sp, #4]
 800ea76:	f1c0 0320 	rsb	r3, r0, #32
 800ea7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ea7e:	430b      	orrs	r3, r1
 800ea80:	40c2      	lsrs	r2, r0
 800ea82:	6163      	str	r3, [r4, #20]
 800ea84:	9201      	str	r2, [sp, #4]
 800ea86:	9b01      	ldr	r3, [sp, #4]
 800ea88:	61a3      	str	r3, [r4, #24]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	bf14      	ite	ne
 800ea8e:	2202      	movne	r2, #2
 800ea90:	2201      	moveq	r2, #1
 800ea92:	6122      	str	r2, [r4, #16]
 800ea94:	b1d5      	cbz	r5, 800eacc <__d2b+0x98>
 800ea96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea9a:	4405      	add	r5, r0
 800ea9c:	f8c9 5000 	str.w	r5, [r9]
 800eaa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eaa4:	f8c8 0000 	str.w	r0, [r8]
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	b003      	add	sp, #12
 800eaac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eab4:	e7d5      	b.n	800ea62 <__d2b+0x2e>
 800eab6:	6161      	str	r1, [r4, #20]
 800eab8:	e7e5      	b.n	800ea86 <__d2b+0x52>
 800eaba:	a801      	add	r0, sp, #4
 800eabc:	f7ff fcde 	bl	800e47c <__lo0bits>
 800eac0:	9b01      	ldr	r3, [sp, #4]
 800eac2:	6163      	str	r3, [r4, #20]
 800eac4:	2201      	movs	r2, #1
 800eac6:	6122      	str	r2, [r4, #16]
 800eac8:	3020      	adds	r0, #32
 800eaca:	e7e3      	b.n	800ea94 <__d2b+0x60>
 800eacc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ead0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ead4:	f8c9 0000 	str.w	r0, [r9]
 800ead8:	6918      	ldr	r0, [r3, #16]
 800eada:	f7ff fcaf 	bl	800e43c <__hi0bits>
 800eade:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eae2:	e7df      	b.n	800eaa4 <__d2b+0x70>
 800eae4:	08010dd1 	.word	0x08010dd1
 800eae8:	08010e5c 	.word	0x08010e5c

0800eaec <__ratio>:
 800eaec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf0:	4688      	mov	r8, r1
 800eaf2:	4669      	mov	r1, sp
 800eaf4:	4681      	mov	r9, r0
 800eaf6:	f7ff ff4d 	bl	800e994 <__b2d>
 800eafa:	a901      	add	r1, sp, #4
 800eafc:	4640      	mov	r0, r8
 800eafe:	ec55 4b10 	vmov	r4, r5, d0
 800eb02:	f7ff ff47 	bl	800e994 <__b2d>
 800eb06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eb0e:	eba3 0c02 	sub.w	ip, r3, r2
 800eb12:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eb16:	1a9b      	subs	r3, r3, r2
 800eb18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eb1c:	ec51 0b10 	vmov	r0, r1, d0
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	bfd6      	itet	le
 800eb24:	460a      	movle	r2, r1
 800eb26:	462a      	movgt	r2, r5
 800eb28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eb2c:	468b      	mov	fp, r1
 800eb2e:	462f      	mov	r7, r5
 800eb30:	bfd4      	ite	le
 800eb32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800eb36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	ee10 2a10 	vmov	r2, s0
 800eb40:	465b      	mov	r3, fp
 800eb42:	4639      	mov	r1, r7
 800eb44:	f7f1 fe9a 	bl	800087c <__aeabi_ddiv>
 800eb48:	ec41 0b10 	vmov	d0, r0, r1
 800eb4c:	b003      	add	sp, #12
 800eb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb52 <__copybits>:
 800eb52:	3901      	subs	r1, #1
 800eb54:	b570      	push	{r4, r5, r6, lr}
 800eb56:	1149      	asrs	r1, r1, #5
 800eb58:	6914      	ldr	r4, [r2, #16]
 800eb5a:	3101      	adds	r1, #1
 800eb5c:	f102 0314 	add.w	r3, r2, #20
 800eb60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eb64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb68:	1f05      	subs	r5, r0, #4
 800eb6a:	42a3      	cmp	r3, r4
 800eb6c:	d30c      	bcc.n	800eb88 <__copybits+0x36>
 800eb6e:	1aa3      	subs	r3, r4, r2
 800eb70:	3b11      	subs	r3, #17
 800eb72:	f023 0303 	bic.w	r3, r3, #3
 800eb76:	3211      	adds	r2, #17
 800eb78:	42a2      	cmp	r2, r4
 800eb7a:	bf88      	it	hi
 800eb7c:	2300      	movhi	r3, #0
 800eb7e:	4418      	add	r0, r3
 800eb80:	2300      	movs	r3, #0
 800eb82:	4288      	cmp	r0, r1
 800eb84:	d305      	bcc.n	800eb92 <__copybits+0x40>
 800eb86:	bd70      	pop	{r4, r5, r6, pc}
 800eb88:	f853 6b04 	ldr.w	r6, [r3], #4
 800eb8c:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb90:	e7eb      	b.n	800eb6a <__copybits+0x18>
 800eb92:	f840 3b04 	str.w	r3, [r0], #4
 800eb96:	e7f4      	b.n	800eb82 <__copybits+0x30>

0800eb98 <__any_on>:
 800eb98:	f100 0214 	add.w	r2, r0, #20
 800eb9c:	6900      	ldr	r0, [r0, #16]
 800eb9e:	114b      	asrs	r3, r1, #5
 800eba0:	4298      	cmp	r0, r3
 800eba2:	b510      	push	{r4, lr}
 800eba4:	db11      	blt.n	800ebca <__any_on+0x32>
 800eba6:	dd0a      	ble.n	800ebbe <__any_on+0x26>
 800eba8:	f011 011f 	ands.w	r1, r1, #31
 800ebac:	d007      	beq.n	800ebbe <__any_on+0x26>
 800ebae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ebb2:	fa24 f001 	lsr.w	r0, r4, r1
 800ebb6:	fa00 f101 	lsl.w	r1, r0, r1
 800ebba:	428c      	cmp	r4, r1
 800ebbc:	d10b      	bne.n	800ebd6 <__any_on+0x3e>
 800ebbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d803      	bhi.n	800ebce <__any_on+0x36>
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	bd10      	pop	{r4, pc}
 800ebca:	4603      	mov	r3, r0
 800ebcc:	e7f7      	b.n	800ebbe <__any_on+0x26>
 800ebce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ebd2:	2900      	cmp	r1, #0
 800ebd4:	d0f5      	beq.n	800ebc2 <__any_on+0x2a>
 800ebd6:	2001      	movs	r0, #1
 800ebd8:	e7f6      	b.n	800ebc8 <__any_on+0x30>

0800ebda <_calloc_r>:
 800ebda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebdc:	fba1 2402 	umull	r2, r4, r1, r2
 800ebe0:	b94c      	cbnz	r4, 800ebf6 <_calloc_r+0x1c>
 800ebe2:	4611      	mov	r1, r2
 800ebe4:	9201      	str	r2, [sp, #4]
 800ebe6:	f000 f87b 	bl	800ece0 <_malloc_r>
 800ebea:	9a01      	ldr	r2, [sp, #4]
 800ebec:	4605      	mov	r5, r0
 800ebee:	b930      	cbnz	r0, 800ebfe <_calloc_r+0x24>
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	b003      	add	sp, #12
 800ebf4:	bd30      	pop	{r4, r5, pc}
 800ebf6:	220c      	movs	r2, #12
 800ebf8:	6002      	str	r2, [r0, #0]
 800ebfa:	2500      	movs	r5, #0
 800ebfc:	e7f8      	b.n	800ebf0 <_calloc_r+0x16>
 800ebfe:	4621      	mov	r1, r4
 800ec00:	f7fc fade 	bl	800b1c0 <memset>
 800ec04:	e7f4      	b.n	800ebf0 <_calloc_r+0x16>
	...

0800ec08 <_free_r>:
 800ec08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec0a:	2900      	cmp	r1, #0
 800ec0c:	d044      	beq.n	800ec98 <_free_r+0x90>
 800ec0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec12:	9001      	str	r0, [sp, #4]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	f1a1 0404 	sub.w	r4, r1, #4
 800ec1a:	bfb8      	it	lt
 800ec1c:	18e4      	addlt	r4, r4, r3
 800ec1e:	f000 fec7 	bl	800f9b0 <__malloc_lock>
 800ec22:	4a1e      	ldr	r2, [pc, #120]	; (800ec9c <_free_r+0x94>)
 800ec24:	9801      	ldr	r0, [sp, #4]
 800ec26:	6813      	ldr	r3, [r2, #0]
 800ec28:	b933      	cbnz	r3, 800ec38 <_free_r+0x30>
 800ec2a:	6063      	str	r3, [r4, #4]
 800ec2c:	6014      	str	r4, [r2, #0]
 800ec2e:	b003      	add	sp, #12
 800ec30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec34:	f000 bec2 	b.w	800f9bc <__malloc_unlock>
 800ec38:	42a3      	cmp	r3, r4
 800ec3a:	d908      	bls.n	800ec4e <_free_r+0x46>
 800ec3c:	6825      	ldr	r5, [r4, #0]
 800ec3e:	1961      	adds	r1, r4, r5
 800ec40:	428b      	cmp	r3, r1
 800ec42:	bf01      	itttt	eq
 800ec44:	6819      	ldreq	r1, [r3, #0]
 800ec46:	685b      	ldreq	r3, [r3, #4]
 800ec48:	1949      	addeq	r1, r1, r5
 800ec4a:	6021      	streq	r1, [r4, #0]
 800ec4c:	e7ed      	b.n	800ec2a <_free_r+0x22>
 800ec4e:	461a      	mov	r2, r3
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	b10b      	cbz	r3, 800ec58 <_free_r+0x50>
 800ec54:	42a3      	cmp	r3, r4
 800ec56:	d9fa      	bls.n	800ec4e <_free_r+0x46>
 800ec58:	6811      	ldr	r1, [r2, #0]
 800ec5a:	1855      	adds	r5, r2, r1
 800ec5c:	42a5      	cmp	r5, r4
 800ec5e:	d10b      	bne.n	800ec78 <_free_r+0x70>
 800ec60:	6824      	ldr	r4, [r4, #0]
 800ec62:	4421      	add	r1, r4
 800ec64:	1854      	adds	r4, r2, r1
 800ec66:	42a3      	cmp	r3, r4
 800ec68:	6011      	str	r1, [r2, #0]
 800ec6a:	d1e0      	bne.n	800ec2e <_free_r+0x26>
 800ec6c:	681c      	ldr	r4, [r3, #0]
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	6053      	str	r3, [r2, #4]
 800ec72:	4421      	add	r1, r4
 800ec74:	6011      	str	r1, [r2, #0]
 800ec76:	e7da      	b.n	800ec2e <_free_r+0x26>
 800ec78:	d902      	bls.n	800ec80 <_free_r+0x78>
 800ec7a:	230c      	movs	r3, #12
 800ec7c:	6003      	str	r3, [r0, #0]
 800ec7e:	e7d6      	b.n	800ec2e <_free_r+0x26>
 800ec80:	6825      	ldr	r5, [r4, #0]
 800ec82:	1961      	adds	r1, r4, r5
 800ec84:	428b      	cmp	r3, r1
 800ec86:	bf04      	itt	eq
 800ec88:	6819      	ldreq	r1, [r3, #0]
 800ec8a:	685b      	ldreq	r3, [r3, #4]
 800ec8c:	6063      	str	r3, [r4, #4]
 800ec8e:	bf04      	itt	eq
 800ec90:	1949      	addeq	r1, r1, r5
 800ec92:	6021      	streq	r1, [r4, #0]
 800ec94:	6054      	str	r4, [r2, #4]
 800ec96:	e7ca      	b.n	800ec2e <_free_r+0x26>
 800ec98:	b003      	add	sp, #12
 800ec9a:	bd30      	pop	{r4, r5, pc}
 800ec9c:	20000854 	.word	0x20000854

0800eca0 <sbrk_aligned>:
 800eca0:	b570      	push	{r4, r5, r6, lr}
 800eca2:	4e0e      	ldr	r6, [pc, #56]	; (800ecdc <sbrk_aligned+0x3c>)
 800eca4:	460c      	mov	r4, r1
 800eca6:	6831      	ldr	r1, [r6, #0]
 800eca8:	4605      	mov	r5, r0
 800ecaa:	b911      	cbnz	r1, 800ecb2 <sbrk_aligned+0x12>
 800ecac:	f000 fb4c 	bl	800f348 <_sbrk_r>
 800ecb0:	6030      	str	r0, [r6, #0]
 800ecb2:	4621      	mov	r1, r4
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	f000 fb47 	bl	800f348 <_sbrk_r>
 800ecba:	1c43      	adds	r3, r0, #1
 800ecbc:	d00a      	beq.n	800ecd4 <sbrk_aligned+0x34>
 800ecbe:	1cc4      	adds	r4, r0, #3
 800ecc0:	f024 0403 	bic.w	r4, r4, #3
 800ecc4:	42a0      	cmp	r0, r4
 800ecc6:	d007      	beq.n	800ecd8 <sbrk_aligned+0x38>
 800ecc8:	1a21      	subs	r1, r4, r0
 800ecca:	4628      	mov	r0, r5
 800eccc:	f000 fb3c 	bl	800f348 <_sbrk_r>
 800ecd0:	3001      	adds	r0, #1
 800ecd2:	d101      	bne.n	800ecd8 <sbrk_aligned+0x38>
 800ecd4:	f04f 34ff 	mov.w	r4, #4294967295
 800ecd8:	4620      	mov	r0, r4
 800ecda:	bd70      	pop	{r4, r5, r6, pc}
 800ecdc:	20000858 	.word	0x20000858

0800ece0 <_malloc_r>:
 800ece0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ece4:	1ccd      	adds	r5, r1, #3
 800ece6:	f025 0503 	bic.w	r5, r5, #3
 800ecea:	3508      	adds	r5, #8
 800ecec:	2d0c      	cmp	r5, #12
 800ecee:	bf38      	it	cc
 800ecf0:	250c      	movcc	r5, #12
 800ecf2:	2d00      	cmp	r5, #0
 800ecf4:	4607      	mov	r7, r0
 800ecf6:	db01      	blt.n	800ecfc <_malloc_r+0x1c>
 800ecf8:	42a9      	cmp	r1, r5
 800ecfa:	d905      	bls.n	800ed08 <_malloc_r+0x28>
 800ecfc:	230c      	movs	r3, #12
 800ecfe:	603b      	str	r3, [r7, #0]
 800ed00:	2600      	movs	r6, #0
 800ed02:	4630      	mov	r0, r6
 800ed04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed08:	4e2e      	ldr	r6, [pc, #184]	; (800edc4 <_malloc_r+0xe4>)
 800ed0a:	f000 fe51 	bl	800f9b0 <__malloc_lock>
 800ed0e:	6833      	ldr	r3, [r6, #0]
 800ed10:	461c      	mov	r4, r3
 800ed12:	bb34      	cbnz	r4, 800ed62 <_malloc_r+0x82>
 800ed14:	4629      	mov	r1, r5
 800ed16:	4638      	mov	r0, r7
 800ed18:	f7ff ffc2 	bl	800eca0 <sbrk_aligned>
 800ed1c:	1c43      	adds	r3, r0, #1
 800ed1e:	4604      	mov	r4, r0
 800ed20:	d14d      	bne.n	800edbe <_malloc_r+0xde>
 800ed22:	6834      	ldr	r4, [r6, #0]
 800ed24:	4626      	mov	r6, r4
 800ed26:	2e00      	cmp	r6, #0
 800ed28:	d140      	bne.n	800edac <_malloc_r+0xcc>
 800ed2a:	6823      	ldr	r3, [r4, #0]
 800ed2c:	4631      	mov	r1, r6
 800ed2e:	4638      	mov	r0, r7
 800ed30:	eb04 0803 	add.w	r8, r4, r3
 800ed34:	f000 fb08 	bl	800f348 <_sbrk_r>
 800ed38:	4580      	cmp	r8, r0
 800ed3a:	d13a      	bne.n	800edb2 <_malloc_r+0xd2>
 800ed3c:	6821      	ldr	r1, [r4, #0]
 800ed3e:	3503      	adds	r5, #3
 800ed40:	1a6d      	subs	r5, r5, r1
 800ed42:	f025 0503 	bic.w	r5, r5, #3
 800ed46:	3508      	adds	r5, #8
 800ed48:	2d0c      	cmp	r5, #12
 800ed4a:	bf38      	it	cc
 800ed4c:	250c      	movcc	r5, #12
 800ed4e:	4629      	mov	r1, r5
 800ed50:	4638      	mov	r0, r7
 800ed52:	f7ff ffa5 	bl	800eca0 <sbrk_aligned>
 800ed56:	3001      	adds	r0, #1
 800ed58:	d02b      	beq.n	800edb2 <_malloc_r+0xd2>
 800ed5a:	6823      	ldr	r3, [r4, #0]
 800ed5c:	442b      	add	r3, r5
 800ed5e:	6023      	str	r3, [r4, #0]
 800ed60:	e00e      	b.n	800ed80 <_malloc_r+0xa0>
 800ed62:	6822      	ldr	r2, [r4, #0]
 800ed64:	1b52      	subs	r2, r2, r5
 800ed66:	d41e      	bmi.n	800eda6 <_malloc_r+0xc6>
 800ed68:	2a0b      	cmp	r2, #11
 800ed6a:	d916      	bls.n	800ed9a <_malloc_r+0xba>
 800ed6c:	1961      	adds	r1, r4, r5
 800ed6e:	42a3      	cmp	r3, r4
 800ed70:	6025      	str	r5, [r4, #0]
 800ed72:	bf18      	it	ne
 800ed74:	6059      	strne	r1, [r3, #4]
 800ed76:	6863      	ldr	r3, [r4, #4]
 800ed78:	bf08      	it	eq
 800ed7a:	6031      	streq	r1, [r6, #0]
 800ed7c:	5162      	str	r2, [r4, r5]
 800ed7e:	604b      	str	r3, [r1, #4]
 800ed80:	4638      	mov	r0, r7
 800ed82:	f104 060b 	add.w	r6, r4, #11
 800ed86:	f000 fe19 	bl	800f9bc <__malloc_unlock>
 800ed8a:	f026 0607 	bic.w	r6, r6, #7
 800ed8e:	1d23      	adds	r3, r4, #4
 800ed90:	1af2      	subs	r2, r6, r3
 800ed92:	d0b6      	beq.n	800ed02 <_malloc_r+0x22>
 800ed94:	1b9b      	subs	r3, r3, r6
 800ed96:	50a3      	str	r3, [r4, r2]
 800ed98:	e7b3      	b.n	800ed02 <_malloc_r+0x22>
 800ed9a:	6862      	ldr	r2, [r4, #4]
 800ed9c:	42a3      	cmp	r3, r4
 800ed9e:	bf0c      	ite	eq
 800eda0:	6032      	streq	r2, [r6, #0]
 800eda2:	605a      	strne	r2, [r3, #4]
 800eda4:	e7ec      	b.n	800ed80 <_malloc_r+0xa0>
 800eda6:	4623      	mov	r3, r4
 800eda8:	6864      	ldr	r4, [r4, #4]
 800edaa:	e7b2      	b.n	800ed12 <_malloc_r+0x32>
 800edac:	4634      	mov	r4, r6
 800edae:	6876      	ldr	r6, [r6, #4]
 800edb0:	e7b9      	b.n	800ed26 <_malloc_r+0x46>
 800edb2:	230c      	movs	r3, #12
 800edb4:	603b      	str	r3, [r7, #0]
 800edb6:	4638      	mov	r0, r7
 800edb8:	f000 fe00 	bl	800f9bc <__malloc_unlock>
 800edbc:	e7a1      	b.n	800ed02 <_malloc_r+0x22>
 800edbe:	6025      	str	r5, [r4, #0]
 800edc0:	e7de      	b.n	800ed80 <_malloc_r+0xa0>
 800edc2:	bf00      	nop
 800edc4:	20000854 	.word	0x20000854

0800edc8 <__ssputs_r>:
 800edc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edcc:	688e      	ldr	r6, [r1, #8]
 800edce:	429e      	cmp	r6, r3
 800edd0:	4682      	mov	sl, r0
 800edd2:	460c      	mov	r4, r1
 800edd4:	4690      	mov	r8, r2
 800edd6:	461f      	mov	r7, r3
 800edd8:	d838      	bhi.n	800ee4c <__ssputs_r+0x84>
 800edda:	898a      	ldrh	r2, [r1, #12]
 800eddc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ede0:	d032      	beq.n	800ee48 <__ssputs_r+0x80>
 800ede2:	6825      	ldr	r5, [r4, #0]
 800ede4:	6909      	ldr	r1, [r1, #16]
 800ede6:	eba5 0901 	sub.w	r9, r5, r1
 800edea:	6965      	ldr	r5, [r4, #20]
 800edec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800edf4:	3301      	adds	r3, #1
 800edf6:	444b      	add	r3, r9
 800edf8:	106d      	asrs	r5, r5, #1
 800edfa:	429d      	cmp	r5, r3
 800edfc:	bf38      	it	cc
 800edfe:	461d      	movcc	r5, r3
 800ee00:	0553      	lsls	r3, r2, #21
 800ee02:	d531      	bpl.n	800ee68 <__ssputs_r+0xa0>
 800ee04:	4629      	mov	r1, r5
 800ee06:	f7ff ff6b 	bl	800ece0 <_malloc_r>
 800ee0a:	4606      	mov	r6, r0
 800ee0c:	b950      	cbnz	r0, 800ee24 <__ssputs_r+0x5c>
 800ee0e:	230c      	movs	r3, #12
 800ee10:	f8ca 3000 	str.w	r3, [sl]
 800ee14:	89a3      	ldrh	r3, [r4, #12]
 800ee16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee1a:	81a3      	strh	r3, [r4, #12]
 800ee1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee24:	6921      	ldr	r1, [r4, #16]
 800ee26:	464a      	mov	r2, r9
 800ee28:	f7ff fa08 	bl	800e23c <memcpy>
 800ee2c:	89a3      	ldrh	r3, [r4, #12]
 800ee2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee36:	81a3      	strh	r3, [r4, #12]
 800ee38:	6126      	str	r6, [r4, #16]
 800ee3a:	6165      	str	r5, [r4, #20]
 800ee3c:	444e      	add	r6, r9
 800ee3e:	eba5 0509 	sub.w	r5, r5, r9
 800ee42:	6026      	str	r6, [r4, #0]
 800ee44:	60a5      	str	r5, [r4, #8]
 800ee46:	463e      	mov	r6, r7
 800ee48:	42be      	cmp	r6, r7
 800ee4a:	d900      	bls.n	800ee4e <__ssputs_r+0x86>
 800ee4c:	463e      	mov	r6, r7
 800ee4e:	6820      	ldr	r0, [r4, #0]
 800ee50:	4632      	mov	r2, r6
 800ee52:	4641      	mov	r1, r8
 800ee54:	f000 fd92 	bl	800f97c <memmove>
 800ee58:	68a3      	ldr	r3, [r4, #8]
 800ee5a:	1b9b      	subs	r3, r3, r6
 800ee5c:	60a3      	str	r3, [r4, #8]
 800ee5e:	6823      	ldr	r3, [r4, #0]
 800ee60:	4433      	add	r3, r6
 800ee62:	6023      	str	r3, [r4, #0]
 800ee64:	2000      	movs	r0, #0
 800ee66:	e7db      	b.n	800ee20 <__ssputs_r+0x58>
 800ee68:	462a      	mov	r2, r5
 800ee6a:	f000 fdad 	bl	800f9c8 <_realloc_r>
 800ee6e:	4606      	mov	r6, r0
 800ee70:	2800      	cmp	r0, #0
 800ee72:	d1e1      	bne.n	800ee38 <__ssputs_r+0x70>
 800ee74:	6921      	ldr	r1, [r4, #16]
 800ee76:	4650      	mov	r0, sl
 800ee78:	f7ff fec6 	bl	800ec08 <_free_r>
 800ee7c:	e7c7      	b.n	800ee0e <__ssputs_r+0x46>
	...

0800ee80 <_svfiprintf_r>:
 800ee80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	4698      	mov	r8, r3
 800ee86:	898b      	ldrh	r3, [r1, #12]
 800ee88:	061b      	lsls	r3, r3, #24
 800ee8a:	b09d      	sub	sp, #116	; 0x74
 800ee8c:	4607      	mov	r7, r0
 800ee8e:	460d      	mov	r5, r1
 800ee90:	4614      	mov	r4, r2
 800ee92:	d50e      	bpl.n	800eeb2 <_svfiprintf_r+0x32>
 800ee94:	690b      	ldr	r3, [r1, #16]
 800ee96:	b963      	cbnz	r3, 800eeb2 <_svfiprintf_r+0x32>
 800ee98:	2140      	movs	r1, #64	; 0x40
 800ee9a:	f7ff ff21 	bl	800ece0 <_malloc_r>
 800ee9e:	6028      	str	r0, [r5, #0]
 800eea0:	6128      	str	r0, [r5, #16]
 800eea2:	b920      	cbnz	r0, 800eeae <_svfiprintf_r+0x2e>
 800eea4:	230c      	movs	r3, #12
 800eea6:	603b      	str	r3, [r7, #0]
 800eea8:	f04f 30ff 	mov.w	r0, #4294967295
 800eeac:	e0d1      	b.n	800f052 <_svfiprintf_r+0x1d2>
 800eeae:	2340      	movs	r3, #64	; 0x40
 800eeb0:	616b      	str	r3, [r5, #20]
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	9309      	str	r3, [sp, #36]	; 0x24
 800eeb6:	2320      	movs	r3, #32
 800eeb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eebc:	f8cd 800c 	str.w	r8, [sp, #12]
 800eec0:	2330      	movs	r3, #48	; 0x30
 800eec2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f06c <_svfiprintf_r+0x1ec>
 800eec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eeca:	f04f 0901 	mov.w	r9, #1
 800eece:	4623      	mov	r3, r4
 800eed0:	469a      	mov	sl, r3
 800eed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eed6:	b10a      	cbz	r2, 800eedc <_svfiprintf_r+0x5c>
 800eed8:	2a25      	cmp	r2, #37	; 0x25
 800eeda:	d1f9      	bne.n	800eed0 <_svfiprintf_r+0x50>
 800eedc:	ebba 0b04 	subs.w	fp, sl, r4
 800eee0:	d00b      	beq.n	800eefa <_svfiprintf_r+0x7a>
 800eee2:	465b      	mov	r3, fp
 800eee4:	4622      	mov	r2, r4
 800eee6:	4629      	mov	r1, r5
 800eee8:	4638      	mov	r0, r7
 800eeea:	f7ff ff6d 	bl	800edc8 <__ssputs_r>
 800eeee:	3001      	adds	r0, #1
 800eef0:	f000 80aa 	beq.w	800f048 <_svfiprintf_r+0x1c8>
 800eef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eef6:	445a      	add	r2, fp
 800eef8:	9209      	str	r2, [sp, #36]	; 0x24
 800eefa:	f89a 3000 	ldrb.w	r3, [sl]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	f000 80a2 	beq.w	800f048 <_svfiprintf_r+0x1c8>
 800ef04:	2300      	movs	r3, #0
 800ef06:	f04f 32ff 	mov.w	r2, #4294967295
 800ef0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef0e:	f10a 0a01 	add.w	sl, sl, #1
 800ef12:	9304      	str	r3, [sp, #16]
 800ef14:	9307      	str	r3, [sp, #28]
 800ef16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef1a:	931a      	str	r3, [sp, #104]	; 0x68
 800ef1c:	4654      	mov	r4, sl
 800ef1e:	2205      	movs	r2, #5
 800ef20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef24:	4851      	ldr	r0, [pc, #324]	; (800f06c <_svfiprintf_r+0x1ec>)
 800ef26:	f7f1 f973 	bl	8000210 <memchr>
 800ef2a:	9a04      	ldr	r2, [sp, #16]
 800ef2c:	b9d8      	cbnz	r0, 800ef66 <_svfiprintf_r+0xe6>
 800ef2e:	06d0      	lsls	r0, r2, #27
 800ef30:	bf44      	itt	mi
 800ef32:	2320      	movmi	r3, #32
 800ef34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef38:	0711      	lsls	r1, r2, #28
 800ef3a:	bf44      	itt	mi
 800ef3c:	232b      	movmi	r3, #43	; 0x2b
 800ef3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef42:	f89a 3000 	ldrb.w	r3, [sl]
 800ef46:	2b2a      	cmp	r3, #42	; 0x2a
 800ef48:	d015      	beq.n	800ef76 <_svfiprintf_r+0xf6>
 800ef4a:	9a07      	ldr	r2, [sp, #28]
 800ef4c:	4654      	mov	r4, sl
 800ef4e:	2000      	movs	r0, #0
 800ef50:	f04f 0c0a 	mov.w	ip, #10
 800ef54:	4621      	mov	r1, r4
 800ef56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef5a:	3b30      	subs	r3, #48	; 0x30
 800ef5c:	2b09      	cmp	r3, #9
 800ef5e:	d94e      	bls.n	800effe <_svfiprintf_r+0x17e>
 800ef60:	b1b0      	cbz	r0, 800ef90 <_svfiprintf_r+0x110>
 800ef62:	9207      	str	r2, [sp, #28]
 800ef64:	e014      	b.n	800ef90 <_svfiprintf_r+0x110>
 800ef66:	eba0 0308 	sub.w	r3, r0, r8
 800ef6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	9304      	str	r3, [sp, #16]
 800ef72:	46a2      	mov	sl, r4
 800ef74:	e7d2      	b.n	800ef1c <_svfiprintf_r+0x9c>
 800ef76:	9b03      	ldr	r3, [sp, #12]
 800ef78:	1d19      	adds	r1, r3, #4
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	9103      	str	r1, [sp, #12]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	bfbb      	ittet	lt
 800ef82:	425b      	neglt	r3, r3
 800ef84:	f042 0202 	orrlt.w	r2, r2, #2
 800ef88:	9307      	strge	r3, [sp, #28]
 800ef8a:	9307      	strlt	r3, [sp, #28]
 800ef8c:	bfb8      	it	lt
 800ef8e:	9204      	strlt	r2, [sp, #16]
 800ef90:	7823      	ldrb	r3, [r4, #0]
 800ef92:	2b2e      	cmp	r3, #46	; 0x2e
 800ef94:	d10c      	bne.n	800efb0 <_svfiprintf_r+0x130>
 800ef96:	7863      	ldrb	r3, [r4, #1]
 800ef98:	2b2a      	cmp	r3, #42	; 0x2a
 800ef9a:	d135      	bne.n	800f008 <_svfiprintf_r+0x188>
 800ef9c:	9b03      	ldr	r3, [sp, #12]
 800ef9e:	1d1a      	adds	r2, r3, #4
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	9203      	str	r2, [sp, #12]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	bfb8      	it	lt
 800efa8:	f04f 33ff 	movlt.w	r3, #4294967295
 800efac:	3402      	adds	r4, #2
 800efae:	9305      	str	r3, [sp, #20]
 800efb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f07c <_svfiprintf_r+0x1fc>
 800efb4:	7821      	ldrb	r1, [r4, #0]
 800efb6:	2203      	movs	r2, #3
 800efb8:	4650      	mov	r0, sl
 800efba:	f7f1 f929 	bl	8000210 <memchr>
 800efbe:	b140      	cbz	r0, 800efd2 <_svfiprintf_r+0x152>
 800efc0:	2340      	movs	r3, #64	; 0x40
 800efc2:	eba0 000a 	sub.w	r0, r0, sl
 800efc6:	fa03 f000 	lsl.w	r0, r3, r0
 800efca:	9b04      	ldr	r3, [sp, #16]
 800efcc:	4303      	orrs	r3, r0
 800efce:	3401      	adds	r4, #1
 800efd0:	9304      	str	r3, [sp, #16]
 800efd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efd6:	4826      	ldr	r0, [pc, #152]	; (800f070 <_svfiprintf_r+0x1f0>)
 800efd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efdc:	2206      	movs	r2, #6
 800efde:	f7f1 f917 	bl	8000210 <memchr>
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d038      	beq.n	800f058 <_svfiprintf_r+0x1d8>
 800efe6:	4b23      	ldr	r3, [pc, #140]	; (800f074 <_svfiprintf_r+0x1f4>)
 800efe8:	bb1b      	cbnz	r3, 800f032 <_svfiprintf_r+0x1b2>
 800efea:	9b03      	ldr	r3, [sp, #12]
 800efec:	3307      	adds	r3, #7
 800efee:	f023 0307 	bic.w	r3, r3, #7
 800eff2:	3308      	adds	r3, #8
 800eff4:	9303      	str	r3, [sp, #12]
 800eff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff8:	4433      	add	r3, r6
 800effa:	9309      	str	r3, [sp, #36]	; 0x24
 800effc:	e767      	b.n	800eece <_svfiprintf_r+0x4e>
 800effe:	fb0c 3202 	mla	r2, ip, r2, r3
 800f002:	460c      	mov	r4, r1
 800f004:	2001      	movs	r0, #1
 800f006:	e7a5      	b.n	800ef54 <_svfiprintf_r+0xd4>
 800f008:	2300      	movs	r3, #0
 800f00a:	3401      	adds	r4, #1
 800f00c:	9305      	str	r3, [sp, #20]
 800f00e:	4619      	mov	r1, r3
 800f010:	f04f 0c0a 	mov.w	ip, #10
 800f014:	4620      	mov	r0, r4
 800f016:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f01a:	3a30      	subs	r2, #48	; 0x30
 800f01c:	2a09      	cmp	r2, #9
 800f01e:	d903      	bls.n	800f028 <_svfiprintf_r+0x1a8>
 800f020:	2b00      	cmp	r3, #0
 800f022:	d0c5      	beq.n	800efb0 <_svfiprintf_r+0x130>
 800f024:	9105      	str	r1, [sp, #20]
 800f026:	e7c3      	b.n	800efb0 <_svfiprintf_r+0x130>
 800f028:	fb0c 2101 	mla	r1, ip, r1, r2
 800f02c:	4604      	mov	r4, r0
 800f02e:	2301      	movs	r3, #1
 800f030:	e7f0      	b.n	800f014 <_svfiprintf_r+0x194>
 800f032:	ab03      	add	r3, sp, #12
 800f034:	9300      	str	r3, [sp, #0]
 800f036:	462a      	mov	r2, r5
 800f038:	4b0f      	ldr	r3, [pc, #60]	; (800f078 <_svfiprintf_r+0x1f8>)
 800f03a:	a904      	add	r1, sp, #16
 800f03c:	4638      	mov	r0, r7
 800f03e:	f7fc f967 	bl	800b310 <_printf_float>
 800f042:	1c42      	adds	r2, r0, #1
 800f044:	4606      	mov	r6, r0
 800f046:	d1d6      	bne.n	800eff6 <_svfiprintf_r+0x176>
 800f048:	89ab      	ldrh	r3, [r5, #12]
 800f04a:	065b      	lsls	r3, r3, #25
 800f04c:	f53f af2c 	bmi.w	800eea8 <_svfiprintf_r+0x28>
 800f050:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f052:	b01d      	add	sp, #116	; 0x74
 800f054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f058:	ab03      	add	r3, sp, #12
 800f05a:	9300      	str	r3, [sp, #0]
 800f05c:	462a      	mov	r2, r5
 800f05e:	4b06      	ldr	r3, [pc, #24]	; (800f078 <_svfiprintf_r+0x1f8>)
 800f060:	a904      	add	r1, sp, #16
 800f062:	4638      	mov	r0, r7
 800f064:	f7fc fbf8 	bl	800b858 <_printf_i>
 800f068:	e7eb      	b.n	800f042 <_svfiprintf_r+0x1c2>
 800f06a:	bf00      	nop
 800f06c:	08010fb4 	.word	0x08010fb4
 800f070:	08010fbe 	.word	0x08010fbe
 800f074:	0800b311 	.word	0x0800b311
 800f078:	0800edc9 	.word	0x0800edc9
 800f07c:	08010fba 	.word	0x08010fba

0800f080 <__sfputc_r>:
 800f080:	6893      	ldr	r3, [r2, #8]
 800f082:	3b01      	subs	r3, #1
 800f084:	2b00      	cmp	r3, #0
 800f086:	b410      	push	{r4}
 800f088:	6093      	str	r3, [r2, #8]
 800f08a:	da08      	bge.n	800f09e <__sfputc_r+0x1e>
 800f08c:	6994      	ldr	r4, [r2, #24]
 800f08e:	42a3      	cmp	r3, r4
 800f090:	db01      	blt.n	800f096 <__sfputc_r+0x16>
 800f092:	290a      	cmp	r1, #10
 800f094:	d103      	bne.n	800f09e <__sfputc_r+0x1e>
 800f096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f09a:	f000 b979 	b.w	800f390 <__swbuf_r>
 800f09e:	6813      	ldr	r3, [r2, #0]
 800f0a0:	1c58      	adds	r0, r3, #1
 800f0a2:	6010      	str	r0, [r2, #0]
 800f0a4:	7019      	strb	r1, [r3, #0]
 800f0a6:	4608      	mov	r0, r1
 800f0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0ac:	4770      	bx	lr

0800f0ae <__sfputs_r>:
 800f0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0b0:	4606      	mov	r6, r0
 800f0b2:	460f      	mov	r7, r1
 800f0b4:	4614      	mov	r4, r2
 800f0b6:	18d5      	adds	r5, r2, r3
 800f0b8:	42ac      	cmp	r4, r5
 800f0ba:	d101      	bne.n	800f0c0 <__sfputs_r+0x12>
 800f0bc:	2000      	movs	r0, #0
 800f0be:	e007      	b.n	800f0d0 <__sfputs_r+0x22>
 800f0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0c4:	463a      	mov	r2, r7
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	f7ff ffda 	bl	800f080 <__sfputc_r>
 800f0cc:	1c43      	adds	r3, r0, #1
 800f0ce:	d1f3      	bne.n	800f0b8 <__sfputs_r+0xa>
 800f0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f0d4 <_vfiprintf_r>:
 800f0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d8:	460d      	mov	r5, r1
 800f0da:	b09d      	sub	sp, #116	; 0x74
 800f0dc:	4614      	mov	r4, r2
 800f0de:	4698      	mov	r8, r3
 800f0e0:	4606      	mov	r6, r0
 800f0e2:	b118      	cbz	r0, 800f0ec <_vfiprintf_r+0x18>
 800f0e4:	6983      	ldr	r3, [r0, #24]
 800f0e6:	b90b      	cbnz	r3, 800f0ec <_vfiprintf_r+0x18>
 800f0e8:	f000 fb42 	bl	800f770 <__sinit>
 800f0ec:	4b89      	ldr	r3, [pc, #548]	; (800f314 <_vfiprintf_r+0x240>)
 800f0ee:	429d      	cmp	r5, r3
 800f0f0:	d11b      	bne.n	800f12a <_vfiprintf_r+0x56>
 800f0f2:	6875      	ldr	r5, [r6, #4]
 800f0f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0f6:	07d9      	lsls	r1, r3, #31
 800f0f8:	d405      	bmi.n	800f106 <_vfiprintf_r+0x32>
 800f0fa:	89ab      	ldrh	r3, [r5, #12]
 800f0fc:	059a      	lsls	r2, r3, #22
 800f0fe:	d402      	bmi.n	800f106 <_vfiprintf_r+0x32>
 800f100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f102:	f000 fbd3 	bl	800f8ac <__retarget_lock_acquire_recursive>
 800f106:	89ab      	ldrh	r3, [r5, #12]
 800f108:	071b      	lsls	r3, r3, #28
 800f10a:	d501      	bpl.n	800f110 <_vfiprintf_r+0x3c>
 800f10c:	692b      	ldr	r3, [r5, #16]
 800f10e:	b9eb      	cbnz	r3, 800f14c <_vfiprintf_r+0x78>
 800f110:	4629      	mov	r1, r5
 800f112:	4630      	mov	r0, r6
 800f114:	f000 f99c 	bl	800f450 <__swsetup_r>
 800f118:	b1c0      	cbz	r0, 800f14c <_vfiprintf_r+0x78>
 800f11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f11c:	07dc      	lsls	r4, r3, #31
 800f11e:	d50e      	bpl.n	800f13e <_vfiprintf_r+0x6a>
 800f120:	f04f 30ff 	mov.w	r0, #4294967295
 800f124:	b01d      	add	sp, #116	; 0x74
 800f126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f12a:	4b7b      	ldr	r3, [pc, #492]	; (800f318 <_vfiprintf_r+0x244>)
 800f12c:	429d      	cmp	r5, r3
 800f12e:	d101      	bne.n	800f134 <_vfiprintf_r+0x60>
 800f130:	68b5      	ldr	r5, [r6, #8]
 800f132:	e7df      	b.n	800f0f4 <_vfiprintf_r+0x20>
 800f134:	4b79      	ldr	r3, [pc, #484]	; (800f31c <_vfiprintf_r+0x248>)
 800f136:	429d      	cmp	r5, r3
 800f138:	bf08      	it	eq
 800f13a:	68f5      	ldreq	r5, [r6, #12]
 800f13c:	e7da      	b.n	800f0f4 <_vfiprintf_r+0x20>
 800f13e:	89ab      	ldrh	r3, [r5, #12]
 800f140:	0598      	lsls	r0, r3, #22
 800f142:	d4ed      	bmi.n	800f120 <_vfiprintf_r+0x4c>
 800f144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f146:	f000 fbb2 	bl	800f8ae <__retarget_lock_release_recursive>
 800f14a:	e7e9      	b.n	800f120 <_vfiprintf_r+0x4c>
 800f14c:	2300      	movs	r3, #0
 800f14e:	9309      	str	r3, [sp, #36]	; 0x24
 800f150:	2320      	movs	r3, #32
 800f152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f156:	f8cd 800c 	str.w	r8, [sp, #12]
 800f15a:	2330      	movs	r3, #48	; 0x30
 800f15c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f320 <_vfiprintf_r+0x24c>
 800f160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f164:	f04f 0901 	mov.w	r9, #1
 800f168:	4623      	mov	r3, r4
 800f16a:	469a      	mov	sl, r3
 800f16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f170:	b10a      	cbz	r2, 800f176 <_vfiprintf_r+0xa2>
 800f172:	2a25      	cmp	r2, #37	; 0x25
 800f174:	d1f9      	bne.n	800f16a <_vfiprintf_r+0x96>
 800f176:	ebba 0b04 	subs.w	fp, sl, r4
 800f17a:	d00b      	beq.n	800f194 <_vfiprintf_r+0xc0>
 800f17c:	465b      	mov	r3, fp
 800f17e:	4622      	mov	r2, r4
 800f180:	4629      	mov	r1, r5
 800f182:	4630      	mov	r0, r6
 800f184:	f7ff ff93 	bl	800f0ae <__sfputs_r>
 800f188:	3001      	adds	r0, #1
 800f18a:	f000 80aa 	beq.w	800f2e2 <_vfiprintf_r+0x20e>
 800f18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f190:	445a      	add	r2, fp
 800f192:	9209      	str	r2, [sp, #36]	; 0x24
 800f194:	f89a 3000 	ldrb.w	r3, [sl]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	f000 80a2 	beq.w	800f2e2 <_vfiprintf_r+0x20e>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f1a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1a8:	f10a 0a01 	add.w	sl, sl, #1
 800f1ac:	9304      	str	r3, [sp, #16]
 800f1ae:	9307      	str	r3, [sp, #28]
 800f1b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1b4:	931a      	str	r3, [sp, #104]	; 0x68
 800f1b6:	4654      	mov	r4, sl
 800f1b8:	2205      	movs	r2, #5
 800f1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1be:	4858      	ldr	r0, [pc, #352]	; (800f320 <_vfiprintf_r+0x24c>)
 800f1c0:	f7f1 f826 	bl	8000210 <memchr>
 800f1c4:	9a04      	ldr	r2, [sp, #16]
 800f1c6:	b9d8      	cbnz	r0, 800f200 <_vfiprintf_r+0x12c>
 800f1c8:	06d1      	lsls	r1, r2, #27
 800f1ca:	bf44      	itt	mi
 800f1cc:	2320      	movmi	r3, #32
 800f1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1d2:	0713      	lsls	r3, r2, #28
 800f1d4:	bf44      	itt	mi
 800f1d6:	232b      	movmi	r3, #43	; 0x2b
 800f1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800f1e2:	d015      	beq.n	800f210 <_vfiprintf_r+0x13c>
 800f1e4:	9a07      	ldr	r2, [sp, #28]
 800f1e6:	4654      	mov	r4, sl
 800f1e8:	2000      	movs	r0, #0
 800f1ea:	f04f 0c0a 	mov.w	ip, #10
 800f1ee:	4621      	mov	r1, r4
 800f1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1f4:	3b30      	subs	r3, #48	; 0x30
 800f1f6:	2b09      	cmp	r3, #9
 800f1f8:	d94e      	bls.n	800f298 <_vfiprintf_r+0x1c4>
 800f1fa:	b1b0      	cbz	r0, 800f22a <_vfiprintf_r+0x156>
 800f1fc:	9207      	str	r2, [sp, #28]
 800f1fe:	e014      	b.n	800f22a <_vfiprintf_r+0x156>
 800f200:	eba0 0308 	sub.w	r3, r0, r8
 800f204:	fa09 f303 	lsl.w	r3, r9, r3
 800f208:	4313      	orrs	r3, r2
 800f20a:	9304      	str	r3, [sp, #16]
 800f20c:	46a2      	mov	sl, r4
 800f20e:	e7d2      	b.n	800f1b6 <_vfiprintf_r+0xe2>
 800f210:	9b03      	ldr	r3, [sp, #12]
 800f212:	1d19      	adds	r1, r3, #4
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	9103      	str	r1, [sp, #12]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	bfbb      	ittet	lt
 800f21c:	425b      	neglt	r3, r3
 800f21e:	f042 0202 	orrlt.w	r2, r2, #2
 800f222:	9307      	strge	r3, [sp, #28]
 800f224:	9307      	strlt	r3, [sp, #28]
 800f226:	bfb8      	it	lt
 800f228:	9204      	strlt	r2, [sp, #16]
 800f22a:	7823      	ldrb	r3, [r4, #0]
 800f22c:	2b2e      	cmp	r3, #46	; 0x2e
 800f22e:	d10c      	bne.n	800f24a <_vfiprintf_r+0x176>
 800f230:	7863      	ldrb	r3, [r4, #1]
 800f232:	2b2a      	cmp	r3, #42	; 0x2a
 800f234:	d135      	bne.n	800f2a2 <_vfiprintf_r+0x1ce>
 800f236:	9b03      	ldr	r3, [sp, #12]
 800f238:	1d1a      	adds	r2, r3, #4
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	9203      	str	r2, [sp, #12]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	bfb8      	it	lt
 800f242:	f04f 33ff 	movlt.w	r3, #4294967295
 800f246:	3402      	adds	r4, #2
 800f248:	9305      	str	r3, [sp, #20]
 800f24a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f330 <_vfiprintf_r+0x25c>
 800f24e:	7821      	ldrb	r1, [r4, #0]
 800f250:	2203      	movs	r2, #3
 800f252:	4650      	mov	r0, sl
 800f254:	f7f0 ffdc 	bl	8000210 <memchr>
 800f258:	b140      	cbz	r0, 800f26c <_vfiprintf_r+0x198>
 800f25a:	2340      	movs	r3, #64	; 0x40
 800f25c:	eba0 000a 	sub.w	r0, r0, sl
 800f260:	fa03 f000 	lsl.w	r0, r3, r0
 800f264:	9b04      	ldr	r3, [sp, #16]
 800f266:	4303      	orrs	r3, r0
 800f268:	3401      	adds	r4, #1
 800f26a:	9304      	str	r3, [sp, #16]
 800f26c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f270:	482c      	ldr	r0, [pc, #176]	; (800f324 <_vfiprintf_r+0x250>)
 800f272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f276:	2206      	movs	r2, #6
 800f278:	f7f0 ffca 	bl	8000210 <memchr>
 800f27c:	2800      	cmp	r0, #0
 800f27e:	d03f      	beq.n	800f300 <_vfiprintf_r+0x22c>
 800f280:	4b29      	ldr	r3, [pc, #164]	; (800f328 <_vfiprintf_r+0x254>)
 800f282:	bb1b      	cbnz	r3, 800f2cc <_vfiprintf_r+0x1f8>
 800f284:	9b03      	ldr	r3, [sp, #12]
 800f286:	3307      	adds	r3, #7
 800f288:	f023 0307 	bic.w	r3, r3, #7
 800f28c:	3308      	adds	r3, #8
 800f28e:	9303      	str	r3, [sp, #12]
 800f290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f292:	443b      	add	r3, r7
 800f294:	9309      	str	r3, [sp, #36]	; 0x24
 800f296:	e767      	b.n	800f168 <_vfiprintf_r+0x94>
 800f298:	fb0c 3202 	mla	r2, ip, r2, r3
 800f29c:	460c      	mov	r4, r1
 800f29e:	2001      	movs	r0, #1
 800f2a0:	e7a5      	b.n	800f1ee <_vfiprintf_r+0x11a>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	3401      	adds	r4, #1
 800f2a6:	9305      	str	r3, [sp, #20]
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	f04f 0c0a 	mov.w	ip, #10
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2b4:	3a30      	subs	r2, #48	; 0x30
 800f2b6:	2a09      	cmp	r2, #9
 800f2b8:	d903      	bls.n	800f2c2 <_vfiprintf_r+0x1ee>
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d0c5      	beq.n	800f24a <_vfiprintf_r+0x176>
 800f2be:	9105      	str	r1, [sp, #20]
 800f2c0:	e7c3      	b.n	800f24a <_vfiprintf_r+0x176>
 800f2c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e7f0      	b.n	800f2ae <_vfiprintf_r+0x1da>
 800f2cc:	ab03      	add	r3, sp, #12
 800f2ce:	9300      	str	r3, [sp, #0]
 800f2d0:	462a      	mov	r2, r5
 800f2d2:	4b16      	ldr	r3, [pc, #88]	; (800f32c <_vfiprintf_r+0x258>)
 800f2d4:	a904      	add	r1, sp, #16
 800f2d6:	4630      	mov	r0, r6
 800f2d8:	f7fc f81a 	bl	800b310 <_printf_float>
 800f2dc:	4607      	mov	r7, r0
 800f2de:	1c78      	adds	r0, r7, #1
 800f2e0:	d1d6      	bne.n	800f290 <_vfiprintf_r+0x1bc>
 800f2e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2e4:	07d9      	lsls	r1, r3, #31
 800f2e6:	d405      	bmi.n	800f2f4 <_vfiprintf_r+0x220>
 800f2e8:	89ab      	ldrh	r3, [r5, #12]
 800f2ea:	059a      	lsls	r2, r3, #22
 800f2ec:	d402      	bmi.n	800f2f4 <_vfiprintf_r+0x220>
 800f2ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2f0:	f000 fadd 	bl	800f8ae <__retarget_lock_release_recursive>
 800f2f4:	89ab      	ldrh	r3, [r5, #12]
 800f2f6:	065b      	lsls	r3, r3, #25
 800f2f8:	f53f af12 	bmi.w	800f120 <_vfiprintf_r+0x4c>
 800f2fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2fe:	e711      	b.n	800f124 <_vfiprintf_r+0x50>
 800f300:	ab03      	add	r3, sp, #12
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	462a      	mov	r2, r5
 800f306:	4b09      	ldr	r3, [pc, #36]	; (800f32c <_vfiprintf_r+0x258>)
 800f308:	a904      	add	r1, sp, #16
 800f30a:	4630      	mov	r0, r6
 800f30c:	f7fc faa4 	bl	800b858 <_printf_i>
 800f310:	e7e4      	b.n	800f2dc <_vfiprintf_r+0x208>
 800f312:	bf00      	nop
 800f314:	08010fe8 	.word	0x08010fe8
 800f318:	08011008 	.word	0x08011008
 800f31c:	08010fc8 	.word	0x08010fc8
 800f320:	08010fb4 	.word	0x08010fb4
 800f324:	08010fbe 	.word	0x08010fbe
 800f328:	0800b311 	.word	0x0800b311
 800f32c:	0800f0af 	.word	0x0800f0af
 800f330:	08010fba 	.word	0x08010fba
 800f334:	00000000 	.word	0x00000000

0800f338 <nan>:
 800f338:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f340 <nan+0x8>
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	00000000 	.word	0x00000000
 800f344:	7ff80000 	.word	0x7ff80000

0800f348 <_sbrk_r>:
 800f348:	b538      	push	{r3, r4, r5, lr}
 800f34a:	4d06      	ldr	r5, [pc, #24]	; (800f364 <_sbrk_r+0x1c>)
 800f34c:	2300      	movs	r3, #0
 800f34e:	4604      	mov	r4, r0
 800f350:	4608      	mov	r0, r1
 800f352:	602b      	str	r3, [r5, #0]
 800f354:	f7f3 fe18 	bl	8002f88 <_sbrk>
 800f358:	1c43      	adds	r3, r0, #1
 800f35a:	d102      	bne.n	800f362 <_sbrk_r+0x1a>
 800f35c:	682b      	ldr	r3, [r5, #0]
 800f35e:	b103      	cbz	r3, 800f362 <_sbrk_r+0x1a>
 800f360:	6023      	str	r3, [r4, #0]
 800f362:	bd38      	pop	{r3, r4, r5, pc}
 800f364:	20000860 	.word	0x20000860

0800f368 <strncmp>:
 800f368:	b510      	push	{r4, lr}
 800f36a:	b17a      	cbz	r2, 800f38c <strncmp+0x24>
 800f36c:	4603      	mov	r3, r0
 800f36e:	3901      	subs	r1, #1
 800f370:	1884      	adds	r4, r0, r2
 800f372:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f376:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f37a:	4290      	cmp	r0, r2
 800f37c:	d101      	bne.n	800f382 <strncmp+0x1a>
 800f37e:	42a3      	cmp	r3, r4
 800f380:	d101      	bne.n	800f386 <strncmp+0x1e>
 800f382:	1a80      	subs	r0, r0, r2
 800f384:	bd10      	pop	{r4, pc}
 800f386:	2800      	cmp	r0, #0
 800f388:	d1f3      	bne.n	800f372 <strncmp+0xa>
 800f38a:	e7fa      	b.n	800f382 <strncmp+0x1a>
 800f38c:	4610      	mov	r0, r2
 800f38e:	e7f9      	b.n	800f384 <strncmp+0x1c>

0800f390 <__swbuf_r>:
 800f390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f392:	460e      	mov	r6, r1
 800f394:	4614      	mov	r4, r2
 800f396:	4605      	mov	r5, r0
 800f398:	b118      	cbz	r0, 800f3a2 <__swbuf_r+0x12>
 800f39a:	6983      	ldr	r3, [r0, #24]
 800f39c:	b90b      	cbnz	r3, 800f3a2 <__swbuf_r+0x12>
 800f39e:	f000 f9e7 	bl	800f770 <__sinit>
 800f3a2:	4b21      	ldr	r3, [pc, #132]	; (800f428 <__swbuf_r+0x98>)
 800f3a4:	429c      	cmp	r4, r3
 800f3a6:	d12b      	bne.n	800f400 <__swbuf_r+0x70>
 800f3a8:	686c      	ldr	r4, [r5, #4]
 800f3aa:	69a3      	ldr	r3, [r4, #24]
 800f3ac:	60a3      	str	r3, [r4, #8]
 800f3ae:	89a3      	ldrh	r3, [r4, #12]
 800f3b0:	071a      	lsls	r2, r3, #28
 800f3b2:	d52f      	bpl.n	800f414 <__swbuf_r+0x84>
 800f3b4:	6923      	ldr	r3, [r4, #16]
 800f3b6:	b36b      	cbz	r3, 800f414 <__swbuf_r+0x84>
 800f3b8:	6923      	ldr	r3, [r4, #16]
 800f3ba:	6820      	ldr	r0, [r4, #0]
 800f3bc:	1ac0      	subs	r0, r0, r3
 800f3be:	6963      	ldr	r3, [r4, #20]
 800f3c0:	b2f6      	uxtb	r6, r6
 800f3c2:	4283      	cmp	r3, r0
 800f3c4:	4637      	mov	r7, r6
 800f3c6:	dc04      	bgt.n	800f3d2 <__swbuf_r+0x42>
 800f3c8:	4621      	mov	r1, r4
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	f000 f93c 	bl	800f648 <_fflush_r>
 800f3d0:	bb30      	cbnz	r0, 800f420 <__swbuf_r+0x90>
 800f3d2:	68a3      	ldr	r3, [r4, #8]
 800f3d4:	3b01      	subs	r3, #1
 800f3d6:	60a3      	str	r3, [r4, #8]
 800f3d8:	6823      	ldr	r3, [r4, #0]
 800f3da:	1c5a      	adds	r2, r3, #1
 800f3dc:	6022      	str	r2, [r4, #0]
 800f3de:	701e      	strb	r6, [r3, #0]
 800f3e0:	6963      	ldr	r3, [r4, #20]
 800f3e2:	3001      	adds	r0, #1
 800f3e4:	4283      	cmp	r3, r0
 800f3e6:	d004      	beq.n	800f3f2 <__swbuf_r+0x62>
 800f3e8:	89a3      	ldrh	r3, [r4, #12]
 800f3ea:	07db      	lsls	r3, r3, #31
 800f3ec:	d506      	bpl.n	800f3fc <__swbuf_r+0x6c>
 800f3ee:	2e0a      	cmp	r6, #10
 800f3f0:	d104      	bne.n	800f3fc <__swbuf_r+0x6c>
 800f3f2:	4621      	mov	r1, r4
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	f000 f927 	bl	800f648 <_fflush_r>
 800f3fa:	b988      	cbnz	r0, 800f420 <__swbuf_r+0x90>
 800f3fc:	4638      	mov	r0, r7
 800f3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f400:	4b0a      	ldr	r3, [pc, #40]	; (800f42c <__swbuf_r+0x9c>)
 800f402:	429c      	cmp	r4, r3
 800f404:	d101      	bne.n	800f40a <__swbuf_r+0x7a>
 800f406:	68ac      	ldr	r4, [r5, #8]
 800f408:	e7cf      	b.n	800f3aa <__swbuf_r+0x1a>
 800f40a:	4b09      	ldr	r3, [pc, #36]	; (800f430 <__swbuf_r+0xa0>)
 800f40c:	429c      	cmp	r4, r3
 800f40e:	bf08      	it	eq
 800f410:	68ec      	ldreq	r4, [r5, #12]
 800f412:	e7ca      	b.n	800f3aa <__swbuf_r+0x1a>
 800f414:	4621      	mov	r1, r4
 800f416:	4628      	mov	r0, r5
 800f418:	f000 f81a 	bl	800f450 <__swsetup_r>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d0cb      	beq.n	800f3b8 <__swbuf_r+0x28>
 800f420:	f04f 37ff 	mov.w	r7, #4294967295
 800f424:	e7ea      	b.n	800f3fc <__swbuf_r+0x6c>
 800f426:	bf00      	nop
 800f428:	08010fe8 	.word	0x08010fe8
 800f42c:	08011008 	.word	0x08011008
 800f430:	08010fc8 	.word	0x08010fc8

0800f434 <__ascii_wctomb>:
 800f434:	b149      	cbz	r1, 800f44a <__ascii_wctomb+0x16>
 800f436:	2aff      	cmp	r2, #255	; 0xff
 800f438:	bf85      	ittet	hi
 800f43a:	238a      	movhi	r3, #138	; 0x8a
 800f43c:	6003      	strhi	r3, [r0, #0]
 800f43e:	700a      	strbls	r2, [r1, #0]
 800f440:	f04f 30ff 	movhi.w	r0, #4294967295
 800f444:	bf98      	it	ls
 800f446:	2001      	movls	r0, #1
 800f448:	4770      	bx	lr
 800f44a:	4608      	mov	r0, r1
 800f44c:	4770      	bx	lr
	...

0800f450 <__swsetup_r>:
 800f450:	4b32      	ldr	r3, [pc, #200]	; (800f51c <__swsetup_r+0xcc>)
 800f452:	b570      	push	{r4, r5, r6, lr}
 800f454:	681d      	ldr	r5, [r3, #0]
 800f456:	4606      	mov	r6, r0
 800f458:	460c      	mov	r4, r1
 800f45a:	b125      	cbz	r5, 800f466 <__swsetup_r+0x16>
 800f45c:	69ab      	ldr	r3, [r5, #24]
 800f45e:	b913      	cbnz	r3, 800f466 <__swsetup_r+0x16>
 800f460:	4628      	mov	r0, r5
 800f462:	f000 f985 	bl	800f770 <__sinit>
 800f466:	4b2e      	ldr	r3, [pc, #184]	; (800f520 <__swsetup_r+0xd0>)
 800f468:	429c      	cmp	r4, r3
 800f46a:	d10f      	bne.n	800f48c <__swsetup_r+0x3c>
 800f46c:	686c      	ldr	r4, [r5, #4]
 800f46e:	89a3      	ldrh	r3, [r4, #12]
 800f470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f474:	0719      	lsls	r1, r3, #28
 800f476:	d42c      	bmi.n	800f4d2 <__swsetup_r+0x82>
 800f478:	06dd      	lsls	r5, r3, #27
 800f47a:	d411      	bmi.n	800f4a0 <__swsetup_r+0x50>
 800f47c:	2309      	movs	r3, #9
 800f47e:	6033      	str	r3, [r6, #0]
 800f480:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f484:	81a3      	strh	r3, [r4, #12]
 800f486:	f04f 30ff 	mov.w	r0, #4294967295
 800f48a:	e03e      	b.n	800f50a <__swsetup_r+0xba>
 800f48c:	4b25      	ldr	r3, [pc, #148]	; (800f524 <__swsetup_r+0xd4>)
 800f48e:	429c      	cmp	r4, r3
 800f490:	d101      	bne.n	800f496 <__swsetup_r+0x46>
 800f492:	68ac      	ldr	r4, [r5, #8]
 800f494:	e7eb      	b.n	800f46e <__swsetup_r+0x1e>
 800f496:	4b24      	ldr	r3, [pc, #144]	; (800f528 <__swsetup_r+0xd8>)
 800f498:	429c      	cmp	r4, r3
 800f49a:	bf08      	it	eq
 800f49c:	68ec      	ldreq	r4, [r5, #12]
 800f49e:	e7e6      	b.n	800f46e <__swsetup_r+0x1e>
 800f4a0:	0758      	lsls	r0, r3, #29
 800f4a2:	d512      	bpl.n	800f4ca <__swsetup_r+0x7a>
 800f4a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4a6:	b141      	cbz	r1, 800f4ba <__swsetup_r+0x6a>
 800f4a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4ac:	4299      	cmp	r1, r3
 800f4ae:	d002      	beq.n	800f4b6 <__swsetup_r+0x66>
 800f4b0:	4630      	mov	r0, r6
 800f4b2:	f7ff fba9 	bl	800ec08 <_free_r>
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	6363      	str	r3, [r4, #52]	; 0x34
 800f4ba:	89a3      	ldrh	r3, [r4, #12]
 800f4bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f4c0:	81a3      	strh	r3, [r4, #12]
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	6063      	str	r3, [r4, #4]
 800f4c6:	6923      	ldr	r3, [r4, #16]
 800f4c8:	6023      	str	r3, [r4, #0]
 800f4ca:	89a3      	ldrh	r3, [r4, #12]
 800f4cc:	f043 0308 	orr.w	r3, r3, #8
 800f4d0:	81a3      	strh	r3, [r4, #12]
 800f4d2:	6923      	ldr	r3, [r4, #16]
 800f4d4:	b94b      	cbnz	r3, 800f4ea <__swsetup_r+0x9a>
 800f4d6:	89a3      	ldrh	r3, [r4, #12]
 800f4d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4e0:	d003      	beq.n	800f4ea <__swsetup_r+0x9a>
 800f4e2:	4621      	mov	r1, r4
 800f4e4:	4630      	mov	r0, r6
 800f4e6:	f000 fa09 	bl	800f8fc <__smakebuf_r>
 800f4ea:	89a0      	ldrh	r0, [r4, #12]
 800f4ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f4f0:	f010 0301 	ands.w	r3, r0, #1
 800f4f4:	d00a      	beq.n	800f50c <__swsetup_r+0xbc>
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	60a3      	str	r3, [r4, #8]
 800f4fa:	6963      	ldr	r3, [r4, #20]
 800f4fc:	425b      	negs	r3, r3
 800f4fe:	61a3      	str	r3, [r4, #24]
 800f500:	6923      	ldr	r3, [r4, #16]
 800f502:	b943      	cbnz	r3, 800f516 <__swsetup_r+0xc6>
 800f504:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f508:	d1ba      	bne.n	800f480 <__swsetup_r+0x30>
 800f50a:	bd70      	pop	{r4, r5, r6, pc}
 800f50c:	0781      	lsls	r1, r0, #30
 800f50e:	bf58      	it	pl
 800f510:	6963      	ldrpl	r3, [r4, #20]
 800f512:	60a3      	str	r3, [r4, #8]
 800f514:	e7f4      	b.n	800f500 <__swsetup_r+0xb0>
 800f516:	2000      	movs	r0, #0
 800f518:	e7f7      	b.n	800f50a <__swsetup_r+0xba>
 800f51a:	bf00      	nop
 800f51c:	2000001c 	.word	0x2000001c
 800f520:	08010fe8 	.word	0x08010fe8
 800f524:	08011008 	.word	0x08011008
 800f528:	08010fc8 	.word	0x08010fc8

0800f52c <abort>:
 800f52c:	b508      	push	{r3, lr}
 800f52e:	2006      	movs	r0, #6
 800f530:	f000 faa2 	bl	800fa78 <raise>
 800f534:	2001      	movs	r0, #1
 800f536:	f7f3 fcaf 	bl	8002e98 <_exit>
	...

0800f53c <__sflush_r>:
 800f53c:	898a      	ldrh	r2, [r1, #12]
 800f53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f542:	4605      	mov	r5, r0
 800f544:	0710      	lsls	r0, r2, #28
 800f546:	460c      	mov	r4, r1
 800f548:	d458      	bmi.n	800f5fc <__sflush_r+0xc0>
 800f54a:	684b      	ldr	r3, [r1, #4]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	dc05      	bgt.n	800f55c <__sflush_r+0x20>
 800f550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f552:	2b00      	cmp	r3, #0
 800f554:	dc02      	bgt.n	800f55c <__sflush_r+0x20>
 800f556:	2000      	movs	r0, #0
 800f558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f55c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f55e:	2e00      	cmp	r6, #0
 800f560:	d0f9      	beq.n	800f556 <__sflush_r+0x1a>
 800f562:	2300      	movs	r3, #0
 800f564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f568:	682f      	ldr	r7, [r5, #0]
 800f56a:	602b      	str	r3, [r5, #0]
 800f56c:	d032      	beq.n	800f5d4 <__sflush_r+0x98>
 800f56e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f570:	89a3      	ldrh	r3, [r4, #12]
 800f572:	075a      	lsls	r2, r3, #29
 800f574:	d505      	bpl.n	800f582 <__sflush_r+0x46>
 800f576:	6863      	ldr	r3, [r4, #4]
 800f578:	1ac0      	subs	r0, r0, r3
 800f57a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f57c:	b10b      	cbz	r3, 800f582 <__sflush_r+0x46>
 800f57e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f580:	1ac0      	subs	r0, r0, r3
 800f582:	2300      	movs	r3, #0
 800f584:	4602      	mov	r2, r0
 800f586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f588:	6a21      	ldr	r1, [r4, #32]
 800f58a:	4628      	mov	r0, r5
 800f58c:	47b0      	blx	r6
 800f58e:	1c43      	adds	r3, r0, #1
 800f590:	89a3      	ldrh	r3, [r4, #12]
 800f592:	d106      	bne.n	800f5a2 <__sflush_r+0x66>
 800f594:	6829      	ldr	r1, [r5, #0]
 800f596:	291d      	cmp	r1, #29
 800f598:	d82c      	bhi.n	800f5f4 <__sflush_r+0xb8>
 800f59a:	4a2a      	ldr	r2, [pc, #168]	; (800f644 <__sflush_r+0x108>)
 800f59c:	40ca      	lsrs	r2, r1
 800f59e:	07d6      	lsls	r6, r2, #31
 800f5a0:	d528      	bpl.n	800f5f4 <__sflush_r+0xb8>
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	6062      	str	r2, [r4, #4]
 800f5a6:	04d9      	lsls	r1, r3, #19
 800f5a8:	6922      	ldr	r2, [r4, #16]
 800f5aa:	6022      	str	r2, [r4, #0]
 800f5ac:	d504      	bpl.n	800f5b8 <__sflush_r+0x7c>
 800f5ae:	1c42      	adds	r2, r0, #1
 800f5b0:	d101      	bne.n	800f5b6 <__sflush_r+0x7a>
 800f5b2:	682b      	ldr	r3, [r5, #0]
 800f5b4:	b903      	cbnz	r3, 800f5b8 <__sflush_r+0x7c>
 800f5b6:	6560      	str	r0, [r4, #84]	; 0x54
 800f5b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5ba:	602f      	str	r7, [r5, #0]
 800f5bc:	2900      	cmp	r1, #0
 800f5be:	d0ca      	beq.n	800f556 <__sflush_r+0x1a>
 800f5c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5c4:	4299      	cmp	r1, r3
 800f5c6:	d002      	beq.n	800f5ce <__sflush_r+0x92>
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	f7ff fb1d 	bl	800ec08 <_free_r>
 800f5ce:	2000      	movs	r0, #0
 800f5d0:	6360      	str	r0, [r4, #52]	; 0x34
 800f5d2:	e7c1      	b.n	800f558 <__sflush_r+0x1c>
 800f5d4:	6a21      	ldr	r1, [r4, #32]
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	4628      	mov	r0, r5
 800f5da:	47b0      	blx	r6
 800f5dc:	1c41      	adds	r1, r0, #1
 800f5de:	d1c7      	bne.n	800f570 <__sflush_r+0x34>
 800f5e0:	682b      	ldr	r3, [r5, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d0c4      	beq.n	800f570 <__sflush_r+0x34>
 800f5e6:	2b1d      	cmp	r3, #29
 800f5e8:	d001      	beq.n	800f5ee <__sflush_r+0xb2>
 800f5ea:	2b16      	cmp	r3, #22
 800f5ec:	d101      	bne.n	800f5f2 <__sflush_r+0xb6>
 800f5ee:	602f      	str	r7, [r5, #0]
 800f5f0:	e7b1      	b.n	800f556 <__sflush_r+0x1a>
 800f5f2:	89a3      	ldrh	r3, [r4, #12]
 800f5f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5f8:	81a3      	strh	r3, [r4, #12]
 800f5fa:	e7ad      	b.n	800f558 <__sflush_r+0x1c>
 800f5fc:	690f      	ldr	r7, [r1, #16]
 800f5fe:	2f00      	cmp	r7, #0
 800f600:	d0a9      	beq.n	800f556 <__sflush_r+0x1a>
 800f602:	0793      	lsls	r3, r2, #30
 800f604:	680e      	ldr	r6, [r1, #0]
 800f606:	bf08      	it	eq
 800f608:	694b      	ldreq	r3, [r1, #20]
 800f60a:	600f      	str	r7, [r1, #0]
 800f60c:	bf18      	it	ne
 800f60e:	2300      	movne	r3, #0
 800f610:	eba6 0807 	sub.w	r8, r6, r7
 800f614:	608b      	str	r3, [r1, #8]
 800f616:	f1b8 0f00 	cmp.w	r8, #0
 800f61a:	dd9c      	ble.n	800f556 <__sflush_r+0x1a>
 800f61c:	6a21      	ldr	r1, [r4, #32]
 800f61e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f620:	4643      	mov	r3, r8
 800f622:	463a      	mov	r2, r7
 800f624:	4628      	mov	r0, r5
 800f626:	47b0      	blx	r6
 800f628:	2800      	cmp	r0, #0
 800f62a:	dc06      	bgt.n	800f63a <__sflush_r+0xfe>
 800f62c:	89a3      	ldrh	r3, [r4, #12]
 800f62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f632:	81a3      	strh	r3, [r4, #12]
 800f634:	f04f 30ff 	mov.w	r0, #4294967295
 800f638:	e78e      	b.n	800f558 <__sflush_r+0x1c>
 800f63a:	4407      	add	r7, r0
 800f63c:	eba8 0800 	sub.w	r8, r8, r0
 800f640:	e7e9      	b.n	800f616 <__sflush_r+0xda>
 800f642:	bf00      	nop
 800f644:	20400001 	.word	0x20400001

0800f648 <_fflush_r>:
 800f648:	b538      	push	{r3, r4, r5, lr}
 800f64a:	690b      	ldr	r3, [r1, #16]
 800f64c:	4605      	mov	r5, r0
 800f64e:	460c      	mov	r4, r1
 800f650:	b913      	cbnz	r3, 800f658 <_fflush_r+0x10>
 800f652:	2500      	movs	r5, #0
 800f654:	4628      	mov	r0, r5
 800f656:	bd38      	pop	{r3, r4, r5, pc}
 800f658:	b118      	cbz	r0, 800f662 <_fflush_r+0x1a>
 800f65a:	6983      	ldr	r3, [r0, #24]
 800f65c:	b90b      	cbnz	r3, 800f662 <_fflush_r+0x1a>
 800f65e:	f000 f887 	bl	800f770 <__sinit>
 800f662:	4b14      	ldr	r3, [pc, #80]	; (800f6b4 <_fflush_r+0x6c>)
 800f664:	429c      	cmp	r4, r3
 800f666:	d11b      	bne.n	800f6a0 <_fflush_r+0x58>
 800f668:	686c      	ldr	r4, [r5, #4]
 800f66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d0ef      	beq.n	800f652 <_fflush_r+0xa>
 800f672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f674:	07d0      	lsls	r0, r2, #31
 800f676:	d404      	bmi.n	800f682 <_fflush_r+0x3a>
 800f678:	0599      	lsls	r1, r3, #22
 800f67a:	d402      	bmi.n	800f682 <_fflush_r+0x3a>
 800f67c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f67e:	f000 f915 	bl	800f8ac <__retarget_lock_acquire_recursive>
 800f682:	4628      	mov	r0, r5
 800f684:	4621      	mov	r1, r4
 800f686:	f7ff ff59 	bl	800f53c <__sflush_r>
 800f68a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f68c:	07da      	lsls	r2, r3, #31
 800f68e:	4605      	mov	r5, r0
 800f690:	d4e0      	bmi.n	800f654 <_fflush_r+0xc>
 800f692:	89a3      	ldrh	r3, [r4, #12]
 800f694:	059b      	lsls	r3, r3, #22
 800f696:	d4dd      	bmi.n	800f654 <_fflush_r+0xc>
 800f698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f69a:	f000 f908 	bl	800f8ae <__retarget_lock_release_recursive>
 800f69e:	e7d9      	b.n	800f654 <_fflush_r+0xc>
 800f6a0:	4b05      	ldr	r3, [pc, #20]	; (800f6b8 <_fflush_r+0x70>)
 800f6a2:	429c      	cmp	r4, r3
 800f6a4:	d101      	bne.n	800f6aa <_fflush_r+0x62>
 800f6a6:	68ac      	ldr	r4, [r5, #8]
 800f6a8:	e7df      	b.n	800f66a <_fflush_r+0x22>
 800f6aa:	4b04      	ldr	r3, [pc, #16]	; (800f6bc <_fflush_r+0x74>)
 800f6ac:	429c      	cmp	r4, r3
 800f6ae:	bf08      	it	eq
 800f6b0:	68ec      	ldreq	r4, [r5, #12]
 800f6b2:	e7da      	b.n	800f66a <_fflush_r+0x22>
 800f6b4:	08010fe8 	.word	0x08010fe8
 800f6b8:	08011008 	.word	0x08011008
 800f6bc:	08010fc8 	.word	0x08010fc8

0800f6c0 <std>:
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	b510      	push	{r4, lr}
 800f6c4:	4604      	mov	r4, r0
 800f6c6:	e9c0 3300 	strd	r3, r3, [r0]
 800f6ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f6ce:	6083      	str	r3, [r0, #8]
 800f6d0:	8181      	strh	r1, [r0, #12]
 800f6d2:	6643      	str	r3, [r0, #100]	; 0x64
 800f6d4:	81c2      	strh	r2, [r0, #14]
 800f6d6:	6183      	str	r3, [r0, #24]
 800f6d8:	4619      	mov	r1, r3
 800f6da:	2208      	movs	r2, #8
 800f6dc:	305c      	adds	r0, #92	; 0x5c
 800f6de:	f7fb fd6f 	bl	800b1c0 <memset>
 800f6e2:	4b05      	ldr	r3, [pc, #20]	; (800f6f8 <std+0x38>)
 800f6e4:	6263      	str	r3, [r4, #36]	; 0x24
 800f6e6:	4b05      	ldr	r3, [pc, #20]	; (800f6fc <std+0x3c>)
 800f6e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f6ea:	4b05      	ldr	r3, [pc, #20]	; (800f700 <std+0x40>)
 800f6ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f6ee:	4b05      	ldr	r3, [pc, #20]	; (800f704 <std+0x44>)
 800f6f0:	6224      	str	r4, [r4, #32]
 800f6f2:	6323      	str	r3, [r4, #48]	; 0x30
 800f6f4:	bd10      	pop	{r4, pc}
 800f6f6:	bf00      	nop
 800f6f8:	0800fab1 	.word	0x0800fab1
 800f6fc:	0800fad3 	.word	0x0800fad3
 800f700:	0800fb0b 	.word	0x0800fb0b
 800f704:	0800fb2f 	.word	0x0800fb2f

0800f708 <_cleanup_r>:
 800f708:	4901      	ldr	r1, [pc, #4]	; (800f710 <_cleanup_r+0x8>)
 800f70a:	f000 b8af 	b.w	800f86c <_fwalk_reent>
 800f70e:	bf00      	nop
 800f710:	0800f649 	.word	0x0800f649

0800f714 <__sfmoreglue>:
 800f714:	b570      	push	{r4, r5, r6, lr}
 800f716:	2268      	movs	r2, #104	; 0x68
 800f718:	1e4d      	subs	r5, r1, #1
 800f71a:	4355      	muls	r5, r2
 800f71c:	460e      	mov	r6, r1
 800f71e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f722:	f7ff fadd 	bl	800ece0 <_malloc_r>
 800f726:	4604      	mov	r4, r0
 800f728:	b140      	cbz	r0, 800f73c <__sfmoreglue+0x28>
 800f72a:	2100      	movs	r1, #0
 800f72c:	e9c0 1600 	strd	r1, r6, [r0]
 800f730:	300c      	adds	r0, #12
 800f732:	60a0      	str	r0, [r4, #8]
 800f734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f738:	f7fb fd42 	bl	800b1c0 <memset>
 800f73c:	4620      	mov	r0, r4
 800f73e:	bd70      	pop	{r4, r5, r6, pc}

0800f740 <__sfp_lock_acquire>:
 800f740:	4801      	ldr	r0, [pc, #4]	; (800f748 <__sfp_lock_acquire+0x8>)
 800f742:	f000 b8b3 	b.w	800f8ac <__retarget_lock_acquire_recursive>
 800f746:	bf00      	nop
 800f748:	2000085d 	.word	0x2000085d

0800f74c <__sfp_lock_release>:
 800f74c:	4801      	ldr	r0, [pc, #4]	; (800f754 <__sfp_lock_release+0x8>)
 800f74e:	f000 b8ae 	b.w	800f8ae <__retarget_lock_release_recursive>
 800f752:	bf00      	nop
 800f754:	2000085d 	.word	0x2000085d

0800f758 <__sinit_lock_acquire>:
 800f758:	4801      	ldr	r0, [pc, #4]	; (800f760 <__sinit_lock_acquire+0x8>)
 800f75a:	f000 b8a7 	b.w	800f8ac <__retarget_lock_acquire_recursive>
 800f75e:	bf00      	nop
 800f760:	2000085e 	.word	0x2000085e

0800f764 <__sinit_lock_release>:
 800f764:	4801      	ldr	r0, [pc, #4]	; (800f76c <__sinit_lock_release+0x8>)
 800f766:	f000 b8a2 	b.w	800f8ae <__retarget_lock_release_recursive>
 800f76a:	bf00      	nop
 800f76c:	2000085e 	.word	0x2000085e

0800f770 <__sinit>:
 800f770:	b510      	push	{r4, lr}
 800f772:	4604      	mov	r4, r0
 800f774:	f7ff fff0 	bl	800f758 <__sinit_lock_acquire>
 800f778:	69a3      	ldr	r3, [r4, #24]
 800f77a:	b11b      	cbz	r3, 800f784 <__sinit+0x14>
 800f77c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f780:	f7ff bff0 	b.w	800f764 <__sinit_lock_release>
 800f784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f788:	6523      	str	r3, [r4, #80]	; 0x50
 800f78a:	4b13      	ldr	r3, [pc, #76]	; (800f7d8 <__sinit+0x68>)
 800f78c:	4a13      	ldr	r2, [pc, #76]	; (800f7dc <__sinit+0x6c>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	62a2      	str	r2, [r4, #40]	; 0x28
 800f792:	42a3      	cmp	r3, r4
 800f794:	bf04      	itt	eq
 800f796:	2301      	moveq	r3, #1
 800f798:	61a3      	streq	r3, [r4, #24]
 800f79a:	4620      	mov	r0, r4
 800f79c:	f000 f820 	bl	800f7e0 <__sfp>
 800f7a0:	6060      	str	r0, [r4, #4]
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	f000 f81c 	bl	800f7e0 <__sfp>
 800f7a8:	60a0      	str	r0, [r4, #8]
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	f000 f818 	bl	800f7e0 <__sfp>
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	60e0      	str	r0, [r4, #12]
 800f7b4:	2104      	movs	r1, #4
 800f7b6:	6860      	ldr	r0, [r4, #4]
 800f7b8:	f7ff ff82 	bl	800f6c0 <std>
 800f7bc:	68a0      	ldr	r0, [r4, #8]
 800f7be:	2201      	movs	r2, #1
 800f7c0:	2109      	movs	r1, #9
 800f7c2:	f7ff ff7d 	bl	800f6c0 <std>
 800f7c6:	68e0      	ldr	r0, [r4, #12]
 800f7c8:	2202      	movs	r2, #2
 800f7ca:	2112      	movs	r1, #18
 800f7cc:	f7ff ff78 	bl	800f6c0 <std>
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	61a3      	str	r3, [r4, #24]
 800f7d4:	e7d2      	b.n	800f77c <__sinit+0xc>
 800f7d6:	bf00      	nop
 800f7d8:	08010b28 	.word	0x08010b28
 800f7dc:	0800f709 	.word	0x0800f709

0800f7e0 <__sfp>:
 800f7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e2:	4607      	mov	r7, r0
 800f7e4:	f7ff ffac 	bl	800f740 <__sfp_lock_acquire>
 800f7e8:	4b1e      	ldr	r3, [pc, #120]	; (800f864 <__sfp+0x84>)
 800f7ea:	681e      	ldr	r6, [r3, #0]
 800f7ec:	69b3      	ldr	r3, [r6, #24]
 800f7ee:	b913      	cbnz	r3, 800f7f6 <__sfp+0x16>
 800f7f0:	4630      	mov	r0, r6
 800f7f2:	f7ff ffbd 	bl	800f770 <__sinit>
 800f7f6:	3648      	adds	r6, #72	; 0x48
 800f7f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f7fc:	3b01      	subs	r3, #1
 800f7fe:	d503      	bpl.n	800f808 <__sfp+0x28>
 800f800:	6833      	ldr	r3, [r6, #0]
 800f802:	b30b      	cbz	r3, 800f848 <__sfp+0x68>
 800f804:	6836      	ldr	r6, [r6, #0]
 800f806:	e7f7      	b.n	800f7f8 <__sfp+0x18>
 800f808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f80c:	b9d5      	cbnz	r5, 800f844 <__sfp+0x64>
 800f80e:	4b16      	ldr	r3, [pc, #88]	; (800f868 <__sfp+0x88>)
 800f810:	60e3      	str	r3, [r4, #12]
 800f812:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f816:	6665      	str	r5, [r4, #100]	; 0x64
 800f818:	f000 f847 	bl	800f8aa <__retarget_lock_init_recursive>
 800f81c:	f7ff ff96 	bl	800f74c <__sfp_lock_release>
 800f820:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f824:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f828:	6025      	str	r5, [r4, #0]
 800f82a:	61a5      	str	r5, [r4, #24]
 800f82c:	2208      	movs	r2, #8
 800f82e:	4629      	mov	r1, r5
 800f830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f834:	f7fb fcc4 	bl	800b1c0 <memset>
 800f838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f83c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f840:	4620      	mov	r0, r4
 800f842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f844:	3468      	adds	r4, #104	; 0x68
 800f846:	e7d9      	b.n	800f7fc <__sfp+0x1c>
 800f848:	2104      	movs	r1, #4
 800f84a:	4638      	mov	r0, r7
 800f84c:	f7ff ff62 	bl	800f714 <__sfmoreglue>
 800f850:	4604      	mov	r4, r0
 800f852:	6030      	str	r0, [r6, #0]
 800f854:	2800      	cmp	r0, #0
 800f856:	d1d5      	bne.n	800f804 <__sfp+0x24>
 800f858:	f7ff ff78 	bl	800f74c <__sfp_lock_release>
 800f85c:	230c      	movs	r3, #12
 800f85e:	603b      	str	r3, [r7, #0]
 800f860:	e7ee      	b.n	800f840 <__sfp+0x60>
 800f862:	bf00      	nop
 800f864:	08010b28 	.word	0x08010b28
 800f868:	ffff0001 	.word	0xffff0001

0800f86c <_fwalk_reent>:
 800f86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f870:	4606      	mov	r6, r0
 800f872:	4688      	mov	r8, r1
 800f874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f878:	2700      	movs	r7, #0
 800f87a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f87e:	f1b9 0901 	subs.w	r9, r9, #1
 800f882:	d505      	bpl.n	800f890 <_fwalk_reent+0x24>
 800f884:	6824      	ldr	r4, [r4, #0]
 800f886:	2c00      	cmp	r4, #0
 800f888:	d1f7      	bne.n	800f87a <_fwalk_reent+0xe>
 800f88a:	4638      	mov	r0, r7
 800f88c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f890:	89ab      	ldrh	r3, [r5, #12]
 800f892:	2b01      	cmp	r3, #1
 800f894:	d907      	bls.n	800f8a6 <_fwalk_reent+0x3a>
 800f896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f89a:	3301      	adds	r3, #1
 800f89c:	d003      	beq.n	800f8a6 <_fwalk_reent+0x3a>
 800f89e:	4629      	mov	r1, r5
 800f8a0:	4630      	mov	r0, r6
 800f8a2:	47c0      	blx	r8
 800f8a4:	4307      	orrs	r7, r0
 800f8a6:	3568      	adds	r5, #104	; 0x68
 800f8a8:	e7e9      	b.n	800f87e <_fwalk_reent+0x12>

0800f8aa <__retarget_lock_init_recursive>:
 800f8aa:	4770      	bx	lr

0800f8ac <__retarget_lock_acquire_recursive>:
 800f8ac:	4770      	bx	lr

0800f8ae <__retarget_lock_release_recursive>:
 800f8ae:	4770      	bx	lr

0800f8b0 <__swhatbuf_r>:
 800f8b0:	b570      	push	{r4, r5, r6, lr}
 800f8b2:	460e      	mov	r6, r1
 800f8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8b8:	2900      	cmp	r1, #0
 800f8ba:	b096      	sub	sp, #88	; 0x58
 800f8bc:	4614      	mov	r4, r2
 800f8be:	461d      	mov	r5, r3
 800f8c0:	da08      	bge.n	800f8d4 <__swhatbuf_r+0x24>
 800f8c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	602a      	str	r2, [r5, #0]
 800f8ca:	061a      	lsls	r2, r3, #24
 800f8cc:	d410      	bmi.n	800f8f0 <__swhatbuf_r+0x40>
 800f8ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8d2:	e00e      	b.n	800f8f2 <__swhatbuf_r+0x42>
 800f8d4:	466a      	mov	r2, sp
 800f8d6:	f000 f951 	bl	800fb7c <_fstat_r>
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	dbf1      	blt.n	800f8c2 <__swhatbuf_r+0x12>
 800f8de:	9a01      	ldr	r2, [sp, #4]
 800f8e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f8e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f8e8:	425a      	negs	r2, r3
 800f8ea:	415a      	adcs	r2, r3
 800f8ec:	602a      	str	r2, [r5, #0]
 800f8ee:	e7ee      	b.n	800f8ce <__swhatbuf_r+0x1e>
 800f8f0:	2340      	movs	r3, #64	; 0x40
 800f8f2:	2000      	movs	r0, #0
 800f8f4:	6023      	str	r3, [r4, #0]
 800f8f6:	b016      	add	sp, #88	; 0x58
 800f8f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f8fc <__smakebuf_r>:
 800f8fc:	898b      	ldrh	r3, [r1, #12]
 800f8fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f900:	079d      	lsls	r5, r3, #30
 800f902:	4606      	mov	r6, r0
 800f904:	460c      	mov	r4, r1
 800f906:	d507      	bpl.n	800f918 <__smakebuf_r+0x1c>
 800f908:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f90c:	6023      	str	r3, [r4, #0]
 800f90e:	6123      	str	r3, [r4, #16]
 800f910:	2301      	movs	r3, #1
 800f912:	6163      	str	r3, [r4, #20]
 800f914:	b002      	add	sp, #8
 800f916:	bd70      	pop	{r4, r5, r6, pc}
 800f918:	ab01      	add	r3, sp, #4
 800f91a:	466a      	mov	r2, sp
 800f91c:	f7ff ffc8 	bl	800f8b0 <__swhatbuf_r>
 800f920:	9900      	ldr	r1, [sp, #0]
 800f922:	4605      	mov	r5, r0
 800f924:	4630      	mov	r0, r6
 800f926:	f7ff f9db 	bl	800ece0 <_malloc_r>
 800f92a:	b948      	cbnz	r0, 800f940 <__smakebuf_r+0x44>
 800f92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f930:	059a      	lsls	r2, r3, #22
 800f932:	d4ef      	bmi.n	800f914 <__smakebuf_r+0x18>
 800f934:	f023 0303 	bic.w	r3, r3, #3
 800f938:	f043 0302 	orr.w	r3, r3, #2
 800f93c:	81a3      	strh	r3, [r4, #12]
 800f93e:	e7e3      	b.n	800f908 <__smakebuf_r+0xc>
 800f940:	4b0d      	ldr	r3, [pc, #52]	; (800f978 <__smakebuf_r+0x7c>)
 800f942:	62b3      	str	r3, [r6, #40]	; 0x28
 800f944:	89a3      	ldrh	r3, [r4, #12]
 800f946:	6020      	str	r0, [r4, #0]
 800f948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f94c:	81a3      	strh	r3, [r4, #12]
 800f94e:	9b00      	ldr	r3, [sp, #0]
 800f950:	6163      	str	r3, [r4, #20]
 800f952:	9b01      	ldr	r3, [sp, #4]
 800f954:	6120      	str	r0, [r4, #16]
 800f956:	b15b      	cbz	r3, 800f970 <__smakebuf_r+0x74>
 800f958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f95c:	4630      	mov	r0, r6
 800f95e:	f000 f91f 	bl	800fba0 <_isatty_r>
 800f962:	b128      	cbz	r0, 800f970 <__smakebuf_r+0x74>
 800f964:	89a3      	ldrh	r3, [r4, #12]
 800f966:	f023 0303 	bic.w	r3, r3, #3
 800f96a:	f043 0301 	orr.w	r3, r3, #1
 800f96e:	81a3      	strh	r3, [r4, #12]
 800f970:	89a0      	ldrh	r0, [r4, #12]
 800f972:	4305      	orrs	r5, r0
 800f974:	81a5      	strh	r5, [r4, #12]
 800f976:	e7cd      	b.n	800f914 <__smakebuf_r+0x18>
 800f978:	0800f709 	.word	0x0800f709

0800f97c <memmove>:
 800f97c:	4288      	cmp	r0, r1
 800f97e:	b510      	push	{r4, lr}
 800f980:	eb01 0402 	add.w	r4, r1, r2
 800f984:	d902      	bls.n	800f98c <memmove+0x10>
 800f986:	4284      	cmp	r4, r0
 800f988:	4623      	mov	r3, r4
 800f98a:	d807      	bhi.n	800f99c <memmove+0x20>
 800f98c:	1e43      	subs	r3, r0, #1
 800f98e:	42a1      	cmp	r1, r4
 800f990:	d008      	beq.n	800f9a4 <memmove+0x28>
 800f992:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f996:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f99a:	e7f8      	b.n	800f98e <memmove+0x12>
 800f99c:	4402      	add	r2, r0
 800f99e:	4601      	mov	r1, r0
 800f9a0:	428a      	cmp	r2, r1
 800f9a2:	d100      	bne.n	800f9a6 <memmove+0x2a>
 800f9a4:	bd10      	pop	{r4, pc}
 800f9a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f9ae:	e7f7      	b.n	800f9a0 <memmove+0x24>

0800f9b0 <__malloc_lock>:
 800f9b0:	4801      	ldr	r0, [pc, #4]	; (800f9b8 <__malloc_lock+0x8>)
 800f9b2:	f7ff bf7b 	b.w	800f8ac <__retarget_lock_acquire_recursive>
 800f9b6:	bf00      	nop
 800f9b8:	2000085c 	.word	0x2000085c

0800f9bc <__malloc_unlock>:
 800f9bc:	4801      	ldr	r0, [pc, #4]	; (800f9c4 <__malloc_unlock+0x8>)
 800f9be:	f7ff bf76 	b.w	800f8ae <__retarget_lock_release_recursive>
 800f9c2:	bf00      	nop
 800f9c4:	2000085c 	.word	0x2000085c

0800f9c8 <_realloc_r>:
 800f9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9cc:	4680      	mov	r8, r0
 800f9ce:	4614      	mov	r4, r2
 800f9d0:	460e      	mov	r6, r1
 800f9d2:	b921      	cbnz	r1, 800f9de <_realloc_r+0x16>
 800f9d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9d8:	4611      	mov	r1, r2
 800f9da:	f7ff b981 	b.w	800ece0 <_malloc_r>
 800f9de:	b92a      	cbnz	r2, 800f9ec <_realloc_r+0x24>
 800f9e0:	f7ff f912 	bl	800ec08 <_free_r>
 800f9e4:	4625      	mov	r5, r4
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ec:	f000 f8fa 	bl	800fbe4 <_malloc_usable_size_r>
 800f9f0:	4284      	cmp	r4, r0
 800f9f2:	4607      	mov	r7, r0
 800f9f4:	d802      	bhi.n	800f9fc <_realloc_r+0x34>
 800f9f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f9fa:	d812      	bhi.n	800fa22 <_realloc_r+0x5a>
 800f9fc:	4621      	mov	r1, r4
 800f9fe:	4640      	mov	r0, r8
 800fa00:	f7ff f96e 	bl	800ece0 <_malloc_r>
 800fa04:	4605      	mov	r5, r0
 800fa06:	2800      	cmp	r0, #0
 800fa08:	d0ed      	beq.n	800f9e6 <_realloc_r+0x1e>
 800fa0a:	42bc      	cmp	r4, r7
 800fa0c:	4622      	mov	r2, r4
 800fa0e:	4631      	mov	r1, r6
 800fa10:	bf28      	it	cs
 800fa12:	463a      	movcs	r2, r7
 800fa14:	f7fe fc12 	bl	800e23c <memcpy>
 800fa18:	4631      	mov	r1, r6
 800fa1a:	4640      	mov	r0, r8
 800fa1c:	f7ff f8f4 	bl	800ec08 <_free_r>
 800fa20:	e7e1      	b.n	800f9e6 <_realloc_r+0x1e>
 800fa22:	4635      	mov	r5, r6
 800fa24:	e7df      	b.n	800f9e6 <_realloc_r+0x1e>

0800fa26 <_raise_r>:
 800fa26:	291f      	cmp	r1, #31
 800fa28:	b538      	push	{r3, r4, r5, lr}
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	460d      	mov	r5, r1
 800fa2e:	d904      	bls.n	800fa3a <_raise_r+0x14>
 800fa30:	2316      	movs	r3, #22
 800fa32:	6003      	str	r3, [r0, #0]
 800fa34:	f04f 30ff 	mov.w	r0, #4294967295
 800fa38:	bd38      	pop	{r3, r4, r5, pc}
 800fa3a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fa3c:	b112      	cbz	r2, 800fa44 <_raise_r+0x1e>
 800fa3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa42:	b94b      	cbnz	r3, 800fa58 <_raise_r+0x32>
 800fa44:	4620      	mov	r0, r4
 800fa46:	f000 f831 	bl	800faac <_getpid_r>
 800fa4a:	462a      	mov	r2, r5
 800fa4c:	4601      	mov	r1, r0
 800fa4e:	4620      	mov	r0, r4
 800fa50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa54:	f000 b818 	b.w	800fa88 <_kill_r>
 800fa58:	2b01      	cmp	r3, #1
 800fa5a:	d00a      	beq.n	800fa72 <_raise_r+0x4c>
 800fa5c:	1c59      	adds	r1, r3, #1
 800fa5e:	d103      	bne.n	800fa68 <_raise_r+0x42>
 800fa60:	2316      	movs	r3, #22
 800fa62:	6003      	str	r3, [r0, #0]
 800fa64:	2001      	movs	r0, #1
 800fa66:	e7e7      	b.n	800fa38 <_raise_r+0x12>
 800fa68:	2400      	movs	r4, #0
 800fa6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa6e:	4628      	mov	r0, r5
 800fa70:	4798      	blx	r3
 800fa72:	2000      	movs	r0, #0
 800fa74:	e7e0      	b.n	800fa38 <_raise_r+0x12>
	...

0800fa78 <raise>:
 800fa78:	4b02      	ldr	r3, [pc, #8]	; (800fa84 <raise+0xc>)
 800fa7a:	4601      	mov	r1, r0
 800fa7c:	6818      	ldr	r0, [r3, #0]
 800fa7e:	f7ff bfd2 	b.w	800fa26 <_raise_r>
 800fa82:	bf00      	nop
 800fa84:	2000001c 	.word	0x2000001c

0800fa88 <_kill_r>:
 800fa88:	b538      	push	{r3, r4, r5, lr}
 800fa8a:	4d07      	ldr	r5, [pc, #28]	; (800faa8 <_kill_r+0x20>)
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	4604      	mov	r4, r0
 800fa90:	4608      	mov	r0, r1
 800fa92:	4611      	mov	r1, r2
 800fa94:	602b      	str	r3, [r5, #0]
 800fa96:	f7f3 f9ef 	bl	8002e78 <_kill>
 800fa9a:	1c43      	adds	r3, r0, #1
 800fa9c:	d102      	bne.n	800faa4 <_kill_r+0x1c>
 800fa9e:	682b      	ldr	r3, [r5, #0]
 800faa0:	b103      	cbz	r3, 800faa4 <_kill_r+0x1c>
 800faa2:	6023      	str	r3, [r4, #0]
 800faa4:	bd38      	pop	{r3, r4, r5, pc}
 800faa6:	bf00      	nop
 800faa8:	20000860 	.word	0x20000860

0800faac <_getpid_r>:
 800faac:	f7f3 b9dc 	b.w	8002e68 <_getpid>

0800fab0 <__sread>:
 800fab0:	b510      	push	{r4, lr}
 800fab2:	460c      	mov	r4, r1
 800fab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fab8:	f000 f89c 	bl	800fbf4 <_read_r>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	bfab      	itete	ge
 800fac0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fac2:	89a3      	ldrhlt	r3, [r4, #12]
 800fac4:	181b      	addge	r3, r3, r0
 800fac6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800faca:	bfac      	ite	ge
 800facc:	6563      	strge	r3, [r4, #84]	; 0x54
 800face:	81a3      	strhlt	r3, [r4, #12]
 800fad0:	bd10      	pop	{r4, pc}

0800fad2 <__swrite>:
 800fad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fad6:	461f      	mov	r7, r3
 800fad8:	898b      	ldrh	r3, [r1, #12]
 800fada:	05db      	lsls	r3, r3, #23
 800fadc:	4605      	mov	r5, r0
 800fade:	460c      	mov	r4, r1
 800fae0:	4616      	mov	r6, r2
 800fae2:	d505      	bpl.n	800faf0 <__swrite+0x1e>
 800fae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fae8:	2302      	movs	r3, #2
 800faea:	2200      	movs	r2, #0
 800faec:	f000 f868 	bl	800fbc0 <_lseek_r>
 800faf0:	89a3      	ldrh	r3, [r4, #12]
 800faf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800faf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fafa:	81a3      	strh	r3, [r4, #12]
 800fafc:	4632      	mov	r2, r6
 800fafe:	463b      	mov	r3, r7
 800fb00:	4628      	mov	r0, r5
 800fb02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb06:	f000 b817 	b.w	800fb38 <_write_r>

0800fb0a <__sseek>:
 800fb0a:	b510      	push	{r4, lr}
 800fb0c:	460c      	mov	r4, r1
 800fb0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb12:	f000 f855 	bl	800fbc0 <_lseek_r>
 800fb16:	1c43      	adds	r3, r0, #1
 800fb18:	89a3      	ldrh	r3, [r4, #12]
 800fb1a:	bf15      	itete	ne
 800fb1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb26:	81a3      	strheq	r3, [r4, #12]
 800fb28:	bf18      	it	ne
 800fb2a:	81a3      	strhne	r3, [r4, #12]
 800fb2c:	bd10      	pop	{r4, pc}

0800fb2e <__sclose>:
 800fb2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb32:	f000 b813 	b.w	800fb5c <_close_r>
	...

0800fb38 <_write_r>:
 800fb38:	b538      	push	{r3, r4, r5, lr}
 800fb3a:	4d07      	ldr	r5, [pc, #28]	; (800fb58 <_write_r+0x20>)
 800fb3c:	4604      	mov	r4, r0
 800fb3e:	4608      	mov	r0, r1
 800fb40:	4611      	mov	r1, r2
 800fb42:	2200      	movs	r2, #0
 800fb44:	602a      	str	r2, [r5, #0]
 800fb46:	461a      	mov	r2, r3
 800fb48:	f7f3 f9cd 	bl	8002ee6 <_write>
 800fb4c:	1c43      	adds	r3, r0, #1
 800fb4e:	d102      	bne.n	800fb56 <_write_r+0x1e>
 800fb50:	682b      	ldr	r3, [r5, #0]
 800fb52:	b103      	cbz	r3, 800fb56 <_write_r+0x1e>
 800fb54:	6023      	str	r3, [r4, #0]
 800fb56:	bd38      	pop	{r3, r4, r5, pc}
 800fb58:	20000860 	.word	0x20000860

0800fb5c <_close_r>:
 800fb5c:	b538      	push	{r3, r4, r5, lr}
 800fb5e:	4d06      	ldr	r5, [pc, #24]	; (800fb78 <_close_r+0x1c>)
 800fb60:	2300      	movs	r3, #0
 800fb62:	4604      	mov	r4, r0
 800fb64:	4608      	mov	r0, r1
 800fb66:	602b      	str	r3, [r5, #0]
 800fb68:	f7f3 f9d9 	bl	8002f1e <_close>
 800fb6c:	1c43      	adds	r3, r0, #1
 800fb6e:	d102      	bne.n	800fb76 <_close_r+0x1a>
 800fb70:	682b      	ldr	r3, [r5, #0]
 800fb72:	b103      	cbz	r3, 800fb76 <_close_r+0x1a>
 800fb74:	6023      	str	r3, [r4, #0]
 800fb76:	bd38      	pop	{r3, r4, r5, pc}
 800fb78:	20000860 	.word	0x20000860

0800fb7c <_fstat_r>:
 800fb7c:	b538      	push	{r3, r4, r5, lr}
 800fb7e:	4d07      	ldr	r5, [pc, #28]	; (800fb9c <_fstat_r+0x20>)
 800fb80:	2300      	movs	r3, #0
 800fb82:	4604      	mov	r4, r0
 800fb84:	4608      	mov	r0, r1
 800fb86:	4611      	mov	r1, r2
 800fb88:	602b      	str	r3, [r5, #0]
 800fb8a:	f7f3 f9d4 	bl	8002f36 <_fstat>
 800fb8e:	1c43      	adds	r3, r0, #1
 800fb90:	d102      	bne.n	800fb98 <_fstat_r+0x1c>
 800fb92:	682b      	ldr	r3, [r5, #0]
 800fb94:	b103      	cbz	r3, 800fb98 <_fstat_r+0x1c>
 800fb96:	6023      	str	r3, [r4, #0]
 800fb98:	bd38      	pop	{r3, r4, r5, pc}
 800fb9a:	bf00      	nop
 800fb9c:	20000860 	.word	0x20000860

0800fba0 <_isatty_r>:
 800fba0:	b538      	push	{r3, r4, r5, lr}
 800fba2:	4d06      	ldr	r5, [pc, #24]	; (800fbbc <_isatty_r+0x1c>)
 800fba4:	2300      	movs	r3, #0
 800fba6:	4604      	mov	r4, r0
 800fba8:	4608      	mov	r0, r1
 800fbaa:	602b      	str	r3, [r5, #0]
 800fbac:	f7f3 f9d3 	bl	8002f56 <_isatty>
 800fbb0:	1c43      	adds	r3, r0, #1
 800fbb2:	d102      	bne.n	800fbba <_isatty_r+0x1a>
 800fbb4:	682b      	ldr	r3, [r5, #0]
 800fbb6:	b103      	cbz	r3, 800fbba <_isatty_r+0x1a>
 800fbb8:	6023      	str	r3, [r4, #0]
 800fbba:	bd38      	pop	{r3, r4, r5, pc}
 800fbbc:	20000860 	.word	0x20000860

0800fbc0 <_lseek_r>:
 800fbc0:	b538      	push	{r3, r4, r5, lr}
 800fbc2:	4d07      	ldr	r5, [pc, #28]	; (800fbe0 <_lseek_r+0x20>)
 800fbc4:	4604      	mov	r4, r0
 800fbc6:	4608      	mov	r0, r1
 800fbc8:	4611      	mov	r1, r2
 800fbca:	2200      	movs	r2, #0
 800fbcc:	602a      	str	r2, [r5, #0]
 800fbce:	461a      	mov	r2, r3
 800fbd0:	f7f3 f9cc 	bl	8002f6c <_lseek>
 800fbd4:	1c43      	adds	r3, r0, #1
 800fbd6:	d102      	bne.n	800fbde <_lseek_r+0x1e>
 800fbd8:	682b      	ldr	r3, [r5, #0]
 800fbda:	b103      	cbz	r3, 800fbde <_lseek_r+0x1e>
 800fbdc:	6023      	str	r3, [r4, #0]
 800fbde:	bd38      	pop	{r3, r4, r5, pc}
 800fbe0:	20000860 	.word	0x20000860

0800fbe4 <_malloc_usable_size_r>:
 800fbe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbe8:	1f18      	subs	r0, r3, #4
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	bfbc      	itt	lt
 800fbee:	580b      	ldrlt	r3, [r1, r0]
 800fbf0:	18c0      	addlt	r0, r0, r3
 800fbf2:	4770      	bx	lr

0800fbf4 <_read_r>:
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4d07      	ldr	r5, [pc, #28]	; (800fc14 <_read_r+0x20>)
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	4608      	mov	r0, r1
 800fbfc:	4611      	mov	r1, r2
 800fbfe:	2200      	movs	r2, #0
 800fc00:	602a      	str	r2, [r5, #0]
 800fc02:	461a      	mov	r2, r3
 800fc04:	f7f3 f952 	bl	8002eac <_read>
 800fc08:	1c43      	adds	r3, r0, #1
 800fc0a:	d102      	bne.n	800fc12 <_read_r+0x1e>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	b103      	cbz	r3, 800fc12 <_read_r+0x1e>
 800fc10:	6023      	str	r3, [r4, #0]
 800fc12:	bd38      	pop	{r3, r4, r5, pc}
 800fc14:	20000860 	.word	0x20000860

0800fc18 <fmax>:
 800fc18:	b508      	push	{r3, lr}
 800fc1a:	ed2d 8b04 	vpush	{d8-d9}
 800fc1e:	eeb0 8a40 	vmov.f32	s16, s0
 800fc22:	eef0 8a60 	vmov.f32	s17, s1
 800fc26:	eeb0 9a41 	vmov.f32	s18, s2
 800fc2a:	eef0 9a61 	vmov.f32	s19, s3
 800fc2e:	f000 f81b 	bl	800fc68 <__fpclassifyd>
 800fc32:	b168      	cbz	r0, 800fc50 <fmax+0x38>
 800fc34:	eeb0 0a49 	vmov.f32	s0, s18
 800fc38:	eef0 0a69 	vmov.f32	s1, s19
 800fc3c:	f000 f814 	bl	800fc68 <__fpclassifyd>
 800fc40:	b150      	cbz	r0, 800fc58 <fmax+0x40>
 800fc42:	ec53 2b19 	vmov	r2, r3, d9
 800fc46:	ec51 0b18 	vmov	r0, r1, d8
 800fc4a:	f7f0 ff7d 	bl	8000b48 <__aeabi_dcmpgt>
 800fc4e:	b918      	cbnz	r0, 800fc58 <fmax+0x40>
 800fc50:	eeb0 8a49 	vmov.f32	s16, s18
 800fc54:	eef0 8a69 	vmov.f32	s17, s19
 800fc58:	eeb0 0a48 	vmov.f32	s0, s16
 800fc5c:	eef0 0a68 	vmov.f32	s1, s17
 800fc60:	ecbd 8b04 	vpop	{d8-d9}
 800fc64:	bd08      	pop	{r3, pc}
	...

0800fc68 <__fpclassifyd>:
 800fc68:	ec51 0b10 	vmov	r0, r1, d0
 800fc6c:	b510      	push	{r4, lr}
 800fc6e:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800fc72:	460b      	mov	r3, r1
 800fc74:	d019      	beq.n	800fcaa <__fpclassifyd+0x42>
 800fc76:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800fc7a:	490e      	ldr	r1, [pc, #56]	; (800fcb4 <__fpclassifyd+0x4c>)
 800fc7c:	428a      	cmp	r2, r1
 800fc7e:	d90e      	bls.n	800fc9e <__fpclassifyd+0x36>
 800fc80:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800fc84:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800fc88:	428a      	cmp	r2, r1
 800fc8a:	d908      	bls.n	800fc9e <__fpclassifyd+0x36>
 800fc8c:	4a0a      	ldr	r2, [pc, #40]	; (800fcb8 <__fpclassifyd+0x50>)
 800fc8e:	4213      	tst	r3, r2
 800fc90:	d007      	beq.n	800fca2 <__fpclassifyd+0x3a>
 800fc92:	4294      	cmp	r4, r2
 800fc94:	d107      	bne.n	800fca6 <__fpclassifyd+0x3e>
 800fc96:	fab0 f080 	clz	r0, r0
 800fc9a:	0940      	lsrs	r0, r0, #5
 800fc9c:	bd10      	pop	{r4, pc}
 800fc9e:	2004      	movs	r0, #4
 800fca0:	e7fc      	b.n	800fc9c <__fpclassifyd+0x34>
 800fca2:	2003      	movs	r0, #3
 800fca4:	e7fa      	b.n	800fc9c <__fpclassifyd+0x34>
 800fca6:	2000      	movs	r0, #0
 800fca8:	e7f8      	b.n	800fc9c <__fpclassifyd+0x34>
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	d1ee      	bne.n	800fc8c <__fpclassifyd+0x24>
 800fcae:	2002      	movs	r0, #2
 800fcb0:	e7f4      	b.n	800fc9c <__fpclassifyd+0x34>
 800fcb2:	bf00      	nop
 800fcb4:	7fdfffff 	.word	0x7fdfffff
 800fcb8:	7ff00000 	.word	0x7ff00000

0800fcbc <atan2>:
 800fcbc:	f000 b86c 	b.w	800fd98 <__ieee754_atan2>

0800fcc0 <log>:
 800fcc0:	b538      	push	{r3, r4, r5, lr}
 800fcc2:	ed2d 8b02 	vpush	{d8}
 800fcc6:	ec55 4b10 	vmov	r4, r5, d0
 800fcca:	f000 f931 	bl	800ff30 <__ieee754_log>
 800fcce:	4622      	mov	r2, r4
 800fcd0:	462b      	mov	r3, r5
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	4629      	mov	r1, r5
 800fcd6:	eeb0 8a40 	vmov.f32	s16, s0
 800fcda:	eef0 8a60 	vmov.f32	s17, s1
 800fcde:	f7f0 ff3d 	bl	8000b5c <__aeabi_dcmpun>
 800fce2:	b998      	cbnz	r0, 800fd0c <log+0x4c>
 800fce4:	2200      	movs	r2, #0
 800fce6:	2300      	movs	r3, #0
 800fce8:	4620      	mov	r0, r4
 800fcea:	4629      	mov	r1, r5
 800fcec:	f7f0 ff2c 	bl	8000b48 <__aeabi_dcmpgt>
 800fcf0:	b960      	cbnz	r0, 800fd0c <log+0x4c>
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	4629      	mov	r1, r5
 800fcfa:	f7f0 fefd 	bl	8000af8 <__aeabi_dcmpeq>
 800fcfe:	b160      	cbz	r0, 800fd1a <log+0x5a>
 800fd00:	f7fb fa34 	bl	800b16c <__errno>
 800fd04:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800fd30 <log+0x70>
 800fd08:	2322      	movs	r3, #34	; 0x22
 800fd0a:	6003      	str	r3, [r0, #0]
 800fd0c:	eeb0 0a48 	vmov.f32	s0, s16
 800fd10:	eef0 0a68 	vmov.f32	s1, s17
 800fd14:	ecbd 8b02 	vpop	{d8}
 800fd18:	bd38      	pop	{r3, r4, r5, pc}
 800fd1a:	f7fb fa27 	bl	800b16c <__errno>
 800fd1e:	ecbd 8b02 	vpop	{d8}
 800fd22:	2321      	movs	r3, #33	; 0x21
 800fd24:	6003      	str	r3, [r0, #0]
 800fd26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd2a:	4803      	ldr	r0, [pc, #12]	; (800fd38 <log+0x78>)
 800fd2c:	f7ff bb04 	b.w	800f338 <nan>
 800fd30:	00000000 	.word	0x00000000
 800fd34:	fff00000 	.word	0xfff00000
 800fd38:	08010c67 	.word	0x08010c67

0800fd3c <sqrt>:
 800fd3c:	b538      	push	{r3, r4, r5, lr}
 800fd3e:	ed2d 8b02 	vpush	{d8}
 800fd42:	ec55 4b10 	vmov	r4, r5, d0
 800fd46:	f000 faad 	bl	80102a4 <__ieee754_sqrt>
 800fd4a:	4622      	mov	r2, r4
 800fd4c:	462b      	mov	r3, r5
 800fd4e:	4620      	mov	r0, r4
 800fd50:	4629      	mov	r1, r5
 800fd52:	eeb0 8a40 	vmov.f32	s16, s0
 800fd56:	eef0 8a60 	vmov.f32	s17, s1
 800fd5a:	f7f0 feff 	bl	8000b5c <__aeabi_dcmpun>
 800fd5e:	b990      	cbnz	r0, 800fd86 <sqrt+0x4a>
 800fd60:	2200      	movs	r2, #0
 800fd62:	2300      	movs	r3, #0
 800fd64:	4620      	mov	r0, r4
 800fd66:	4629      	mov	r1, r5
 800fd68:	f7f0 fed0 	bl	8000b0c <__aeabi_dcmplt>
 800fd6c:	b158      	cbz	r0, 800fd86 <sqrt+0x4a>
 800fd6e:	f7fb f9fd 	bl	800b16c <__errno>
 800fd72:	2321      	movs	r3, #33	; 0x21
 800fd74:	6003      	str	r3, [r0, #0]
 800fd76:	2200      	movs	r2, #0
 800fd78:	2300      	movs	r3, #0
 800fd7a:	4610      	mov	r0, r2
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	f7f0 fd7d 	bl	800087c <__aeabi_ddiv>
 800fd82:	ec41 0b18 	vmov	d8, r0, r1
 800fd86:	eeb0 0a48 	vmov.f32	s0, s16
 800fd8a:	eef0 0a68 	vmov.f32	s1, s17
 800fd8e:	ecbd 8b02 	vpop	{d8}
 800fd92:	bd38      	pop	{r3, r4, r5, pc}
 800fd94:	0000      	movs	r0, r0
	...

0800fd98 <__ieee754_atan2>:
 800fd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd9c:	ec57 6b11 	vmov	r6, r7, d1
 800fda0:	4273      	negs	r3, r6
 800fda2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ff28 <__ieee754_atan2+0x190>
 800fda6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fdaa:	4333      	orrs	r3, r6
 800fdac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fdb0:	4573      	cmp	r3, lr
 800fdb2:	ec51 0b10 	vmov	r0, r1, d0
 800fdb6:	ee11 8a10 	vmov	r8, s2
 800fdba:	d80a      	bhi.n	800fdd2 <__ieee754_atan2+0x3a>
 800fdbc:	4244      	negs	r4, r0
 800fdbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fdc2:	4304      	orrs	r4, r0
 800fdc4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fdc8:	4574      	cmp	r4, lr
 800fdca:	ee10 9a10 	vmov	r9, s0
 800fdce:	468c      	mov	ip, r1
 800fdd0:	d907      	bls.n	800fde2 <__ieee754_atan2+0x4a>
 800fdd2:	4632      	mov	r2, r6
 800fdd4:	463b      	mov	r3, r7
 800fdd6:	f7f0 fa71 	bl	80002bc <__adddf3>
 800fdda:	ec41 0b10 	vmov	d0, r0, r1
 800fdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fde2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800fde6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fdea:	4334      	orrs	r4, r6
 800fdec:	d103      	bne.n	800fdf6 <__ieee754_atan2+0x5e>
 800fdee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdf2:	f000 bb09 	b.w	8010408 <atan>
 800fdf6:	17bc      	asrs	r4, r7, #30
 800fdf8:	f004 0402 	and.w	r4, r4, #2
 800fdfc:	ea53 0909 	orrs.w	r9, r3, r9
 800fe00:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fe04:	d107      	bne.n	800fe16 <__ieee754_atan2+0x7e>
 800fe06:	2c02      	cmp	r4, #2
 800fe08:	d060      	beq.n	800fecc <__ieee754_atan2+0x134>
 800fe0a:	2c03      	cmp	r4, #3
 800fe0c:	d1e5      	bne.n	800fdda <__ieee754_atan2+0x42>
 800fe0e:	a142      	add	r1, pc, #264	; (adr r1, 800ff18 <__ieee754_atan2+0x180>)
 800fe10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe14:	e7e1      	b.n	800fdda <__ieee754_atan2+0x42>
 800fe16:	ea52 0808 	orrs.w	r8, r2, r8
 800fe1a:	d106      	bne.n	800fe2a <__ieee754_atan2+0x92>
 800fe1c:	f1bc 0f00 	cmp.w	ip, #0
 800fe20:	da5f      	bge.n	800fee2 <__ieee754_atan2+0x14a>
 800fe22:	a13f      	add	r1, pc, #252	; (adr r1, 800ff20 <__ieee754_atan2+0x188>)
 800fe24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe28:	e7d7      	b.n	800fdda <__ieee754_atan2+0x42>
 800fe2a:	4572      	cmp	r2, lr
 800fe2c:	d10f      	bne.n	800fe4e <__ieee754_atan2+0xb6>
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	f104 34ff 	add.w	r4, r4, #4294967295
 800fe34:	d107      	bne.n	800fe46 <__ieee754_atan2+0xae>
 800fe36:	2c02      	cmp	r4, #2
 800fe38:	d84c      	bhi.n	800fed4 <__ieee754_atan2+0x13c>
 800fe3a:	4b35      	ldr	r3, [pc, #212]	; (800ff10 <__ieee754_atan2+0x178>)
 800fe3c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800fe40:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fe44:	e7c9      	b.n	800fdda <__ieee754_atan2+0x42>
 800fe46:	2c02      	cmp	r4, #2
 800fe48:	d848      	bhi.n	800fedc <__ieee754_atan2+0x144>
 800fe4a:	4b32      	ldr	r3, [pc, #200]	; (800ff14 <__ieee754_atan2+0x17c>)
 800fe4c:	e7f6      	b.n	800fe3c <__ieee754_atan2+0xa4>
 800fe4e:	4573      	cmp	r3, lr
 800fe50:	d0e4      	beq.n	800fe1c <__ieee754_atan2+0x84>
 800fe52:	1a9b      	subs	r3, r3, r2
 800fe54:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800fe58:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fe5c:	da1e      	bge.n	800fe9c <__ieee754_atan2+0x104>
 800fe5e:	2f00      	cmp	r7, #0
 800fe60:	da01      	bge.n	800fe66 <__ieee754_atan2+0xce>
 800fe62:	323c      	adds	r2, #60	; 0x3c
 800fe64:	db1e      	blt.n	800fea4 <__ieee754_atan2+0x10c>
 800fe66:	4632      	mov	r2, r6
 800fe68:	463b      	mov	r3, r7
 800fe6a:	f7f0 fd07 	bl	800087c <__aeabi_ddiv>
 800fe6e:	ec41 0b10 	vmov	d0, r0, r1
 800fe72:	f000 fc69 	bl	8010748 <fabs>
 800fe76:	f000 fac7 	bl	8010408 <atan>
 800fe7a:	ec51 0b10 	vmov	r0, r1, d0
 800fe7e:	2c01      	cmp	r4, #1
 800fe80:	d013      	beq.n	800feaa <__ieee754_atan2+0x112>
 800fe82:	2c02      	cmp	r4, #2
 800fe84:	d015      	beq.n	800feb2 <__ieee754_atan2+0x11a>
 800fe86:	2c00      	cmp	r4, #0
 800fe88:	d0a7      	beq.n	800fdda <__ieee754_atan2+0x42>
 800fe8a:	a319      	add	r3, pc, #100	; (adr r3, 800fef0 <__ieee754_atan2+0x158>)
 800fe8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe90:	f7f0 fa12 	bl	80002b8 <__aeabi_dsub>
 800fe94:	a318      	add	r3, pc, #96	; (adr r3, 800fef8 <__ieee754_atan2+0x160>)
 800fe96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9a:	e014      	b.n	800fec6 <__ieee754_atan2+0x12e>
 800fe9c:	a118      	add	r1, pc, #96	; (adr r1, 800ff00 <__ieee754_atan2+0x168>)
 800fe9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fea2:	e7ec      	b.n	800fe7e <__ieee754_atan2+0xe6>
 800fea4:	2000      	movs	r0, #0
 800fea6:	2100      	movs	r1, #0
 800fea8:	e7e9      	b.n	800fe7e <__ieee754_atan2+0xe6>
 800feaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800feae:	4619      	mov	r1, r3
 800feb0:	e793      	b.n	800fdda <__ieee754_atan2+0x42>
 800feb2:	a30f      	add	r3, pc, #60	; (adr r3, 800fef0 <__ieee754_atan2+0x158>)
 800feb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb8:	f7f0 f9fe 	bl	80002b8 <__aeabi_dsub>
 800febc:	4602      	mov	r2, r0
 800febe:	460b      	mov	r3, r1
 800fec0:	a10d      	add	r1, pc, #52	; (adr r1, 800fef8 <__ieee754_atan2+0x160>)
 800fec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fec6:	f7f0 f9f7 	bl	80002b8 <__aeabi_dsub>
 800feca:	e786      	b.n	800fdda <__ieee754_atan2+0x42>
 800fecc:	a10a      	add	r1, pc, #40	; (adr r1, 800fef8 <__ieee754_atan2+0x160>)
 800fece:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fed2:	e782      	b.n	800fdda <__ieee754_atan2+0x42>
 800fed4:	a10c      	add	r1, pc, #48	; (adr r1, 800ff08 <__ieee754_atan2+0x170>)
 800fed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800feda:	e77e      	b.n	800fdda <__ieee754_atan2+0x42>
 800fedc:	2000      	movs	r0, #0
 800fede:	2100      	movs	r1, #0
 800fee0:	e77b      	b.n	800fdda <__ieee754_atan2+0x42>
 800fee2:	a107      	add	r1, pc, #28	; (adr r1, 800ff00 <__ieee754_atan2+0x168>)
 800fee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fee8:	e777      	b.n	800fdda <__ieee754_atan2+0x42>
 800feea:	bf00      	nop
 800feec:	f3af 8000 	nop.w
 800fef0:	33145c07 	.word	0x33145c07
 800fef4:	3ca1a626 	.word	0x3ca1a626
 800fef8:	54442d18 	.word	0x54442d18
 800fefc:	400921fb 	.word	0x400921fb
 800ff00:	54442d18 	.word	0x54442d18
 800ff04:	3ff921fb 	.word	0x3ff921fb
 800ff08:	54442d18 	.word	0x54442d18
 800ff0c:	3fe921fb 	.word	0x3fe921fb
 800ff10:	08011028 	.word	0x08011028
 800ff14:	08011040 	.word	0x08011040
 800ff18:	54442d18 	.word	0x54442d18
 800ff1c:	c00921fb 	.word	0xc00921fb
 800ff20:	54442d18 	.word	0x54442d18
 800ff24:	bff921fb 	.word	0xbff921fb
 800ff28:	7ff00000 	.word	0x7ff00000
 800ff2c:	00000000 	.word	0x00000000

0800ff30 <__ieee754_log>:
 800ff30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff34:	ec51 0b10 	vmov	r0, r1, d0
 800ff38:	ed2d 8b04 	vpush	{d8-d9}
 800ff3c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ff40:	b083      	sub	sp, #12
 800ff42:	460d      	mov	r5, r1
 800ff44:	da29      	bge.n	800ff9a <__ieee754_log+0x6a>
 800ff46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff4a:	4303      	orrs	r3, r0
 800ff4c:	ee10 2a10 	vmov	r2, s0
 800ff50:	d10c      	bne.n	800ff6c <__ieee754_log+0x3c>
 800ff52:	49cf      	ldr	r1, [pc, #828]	; (8010290 <__ieee754_log+0x360>)
 800ff54:	2200      	movs	r2, #0
 800ff56:	2300      	movs	r3, #0
 800ff58:	2000      	movs	r0, #0
 800ff5a:	f7f0 fc8f 	bl	800087c <__aeabi_ddiv>
 800ff5e:	ec41 0b10 	vmov	d0, r0, r1
 800ff62:	b003      	add	sp, #12
 800ff64:	ecbd 8b04 	vpop	{d8-d9}
 800ff68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff6c:	2900      	cmp	r1, #0
 800ff6e:	da05      	bge.n	800ff7c <__ieee754_log+0x4c>
 800ff70:	460b      	mov	r3, r1
 800ff72:	f7f0 f9a1 	bl	80002b8 <__aeabi_dsub>
 800ff76:	2200      	movs	r2, #0
 800ff78:	2300      	movs	r3, #0
 800ff7a:	e7ee      	b.n	800ff5a <__ieee754_log+0x2a>
 800ff7c:	4bc5      	ldr	r3, [pc, #788]	; (8010294 <__ieee754_log+0x364>)
 800ff7e:	2200      	movs	r2, #0
 800ff80:	f7f0 fb52 	bl	8000628 <__aeabi_dmul>
 800ff84:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800ff88:	460d      	mov	r5, r1
 800ff8a:	4ac3      	ldr	r2, [pc, #780]	; (8010298 <__ieee754_log+0x368>)
 800ff8c:	4295      	cmp	r5, r2
 800ff8e:	dd06      	ble.n	800ff9e <__ieee754_log+0x6e>
 800ff90:	4602      	mov	r2, r0
 800ff92:	460b      	mov	r3, r1
 800ff94:	f7f0 f992 	bl	80002bc <__adddf3>
 800ff98:	e7e1      	b.n	800ff5e <__ieee754_log+0x2e>
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	e7f5      	b.n	800ff8a <__ieee754_log+0x5a>
 800ff9e:	152c      	asrs	r4, r5, #20
 800ffa0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ffa4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ffa8:	441c      	add	r4, r3
 800ffaa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800ffae:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ffb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ffb6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ffba:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ffbe:	ea42 0105 	orr.w	r1, r2, r5
 800ffc2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	4bb4      	ldr	r3, [pc, #720]	; (801029c <__ieee754_log+0x36c>)
 800ffca:	f7f0 f975 	bl	80002b8 <__aeabi_dsub>
 800ffce:	1cab      	adds	r3, r5, #2
 800ffd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ffd4:	2b02      	cmp	r3, #2
 800ffd6:	4682      	mov	sl, r0
 800ffd8:	468b      	mov	fp, r1
 800ffda:	f04f 0200 	mov.w	r2, #0
 800ffde:	dc53      	bgt.n	8010088 <__ieee754_log+0x158>
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	f7f0 fd89 	bl	8000af8 <__aeabi_dcmpeq>
 800ffe6:	b1d0      	cbz	r0, 801001e <__ieee754_log+0xee>
 800ffe8:	2c00      	cmp	r4, #0
 800ffea:	f000 8122 	beq.w	8010232 <__ieee754_log+0x302>
 800ffee:	4620      	mov	r0, r4
 800fff0:	f7f0 fab0 	bl	8000554 <__aeabi_i2d>
 800fff4:	a390      	add	r3, pc, #576	; (adr r3, 8010238 <__ieee754_log+0x308>)
 800fff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffa:	4606      	mov	r6, r0
 800fffc:	460f      	mov	r7, r1
 800fffe:	f7f0 fb13 	bl	8000628 <__aeabi_dmul>
 8010002:	a38f      	add	r3, pc, #572	; (adr r3, 8010240 <__ieee754_log+0x310>)
 8010004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010008:	4604      	mov	r4, r0
 801000a:	460d      	mov	r5, r1
 801000c:	4630      	mov	r0, r6
 801000e:	4639      	mov	r1, r7
 8010010:	f7f0 fb0a 	bl	8000628 <__aeabi_dmul>
 8010014:	4602      	mov	r2, r0
 8010016:	460b      	mov	r3, r1
 8010018:	4620      	mov	r0, r4
 801001a:	4629      	mov	r1, r5
 801001c:	e7ba      	b.n	800ff94 <__ieee754_log+0x64>
 801001e:	a38a      	add	r3, pc, #552	; (adr r3, 8010248 <__ieee754_log+0x318>)
 8010020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010024:	4650      	mov	r0, sl
 8010026:	4659      	mov	r1, fp
 8010028:	f7f0 fafe 	bl	8000628 <__aeabi_dmul>
 801002c:	4602      	mov	r2, r0
 801002e:	460b      	mov	r3, r1
 8010030:	2000      	movs	r0, #0
 8010032:	499b      	ldr	r1, [pc, #620]	; (80102a0 <__ieee754_log+0x370>)
 8010034:	f7f0 f940 	bl	80002b8 <__aeabi_dsub>
 8010038:	4652      	mov	r2, sl
 801003a:	4606      	mov	r6, r0
 801003c:	460f      	mov	r7, r1
 801003e:	465b      	mov	r3, fp
 8010040:	4650      	mov	r0, sl
 8010042:	4659      	mov	r1, fp
 8010044:	f7f0 faf0 	bl	8000628 <__aeabi_dmul>
 8010048:	4602      	mov	r2, r0
 801004a:	460b      	mov	r3, r1
 801004c:	4630      	mov	r0, r6
 801004e:	4639      	mov	r1, r7
 8010050:	f7f0 faea 	bl	8000628 <__aeabi_dmul>
 8010054:	4606      	mov	r6, r0
 8010056:	460f      	mov	r7, r1
 8010058:	b914      	cbnz	r4, 8010060 <__ieee754_log+0x130>
 801005a:	4632      	mov	r2, r6
 801005c:	463b      	mov	r3, r7
 801005e:	e0a2      	b.n	80101a6 <__ieee754_log+0x276>
 8010060:	4620      	mov	r0, r4
 8010062:	f7f0 fa77 	bl	8000554 <__aeabi_i2d>
 8010066:	a374      	add	r3, pc, #464	; (adr r3, 8010238 <__ieee754_log+0x308>)
 8010068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006c:	4680      	mov	r8, r0
 801006e:	4689      	mov	r9, r1
 8010070:	f7f0 fada 	bl	8000628 <__aeabi_dmul>
 8010074:	a372      	add	r3, pc, #456	; (adr r3, 8010240 <__ieee754_log+0x310>)
 8010076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007a:	4604      	mov	r4, r0
 801007c:	460d      	mov	r5, r1
 801007e:	4640      	mov	r0, r8
 8010080:	4649      	mov	r1, r9
 8010082:	f7f0 fad1 	bl	8000628 <__aeabi_dmul>
 8010086:	e0a7      	b.n	80101d8 <__ieee754_log+0x2a8>
 8010088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801008c:	f7f0 f916 	bl	80002bc <__adddf3>
 8010090:	4602      	mov	r2, r0
 8010092:	460b      	mov	r3, r1
 8010094:	4650      	mov	r0, sl
 8010096:	4659      	mov	r1, fp
 8010098:	f7f0 fbf0 	bl	800087c <__aeabi_ddiv>
 801009c:	ec41 0b18 	vmov	d8, r0, r1
 80100a0:	4620      	mov	r0, r4
 80100a2:	f7f0 fa57 	bl	8000554 <__aeabi_i2d>
 80100a6:	ec53 2b18 	vmov	r2, r3, d8
 80100aa:	ec41 0b19 	vmov	d9, r0, r1
 80100ae:	ec51 0b18 	vmov	r0, r1, d8
 80100b2:	f7f0 fab9 	bl	8000628 <__aeabi_dmul>
 80100b6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80100ba:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80100be:	9301      	str	r3, [sp, #4]
 80100c0:	4602      	mov	r2, r0
 80100c2:	460b      	mov	r3, r1
 80100c4:	4680      	mov	r8, r0
 80100c6:	4689      	mov	r9, r1
 80100c8:	f7f0 faae 	bl	8000628 <__aeabi_dmul>
 80100cc:	a360      	add	r3, pc, #384	; (adr r3, 8010250 <__ieee754_log+0x320>)
 80100ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d2:	4606      	mov	r6, r0
 80100d4:	460f      	mov	r7, r1
 80100d6:	f7f0 faa7 	bl	8000628 <__aeabi_dmul>
 80100da:	a35f      	add	r3, pc, #380	; (adr r3, 8010258 <__ieee754_log+0x328>)
 80100dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e0:	f7f0 f8ec 	bl	80002bc <__adddf3>
 80100e4:	4632      	mov	r2, r6
 80100e6:	463b      	mov	r3, r7
 80100e8:	f7f0 fa9e 	bl	8000628 <__aeabi_dmul>
 80100ec:	a35c      	add	r3, pc, #368	; (adr r3, 8010260 <__ieee754_log+0x330>)
 80100ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f2:	f7f0 f8e3 	bl	80002bc <__adddf3>
 80100f6:	4632      	mov	r2, r6
 80100f8:	463b      	mov	r3, r7
 80100fa:	f7f0 fa95 	bl	8000628 <__aeabi_dmul>
 80100fe:	a35a      	add	r3, pc, #360	; (adr r3, 8010268 <__ieee754_log+0x338>)
 8010100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010104:	f7f0 f8da 	bl	80002bc <__adddf3>
 8010108:	4642      	mov	r2, r8
 801010a:	464b      	mov	r3, r9
 801010c:	f7f0 fa8c 	bl	8000628 <__aeabi_dmul>
 8010110:	a357      	add	r3, pc, #348	; (adr r3, 8010270 <__ieee754_log+0x340>)
 8010112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010116:	4680      	mov	r8, r0
 8010118:	4689      	mov	r9, r1
 801011a:	4630      	mov	r0, r6
 801011c:	4639      	mov	r1, r7
 801011e:	f7f0 fa83 	bl	8000628 <__aeabi_dmul>
 8010122:	a355      	add	r3, pc, #340	; (adr r3, 8010278 <__ieee754_log+0x348>)
 8010124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010128:	f7f0 f8c8 	bl	80002bc <__adddf3>
 801012c:	4632      	mov	r2, r6
 801012e:	463b      	mov	r3, r7
 8010130:	f7f0 fa7a 	bl	8000628 <__aeabi_dmul>
 8010134:	a352      	add	r3, pc, #328	; (adr r3, 8010280 <__ieee754_log+0x350>)
 8010136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801013a:	f7f0 f8bf 	bl	80002bc <__adddf3>
 801013e:	4632      	mov	r2, r6
 8010140:	463b      	mov	r3, r7
 8010142:	f7f0 fa71 	bl	8000628 <__aeabi_dmul>
 8010146:	460b      	mov	r3, r1
 8010148:	4602      	mov	r2, r0
 801014a:	4649      	mov	r1, r9
 801014c:	4640      	mov	r0, r8
 801014e:	f7f0 f8b5 	bl	80002bc <__adddf3>
 8010152:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8010156:	9b01      	ldr	r3, [sp, #4]
 8010158:	3551      	adds	r5, #81	; 0x51
 801015a:	431d      	orrs	r5, r3
 801015c:	2d00      	cmp	r5, #0
 801015e:	4680      	mov	r8, r0
 8010160:	4689      	mov	r9, r1
 8010162:	dd48      	ble.n	80101f6 <__ieee754_log+0x2c6>
 8010164:	4b4e      	ldr	r3, [pc, #312]	; (80102a0 <__ieee754_log+0x370>)
 8010166:	2200      	movs	r2, #0
 8010168:	4650      	mov	r0, sl
 801016a:	4659      	mov	r1, fp
 801016c:	f7f0 fa5c 	bl	8000628 <__aeabi_dmul>
 8010170:	4652      	mov	r2, sl
 8010172:	465b      	mov	r3, fp
 8010174:	f7f0 fa58 	bl	8000628 <__aeabi_dmul>
 8010178:	4602      	mov	r2, r0
 801017a:	460b      	mov	r3, r1
 801017c:	4606      	mov	r6, r0
 801017e:	460f      	mov	r7, r1
 8010180:	4640      	mov	r0, r8
 8010182:	4649      	mov	r1, r9
 8010184:	f7f0 f89a 	bl	80002bc <__adddf3>
 8010188:	ec53 2b18 	vmov	r2, r3, d8
 801018c:	f7f0 fa4c 	bl	8000628 <__aeabi_dmul>
 8010190:	4680      	mov	r8, r0
 8010192:	4689      	mov	r9, r1
 8010194:	b964      	cbnz	r4, 80101b0 <__ieee754_log+0x280>
 8010196:	4602      	mov	r2, r0
 8010198:	460b      	mov	r3, r1
 801019a:	4630      	mov	r0, r6
 801019c:	4639      	mov	r1, r7
 801019e:	f7f0 f88b 	bl	80002b8 <__aeabi_dsub>
 80101a2:	4602      	mov	r2, r0
 80101a4:	460b      	mov	r3, r1
 80101a6:	4650      	mov	r0, sl
 80101a8:	4659      	mov	r1, fp
 80101aa:	f7f0 f885 	bl	80002b8 <__aeabi_dsub>
 80101ae:	e6d6      	b.n	800ff5e <__ieee754_log+0x2e>
 80101b0:	a321      	add	r3, pc, #132	; (adr r3, 8010238 <__ieee754_log+0x308>)
 80101b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b6:	ec51 0b19 	vmov	r0, r1, d9
 80101ba:	f7f0 fa35 	bl	8000628 <__aeabi_dmul>
 80101be:	a320      	add	r3, pc, #128	; (adr r3, 8010240 <__ieee754_log+0x310>)
 80101c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101c4:	4604      	mov	r4, r0
 80101c6:	460d      	mov	r5, r1
 80101c8:	ec51 0b19 	vmov	r0, r1, d9
 80101cc:	f7f0 fa2c 	bl	8000628 <__aeabi_dmul>
 80101d0:	4642      	mov	r2, r8
 80101d2:	464b      	mov	r3, r9
 80101d4:	f7f0 f872 	bl	80002bc <__adddf3>
 80101d8:	4602      	mov	r2, r0
 80101da:	460b      	mov	r3, r1
 80101dc:	4630      	mov	r0, r6
 80101de:	4639      	mov	r1, r7
 80101e0:	f7f0 f86a 	bl	80002b8 <__aeabi_dsub>
 80101e4:	4652      	mov	r2, sl
 80101e6:	465b      	mov	r3, fp
 80101e8:	f7f0 f866 	bl	80002b8 <__aeabi_dsub>
 80101ec:	4602      	mov	r2, r0
 80101ee:	460b      	mov	r3, r1
 80101f0:	4620      	mov	r0, r4
 80101f2:	4629      	mov	r1, r5
 80101f4:	e7d9      	b.n	80101aa <__ieee754_log+0x27a>
 80101f6:	4602      	mov	r2, r0
 80101f8:	460b      	mov	r3, r1
 80101fa:	4650      	mov	r0, sl
 80101fc:	4659      	mov	r1, fp
 80101fe:	f7f0 f85b 	bl	80002b8 <__aeabi_dsub>
 8010202:	ec53 2b18 	vmov	r2, r3, d8
 8010206:	f7f0 fa0f 	bl	8000628 <__aeabi_dmul>
 801020a:	4606      	mov	r6, r0
 801020c:	460f      	mov	r7, r1
 801020e:	2c00      	cmp	r4, #0
 8010210:	f43f af23 	beq.w	801005a <__ieee754_log+0x12a>
 8010214:	a308      	add	r3, pc, #32	; (adr r3, 8010238 <__ieee754_log+0x308>)
 8010216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021a:	ec51 0b19 	vmov	r0, r1, d9
 801021e:	f7f0 fa03 	bl	8000628 <__aeabi_dmul>
 8010222:	a307      	add	r3, pc, #28	; (adr r3, 8010240 <__ieee754_log+0x310>)
 8010224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010228:	4604      	mov	r4, r0
 801022a:	460d      	mov	r5, r1
 801022c:	ec51 0b19 	vmov	r0, r1, d9
 8010230:	e727      	b.n	8010082 <__ieee754_log+0x152>
 8010232:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8010288 <__ieee754_log+0x358>
 8010236:	e694      	b.n	800ff62 <__ieee754_log+0x32>
 8010238:	fee00000 	.word	0xfee00000
 801023c:	3fe62e42 	.word	0x3fe62e42
 8010240:	35793c76 	.word	0x35793c76
 8010244:	3dea39ef 	.word	0x3dea39ef
 8010248:	55555555 	.word	0x55555555
 801024c:	3fd55555 	.word	0x3fd55555
 8010250:	df3e5244 	.word	0xdf3e5244
 8010254:	3fc2f112 	.word	0x3fc2f112
 8010258:	96cb03de 	.word	0x96cb03de
 801025c:	3fc74664 	.word	0x3fc74664
 8010260:	94229359 	.word	0x94229359
 8010264:	3fd24924 	.word	0x3fd24924
 8010268:	55555593 	.word	0x55555593
 801026c:	3fe55555 	.word	0x3fe55555
 8010270:	d078c69f 	.word	0xd078c69f
 8010274:	3fc39a09 	.word	0x3fc39a09
 8010278:	1d8e78af 	.word	0x1d8e78af
 801027c:	3fcc71c5 	.word	0x3fcc71c5
 8010280:	9997fa04 	.word	0x9997fa04
 8010284:	3fd99999 	.word	0x3fd99999
	...
 8010290:	c3500000 	.word	0xc3500000
 8010294:	43500000 	.word	0x43500000
 8010298:	7fefffff 	.word	0x7fefffff
 801029c:	3ff00000 	.word	0x3ff00000
 80102a0:	3fe00000 	.word	0x3fe00000

080102a4 <__ieee754_sqrt>:
 80102a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102a8:	ec55 4b10 	vmov	r4, r5, d0
 80102ac:	4e55      	ldr	r6, [pc, #340]	; (8010404 <__ieee754_sqrt+0x160>)
 80102ae:	43ae      	bics	r6, r5
 80102b0:	ee10 0a10 	vmov	r0, s0
 80102b4:	ee10 3a10 	vmov	r3, s0
 80102b8:	462a      	mov	r2, r5
 80102ba:	4629      	mov	r1, r5
 80102bc:	d110      	bne.n	80102e0 <__ieee754_sqrt+0x3c>
 80102be:	ee10 2a10 	vmov	r2, s0
 80102c2:	462b      	mov	r3, r5
 80102c4:	f7f0 f9b0 	bl	8000628 <__aeabi_dmul>
 80102c8:	4602      	mov	r2, r0
 80102ca:	460b      	mov	r3, r1
 80102cc:	4620      	mov	r0, r4
 80102ce:	4629      	mov	r1, r5
 80102d0:	f7ef fff4 	bl	80002bc <__adddf3>
 80102d4:	4604      	mov	r4, r0
 80102d6:	460d      	mov	r5, r1
 80102d8:	ec45 4b10 	vmov	d0, r4, r5
 80102dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102e0:	2d00      	cmp	r5, #0
 80102e2:	dc10      	bgt.n	8010306 <__ieee754_sqrt+0x62>
 80102e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80102e8:	4330      	orrs	r0, r6
 80102ea:	d0f5      	beq.n	80102d8 <__ieee754_sqrt+0x34>
 80102ec:	b15d      	cbz	r5, 8010306 <__ieee754_sqrt+0x62>
 80102ee:	ee10 2a10 	vmov	r2, s0
 80102f2:	462b      	mov	r3, r5
 80102f4:	ee10 0a10 	vmov	r0, s0
 80102f8:	f7ef ffde 	bl	80002b8 <__aeabi_dsub>
 80102fc:	4602      	mov	r2, r0
 80102fe:	460b      	mov	r3, r1
 8010300:	f7f0 fabc 	bl	800087c <__aeabi_ddiv>
 8010304:	e7e6      	b.n	80102d4 <__ieee754_sqrt+0x30>
 8010306:	1512      	asrs	r2, r2, #20
 8010308:	d074      	beq.n	80103f4 <__ieee754_sqrt+0x150>
 801030a:	07d4      	lsls	r4, r2, #31
 801030c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010310:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010314:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010318:	bf5e      	ittt	pl
 801031a:	0fda      	lsrpl	r2, r3, #31
 801031c:	005b      	lslpl	r3, r3, #1
 801031e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010322:	2400      	movs	r4, #0
 8010324:	0fda      	lsrs	r2, r3, #31
 8010326:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801032a:	107f      	asrs	r7, r7, #1
 801032c:	005b      	lsls	r3, r3, #1
 801032e:	2516      	movs	r5, #22
 8010330:	4620      	mov	r0, r4
 8010332:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010336:	1886      	adds	r6, r0, r2
 8010338:	428e      	cmp	r6, r1
 801033a:	bfde      	ittt	le
 801033c:	1b89      	suble	r1, r1, r6
 801033e:	18b0      	addle	r0, r6, r2
 8010340:	18a4      	addle	r4, r4, r2
 8010342:	0049      	lsls	r1, r1, #1
 8010344:	3d01      	subs	r5, #1
 8010346:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801034a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801034e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010352:	d1f0      	bne.n	8010336 <__ieee754_sqrt+0x92>
 8010354:	462a      	mov	r2, r5
 8010356:	f04f 0e20 	mov.w	lr, #32
 801035a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801035e:	4281      	cmp	r1, r0
 8010360:	eb06 0c05 	add.w	ip, r6, r5
 8010364:	dc02      	bgt.n	801036c <__ieee754_sqrt+0xc8>
 8010366:	d113      	bne.n	8010390 <__ieee754_sqrt+0xec>
 8010368:	459c      	cmp	ip, r3
 801036a:	d811      	bhi.n	8010390 <__ieee754_sqrt+0xec>
 801036c:	f1bc 0f00 	cmp.w	ip, #0
 8010370:	eb0c 0506 	add.w	r5, ip, r6
 8010374:	da43      	bge.n	80103fe <__ieee754_sqrt+0x15a>
 8010376:	2d00      	cmp	r5, #0
 8010378:	db41      	blt.n	80103fe <__ieee754_sqrt+0x15a>
 801037a:	f100 0801 	add.w	r8, r0, #1
 801037e:	1a09      	subs	r1, r1, r0
 8010380:	459c      	cmp	ip, r3
 8010382:	bf88      	it	hi
 8010384:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010388:	eba3 030c 	sub.w	r3, r3, ip
 801038c:	4432      	add	r2, r6
 801038e:	4640      	mov	r0, r8
 8010390:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010394:	f1be 0e01 	subs.w	lr, lr, #1
 8010398:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801039c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80103a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80103a4:	d1db      	bne.n	801035e <__ieee754_sqrt+0xba>
 80103a6:	430b      	orrs	r3, r1
 80103a8:	d006      	beq.n	80103b8 <__ieee754_sqrt+0x114>
 80103aa:	1c50      	adds	r0, r2, #1
 80103ac:	bf13      	iteet	ne
 80103ae:	3201      	addne	r2, #1
 80103b0:	3401      	addeq	r4, #1
 80103b2:	4672      	moveq	r2, lr
 80103b4:	f022 0201 	bicne.w	r2, r2, #1
 80103b8:	1063      	asrs	r3, r4, #1
 80103ba:	0852      	lsrs	r2, r2, #1
 80103bc:	07e1      	lsls	r1, r4, #31
 80103be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80103c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80103c6:	bf48      	it	mi
 80103c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80103cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80103d0:	4614      	mov	r4, r2
 80103d2:	e781      	b.n	80102d8 <__ieee754_sqrt+0x34>
 80103d4:	0ad9      	lsrs	r1, r3, #11
 80103d6:	3815      	subs	r0, #21
 80103d8:	055b      	lsls	r3, r3, #21
 80103da:	2900      	cmp	r1, #0
 80103dc:	d0fa      	beq.n	80103d4 <__ieee754_sqrt+0x130>
 80103de:	02cd      	lsls	r5, r1, #11
 80103e0:	d50a      	bpl.n	80103f8 <__ieee754_sqrt+0x154>
 80103e2:	f1c2 0420 	rsb	r4, r2, #32
 80103e6:	fa23 f404 	lsr.w	r4, r3, r4
 80103ea:	1e55      	subs	r5, r2, #1
 80103ec:	4093      	lsls	r3, r2
 80103ee:	4321      	orrs	r1, r4
 80103f0:	1b42      	subs	r2, r0, r5
 80103f2:	e78a      	b.n	801030a <__ieee754_sqrt+0x66>
 80103f4:	4610      	mov	r0, r2
 80103f6:	e7f0      	b.n	80103da <__ieee754_sqrt+0x136>
 80103f8:	0049      	lsls	r1, r1, #1
 80103fa:	3201      	adds	r2, #1
 80103fc:	e7ef      	b.n	80103de <__ieee754_sqrt+0x13a>
 80103fe:	4680      	mov	r8, r0
 8010400:	e7bd      	b.n	801037e <__ieee754_sqrt+0xda>
 8010402:	bf00      	nop
 8010404:	7ff00000 	.word	0x7ff00000

08010408 <atan>:
 8010408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801040c:	ec55 4b10 	vmov	r4, r5, d0
 8010410:	4bc3      	ldr	r3, [pc, #780]	; (8010720 <atan+0x318>)
 8010412:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010416:	429e      	cmp	r6, r3
 8010418:	46ab      	mov	fp, r5
 801041a:	dd18      	ble.n	801044e <atan+0x46>
 801041c:	4bc1      	ldr	r3, [pc, #772]	; (8010724 <atan+0x31c>)
 801041e:	429e      	cmp	r6, r3
 8010420:	dc01      	bgt.n	8010426 <atan+0x1e>
 8010422:	d109      	bne.n	8010438 <atan+0x30>
 8010424:	b144      	cbz	r4, 8010438 <atan+0x30>
 8010426:	4622      	mov	r2, r4
 8010428:	462b      	mov	r3, r5
 801042a:	4620      	mov	r0, r4
 801042c:	4629      	mov	r1, r5
 801042e:	f7ef ff45 	bl	80002bc <__adddf3>
 8010432:	4604      	mov	r4, r0
 8010434:	460d      	mov	r5, r1
 8010436:	e006      	b.n	8010446 <atan+0x3e>
 8010438:	f1bb 0f00 	cmp.w	fp, #0
 801043c:	f300 8131 	bgt.w	80106a2 <atan+0x29a>
 8010440:	a59b      	add	r5, pc, #620	; (adr r5, 80106b0 <atan+0x2a8>)
 8010442:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010446:	ec45 4b10 	vmov	d0, r4, r5
 801044a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801044e:	4bb6      	ldr	r3, [pc, #728]	; (8010728 <atan+0x320>)
 8010450:	429e      	cmp	r6, r3
 8010452:	dc14      	bgt.n	801047e <atan+0x76>
 8010454:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010458:	429e      	cmp	r6, r3
 801045a:	dc0d      	bgt.n	8010478 <atan+0x70>
 801045c:	a396      	add	r3, pc, #600	; (adr r3, 80106b8 <atan+0x2b0>)
 801045e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010462:	ee10 0a10 	vmov	r0, s0
 8010466:	4629      	mov	r1, r5
 8010468:	f7ef ff28 	bl	80002bc <__adddf3>
 801046c:	4baf      	ldr	r3, [pc, #700]	; (801072c <atan+0x324>)
 801046e:	2200      	movs	r2, #0
 8010470:	f7f0 fb6a 	bl	8000b48 <__aeabi_dcmpgt>
 8010474:	2800      	cmp	r0, #0
 8010476:	d1e6      	bne.n	8010446 <atan+0x3e>
 8010478:	f04f 3aff 	mov.w	sl, #4294967295
 801047c:	e02b      	b.n	80104d6 <atan+0xce>
 801047e:	f000 f963 	bl	8010748 <fabs>
 8010482:	4bab      	ldr	r3, [pc, #684]	; (8010730 <atan+0x328>)
 8010484:	429e      	cmp	r6, r3
 8010486:	ec55 4b10 	vmov	r4, r5, d0
 801048a:	f300 80bf 	bgt.w	801060c <atan+0x204>
 801048e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010492:	429e      	cmp	r6, r3
 8010494:	f300 80a0 	bgt.w	80105d8 <atan+0x1d0>
 8010498:	ee10 2a10 	vmov	r2, s0
 801049c:	ee10 0a10 	vmov	r0, s0
 80104a0:	462b      	mov	r3, r5
 80104a2:	4629      	mov	r1, r5
 80104a4:	f7ef ff0a 	bl	80002bc <__adddf3>
 80104a8:	4ba0      	ldr	r3, [pc, #640]	; (801072c <atan+0x324>)
 80104aa:	2200      	movs	r2, #0
 80104ac:	f7ef ff04 	bl	80002b8 <__aeabi_dsub>
 80104b0:	2200      	movs	r2, #0
 80104b2:	4606      	mov	r6, r0
 80104b4:	460f      	mov	r7, r1
 80104b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80104ba:	4620      	mov	r0, r4
 80104bc:	4629      	mov	r1, r5
 80104be:	f7ef fefd 	bl	80002bc <__adddf3>
 80104c2:	4602      	mov	r2, r0
 80104c4:	460b      	mov	r3, r1
 80104c6:	4630      	mov	r0, r6
 80104c8:	4639      	mov	r1, r7
 80104ca:	f7f0 f9d7 	bl	800087c <__aeabi_ddiv>
 80104ce:	f04f 0a00 	mov.w	sl, #0
 80104d2:	4604      	mov	r4, r0
 80104d4:	460d      	mov	r5, r1
 80104d6:	4622      	mov	r2, r4
 80104d8:	462b      	mov	r3, r5
 80104da:	4620      	mov	r0, r4
 80104dc:	4629      	mov	r1, r5
 80104de:	f7f0 f8a3 	bl	8000628 <__aeabi_dmul>
 80104e2:	4602      	mov	r2, r0
 80104e4:	460b      	mov	r3, r1
 80104e6:	4680      	mov	r8, r0
 80104e8:	4689      	mov	r9, r1
 80104ea:	f7f0 f89d 	bl	8000628 <__aeabi_dmul>
 80104ee:	a374      	add	r3, pc, #464	; (adr r3, 80106c0 <atan+0x2b8>)
 80104f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f4:	4606      	mov	r6, r0
 80104f6:	460f      	mov	r7, r1
 80104f8:	f7f0 f896 	bl	8000628 <__aeabi_dmul>
 80104fc:	a372      	add	r3, pc, #456	; (adr r3, 80106c8 <atan+0x2c0>)
 80104fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010502:	f7ef fedb 	bl	80002bc <__adddf3>
 8010506:	4632      	mov	r2, r6
 8010508:	463b      	mov	r3, r7
 801050a:	f7f0 f88d 	bl	8000628 <__aeabi_dmul>
 801050e:	a370      	add	r3, pc, #448	; (adr r3, 80106d0 <atan+0x2c8>)
 8010510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010514:	f7ef fed2 	bl	80002bc <__adddf3>
 8010518:	4632      	mov	r2, r6
 801051a:	463b      	mov	r3, r7
 801051c:	f7f0 f884 	bl	8000628 <__aeabi_dmul>
 8010520:	a36d      	add	r3, pc, #436	; (adr r3, 80106d8 <atan+0x2d0>)
 8010522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010526:	f7ef fec9 	bl	80002bc <__adddf3>
 801052a:	4632      	mov	r2, r6
 801052c:	463b      	mov	r3, r7
 801052e:	f7f0 f87b 	bl	8000628 <__aeabi_dmul>
 8010532:	a36b      	add	r3, pc, #428	; (adr r3, 80106e0 <atan+0x2d8>)
 8010534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010538:	f7ef fec0 	bl	80002bc <__adddf3>
 801053c:	4632      	mov	r2, r6
 801053e:	463b      	mov	r3, r7
 8010540:	f7f0 f872 	bl	8000628 <__aeabi_dmul>
 8010544:	a368      	add	r3, pc, #416	; (adr r3, 80106e8 <atan+0x2e0>)
 8010546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054a:	f7ef feb7 	bl	80002bc <__adddf3>
 801054e:	4642      	mov	r2, r8
 8010550:	464b      	mov	r3, r9
 8010552:	f7f0 f869 	bl	8000628 <__aeabi_dmul>
 8010556:	a366      	add	r3, pc, #408	; (adr r3, 80106f0 <atan+0x2e8>)
 8010558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801055c:	4680      	mov	r8, r0
 801055e:	4689      	mov	r9, r1
 8010560:	4630      	mov	r0, r6
 8010562:	4639      	mov	r1, r7
 8010564:	f7f0 f860 	bl	8000628 <__aeabi_dmul>
 8010568:	a363      	add	r3, pc, #396	; (adr r3, 80106f8 <atan+0x2f0>)
 801056a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801056e:	f7ef fea3 	bl	80002b8 <__aeabi_dsub>
 8010572:	4632      	mov	r2, r6
 8010574:	463b      	mov	r3, r7
 8010576:	f7f0 f857 	bl	8000628 <__aeabi_dmul>
 801057a:	a361      	add	r3, pc, #388	; (adr r3, 8010700 <atan+0x2f8>)
 801057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010580:	f7ef fe9a 	bl	80002b8 <__aeabi_dsub>
 8010584:	4632      	mov	r2, r6
 8010586:	463b      	mov	r3, r7
 8010588:	f7f0 f84e 	bl	8000628 <__aeabi_dmul>
 801058c:	a35e      	add	r3, pc, #376	; (adr r3, 8010708 <atan+0x300>)
 801058e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010592:	f7ef fe91 	bl	80002b8 <__aeabi_dsub>
 8010596:	4632      	mov	r2, r6
 8010598:	463b      	mov	r3, r7
 801059a:	f7f0 f845 	bl	8000628 <__aeabi_dmul>
 801059e:	a35c      	add	r3, pc, #368	; (adr r3, 8010710 <atan+0x308>)
 80105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a4:	f7ef fe88 	bl	80002b8 <__aeabi_dsub>
 80105a8:	4632      	mov	r2, r6
 80105aa:	463b      	mov	r3, r7
 80105ac:	f7f0 f83c 	bl	8000628 <__aeabi_dmul>
 80105b0:	4602      	mov	r2, r0
 80105b2:	460b      	mov	r3, r1
 80105b4:	4640      	mov	r0, r8
 80105b6:	4649      	mov	r1, r9
 80105b8:	f7ef fe80 	bl	80002bc <__adddf3>
 80105bc:	4622      	mov	r2, r4
 80105be:	462b      	mov	r3, r5
 80105c0:	f7f0 f832 	bl	8000628 <__aeabi_dmul>
 80105c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80105c8:	4602      	mov	r2, r0
 80105ca:	460b      	mov	r3, r1
 80105cc:	d14b      	bne.n	8010666 <atan+0x25e>
 80105ce:	4620      	mov	r0, r4
 80105d0:	4629      	mov	r1, r5
 80105d2:	f7ef fe71 	bl	80002b8 <__aeabi_dsub>
 80105d6:	e72c      	b.n	8010432 <atan+0x2a>
 80105d8:	ee10 0a10 	vmov	r0, s0
 80105dc:	4b53      	ldr	r3, [pc, #332]	; (801072c <atan+0x324>)
 80105de:	2200      	movs	r2, #0
 80105e0:	4629      	mov	r1, r5
 80105e2:	f7ef fe69 	bl	80002b8 <__aeabi_dsub>
 80105e6:	4b51      	ldr	r3, [pc, #324]	; (801072c <atan+0x324>)
 80105e8:	4606      	mov	r6, r0
 80105ea:	460f      	mov	r7, r1
 80105ec:	2200      	movs	r2, #0
 80105ee:	4620      	mov	r0, r4
 80105f0:	4629      	mov	r1, r5
 80105f2:	f7ef fe63 	bl	80002bc <__adddf3>
 80105f6:	4602      	mov	r2, r0
 80105f8:	460b      	mov	r3, r1
 80105fa:	4630      	mov	r0, r6
 80105fc:	4639      	mov	r1, r7
 80105fe:	f7f0 f93d 	bl	800087c <__aeabi_ddiv>
 8010602:	f04f 0a01 	mov.w	sl, #1
 8010606:	4604      	mov	r4, r0
 8010608:	460d      	mov	r5, r1
 801060a:	e764      	b.n	80104d6 <atan+0xce>
 801060c:	4b49      	ldr	r3, [pc, #292]	; (8010734 <atan+0x32c>)
 801060e:	429e      	cmp	r6, r3
 8010610:	da1d      	bge.n	801064e <atan+0x246>
 8010612:	ee10 0a10 	vmov	r0, s0
 8010616:	4b48      	ldr	r3, [pc, #288]	; (8010738 <atan+0x330>)
 8010618:	2200      	movs	r2, #0
 801061a:	4629      	mov	r1, r5
 801061c:	f7ef fe4c 	bl	80002b8 <__aeabi_dsub>
 8010620:	4b45      	ldr	r3, [pc, #276]	; (8010738 <atan+0x330>)
 8010622:	4606      	mov	r6, r0
 8010624:	460f      	mov	r7, r1
 8010626:	2200      	movs	r2, #0
 8010628:	4620      	mov	r0, r4
 801062a:	4629      	mov	r1, r5
 801062c:	f7ef fffc 	bl	8000628 <__aeabi_dmul>
 8010630:	4b3e      	ldr	r3, [pc, #248]	; (801072c <atan+0x324>)
 8010632:	2200      	movs	r2, #0
 8010634:	f7ef fe42 	bl	80002bc <__adddf3>
 8010638:	4602      	mov	r2, r0
 801063a:	460b      	mov	r3, r1
 801063c:	4630      	mov	r0, r6
 801063e:	4639      	mov	r1, r7
 8010640:	f7f0 f91c 	bl	800087c <__aeabi_ddiv>
 8010644:	f04f 0a02 	mov.w	sl, #2
 8010648:	4604      	mov	r4, r0
 801064a:	460d      	mov	r5, r1
 801064c:	e743      	b.n	80104d6 <atan+0xce>
 801064e:	462b      	mov	r3, r5
 8010650:	ee10 2a10 	vmov	r2, s0
 8010654:	4939      	ldr	r1, [pc, #228]	; (801073c <atan+0x334>)
 8010656:	2000      	movs	r0, #0
 8010658:	f7f0 f910 	bl	800087c <__aeabi_ddiv>
 801065c:	f04f 0a03 	mov.w	sl, #3
 8010660:	4604      	mov	r4, r0
 8010662:	460d      	mov	r5, r1
 8010664:	e737      	b.n	80104d6 <atan+0xce>
 8010666:	4b36      	ldr	r3, [pc, #216]	; (8010740 <atan+0x338>)
 8010668:	4e36      	ldr	r6, [pc, #216]	; (8010744 <atan+0x33c>)
 801066a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801066e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010672:	e9da 2300 	ldrd	r2, r3, [sl]
 8010676:	f7ef fe1f 	bl	80002b8 <__aeabi_dsub>
 801067a:	4622      	mov	r2, r4
 801067c:	462b      	mov	r3, r5
 801067e:	f7ef fe1b 	bl	80002b8 <__aeabi_dsub>
 8010682:	4602      	mov	r2, r0
 8010684:	460b      	mov	r3, r1
 8010686:	e9d6 0100 	ldrd	r0, r1, [r6]
 801068a:	f7ef fe15 	bl	80002b8 <__aeabi_dsub>
 801068e:	f1bb 0f00 	cmp.w	fp, #0
 8010692:	4604      	mov	r4, r0
 8010694:	460d      	mov	r5, r1
 8010696:	f6bf aed6 	bge.w	8010446 <atan+0x3e>
 801069a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801069e:	461d      	mov	r5, r3
 80106a0:	e6d1      	b.n	8010446 <atan+0x3e>
 80106a2:	a51d      	add	r5, pc, #116	; (adr r5, 8010718 <atan+0x310>)
 80106a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80106a8:	e6cd      	b.n	8010446 <atan+0x3e>
 80106aa:	bf00      	nop
 80106ac:	f3af 8000 	nop.w
 80106b0:	54442d18 	.word	0x54442d18
 80106b4:	bff921fb 	.word	0xbff921fb
 80106b8:	8800759c 	.word	0x8800759c
 80106bc:	7e37e43c 	.word	0x7e37e43c
 80106c0:	e322da11 	.word	0xe322da11
 80106c4:	3f90ad3a 	.word	0x3f90ad3a
 80106c8:	24760deb 	.word	0x24760deb
 80106cc:	3fa97b4b 	.word	0x3fa97b4b
 80106d0:	a0d03d51 	.word	0xa0d03d51
 80106d4:	3fb10d66 	.word	0x3fb10d66
 80106d8:	c54c206e 	.word	0xc54c206e
 80106dc:	3fb745cd 	.word	0x3fb745cd
 80106e0:	920083ff 	.word	0x920083ff
 80106e4:	3fc24924 	.word	0x3fc24924
 80106e8:	5555550d 	.word	0x5555550d
 80106ec:	3fd55555 	.word	0x3fd55555
 80106f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80106f4:	bfa2b444 	.word	0xbfa2b444
 80106f8:	52defd9a 	.word	0x52defd9a
 80106fc:	3fadde2d 	.word	0x3fadde2d
 8010700:	af749a6d 	.word	0xaf749a6d
 8010704:	3fb3b0f2 	.word	0x3fb3b0f2
 8010708:	fe231671 	.word	0xfe231671
 801070c:	3fbc71c6 	.word	0x3fbc71c6
 8010710:	9998ebc4 	.word	0x9998ebc4
 8010714:	3fc99999 	.word	0x3fc99999
 8010718:	54442d18 	.word	0x54442d18
 801071c:	3ff921fb 	.word	0x3ff921fb
 8010720:	440fffff 	.word	0x440fffff
 8010724:	7ff00000 	.word	0x7ff00000
 8010728:	3fdbffff 	.word	0x3fdbffff
 801072c:	3ff00000 	.word	0x3ff00000
 8010730:	3ff2ffff 	.word	0x3ff2ffff
 8010734:	40038000 	.word	0x40038000
 8010738:	3ff80000 	.word	0x3ff80000
 801073c:	bff00000 	.word	0xbff00000
 8010740:	08011078 	.word	0x08011078
 8010744:	08011058 	.word	0x08011058

08010748 <fabs>:
 8010748:	ec51 0b10 	vmov	r0, r1, d0
 801074c:	ee10 2a10 	vmov	r2, s0
 8010750:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010754:	ec43 2b10 	vmov	d0, r2, r3
 8010758:	4770      	bx	lr
	...

0801075c <_init>:
 801075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801075e:	bf00      	nop
 8010760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010762:	bc08      	pop	{r3}
 8010764:	469e      	mov	lr, r3
 8010766:	4770      	bx	lr

08010768 <_fini>:
 8010768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801076a:	bf00      	nop
 801076c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801076e:	bc08      	pop	{r3}
 8010770:	469e      	mov	lr, r3
 8010772:	4770      	bx	lr
