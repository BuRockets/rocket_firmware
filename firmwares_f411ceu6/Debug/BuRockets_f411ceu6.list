
BuRockets_f411ceu6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010bac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  08010d50  08010d50  00020d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011738  08011738  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08011738  08011738  00021738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011740  08011740  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011740  08011740  00021740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011744  08011744  00021744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08011748  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  200001f4  0801193c  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000086c  0801193c  0003086c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c164  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046fe  00000000  00000000  0004c388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  00050a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  00052058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee9c  00000000  00000000  00053520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000256aa  00000000  00000000  000723bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0612  00000000  00000000  00097a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007190  00000000  00000000  001380c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010d34 	.word	0x08010d34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	08010d34 	.word	0x08010d34

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <wait_for_gpio_state_timeout>:
#define SDA_PORT    GPIOB

#include "main.h"

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	460b      	mov	r3, r1
 80010d4:	817b      	strh	r3, [r7, #10]
 80010d6:	4613      	mov	r3, r2
 80010d8:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 80010da:	f003 fe31 	bl	8004d40 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	75fb      	strb	r3, [r7, #23]

    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 80010e4:	e011      	b.n	800110a <wait_for_gpio_state_timeout+0x42>
    {
        if(timeout != HAL_MAX_DELAY) // Check for the timeout
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d00c      	beq.n	8001108 <wait_for_gpio_state_timeout+0x40>
        {
            if((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout)) ret = 0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <wait_for_gpio_state_timeout+0x3c>
 80010f4:	f003 fe24 	bl	8004d40 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	d201      	bcs.n	8001108 <wait_for_gpio_state_timeout+0x40>
 8001104:	2300      	movs	r3, #0
 8001106:	75fb      	strb	r3, [r7, #23]
        }

        asm("nop");
 8001108:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 800110a:	897b      	ldrh	r3, [r7, #10]
 800110c:	4619      	mov	r1, r3
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f005 fc80 	bl	8006a14 <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	7a7b      	ldrb	r3, [r7, #9]
 800111a:	4293      	cmp	r3, r2
 800111c:	d002      	beq.n	8001124 <wait_for_gpio_state_timeout+0x5c>
 800111e:	7dfb      	ldrb	r3, [r7, #23]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d0e0      	beq.n	80010e6 <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 8001124:	7dfb      	ldrb	r3, [r7, #23]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <I2C_ClearBusyFlagErratum>:


static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef *hi2c, uint32_t timeout)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001140:	4852      	ldr	r0, [pc, #328]	; (800128c <I2C_ClearBusyFlagErratum+0x15c>)
 8001142:	f005 fc8d 	bl	8006a60 <HAL_GPIO_WritePin>
	// 2.13.7 I2C analog filter may provide wrong value, locking BUSY. STM32F10xx8 STM32F10xxB Errata sheet

    GPIO_InitTypeDef GPIO_InitStructure = {0};
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]

    // 1. Clear PE bit.
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0201 	bic.w	r2, r2, #1
 8001164:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(hi2c);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f005 fe90 	bl	8006e8c <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800116c:	2311      	movs	r3, #17
 800116e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

    GPIO_InitStructure.Pin = SCL_PIN;
 8001174:	2340      	movs	r3, #64	; 0x40
 8001176:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4619      	mov	r1, r3
 800117e:	4844      	ldr	r0, [pc, #272]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 8001180:	f005 f8ac 	bl	80062dc <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	4619      	mov	r1, r3
 800118e:	4840      	ldr	r0, [pc, #256]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 8001190:	f005 f8a4 	bl	80062dc <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	483d      	ldr	r0, [pc, #244]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 800119a:	f005 fc61 	bl	8006a60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	2140      	movs	r1, #64	; 0x40
 80011a2:	483b      	ldr	r0, [pc, #236]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011a4:	f005 fc5c 	bl	8006a60 <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	2201      	movs	r2, #1
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	4838      	ldr	r0, [pc, #224]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011b0:	f7ff ff8a 	bl	80010c8 <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2201      	movs	r2, #1
 80011b8:	2180      	movs	r1, #128	; 0x80
 80011ba:	4835      	ldr	r0, [pc, #212]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011bc:	f7ff ff84 	bl	80010c8 <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2180      	movs	r1, #128	; 0x80
 80011c4:	4832      	ldr	r0, [pc, #200]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011c6:	f005 fc4b 	bl	8006a60 <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_RESET, timeout);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2200      	movs	r2, #0
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	482f      	ldr	r0, [pc, #188]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011d2:	f7ff ff79 	bl	80010c8 <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2140      	movs	r1, #64	; 0x40
 80011da:	482d      	ldr	r0, [pc, #180]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011dc:	f005 fc40 	bl	8006a60 <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_RESET, timeout);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2200      	movs	r2, #0
 80011e4:	2140      	movs	r1, #64	; 0x40
 80011e6:	482a      	ldr	r0, [pc, #168]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011e8:	f7ff ff6e 	bl	80010c8 <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2140      	movs	r1, #64	; 0x40
 80011f0:	4827      	ldr	r0, [pc, #156]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011f2:	f005 fc35 	bl	8006a60 <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SCL_PORT, SCL_PIN, GPIO_PIN_SET, timeout);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2201      	movs	r2, #1
 80011fa:	2140      	movs	r1, #64	; 0x40
 80011fc:	4824      	ldr	r0, [pc, #144]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 80011fe:	f7ff ff63 	bl	80010c8 <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(SDA_PORT, SDA_PIN, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	4822      	ldr	r0, [pc, #136]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 8001208:	f005 fc2a 	bl	8006a60 <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(SDA_PORT, SDA_PIN, GPIO_PIN_SET, timeout);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	2201      	movs	r2, #1
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	481f      	ldr	r0, [pc, #124]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 8001214:	f7ff ff58 	bl	80010c8 <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001218:	2312      	movs	r3, #18
 800121a:	613b      	str	r3, [r7, #16]
    //GPIO_InitStructure.Alternate = GPIO_AF4_I2C2; // F4

    GPIO_InitStructure.Pin = SCL_PIN;
 800121c:	2340      	movs	r3, #64	; 0x40
 800121e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SCL_PORT, &GPIO_InitStructure);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4619      	mov	r1, r3
 8001226:	481a      	ldr	r0, [pc, #104]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 8001228:	f005 f858 	bl	80062dc <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = SDA_PIN;
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(SDA_PORT, &GPIO_InitStructure);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4619      	mov	r1, r3
 8001236:	4816      	ldr	r0, [pc, #88]	; (8001290 <I2C_ClearBusyFlagErratum+0x160>)
 8001238:	f005 f850 	bl	80062dc <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800124a:	601a      	str	r2, [r3, #0]
    asm("nop");
 800124c:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800125c:	601a      	str	r2, [r3, #0]
    asm("nop");
 800125e:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
    asm("nop");
 8001270:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(hi2c);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f005 fc3e 	bl	8006af4 <HAL_I2C_Init>
    HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4803      	ldr	r0, [pc, #12]	; (800128c <I2C_ClearBusyFlagErratum+0x15c>)
 8001280:	f005 fbee 	bl	8006a60 <HAL_GPIO_WritePin>
}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40020800 	.word	0x40020800
 8001290:	40020400 	.word	0x40020400
 8001294:	00000000 	.word	0x00000000

08001298 <MPU_get_accel>:
		}
	}

}

void MPU_get_accel(float* destination) {//��� ��� �������� ������ ���������
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b08b      	sub	sp, #44	; 0x2c
 800129c:	af04      	add	r7, sp, #16
 800129e:	6078      	str	r0, [r7, #4]

	uint8_t rawData[6];
	uint32_t status= HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS_R, MPU9250_ACCEL_XOUT_H, 1, rawData, 6, 100);
 80012a0:	2364      	movs	r3, #100	; 0x64
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2306      	movs	r3, #6
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	223b      	movs	r2, #59	; 0x3b
 80012b2:	21d1      	movs	r1, #209	; 0xd1
 80012b4:	483e      	ldr	r0, [pc, #248]	; (80013b0 <MPU_get_accel+0x118>)
 80012b6:	f005 ff3b 	bl	8007130 <HAL_I2C_Mem_Read>
 80012ba:	4603      	mov	r3, r0
 80012bc:	617b      	str	r3, [r7, #20]
	if (status != HAL_OK)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <MPU_get_accel+0x36>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 80012c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012c8:	4839      	ldr	r0, [pc, #228]	; (80013b0 <MPU_get_accel+0x118>)
 80012ca:	f7ff ff31 	bl	8001130 <I2C_ClearBusyFlagErratum>
	}
	destination[0] = ((float)(int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) / 16384 * (9.8)); // Turn the MSB and LSB into a signed 16-bit value
 80012ce:	7b3b      	ldrb	r3, [r7, #12]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	7b7b      	ldrb	r3, [r7, #13]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b21b      	sxth	r3, r3
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80013b4 <MPU_get_accel+0x11c>
 80012e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012ec:	ee16 0a90 	vmov	r0, s13
 80012f0:	f7ff f942 	bl	8000578 <__aeabi_f2d>
 80012f4:	a32c      	add	r3, pc, #176	; (adr r3, 80013a8 <MPU_get_accel+0x110>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff f995 	bl	8000628 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fc87 	bl	8000c18 <__aeabi_d2f>
 800130a:	4602      	mov	r2, r0
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	601a      	str	r2, [r3, #0]
	destination[1] = ((float)(int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) / 16384 * (9.8));
 8001310:	7bbb      	ldrb	r3, [r7, #14]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	b21a      	sxth	r2, r3
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21b      	sxth	r3, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80013b4 <MPU_get_accel+0x11c>
 800132a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800132e:	ee16 0a90 	vmov	r0, s13
 8001332:	f7ff f921 	bl	8000578 <__aeabi_f2d>
 8001336:	a31c      	add	r3, pc, #112	; (adr r3, 80013a8 <MPU_get_accel+0x110>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff f974 	bl	8000628 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	1d1c      	adds	r4, r3, #4
 800134c:	f7ff fc64 	bl	8000c18 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	6023      	str	r3, [r4, #0]
	destination[2] = ((float)(int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) / 16384 * (9.8));
 8001354:	7c3b      	ldrb	r3, [r7, #16]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	7c7b      	ldrb	r3, [r7, #17]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21b      	sxth	r3, r3
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013b4 <MPU_get_accel+0x11c>
 800136e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001372:	ee16 0a90 	vmov	r0, s13
 8001376:	f7ff f8ff 	bl	8000578 <__aeabi_f2d>
 800137a:	a30b      	add	r3, pc, #44	; (adr r3, 80013a8 <MPU_get_accel+0x110>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff f952 	bl	8000628 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f103 0408 	add.w	r4, r3, #8
 8001392:	f7ff fc41 	bl	8000c18 <__aeabi_d2f>
 8001396:	4603      	mov	r3, r0
 8001398:	6023      	str	r3, [r4, #0]

}
 800139a:	bf00      	nop
 800139c:	371c      	adds	r7, #28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd90      	pop	{r4, r7, pc}
 80013a2:	bf00      	nop
 80013a4:	f3af 8000 	nop.w
 80013a8:	9999999a 	.word	0x9999999a
 80013ac:	40239999 	.word	0x40239999
 80013b0:	20000258 	.word	0x20000258
 80013b4:	46800000 	.word	0x46800000

080013b8 <MPU_get_gyro>:

void MPU_get_gyro(float * destination) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af04      	add	r7, sp, #16
 80013be:	6078      	str	r0, [r7, #4]

	uint8_t rawData[6]; // x/y/z gyro register data stored here
	uint32_t status = HAL_I2C_Mem_Read(&hi2c1, MPU9250_ADDRESS_R, MPU9250_GYRO_XOUT_H, 1, rawData, 6, 100); // Read the six raw data registers sequentially into data array
 80013c0:	2364      	movs	r3, #100	; 0x64
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2306      	movs	r3, #6
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	2243      	movs	r2, #67	; 0x43
 80013d2:	21d1      	movs	r1, #209	; 0xd1
 80013d4:	4824      	ldr	r0, [pc, #144]	; (8001468 <MPU_get_gyro+0xb0>)
 80013d6:	f005 feab 	bl	8007130 <HAL_I2C_Mem_Read>
 80013da:	4603      	mov	r3, r0
 80013dc:	617b      	str	r3, [r7, #20]
	if (status != HAL_OK)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <MPU_get_gyro+0x36>
	{
		I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 80013e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e8:	481f      	ldr	r0, [pc, #124]	; (8001468 <MPU_get_gyro+0xb0>)
 80013ea:	f7ff fea1 	bl	8001130 <I2C_ClearBusyFlagErratum>
	}
	destination[0] = (float)(int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) / 131; // Turn the MSB and LSB into a signed 16-bit value
 80013ee:	7b3b      	ldrb	r3, [r7, #12]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	7b7b      	ldrb	r3, [r7, #13]
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001404:	eddf 6a19 	vldr	s13, [pc, #100]	; 800146c <MPU_get_gyro+0xb4>
 8001408:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	edc3 7a00 	vstr	s15, [r3]
	destination[1] = (float)(int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) / 131;
 8001412:	7bbb      	ldrb	r3, [r7, #14]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	b21b      	sxth	r3, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	b21b      	sxth	r3, r3
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3304      	adds	r3, #4
 800142c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800146c <MPU_get_gyro+0xb4>
 8001430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001434:	edc3 7a00 	vstr	s15, [r3]
	destination[2] = (float)(int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) / 131;
 8001438:	7c3b      	ldrb	r3, [r7, #16]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	7c7b      	ldrb	r3, [r7, #17]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21b      	sxth	r3, r3
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3308      	adds	r3, #8
 8001452:	eddf 6a06 	vldr	s13, [pc, #24]	; 800146c <MPU_get_gyro+0xb4>
 8001456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145a:	edc3 7a00 	vstr	s15, [r3]
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000258 	.word	0x20000258
 800146c:	43030000 	.word	0x43030000

08001470 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_ADC1_Init+0x98>)
 8001484:	4a21      	ldr	r2, [pc, #132]	; (800150c <MX_ADC1_Init+0x9c>)
 8001486:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001488:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_ADC1_Init+0x98>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <MX_ADC1_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001494:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_ADC1_Init+0x98>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <MX_ADC1_Init+0x98>)
 800149c:	2201      	movs	r2, #1
 800149e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_ADC1_Init+0x98>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_ADC1_Init+0x98>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <MX_ADC1_Init+0x98>)
 80014b0:	4a17      	ldr	r2, [pc, #92]	; (8001510 <MX_ADC1_Init+0xa0>)
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_ADC1_Init+0x98>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <MX_ADC1_Init+0x98>)
 80014bc:	2201      	movs	r2, #1
 80014be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_ADC1_Init+0x98>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_ADC1_Init+0x98>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ce:	480e      	ldr	r0, [pc, #56]	; (8001508 <MX_ADC1_Init+0x98>)
 80014d0:	f003 fc66 	bl	8004da0 <HAL_ADC_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014da:	f001 fd07 	bl	8002eec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014de:	2311      	movs	r3, #17
 80014e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014e2:	2301      	movs	r3, #1
 80014e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80014e6:	2301      	movs	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ea:	463b      	mov	r3, r7
 80014ec:	4619      	mov	r1, r3
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <MX_ADC1_Init+0x98>)
 80014f0:	f003 fe9a 	bl	8005228 <HAL_ADC_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014fa:	f001 fcf7 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000210 	.word	0x20000210
 800150c:	40012000 	.word	0x40012000
 8001510:	0f000001 	.word	0x0f000001

08001514 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_ADC_MspInit+0x3c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d10d      	bne.n	8001542 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_ADC_MspInit+0x40>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_ADC_MspInit+0x40>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_ADC_MspInit+0x40>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40012000 	.word	0x40012000
 8001554:	40023800 	.word	0x40023800

08001558 <pascal_to_metrs>:

#define BMP280_RESET_VALUE     0xB6

#define standart_pressure      98910

float pascal_to_metrs(float pressure, float start_pressure){
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001562:	edc7 0a00 	vstr	s1, [r7]
	return  log(start_pressure/pressure) * 8.3144 * 288.16 / (9.806 * 0.0289);
 8001566:	ed97 7a00 	vldr	s14, [r7]
 800156a:	edd7 7a01 	vldr	s15, [r7, #4]
 800156e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001572:	ee16 0a90 	vmov	r0, s13
 8001576:	f7fe ffff 	bl	8000578 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	ec43 2b10 	vmov	d0, r2, r3
 8001582:	f00e fe89 	bl	8010298 <log>
 8001586:	ec51 0b10 	vmov	r0, r1, d0
 800158a:	a313      	add	r3, pc, #76	; (adr r3, 80015d8 <pascal_to_metrs+0x80>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7ff f84a 	bl	8000628 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	a310      	add	r3, pc, #64	; (adr r3, 80015e0 <pascal_to_metrs+0x88>)
 800159e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a2:	f7ff f841 	bl	8000628 <__aeabi_dmul>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	a30e      	add	r3, pc, #56	; (adr r3, 80015e8 <pascal_to_metrs+0x90>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f962 	bl	800087c <__aeabi_ddiv>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fb2a 	bl	8000c18 <__aeabi_d2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	ee07 3a90 	vmov	s15, r3
}
 80015ca:	eeb0 0a67 	vmov.f32	s0, s15
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	f3af 8000 	nop.w
 80015d8:	096bb98c 	.word	0x096bb98c
 80015dc:	4020a0f9 	.word	0x4020a0f9
 80015e0:	5c28f5c3 	.word	0x5c28f5c3
 80015e4:	4072028f 	.word	0x4072028f
 80015e8:	1239be67 	.word	0x1239be67
 80015ec:	3fd2231e 	.word	0x3fd2231e

080015f0 <bmp280_init_default_params>:

void bmp280_init_default_params(bmp280_params_t *params) {
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2203      	movs	r2, #3
 80015fc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2203      	movs	r2, #3
 8001608:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2203      	movs	r2, #3
 800160e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2203      	movs	r2, #3
 8001614:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2203      	movs	r2, #3
 800161a:	715a      	strb	r2, [r3, #5]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af04      	add	r7, sp, #16
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	460b      	mov	r3, r1
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001642:	7afb      	ldrb	r3, [r7, #11]
 8001644:	b29a      	uxth	r2, r3
 8001646:	8af9      	ldrh	r1, [r7, #22]
 8001648:	f241 3388 	movw	r3, #5000	; 0x1388
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	2302      	movs	r3, #2
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	f005 fd69 	bl	8007130 <HAL_I2C_Mem_Read>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10b      	bne.n	800167c <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001664:	7d7b      	ldrb	r3, [r7, #21]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b21a      	sxth	r2, r3
 800166a:	7d3b      	ldrb	r3, [r7, #20]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	b29a      	uxth	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	801a      	strh	r2, [r3, #0]
		return true;
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <read_register16+0x56>
	} else
		return false;
 800167c:	2300      	movs	r3, #0

}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001686:	b590      	push	{r4, r7, lr}
 8001688:	b08b      	sub	sp, #44	; 0x2c
 800168a:	af04      	add	r7, sp, #16
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	461a      	mov	r2, r3
 8001692:	460b      	mov	r3, r1
 8001694:	72fb      	strb	r3, [r7, #11]
 8001696:	4613      	mov	r3, r2
 8001698:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80016a6:	7afb      	ldrb	r3, [r7, #11]
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	7abb      	ldrb	r3, [r7, #10]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	8af9      	ldrh	r1, [r7, #22]
 80016b0:	f241 3488 	movw	r4, #5000	; 0x1388
 80016b4:	9402      	str	r4, [sp, #8]
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2301      	movs	r3, #1
 80016be:	f005 fd37 	bl	8007130 <HAL_I2C_Mem_Read>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <read_data+0x46>
		return 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e000      	b.n	80016ce <read_data+0x48>
	else
		return 1;
 80016cc:	2301      	movs	r3, #1

}
 80016ce:	4618      	mov	r0, r3
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd90      	pop	{r4, r7, pc}

080016d6 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	461a      	mov	r2, r3
 80016e2:	2188      	movs	r1, #136	; 0x88
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff9f 	bl	8001628 <read_register16>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d06f      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3302      	adds	r3, #2
 80016f4:	461a      	mov	r2, r3
 80016f6:	218a      	movs	r1, #138	; 0x8a
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff95 	bl	8001628 <read_register16>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d065      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3304      	adds	r3, #4
 8001708:	461a      	mov	r2, r3
 800170a:	218c      	movs	r1, #140	; 0x8c
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff8b 	bl	8001628 <read_register16>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d05b      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3306      	adds	r3, #6
 800171c:	461a      	mov	r2, r3
 800171e:	218e      	movs	r1, #142	; 0x8e
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff81 	bl	8001628 <read_register16>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d051      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3308      	adds	r3, #8
 8001730:	461a      	mov	r2, r3
 8001732:	2190      	movs	r1, #144	; 0x90
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff77 	bl	8001628 <read_register16>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d047      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	330a      	adds	r3, #10
 8001744:	461a      	mov	r2, r3
 8001746:	2192      	movs	r1, #146	; 0x92
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ff6d 	bl	8001628 <read_register16>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d03d      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	330c      	adds	r3, #12
 8001758:	461a      	mov	r2, r3
 800175a:	2194      	movs	r1, #148	; 0x94
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff63 	bl	8001628 <read_register16>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d033      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	330e      	adds	r3, #14
 800176c:	461a      	mov	r2, r3
 800176e:	2196      	movs	r1, #150	; 0x96
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff59 	bl	8001628 <read_register16>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d029      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3310      	adds	r3, #16
 8001780:	461a      	mov	r2, r3
 8001782:	2198      	movs	r1, #152	; 0x98
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff4f 	bl	8001628 <read_register16>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d01f      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3312      	adds	r3, #18
 8001794:	461a      	mov	r2, r3
 8001796:	219a      	movs	r1, #154	; 0x9a
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff45 	bl	8001628 <read_register16>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d015      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3314      	adds	r3, #20
 80017a8:	461a      	mov	r2, r3
 80017aa:	219c      	movs	r1, #156	; 0x9c
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff3b 	bl	8001628 <read_register16>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00b      	beq.n	80017d0 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80017bc:	461a      	mov	r2, r3
 80017be:	219e      	movs	r1, #158	; 0x9e
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff31 	bl	8001628 <read_register16>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <read_calibration_data+0xfa>

		return true;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <read_calibration_data+0xfc>
	}

	return false;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f103 0218 	add.w	r2, r3, #24
 80017e8:	2301      	movs	r3, #1
 80017ea:	21a1      	movs	r1, #161	; 0xa1
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff4a 	bl	8001686 <read_data>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d14b      	bne.n	8001890 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	331a      	adds	r3, #26
 80017fc:	461a      	mov	r2, r3
 80017fe:	21e1      	movs	r1, #225	; 0xe1
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff11 	bl	8001628 <read_register16>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d041      	beq.n	8001890 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f103 021c 	add.w	r2, r3, #28
 8001812:	2301      	movs	r3, #1
 8001814:	21e3      	movs	r1, #227	; 0xe3
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ff35 	bl	8001686 <read_data>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d136      	bne.n	8001890 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001822:	f107 030e 	add.w	r3, r7, #14
 8001826:	461a      	mov	r2, r3
 8001828:	21e4      	movs	r1, #228	; 0xe4
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fefc 	bl	8001628 <read_register16>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d02c      	beq.n	8001890 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	461a      	mov	r2, r3
 800183c:	21e5      	movs	r1, #229	; 0xe5
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fef2 	bl	8001628 <read_register16>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d022      	beq.n	8001890 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001850:	2301      	movs	r3, #1
 8001852:	21e7      	movs	r1, #231	; 0xe7
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff16 	bl	8001686 <read_data>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d117      	bne.n	8001890 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001860:	89fb      	ldrh	r3, [r7, #14]
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	b21b      	sxth	r3, r3
 8001866:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800186a:	b21a      	sxth	r2, r3
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	121b      	asrs	r3, r3, #8
 8001870:	b21b      	sxth	r3, r3
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	b21b      	sxth	r3, r3
 8001878:	4313      	orrs	r3, r2
 800187a:	b21a      	sxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001880:	89bb      	ldrh	r3, [r7, #12]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	b29b      	uxth	r3, r3
 8001886:	b21a      	sxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	841a      	strh	r2, [r3, #32]

		return true;
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800189a:	b580      	push	{r7, lr}
 800189c:	b088      	sub	sp, #32
 800189e:	af04      	add	r7, sp, #16
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	70fb      	strb	r3, [r7, #3]
 80018a6:	4613      	mov	r3, r2
 80018a8:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	89f9      	ldrh	r1, [r7, #14]
 80018bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80018c0:	9302      	str	r3, [sp, #8]
 80018c2:	2301      	movs	r3, #1
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	1cbb      	adds	r3, r7, #2
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2301      	movs	r3, #1
 80018cc:	f005 fb2a 	bl	8006f24 <HAL_I2C_Mem_Write>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <write_register8+0x40>
		return false;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <write_register8+0x42>
	else
		return true;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018f2:	2b76      	cmp	r3, #118	; 0x76
 80018f4:	d005      	beq.n	8001902 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018fa:	2b77      	cmp	r3, #119	; 0x77
 80018fc:	d001      	beq.n	8001902 <bmp280_init+0x1e>

		return false;
 80018fe:	2300      	movs	r3, #0
 8001900:	e099      	b.n	8001a36 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001908:	2301      	movs	r3, #1
 800190a:	21d0      	movs	r1, #208	; 0xd0
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff feba 	bl	8001686 <read_data>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <bmp280_init+0x38>
		return false;
 8001918:	2300      	movs	r3, #0
 800191a:	e08c      	b.n	8001a36 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001922:	2b58      	cmp	r3, #88	; 0x58
 8001924:	d006      	beq.n	8001934 <bmp280_init+0x50>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800192c:	2b60      	cmp	r3, #96	; 0x60
 800192e:	d001      	beq.n	8001934 <bmp280_init+0x50>

		return false;
 8001930:	2300      	movs	r3, #0
 8001932:	e080      	b.n	8001a36 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001934:	22b6      	movs	r2, #182	; 0xb6
 8001936:	21e0      	movs	r1, #224	; 0xe0
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ffae 	bl	800189a <write_register8>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <bmp280_init+0x64>
		return false;
 8001944:	2300      	movs	r3, #0
 8001946:	e076      	b.n	8001a36 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001948:	f107 020c 	add.w	r2, r7, #12
 800194c:	2301      	movs	r3, #1
 800194e:	21f3      	movs	r1, #243	; 0xf3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff fe98 	bl	8001686 <read_data>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f5      	bne.n	8001948 <bmp280_init+0x64>
				&& (status & 1) == 0)
 800195c:	7b3b      	ldrb	r3, [r7, #12]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff feb5 	bl	80016d6 <read_calibration_data>
 800196c:	4603      	mov	r3, r0
 800196e:	f083 0301 	eor.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d100      	bne.n	800197a <bmp280_init+0x96>
 8001978:	e001      	b.n	800197e <bmp280_init+0x9a>
		return false;
 800197a:	2300      	movs	r3, #0
 800197c:	e05b      	b.n	8001a36 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001984:	2b60      	cmp	r3, #96	; 0x60
 8001986:	d10a      	bne.n	800199e <bmp280_init+0xba>
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff26 	bl	80017da <read_hum_calibration_data>
 800198e:	4603      	mov	r3, r0
 8001990:	f083 0301 	eor.w	r3, r3, #1
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <bmp280_init+0xba>
		return false;
 800199a:	2300      	movs	r3, #0
 800199c:	e04b      	b.n	8001a36 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	795b      	ldrb	r3, [r3, #5]
 80019a2:	015b      	lsls	r3, r3, #5
 80019a4:	b25a      	sxtb	r2, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	785b      	ldrb	r3, [r3, #1]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	461a      	mov	r2, r3
 80019b8:	21f5      	movs	r1, #245	; 0xf5
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff6d 	bl	800189a <write_register8>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <bmp280_init+0xe6>
		return false;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e035      	b.n	8001a36 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d102      	bne.n	80019d8 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	78db      	ldrb	r3, [r3, #3]
 80019dc:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	789b      	ldrb	r3, [r3, #2]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	b25b      	sxtb	r3, r3
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b25a      	sxtb	r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	4313      	orrs	r3, r2
 80019f4:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80019f6:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80019fe:	2b60      	cmp	r3, #96	; 0x60
 8001a00:	d10d      	bne.n	8001a1e <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	791b      	ldrb	r3, [r3, #4]
 8001a06:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001a08:	7b7b      	ldrb	r3, [r7, #13]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	21f2      	movs	r1, #242	; 0xf2
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff43 	bl	800189a <write_register8>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <bmp280_init+0x13a>
			return false;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e00b      	b.n	8001a36 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001a1e:	7bbb      	ldrb	r3, [r7, #14]
 8001a20:	461a      	mov	r2, r3
 8001a22:	21f4      	movs	r1, #244	; 0xf4
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff38 	bl	800189a <write_register8>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <bmp280_init+0x150>
		return false;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e000      	b.n	8001a36 <bmp280_init+0x152>
	}

	return true;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001a3e:	b480      	push	{r7}
 8001a40:	b087      	sub	sp, #28
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	10da      	asrs	r2, r3, #3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001a5c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001a60:	12db      	asrs	r3, r3, #11
 8001a62:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	111b      	asrs	r3, r3, #4
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	8812      	ldrh	r2, [r2, #0]
 8001a6c:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	1112      	asrs	r2, r2, #4
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	8809      	ldrh	r1, [r1, #0]
 8001a76:	1a52      	subs	r2, r2, r1
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001a88:	139b      	asrs	r3, r3, #14
 8001a8a:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	441a      	add	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3380      	adds	r3, #128	; 0x80
 8001aa2:	121b      	asrs	r3, r3, #8
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab4:	b0cc      	sub	sp, #304	; 0x130
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001abc:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001ac0:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ac8:	17da      	asrs	r2, r3, #31
 8001aca:	461c      	mov	r4, r3
 8001acc:	4615      	mov	r5, r2
 8001ace:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001ad2:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001ad6:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001ada:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001ade:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ae2:	fb03 f102 	mul.w	r1, r3, r2
 8001ae6:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001aea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	18ca      	adds	r2, r1, r3
 8001af4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001af8:	fba3 8903 	umull	r8, r9, r3, r3
 8001afc:	eb02 0309 	add.w	r3, r2, r9
 8001b00:	4699      	mov	r9, r3
 8001b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b06:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	17da      	asrs	r2, r3, #31
 8001b0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b12:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001b16:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	fb03 f209 	mul.w	r2, r3, r9
 8001b20:	460b      	mov	r3, r1
 8001b22:	fb08 f303 	mul.w	r3, r8, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	4602      	mov	r2, r0
 8001b2a:	fba8 1202 	umull	r1, r2, r8, r2
 8001b2e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001b32:	460a      	mov	r2, r1
 8001b34:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001b38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001b3c:	4413      	add	r3, r2
 8001b3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001b42:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001b46:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 8001b4a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b52:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	17da      	asrs	r2, r3, #31
 8001b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001b5e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001b62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b66:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001b6a:	462a      	mov	r2, r5
 8001b6c:	fb02 f203 	mul.w	r2, r2, r3
 8001b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b74:	4621      	mov	r1, r4
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	441a      	add	r2, r3
 8001b7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001b80:	4621      	mov	r1, r4
 8001b82:	fba3 1301 	umull	r1, r3, r3, r1
 8001b86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001b94:	18d3      	adds	r3, r2, r3
 8001b96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	0459      	lsls	r1, r3, #17
 8001baa:	4623      	mov	r3, r4
 8001bac:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	0458      	lsls	r0, r3, #17
 8001bb4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001bb8:	1814      	adds	r4, r2, r0
 8001bba:	643c      	str	r4, [r7, #64]	; 0x40
 8001bbc:	414b      	adcs	r3, r1
 8001bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001bc0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001bc4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bcc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bd0:	b21b      	sxth	r3, r3
 8001bd2:	17da      	asrs	r2, r3, #31
 8001bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001bd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001bdc:	f04f 0000 	mov.w	r0, #0
 8001be0:	f04f 0100 	mov.w	r1, #0
 8001be4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001be8:	00d9      	lsls	r1, r3, #3
 8001bea:	2000      	movs	r0, #0
 8001bec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001bf0:	1814      	adds	r4, r2, r0
 8001bf2:	63bc      	str	r4, [r7, #56]	; 0x38
 8001bf4:	414b      	adcs	r3, r1
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001bfc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001c00:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001c04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c08:	fb03 f102 	mul.w	r1, r3, r2
 8001c0c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c14:	fb02 f303 	mul.w	r3, r2, r3
 8001c18:	18ca      	adds	r2, r1, r3
 8001c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001c1e:	fba3 1303 	umull	r1, r3, r3, r3
 8001c22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001c26:	460b      	mov	r3, r1
 8001c28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c30:	18d3      	adds	r3, r2, r3
 8001c32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	17da      	asrs	r2, r3, #31
 8001c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001c4a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001c4e:	462b      	mov	r3, r5
 8001c50:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001c54:	4642      	mov	r2, r8
 8001c56:	fb02 f203 	mul.w	r2, r2, r3
 8001c5a:	464b      	mov	r3, r9
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	4622      	mov	r2, r4
 8001c66:	4641      	mov	r1, r8
 8001c68:	fba2 1201 	umull	r1, r2, r2, r1
 8001c6c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001c70:	460a      	mov	r2, r1
 8001c72:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001c76:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001c80:	f04f 0000 	mov.w	r0, #0
 8001c84:	f04f 0100 	mov.w	r1, #0
 8001c88:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001c8c:	4623      	mov	r3, r4
 8001c8e:	0a18      	lsrs	r0, r3, #8
 8001c90:	462b      	mov	r3, r5
 8001c92:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001c96:	462b      	mov	r3, r5
 8001c98:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	17da      	asrs	r2, r3, #31
 8001ca6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001caa:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cb2:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001cb6:	464a      	mov	r2, r9
 8001cb8:	fb02 f203 	mul.w	r2, r2, r3
 8001cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001cc0:	4644      	mov	r4, r8
 8001cc2:	fb04 f303 	mul.w	r3, r4, r3
 8001cc6:	441a      	add	r2, r3
 8001cc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ccc:	4644      	mov	r4, r8
 8001cce:	fba3 4304 	umull	r4, r3, r3, r4
 8001cd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001cdc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ce0:	18d3      	adds	r3, r2, r3
 8001ce2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001cf2:	464c      	mov	r4, r9
 8001cf4:	0323      	lsls	r3, r4, #12
 8001cf6:	4644      	mov	r4, r8
 8001cf8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001cfc:	4644      	mov	r4, r8
 8001cfe:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001d00:	1884      	adds	r4, r0, r2
 8001d02:	633c      	str	r4, [r7, #48]	; 0x30
 8001d04:	eb41 0303 	adc.w	r3, r1, r3
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
 8001d0a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001d0e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001d12:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001d16:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001d1a:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001d1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d26:	88db      	ldrh	r3, [r3, #6]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d34:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d38:	462b      	mov	r3, r5
 8001d3a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001d3e:	4642      	mov	r2, r8
 8001d40:	fb02 f203 	mul.w	r2, r2, r3
 8001d44:	464b      	mov	r3, r9
 8001d46:	4621      	mov	r1, r4
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4622      	mov	r2, r4
 8001d50:	4641      	mov	r1, r8
 8001d52:	fba2 1201 	umull	r1, r2, r2, r1
 8001d56:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001d5a:	460a      	mov	r2, r1
 8001d5c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001d60:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001d64:	4413      	add	r3, r2
 8001d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001d76:	4629      	mov	r1, r5
 8001d78:	104a      	asrs	r2, r1, #1
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	17cb      	asrs	r3, r1, #31
 8001d7e:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 8001d82:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001d86:	4313      	orrs	r3, r2
 8001d88:	d101      	bne.n	8001d8e <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e148      	b.n	8002020 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001d8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d92:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001d96:	17da      	asrs	r2, r3, #31
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d9c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001da0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001da4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001da8:	105b      	asrs	r3, r3, #1
 8001daa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001db2:	07db      	lsls	r3, r3, #31
 8001db4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001db8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001dbc:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	1a89      	subs	r1, r1, r2
 8001dc4:	67b9      	str	r1, [r7, #120]	; 0x78
 8001dc6:	4629      	mov	r1, r5
 8001dc8:	eb61 0303 	sbc.w	r3, r1, r3
 8001dcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001dce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001dd2:	4622      	mov	r2, r4
 8001dd4:	462b      	mov	r3, r5
 8001dd6:	1891      	adds	r1, r2, r2
 8001dd8:	6239      	str	r1, [r7, #32]
 8001dda:	415b      	adcs	r3, r3
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001de2:	4621      	mov	r1, r4
 8001de4:	1851      	adds	r1, r2, r1
 8001de6:	61b9      	str	r1, [r7, #24]
 8001de8:	4629      	mov	r1, r5
 8001dea:	414b      	adcs	r3, r1
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	018b      	lsls	r3, r1, #6
 8001dfe:	4641      	mov	r1, r8
 8001e00:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e04:	4641      	mov	r1, r8
 8001e06:	018a      	lsls	r2, r1, #6
 8001e08:	4641      	mov	r1, r8
 8001e0a:	1889      	adds	r1, r1, r2
 8001e0c:	6139      	str	r1, [r7, #16]
 8001e0e:	4649      	mov	r1, r9
 8001e10:	eb43 0101 	adc.w	r1, r3, r1
 8001e14:	6179      	str	r1, [r7, #20]
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001e22:	4649      	mov	r1, r9
 8001e24:	008b      	lsls	r3, r1, #2
 8001e26:	4641      	mov	r1, r8
 8001e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e2c:	4641      	mov	r1, r8
 8001e2e:	008a      	lsls	r2, r1, #2
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	4603      	mov	r3, r0
 8001e36:	4622      	mov	r2, r4
 8001e38:	189b      	adds	r3, r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	462a      	mov	r2, r5
 8001e40:	eb42 0303 	adc.w	r3, r2, r3
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001e52:	4649      	mov	r1, r9
 8001e54:	008b      	lsls	r3, r1, #2
 8001e56:	4641      	mov	r1, r8
 8001e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e5c:	4641      	mov	r1, r8
 8001e5e:	008a      	lsls	r2, r1, #2
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	4603      	mov	r3, r0
 8001e66:	4622      	mov	r2, r4
 8001e68:	189b      	adds	r3, r3, r2
 8001e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8001e6c:	462b      	mov	r3, r5
 8001e6e:	460a      	mov	r2, r1
 8001e70:	eb42 0303 	adc.w	r3, r2, r3
 8001e74:	677b      	str	r3, [r7, #116]	; 0x74
 8001e76:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001e7a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001e7e:	f7fe ff1b 	bl	8000cb8 <__aeabi_ldivmod>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e8e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e92:	b21b      	sxth	r3, r3
 8001e94:	17da      	asrs	r2, r3, #31
 8001e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001e9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001e9e:	f04f 0000 	mov.w	r0, #0
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	0b50      	lsrs	r0, r2, #13
 8001ea8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001eac:	1359      	asrs	r1, r3, #13
 8001eae:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001eb2:	462b      	mov	r3, r5
 8001eb4:	fb00 f203 	mul.w	r2, r0, r3
 8001eb8:	4623      	mov	r3, r4
 8001eba:	fb03 f301 	mul.w	r3, r3, r1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4622      	mov	r2, r4
 8001ec2:	fba2 1200 	umull	r1, r2, r2, r0
 8001ec6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001eca:	460a      	mov	r2, r1
 8001ecc:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001ed0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001eda:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001ede:	f04f 0000 	mov.w	r0, #0
 8001ee2:	f04f 0100 	mov.w	r1, #0
 8001ee6:	0b50      	lsrs	r0, r2, #13
 8001ee8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001eec:	1359      	asrs	r1, r3, #13
 8001eee:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001ef2:	462b      	mov	r3, r5
 8001ef4:	fb00 f203 	mul.w	r2, r0, r3
 8001ef8:	4623      	mov	r3, r4
 8001efa:	fb03 f301 	mul.w	r3, r3, r1
 8001efe:	4413      	add	r3, r2
 8001f00:	4622      	mov	r2, r4
 8001f02:	fba2 1200 	umull	r1, r2, r2, r0
 8001f06:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f0a:	460a      	mov	r2, r1
 8001f0c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001f10:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001f14:	4413      	add	r3, r2
 8001f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001f26:	4621      	mov	r1, r4
 8001f28:	0e4a      	lsrs	r2, r1, #25
 8001f2a:	4629      	mov	r1, r5
 8001f2c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001f30:	4629      	mov	r1, r5
 8001f32:	164b      	asrs	r3, r1, #25
 8001f34:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f3c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	17da      	asrs	r2, r3, #31
 8001f44:	663b      	str	r3, [r7, #96]	; 0x60
 8001f46:	667a      	str	r2, [r7, #100]	; 0x64
 8001f48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001f4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f50:	462a      	mov	r2, r5
 8001f52:	fb02 f203 	mul.w	r2, r2, r3
 8001f56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f66:	4621      	mov	r1, r4
 8001f68:	fba2 1201 	umull	r1, r2, r2, r1
 8001f6c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001f70:	460a      	mov	r2, r1
 8001f72:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001f76:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	0cca      	lsrs	r2, r1, #19
 8001f90:	4629      	mov	r1, r5
 8001f92:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001f96:	4629      	mov	r1, r5
 8001f98:	14cb      	asrs	r3, r1, #19
 8001f9a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001f9e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8001fa2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001fa6:	1884      	adds	r4, r0, r2
 8001fa8:	65bc      	str	r4, [r7, #88]	; 0x58
 8001faa:	eb41 0303 	adc.w	r3, r1, r3
 8001fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fb0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001fb4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001fb8:	4621      	mov	r1, r4
 8001fba:	1889      	adds	r1, r1, r2
 8001fbc:	6539      	str	r1, [r7, #80]	; 0x50
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	eb43 0101 	adc.w	r1, r3, r1
 8001fc4:	6579      	str	r1, [r7, #84]	; 0x54
 8001fc6:	f04f 0000 	mov.w	r0, #0
 8001fca:	f04f 0100 	mov.w	r1, #0
 8001fce:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001fd2:	4623      	mov	r3, r4
 8001fd4:	0a18      	lsrs	r0, r3, #8
 8001fd6:	462b      	mov	r3, r5
 8001fd8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001fdc:	462b      	mov	r3, r5
 8001fde:	1219      	asrs	r1, r3, #8
 8001fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001fe4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001fe8:	b21b      	sxth	r3, r3
 8001fea:	17da      	asrs	r2, r3, #31
 8001fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001ffc:	464c      	mov	r4, r9
 8001ffe:	0123      	lsls	r3, r4, #4
 8002000:	4644      	mov	r4, r8
 8002002:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002006:	4644      	mov	r4, r8
 8002008:	0122      	lsls	r2, r4, #4
 800200a:	1884      	adds	r4, r0, r2
 800200c:	603c      	str	r4, [r7, #0]
 800200e:	eb41 0303 	adc.w	r3, r1, r3
 8002012:	607b      	str	r3, [r7, #4]
 8002014:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002018:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 800201c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 8002020:	4618      	mov	r0, r3
 8002022:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002026:	46bd      	mov	sp, r7
 8002028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800202c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800203e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	039a      	lsls	r2, r3, #14
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800204a:	051b      	lsls	r3, r3, #20
 800204c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002054:	4619      	mov	r1, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002062:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800206a:	4611      	mov	r1, r2
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	fb01 f202 	mul.w	r2, r1, r2
 8002072:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002074:	68f9      	ldr	r1, [r7, #12]
 8002076:	7f09      	ldrb	r1, [r1, #28]
 8002078:	4608      	mov	r0, r1
 800207a:	6979      	ldr	r1, [r7, #20]
 800207c:	fb00 f101 	mul.w	r1, r0, r1
 8002080:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002082:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002086:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800208a:	1292      	asrs	r2, r2, #10
 800208c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002090:	68f9      	ldr	r1, [r7, #12]
 8002092:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002096:	fb01 f202 	mul.w	r2, r1, r2
 800209a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800209e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
 80020a4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	13db      	asrs	r3, r3, #15
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	13d2      	asrs	r2, r2, #15
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	7e12      	ldrb	r2, [r2, #24]
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80020ca:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80020d2:	bfa8      	it	ge
 80020d4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80020d8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	131b      	asrs	r3, r3, #12
}
 80020de:	4618      	mov	r0, r3
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b08c      	sub	sp, #48	; 0x30
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80020fe:	2b60      	cmp	r3, #96	; 0x60
 8002100:	d007      	beq.n	8002112 <bmp280_read_fixed+0x28>
		if (humidity)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <bmp280_read_fixed+0x24>
			*humidity = 0;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 800210e:	2300      	movs	r3, #0
 8002110:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <bmp280_read_fixed+0x32>
 8002118:	2308      	movs	r3, #8
 800211a:	e000      	b.n	800211e <bmp280_read_fixed+0x34>
 800211c:	2306      	movs	r3, #6
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8002120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002122:	b2db      	uxtb	r3, r3
 8002124:	f107 0218 	add.w	r2, r7, #24
 8002128:	21f7      	movs	r1, #247	; 0xf7
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff faab 	bl	8001686 <read_data>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <bmp280_read_fixed+0x50>
		return false;
 8002136:	2300      	movs	r3, #0
 8002138:	e038      	b.n	80021ac <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800213a:	7e3b      	ldrb	r3, [r7, #24]
 800213c:	031a      	lsls	r2, r3, #12
 800213e:	7e7b      	ldrb	r3, [r7, #25]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	4313      	orrs	r3, r2
 8002144:	7eba      	ldrb	r2, [r7, #26]
 8002146:	0912      	lsrs	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	4313      	orrs	r3, r2
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800214e:	7efb      	ldrb	r3, [r7, #27]
 8002150:	031a      	lsls	r2, r3, #12
 8002152:	7f3b      	ldrb	r3, [r7, #28]
 8002154:	011b      	lsls	r3, r3, #4
 8002156:	4313      	orrs	r3, r2
 8002158:	7f7a      	ldrb	r2, [r7, #29]
 800215a:	0912      	lsrs	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	4313      	orrs	r3, r2
 8002160:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	461a      	mov	r2, r3
 8002168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff fc67 	bl	8001a3e <compensate_temperature>
 8002170:	4602      	mov	r2, r0
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	461a      	mov	r2, r3
 800217a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7ff fc97 	bl	8001ab0 <compensate_pressure>
 8002182:	4602      	mov	r2, r0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00d      	beq.n	80021aa <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 800218e:	7fbb      	ldrb	r3, [r7, #30]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	7ffa      	ldrb	r2, [r7, #31]
 8002194:	4313      	orrs	r3, r2
 8002196:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	461a      	mov	r2, r3
 800219c:	6a39      	ldr	r1, [r7, #32]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7ff ff44 	bl	800202c <compensate_humidity>
 80021a4:	4602      	mov	r2, r0
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	601a      	str	r2, [r3, #0]
	}

	return true;
 80021aa:	2301      	movs	r3, #1
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3730      	adds	r7, #48	; 0x30
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <bmp280_read_float+0x1a>
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	e000      	b.n	80021d0 <bmp280_read_float+0x1c>
 80021ce:	2300      	movs	r3, #0
 80021d0:	f107 0218 	add.w	r2, r7, #24
 80021d4:	f107 011c 	add.w	r1, r7, #28
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f7ff ff86 	bl	80020ea <bmp280_read_fixed>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d028      	beq.n	8002236 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ee:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002240 <bmp280_read_float+0x8c>
 80021f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002206:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002244 <bmp280_read_float+0x90>
 800220a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	ee07 3a90 	vmov	s15, r3
 8002220:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002224:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002248 <bmp280_read_float+0x94>
 8002228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <bmp280_read_float+0x84>
	}

	return false;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3720      	adds	r7, #32
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	42c80000 	.word	0x42c80000
 8002244:	43800000 	.word	0x43800000
 8002248:	44800000 	.word	0x44800000

0800224c <Hz_to_ms>:
	}

	return (uint8_t)value; // Преобразуем long в uint8_t
}

uint16_t Hz_to_ms(uint16_t frequency){
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]
	uint16_t ms = 1000/frequency;
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800225c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002260:	81fb      	strh	r3, [r7, #14]
	return ms;
 8002262:	89fb      	ldrh	r3, [r7, #14]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <receive_data>:

void receive_data(char* rx_buffer, struct Rocket* rocket, struct Radio* radio){
 8002270:	b580      	push	{r7, lr}
 8002272:	b0b8      	sub	sp, #224	; 0xe0
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
	char *token = strtok(rx_buffer, ":");
 800227c:	49bb      	ldr	r1, [pc, #748]	; (800256c <receive_data+0x2fc>)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f00a ffae 	bl	800d1e0 <strtok>
 8002284:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	if (token != NULL) {
 8002288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 81f0 	beq.w	8002672 <receive_data+0x402>
		char *var_name = token;
 8002292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002296:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		token = strtok(NULL, ":");
 800229a:	49b4      	ldr	r1, [pc, #720]	; (800256c <receive_data+0x2fc>)
 800229c:	2000      	movs	r0, #0
 800229e:	f00a ff9f 	bl	800d1e0 <strtok>
 80022a2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		if (token != NULL) {
 80022a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8182 	beq.w	80025b4 <receive_data+0x344>
			float value = atof(token); // Преобразуем строку в float
 80022b0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80022b4:	f009 fa42 	bl	800b73c <atof>
 80022b8:	ec53 2b10 	vmov	r2, r3, d0
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	f7fe fcaa 	bl	8000c18 <__aeabi_d2f>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

			// Присваиваем значение переменной
			if (strcmp(var_name, "delta_apogee") == 0) {
 80022ca:	49a9      	ldr	r1, [pc, #676]	; (8002570 <receive_data+0x300>)
 80022cc:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80022d0:	f7fd ff86 	bl	80001e0 <strcmp>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d122      	bne.n	8002320 <receive_data+0xb0>
				rocket->delta_apogee = value;
 80022da:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80022de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e2:	edc7 7a00 	vstr	s15, [r7]
 80022e6:	783b      	ldrb	r3, [r7, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	751a      	strb	r2, [r3, #20]
				WriteToFlash(rocket);
 80022ee:	68b8      	ldr	r0, [r7, #8]
 80022f0:	f000 fa20 	bl	8002734 <WriteToFlash>
				char buf[30];
				snprintf(buf,sizeof(buf),"delta_apogee = %u\n", rocket->delta_apogee);
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	7d1b      	ldrb	r3, [r3, #20]
 80022f8:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80022fc:	4a9d      	ldr	r2, [pc, #628]	; (8002574 <receive_data+0x304>)
 80022fe:	211e      	movs	r1, #30
 8002300:	f00a f8d2 	bl	800c4a8 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
 8002304:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002308:	4618      	mov	r0, r3
 800230a:	f7fd ff73 	bl	80001f4 <strlen>
 800230e:	4603      	mov	r3, r0
 8002310:	b29a      	uxth	r2, r3
 8002312:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002316:	23c8      	movs	r3, #200	; 0xc8
 8002318:	4897      	ldr	r0, [pc, #604]	; (8002578 <receive_data+0x308>)
 800231a:	f008 f96b 	bl	800a5f4 <HAL_UART_Transmit>
				snprintf(buf,sizeof(buf),"starting_height = %u\n", rocket->starting_height);
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
			}
		}
	}
}
 800231e:	e1a8      	b.n	8002672 <receive_data+0x402>
			} else if (strcmp(var_name, "delta_activate") == 0) {
 8002320:	4996      	ldr	r1, [pc, #600]	; (800257c <receive_data+0x30c>)
 8002322:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002326:	f7fd ff5b 	bl	80001e0 <strcmp>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d122      	bne.n	8002376 <receive_data+0x106>
				rocket->delta_activate = value;
 8002330:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002338:	edc7 7a00 	vstr	s15, [r7]
 800233c:	783b      	ldrb	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	755a      	strb	r2, [r3, #21]
				WriteToFlash(rocket);
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f000 f9f5 	bl	8002734 <WriteToFlash>
				snprintf(buf,sizeof(buf),"delta_activate = %u\n", rocket->delta_activate);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	7d5b      	ldrb	r3, [r3, #21]
 800234e:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8002352:	4a8b      	ldr	r2, [pc, #556]	; (8002580 <receive_data+0x310>)
 8002354:	211e      	movs	r1, #30
 8002356:	f00a f8a7 	bl	800c4a8 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
 800235a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800235e:	4618      	mov	r0, r3
 8002360:	f7fd ff48 	bl	80001f4 <strlen>
 8002364:	4603      	mov	r3, r0
 8002366:	b29a      	uxth	r2, r3
 8002368:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800236c:	23c8      	movs	r3, #200	; 0xc8
 800236e:	4882      	ldr	r0, [pc, #520]	; (8002578 <receive_data+0x308>)
 8002370:	f008 f940 	bl	800a5f4 <HAL_UART_Transmit>
}
 8002374:	e17d      	b.n	8002672 <receive_data+0x402>
			} else if (strcmp(var_name, "starting_height") == 0) {
 8002376:	4983      	ldr	r1, [pc, #524]	; (8002584 <receive_data+0x314>)
 8002378:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800237c:	f7fd ff30 	bl	80001e0 <strcmp>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d122      	bne.n	80023cc <receive_data+0x15c>
				rocket->starting_height = value;
 8002386:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800238a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800238e:	edc7 7a00 	vstr	s15, [r7]
 8002392:	783b      	ldrb	r3, [r7, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	759a      	strb	r2, [r3, #22]
				WriteToFlash(rocket);
 800239a:	68b8      	ldr	r0, [r7, #8]
 800239c:	f000 f9ca 	bl	8002734 <WriteToFlash>
				snprintf(buf,sizeof(buf),"starting_height = %u\n", rocket->starting_height);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	7d9b      	ldrb	r3, [r3, #22]
 80023a4:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80023a8:	4a77      	ldr	r2, [pc, #476]	; (8002588 <receive_data+0x318>)
 80023aa:	211e      	movs	r1, #30
 80023ac:	f00a f87c 	bl	800c4a8 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
 80023b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fd ff1d 	bl	80001f4 <strlen>
 80023ba:	4603      	mov	r3, r0
 80023bc:	b29a      	uxth	r2, r3
 80023be:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80023c2:	23c8      	movs	r3, #200	; 0xc8
 80023c4:	486c      	ldr	r0, [pc, #432]	; (8002578 <receive_data+0x308>)
 80023c6:	f008 f915 	bl	800a5f4 <HAL_UART_Transmit>
}
 80023ca:	e152      	b.n	8002672 <receive_data+0x402>
			} else if (strcmp(var_name, "TRANSMIT_IS_OK") == 0) {
 80023cc:	496f      	ldr	r1, [pc, #444]	; (800258c <receive_data+0x31c>)
 80023ce:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80023d2:	f7fd ff05 	bl	80001e0 <strcmp>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10c      	bne.n	80023f6 <receive_data+0x186>
				radio->TRANSMIT_IS_OK = value;
 80023dc:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80023e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e8:	bf14      	ite	ne
 80023ea:	2301      	movne	r3, #1
 80023ec:	2300      	moveq	r3, #0
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	701a      	strb	r2, [r3, #0]
}
 80023f4:	e13d      	b.n	8002672 <receive_data+0x402>
			else if (strcmp(var_name, "frequency_data_transmission") == 0) {
 80023f6:	4966      	ldr	r1, [pc, #408]	; (8002590 <receive_data+0x320>)
 80023f8:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80023fc:	f7fd fef0 	bl	80001e0 <strcmp>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <receive_data+0x1aa>
				radio->frequency_data_transmission = value;
 8002406:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800240a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800240e:	ee17 3a90 	vmov	r3, s15
 8002412:	b29a      	uxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	815a      	strh	r2, [r3, #10]
}
 8002418:	e12b      	b.n	8002672 <receive_data+0x402>
			} else if (strcmp(var_name, "ALTITUDE_IS_OK") == 0) {
 800241a:	495e      	ldr	r1, [pc, #376]	; (8002594 <receive_data+0x324>)
 800241c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002420:	f7fd fede 	bl	80001e0 <strcmp>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10c      	bne.n	8002444 <receive_data+0x1d4>
				radio->ALTITUDE_IS_OK = value;
 800242a:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800242e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002436:	bf14      	ite	ne
 8002438:	2301      	movne	r3, #1
 800243a:	2300      	moveq	r3, #0
 800243c:	b2da      	uxtb	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	705a      	strb	r2, [r3, #1]
}
 8002442:	e116      	b.n	8002672 <receive_data+0x402>
			} else if (strcmp(var_name, "PITCH_IS_OK") == 0) {
 8002444:	4954      	ldr	r1, [pc, #336]	; (8002598 <receive_data+0x328>)
 8002446:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800244a:	f7fd fec9 	bl	80001e0 <strcmp>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10c      	bne.n	800246e <receive_data+0x1fe>
				radio->PITCH_IS_OK = value;
 8002454:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002458:	eef5 7a40 	vcmp.f32	s15, #0.0
 800245c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2da      	uxtb	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	709a      	strb	r2, [r3, #2]
}
 800246c:	e101      	b.n	8002672 <receive_data+0x402>
			} else if (strcmp(var_name, "ROLL_IS_OK") == 0) {
 800246e:	494b      	ldr	r1, [pc, #300]	; (800259c <receive_data+0x32c>)
 8002470:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002474:	f7fd feb4 	bl	80001e0 <strcmp>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <receive_data+0x228>
				radio->ROLL_IS_OK = value;
 800247e:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002482:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2da      	uxtb	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	70da      	strb	r2, [r3, #3]
}
 8002496:	e0ec      	b.n	8002672 <receive_data+0x402>
			} else if (strcmp(var_name, "YAW_IS_OK") == 0) {
 8002498:	4941      	ldr	r1, [pc, #260]	; (80025a0 <receive_data+0x330>)
 800249a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800249e:	f7fd fe9f 	bl	80001e0 <strcmp>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10c      	bne.n	80024c2 <receive_data+0x252>
				radio->YAW_IS_OK = value;
 80024a8:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80024ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	bf14      	ite	ne
 80024b6:	2301      	movne	r3, #1
 80024b8:	2300      	moveq	r3, #0
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	711a      	strb	r2, [r3, #4]
}
 80024c0:	e0d7      	b.n	8002672 <receive_data+0x402>
			} else if (strcmp(var_name, "D_PITCH_IS_OK") == 0) {
 80024c2:	4938      	ldr	r1, [pc, #224]	; (80025a4 <receive_data+0x334>)
 80024c4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80024c8:	f7fd fe8a 	bl	80001e0 <strcmp>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <receive_data+0x27c>
				radio->D_PITCH_IS_OK = value;
 80024d2:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80024d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	715a      	strb	r2, [r3, #5]
}
 80024ea:	e0c2      	b.n	8002672 <receive_data+0x402>
			} else if (strcmp(var_name, "D_ROLL_IS_OK") == 0) {
 80024ec:	492e      	ldr	r1, [pc, #184]	; (80025a8 <receive_data+0x338>)
 80024ee:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80024f2:	f7fd fe75 	bl	80001e0 <strcmp>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10c      	bne.n	8002516 <receive_data+0x2a6>
				radio->D_ROLL_IS_OK = value;
 80024fc:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002500:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002508:	bf14      	ite	ne
 800250a:	2301      	movne	r3, #1
 800250c:	2300      	moveq	r3, #0
 800250e:	b2da      	uxtb	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	719a      	strb	r2, [r3, #6]
}
 8002514:	e0ad      	b.n	8002672 <receive_data+0x402>
			} else if (strcmp(var_name, "D_YAW_IS_OK") == 0) {
 8002516:	4925      	ldr	r1, [pc, #148]	; (80025ac <receive_data+0x33c>)
 8002518:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800251c:	f7fd fe60 	bl	80001e0 <strcmp>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <receive_data+0x2d0>
				radio->D_YAW_IS_OK = value;
 8002526:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 800252a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2da      	uxtb	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	71da      	strb	r2, [r3, #7]
}
 800253e:	e098      	b.n	8002672 <receive_data+0x402>
			} else if (strcmp(var_name, "TEMPERATURE_IS_OK") == 0) {
 8002540:	491b      	ldr	r1, [pc, #108]	; (80025b0 <receive_data+0x340>)
 8002542:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002546:	f7fd fe4b 	bl	80001e0 <strcmp>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f040 8090 	bne.w	8002672 <receive_data+0x402>
				radio->TEMPERATURE_IS_OK = value;
 8002552:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002556:	eef5 7a40 	vcmp.f32	s15, #0.0
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2da      	uxtb	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	721a      	strb	r2, [r3, #8]
}
 800256a:	e082      	b.n	8002672 <receive_data+0x402>
 800256c:	08010d50 	.word	0x08010d50
 8002570:	08010d54 	.word	0x08010d54
 8002574:	08010d64 	.word	0x08010d64
 8002578:	200006b8 	.word	0x200006b8
 800257c:	08010d78 	.word	0x08010d78
 8002580:	08010d88 	.word	0x08010d88
 8002584:	08010da0 	.word	0x08010da0
 8002588:	08010db0 	.word	0x08010db0
 800258c:	08010dc8 	.word	0x08010dc8
 8002590:	08010dd8 	.word	0x08010dd8
 8002594:	08010df4 	.word	0x08010df4
 8002598:	08010e04 	.word	0x08010e04
 800259c:	08010e10 	.word	0x08010e10
 80025a0:	08010e1c 	.word	0x08010e1c
 80025a4:	08010e28 	.word	0x08010e28
 80025a8:	08010e38 	.word	0x08010e38
 80025ac:	08010e48 	.word	0x08010e48
 80025b0:	08010e54 	.word	0x08010e54
			char *command = strtok(rx_buffer, ";");
 80025b4:	4931      	ldr	r1, [pc, #196]	; (800267c <receive_data+0x40c>)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f00a fe12 	bl	800d1e0 <strtok>
 80025bc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
			if (strcmp(command, "get_delta_apogee") == 0){
 80025c0:	492f      	ldr	r1, [pc, #188]	; (8002680 <receive_data+0x410>)
 80025c2:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80025c6:	f7fd fe0b 	bl	80001e0 <strcmp>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d115      	bne.n	80025fc <receive_data+0x38c>
				snprintf(buf,sizeof(buf),"delta_apogee = %u\n", rocket->delta_apogee);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	7d1b      	ldrb	r3, [r3, #20]
 80025d4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80025d8:	4a2a      	ldr	r2, [pc, #168]	; (8002684 <receive_data+0x414>)
 80025da:	211e      	movs	r1, #30
 80025dc:	f009 ff64 	bl	800c4a8 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
 80025e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd fe05 	bl	80001f4 <strlen>
 80025ea:	4603      	mov	r3, r0
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80025f2:	23c8      	movs	r3, #200	; 0xc8
 80025f4:	4824      	ldr	r0, [pc, #144]	; (8002688 <receive_data+0x418>)
 80025f6:	f007 fffd 	bl	800a5f4 <HAL_UART_Transmit>
}
 80025fa:	e03a      	b.n	8002672 <receive_data+0x402>
			else if (strcmp(command, "get_delta_activate") == 0){
 80025fc:	4923      	ldr	r1, [pc, #140]	; (800268c <receive_data+0x41c>)
 80025fe:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002602:	f7fd fded 	bl	80001e0 <strcmp>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d115      	bne.n	8002638 <receive_data+0x3c8>
				snprintf(buf,sizeof(buf),"delta_activate = %u\n", rocket->delta_activate);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	7d5b      	ldrb	r3, [r3, #21]
 8002610:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002614:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <receive_data+0x420>)
 8002616:	211e      	movs	r1, #30
 8002618:	f009 ff46 	bl	800c4a8 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
 800261c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd fde7 	bl	80001f4 <strlen>
 8002626:	4603      	mov	r3, r0
 8002628:	b29a      	uxth	r2, r3
 800262a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800262e:	23c8      	movs	r3, #200	; 0xc8
 8002630:	4815      	ldr	r0, [pc, #84]	; (8002688 <receive_data+0x418>)
 8002632:	f007 ffdf 	bl	800a5f4 <HAL_UART_Transmit>
}
 8002636:	e01c      	b.n	8002672 <receive_data+0x402>
			else if (strcmp(command, "get_starting_height") == 0){
 8002638:	4916      	ldr	r1, [pc, #88]	; (8002694 <receive_data+0x424>)
 800263a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800263e:	f7fd fdcf 	bl	80001e0 <strcmp>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d114      	bne.n	8002672 <receive_data+0x402>
				snprintf(buf,sizeof(buf),"starting_height = %u\n", rocket->starting_height);
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	7d9b      	ldrb	r3, [r3, #22]
 800264c:	f107 0010 	add.w	r0, r7, #16
 8002650:	4a11      	ldr	r2, [pc, #68]	; (8002698 <receive_data+0x428>)
 8002652:	211e      	movs	r1, #30
 8002654:	f009 ff28 	bl	800c4a8 <sniprintf>
				HAL_UART_Transmit(&huart1, (uint8_t*)buf,strlen(buf) , 200);
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd fdc9 	bl	80001f4 <strlen>
 8002662:	4603      	mov	r3, r0
 8002664:	b29a      	uxth	r2, r3
 8002666:	f107 0110 	add.w	r1, r7, #16
 800266a:	23c8      	movs	r3, #200	; 0xc8
 800266c:	4806      	ldr	r0, [pc, #24]	; (8002688 <receive_data+0x418>)
 800266e:	f007 ffc1 	bl	800a5f4 <HAL_UART_Transmit>
}
 8002672:	bf00      	nop
 8002674:	37e0      	adds	r7, #224	; 0xe0
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	08010e68 	.word	0x08010e68
 8002680:	08010e6c 	.word	0x08010e6c
 8002684:	08010d64 	.word	0x08010d64
 8002688:	200006b8 	.word	0x200006b8
 800268c:	08010e80 	.word	0x08010e80
 8002690:	08010d88 	.word	0x08010d88
 8002694:	08010e94 	.word	0x08010e94
 8002698:	08010db0 	.word	0x08010db0

0800269c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]

	receive_data(rx_buffer, &rocket, &radio);
 80026a8:	4a06      	ldr	r2, [pc, #24]	; (80026c4 <HAL_UARTEx_RxEventCallback+0x28>)
 80026aa:	4907      	ldr	r1, [pc, #28]	; (80026c8 <HAL_UARTEx_RxEventCallback+0x2c>)
 80026ac:	4807      	ldr	r0, [pc, #28]	; (80026cc <HAL_UARTEx_RxEventCallback+0x30>)
 80026ae:	f7ff fddf 	bl	8002270 <receive_data>
	// Запускаем прием следующего байта
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *)&rx_buffer, 100);
 80026b2:	2264      	movs	r2, #100	; 0x64
 80026b4:	4905      	ldr	r1, [pc, #20]	; (80026cc <HAL_UARTEx_RxEventCallback+0x30>)
 80026b6:	4806      	ldr	r0, [pc, #24]	; (80026d0 <HAL_UARTEx_RxEventCallback+0x34>)
 80026b8:	f008 f82e 	bl	800a718 <HAL_UARTEx_ReceiveToIdle_IT>

}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20000338 	.word	0x20000338
 80026c8:	200002ac 	.word	0x200002ac
 80026cc:	20000560 	.word	0x20000560
 80026d0:	200006b8 	.word	0x200006b8

080026d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d102      	bne.n	80026ec <HAL_TIM_PeriodElapsedCallback+0x18>
		PID_WORK = true;
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]

		//get_PID_out(&pid, &angle, &angle_velocity, set_data);
	}

}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40000400 	.word	0x40000400
 80026fc:	200005d0 	.word	0x200005d0

08002700 <CheckFlashData>:
#include "flash.h"


// Функция проверки наличия корректных данных во Flash
int CheckFlashData() {
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
    uint32_t address = FLASH_USER_START_ADDR;
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <CheckFlashData+0x30>)
 8002708:	60fb      	str	r3, [r7, #12]

    // Проверяем контрольную сумму или признак валидности данных
    uint32_t checksum = *(uint32_t*)address; // Предположим, что первый байт - это контрольная сумма
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60bb      	str	r3, [r7, #8]
    uint32_t calculated_checksum = MAGIC_CHECKSUM_NUMBER; // Ваша логика для расчета контрольной суммы
 8002710:	2310      	movs	r3, #16
 8002712:	607b      	str	r3, [r7, #4]
    }*/
    //calculated_checksum += rocket.delta_apogee;
    //calculated_checksum += rocket.delta_activate;
    //calculated_checksum += rocket.starting_height;

    return (checksum == calculated_checksum); // Возвращаем true, если данные корректны
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	08060000 	.word	0x08060000

08002734 <WriteToFlash>:

// Функция записи структуры в Flash
HAL_StatusTypeDef WriteToFlash(struct Rocket *rocket) {
 8002734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002738:	b08c      	sub	sp, #48	; 0x30
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]

    HAL_FLASH_Unlock(); // Разблокировка Flash
 800273e:	f003 fa67 	bl	8005c10 <HAL_FLASH_Unlock>

    uint32_t address = FLASH_USER_START_ADDR;
 8002742:	4b3e      	ldr	r3, [pc, #248]	; (800283c <WriteToFlash+0x108>)
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Удаление страниц перед записью
    FLASH_EraseInitTypeDef FlashErase;                     // структура для функции стирания страницы
	uint32_t pageError = 0;                                // переменная для записи информации об ошибках в процессе стирания
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800274a:	b672      	cpsid	i
}
 800274c:	bf00      	nop

	__disable_irq();                                       // запрещаем прерывания
	//HAL_FLASH_Unlock();
	FlashErase.TypeErase = FLASH_TYPEERASE_SECTORS;          // стирать постранично
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
	FlashErase.NbSectors = 1;         // считаем количество страниц, чтобы наш массив поместился
 8002752:	2301      	movs	r3, #1
 8002754:	623b      	str	r3, [r7, #32]
	FlashErase.Sector = FLASH_SECTOR_7;
 8002756:	2307      	movs	r3, #7
 8002758:	61fb      	str	r3, [r7, #28]
	FlashErase.VoltageRange = VOLTAGE_RANGE_3;
 800275a:	2302      	movs	r3, #2
 800275c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_FLASHEx_Erase(&FlashErase, &pageError) != HAL_OK)   // вызов функции стирания
 800275e:	f107 0210 	add.w	r2, r7, #16
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fc2f 	bl	8005fcc <HAL_FLASHEx_Erase>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <WriteToFlash+0x48>
	{
		HAL_FLASH_Lock();                                  // если не смог стереть, то закрыть память и вернуть ошибку
 8002774:	f003 fa6e 	bl	8005c54 <HAL_FLASH_Lock>
		return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e059      	b.n	8002830 <WriteToFlash+0xfc>
	}

    // Запись данных в Flash


    uint32_t checksum = MAGIC_CHECKSUM_NUMBER; // Для контрольной суммы
 800277c:	2310      	movs	r3, #16
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
    //checksum += rocket->delta_activate;
    //checksum += rocket->starting_height;


    // Запись контрольной суммы в начало области Flash
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, address, checksum) != HAL_OK) {
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	2200      	movs	r2, #0
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800278c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800278e:	2002      	movs	r0, #2
 8002790:	f003 f9d8 	bl	8005b44 <HAL_FLASH_Program>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <WriteToFlash+0x6e>
        HAL_FLASH_Lock();
 800279a:	f003 fa5b 	bl	8005c54 <HAL_FLASH_Lock>
        return HAL_ERROR; // Ошибка записи
 800279e:	2301      	movs	r3, #1
 80027a0:	e046      	b.n	8002830 <WriteToFlash+0xfc>
    }

    address += sizeof(uint32_t);
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	3304      	adds	r3, #4
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    // Запись структуры в Flash*((uint32_t*)&value)
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, address, rocket->delta_apogee) != HAL_OK) {
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	7d1b      	ldrb	r3, [r3, #20]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2200      	movs	r2, #0
 80027b0:	469a      	mov	sl, r3
 80027b2:	4693      	mov	fp, r2
 80027b4:	4652      	mov	r2, sl
 80027b6:	465b      	mov	r3, fp
 80027b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027ba:	2002      	movs	r0, #2
 80027bc:	f003 f9c2 	bl	8005b44 <HAL_FLASH_Program>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <WriteToFlash+0x9a>
        HAL_FLASH_Lock();
 80027c6:	f003 fa45 	bl	8005c54 <HAL_FLASH_Lock>
        return HAL_ERROR; // Ошибка записи
 80027ca:	2301      	movs	r3, #1
 80027cc:	e030      	b.n	8002830 <WriteToFlash+0xfc>
    }

    address += sizeof(uint32_t);
 80027ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d0:	3304      	adds	r3, #4
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, address, rocket->delta_activate) != HAL_OK) {
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	7d5b      	ldrb	r3, [r3, #21]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2200      	movs	r2, #0
 80027dc:	4698      	mov	r8, r3
 80027de:	4691      	mov	r9, r2
 80027e0:	4642      	mov	r2, r8
 80027e2:	464b      	mov	r3, r9
 80027e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027e6:	2002      	movs	r0, #2
 80027e8:	f003 f9ac 	bl	8005b44 <HAL_FLASH_Program>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <WriteToFlash+0xc6>
        HAL_FLASH_Lock();
 80027f2:	f003 fa2f 	bl	8005c54 <HAL_FLASH_Lock>
        return HAL_ERROR; // Ошибка записи
 80027f6:	2301      	movs	r3, #1
 80027f8:	e01a      	b.n	8002830 <WriteToFlash+0xfc>
    }

    address += sizeof(uint32_t);
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	3304      	adds	r3, #4
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, address, rocket->starting_height) != HAL_OK) {
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	7d9b      	ldrb	r3, [r3, #22]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2200      	movs	r2, #0
 8002808:	461c      	mov	r4, r3
 800280a:	4615      	mov	r5, r2
 800280c:	4622      	mov	r2, r4
 800280e:	462b      	mov	r3, r5
 8002810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002812:	2002      	movs	r0, #2
 8002814:	f003 f996 	bl	8005b44 <HAL_FLASH_Program>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <WriteToFlash+0xf2>
            HAL_FLASH_Lock();
 800281e:	f003 fa19 	bl	8005c54 <HAL_FLASH_Lock>
            return HAL_ERROR; // Ошибка записи
 8002822:	2301      	movs	r3, #1
 8002824:	e004      	b.n	8002830 <WriteToFlash+0xfc>
    }


    HAL_FLASH_Lock(); // Блокировка Flash
 8002826:	f003 fa15 	bl	8005c54 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800282a:	b662      	cpsie	i
}
 800282c:	bf00      	nop
    __enable_irq();                                        // включаем прерывания обратно
    return HAL_OK; // Успешно
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3730      	adds	r7, #48	; 0x30
 8002834:	46bd      	mov	sp, r7
 8002836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800283a:	bf00      	nop
 800283c:	08060000 	.word	0x08060000

08002840 <ReadFromFlash>:

// Функция чтения структуры из Flash
void ReadFromFlash(struct Rocket *rocket) {
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
    uint32_t address = FLASH_USER_START_ADDR + 4; // Пропускаем контрольную сумму
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <ReadFromFlash+0x54>)
 800284a:	60fb      	str	r3, [r7, #12]

    if (address % 4 != 0) {
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d118      	bne.n	8002888 <ReadFromFlash+0x48>
            // Обработка ошибки: адрес не выровнен
            return;
        }

    rocket->delta_apogee = *(__IO uint32_t*)address; // Чтение первого поля
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	751a      	strb	r2, [r3, #20]
    address += 4;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3304      	adds	r3, #4
 8002864:	60fb      	str	r3, [r7, #12]

    rocket->delta_activate = *(__IO uint32_t*)address; // Чтение второго поля
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	755a      	strb	r2, [r3, #21]
    address += 4;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3304      	adds	r3, #4
 8002874:	60fb      	str	r3, [r7, #12]

    rocket->starting_height = *(__IO uint32_t*)address; // Чтение второго поля
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	759a      	strb	r2, [r3, #22]
    address += 4;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3304      	adds	r3, #4
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e000      	b.n	800288a <ReadFromFlash+0x4a>
            return;
 8002888:	bf00      	nop

    //return HAL_OK; // Успешно
}
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	08060004 	.word	0x08060004

08002898 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289e:	f107 030c 	add.w	r3, r7, #12
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <MX_GPIO_Init+0xc8>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a2a      	ldr	r2, [pc, #168]	; (8002960 <MX_GPIO_Init+0xc8>)
 80028b8:	f043 0304 	orr.w	r3, r3, #4
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b28      	ldr	r3, [pc, #160]	; (8002960 <MX_GPIO_Init+0xc8>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <MX_GPIO_Init+0xc8>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a23      	ldr	r2, [pc, #140]	; (8002960 <MX_GPIO_Init+0xc8>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <MX_GPIO_Init+0xc8>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <MX_GPIO_Init+0xc8>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <MX_GPIO_Init+0xc8>)
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <MX_GPIO_Init+0xc8>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8002902:	2200      	movs	r2, #0
 8002904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002908:	4816      	ldr	r0, [pc, #88]	; (8002964 <MX_GPIO_Init+0xcc>)
 800290a:	f004 f8a9 	bl	8006a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 800290e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002914:	2301      	movs	r3, #1
 8002916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	4619      	mov	r1, r3
 8002926:	480f      	ldr	r0, [pc, #60]	; (8002964 <MX_GPIO_Init+0xcc>)
 8002928:	f003 fcd8 	bl	80062dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = btn_Pin;
 800292c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002932:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002938:	2301      	movs	r3, #1
 800293a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 800293c:	f107 030c 	add.w	r3, r7, #12
 8002940:	4619      	mov	r1, r3
 8002942:	4808      	ldr	r0, [pc, #32]	; (8002964 <MX_GPIO_Init+0xcc>)
 8002944:	f003 fcca 	bl	80062dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002948:	2200      	movs	r2, #0
 800294a:	2100      	movs	r1, #0
 800294c:	2028      	movs	r0, #40	; 0x28
 800294e:	f002 ffff 	bl	8005950 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002952:	2028      	movs	r0, #40	; 0x28
 8002954:	f003 f828 	bl	80059a8 <HAL_NVIC_EnableIRQ>

}
 8002958:	bf00      	nop
 800295a:	3720      	adds	r7, #32
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40023800 	.word	0x40023800
 8002964:	40020800 	.word	0x40020800

08002968 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800296c:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <MX_I2C1_Init+0x50>)
 800296e:	4a13      	ldr	r2, [pc, #76]	; (80029bc <MX_I2C1_Init+0x54>)
 8002970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MX_I2C1_Init+0x50>)
 8002974:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <MX_I2C1_Init+0x58>)
 8002976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002978:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <MX_I2C1_Init+0x50>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <MX_I2C1_Init+0x50>)
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <MX_I2C1_Init+0x50>)
 8002986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800298a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800298c:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <MX_I2C1_Init+0x50>)
 800298e:	2200      	movs	r2, #0
 8002990:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <MX_I2C1_Init+0x50>)
 8002994:	2200      	movs	r2, #0
 8002996:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <MX_I2C1_Init+0x50>)
 800299a:	2200      	movs	r2, #0
 800299c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <MX_I2C1_Init+0x50>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029a4:	4804      	ldr	r0, [pc, #16]	; (80029b8 <MX_I2C1_Init+0x50>)
 80029a6:	f004 f8a5 	bl	8006af4 <HAL_I2C_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029b0:	f000 fa9c 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000258 	.word	0x20000258
 80029bc:	40005400 	.word	0x40005400
 80029c0:	000186a0 	.word	0x000186a0

080029c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	; 0x28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a20      	ldr	r2, [pc, #128]	; (8002a64 <HAL_I2C_MspInit+0xa0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d139      	bne.n	8002a5a <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
	__HAL_RCC_I2C1_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <HAL_I2C_MspInit+0xa4>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <HAL_I2C_MspInit+0xa4>)
 80029f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
 80029f6:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <HAL_I2C_MspInit+0xa4>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_I2C_MspInit+0xa4>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <HAL_I2C_MspInit+0xa4>)
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_I2C_MspInit+0xa4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a1e:	23c0      	movs	r3, #192	; 0xc0
 8002a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a22:	2312      	movs	r3, #18
 8002a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <HAL_I2C_MspInit+0xa8>)
 8002a3a:	f003 fc4f 	bl	80062dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_I2C_MspInit+0xa4>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_I2C_MspInit+0xa4>)
 8002a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_I2C_MspInit+0xa4>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	; 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40005400 	.word	0x40005400
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020400 	.word	0x40020400

08002a70 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_I2C_MspDeInit+0x38>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d10d      	bne.n	8002a9e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_I2C_MspDeInit+0x3c>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_I2C_MspDeInit+0x3c>)
 8002a88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a8c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002a8e:	2140      	movs	r1, #64	; 0x40
 8002a90:	4807      	ldr	r0, [pc, #28]	; (8002ab0 <HAL_I2C_MspDeInit+0x40>)
 8002a92:	f003 febd 	bl	8006810 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	4805      	ldr	r0, [pc, #20]	; (8002ab0 <HAL_I2C_MspDeInit+0x40>)
 8002a9a:	f003 feb9 	bl	8006810 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40005400 	.word	0x40005400
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020400 	.word	0x40020400

08002ab4 <start_blink_led>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void start_blink_led(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint16_t time){
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	807b      	strh	r3, [r7, #2]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8002ac4:	887b      	ldrh	r3, [r7, #2]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4619      	mov	r1, r3
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f003 ffc8 	bl	8006a60 <HAL_GPIO_WritePin>
	HAL_Delay(time);
 8002ad0:	883b      	ldrh	r3, [r7, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f002 f940 	bl	8004d58 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002ad8:	887b      	ldrh	r3, [r7, #2]
 8002ada:	2200      	movs	r2, #0
 8002adc:	4619      	mov	r1, r3
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f003 ffbe 	bl	8006a60 <HAL_GPIO_WritePin>

}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <tick_to_sec>:

float tick_to_sec(uint32_t tick){
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	return tick/(float)1000;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002b18 <tick_to_sec+0x2c>
 8002b02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b06:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	447a0000 	.word	0x447a0000

08002b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b22:	f002 f8a7 	bl	8004c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b26:	f000 f967 	bl	8002df8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	4b94      	ldr	r3, [pc, #592]	; (8002d80 <main+0x264>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a93      	ldr	r2, [pc, #588]	; (8002d80 <main+0x264>)
 8002b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b91      	ldr	r3, [pc, #580]	; (8002d80 <main+0x264>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
    HAL_Delay(100);
 8002b46:	2064      	movs	r0, #100	; 0x64
 8002b48:	f002 f906 	bl	8004d58 <HAL_Delay>
    __HAL_RCC_I2C1_FORCE_RESET();
 8002b4c:	4b8c      	ldr	r3, [pc, #560]	; (8002d80 <main+0x264>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4a8b      	ldr	r2, [pc, #556]	; (8002d80 <main+0x264>)
 8002b52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b56:	6213      	str	r3, [r2, #32]
    HAL_Delay(100);
 8002b58:	2064      	movs	r0, #100	; 0x64
 8002b5a:	f002 f8fd 	bl	8004d58 <HAL_Delay>
    __HAL_RCC_I2C1_RELEASE_RESET();
 8002b5e:	4b88      	ldr	r3, [pc, #544]	; (8002d80 <main+0x264>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a87      	ldr	r2, [pc, #540]	; (8002d80 <main+0x264>)
 8002b64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b68:	6213      	str	r3, [r2, #32]
    HAL_Delay(100);
 8002b6a:	2064      	movs	r0, #100	; 0x64
 8002b6c:	f002 f8f4 	bl	8004d58 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b70:	f7ff fe92 	bl	8002898 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002b74:	f000 fd44 	bl	8003600 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002b78:	f7fe fc7a 	bl	8001470 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002b7c:	f7ff fef4 	bl	8002968 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002b80:	f000 fb0a 	bl	8003198 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002b84:	f000 fc3e 	bl	8003404 <MX_TIM3_Init>
  MX_TIM2_Init();
 8002b88:	f000 fba6 	bl	80032d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t *)&rx_buffer, 100);
 8002b8c:	2264      	movs	r2, #100	; 0x64
 8002b8e:	497d      	ldr	r1, [pc, #500]	; (8002d84 <main+0x268>)
 8002b90:	487d      	ldr	r0, [pc, #500]	; (8002d88 <main+0x26c>)
 8002b92:	f007 fdc1 	bl	800a718 <HAL_UARTEx_ReceiveToIdle_IT>

    //HAL_ADCEx_Calibration_Start(&hadc1);

    HAL_ADC_Start(&hadc1);
 8002b96:	487d      	ldr	r0, [pc, #500]	; (8002d8c <main+0x270>)
 8002b98:	f002 fa60 	bl	800505c <HAL_ADC_Start>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	487c      	ldr	r0, [pc, #496]	; (8002d90 <main+0x274>)
 8002ba0:	f006 f82c 	bl	8008bfc <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002ba4:	2104      	movs	r1, #4
 8002ba6:	487b      	ldr	r0, [pc, #492]	; (8002d94 <main+0x278>)
 8002ba8:	f006 f828 	bl	8008bfc <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002bac:	2108      	movs	r1, #8
 8002bae:	4879      	ldr	r0, [pc, #484]	; (8002d94 <main+0x278>)
 8002bb0:	f006 f824 	bl	8008bfc <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002bb4:	210c      	movs	r1, #12
 8002bb6:	4877      	ldr	r0, [pc, #476]	; (8002d94 <main+0x278>)
 8002bb8:	f006 f820 	bl	8008bfc <HAL_TIM_PWM_Start>

    HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bc2:	4875      	ldr	r0, [pc, #468]	; (8002d98 <main+0x27c>)
 8002bc4:	f003 ff4c 	bl	8006a60 <HAL_GPIO_WritePin>

    atmosphere_init(&atmosphere);
 8002bc8:	4874      	ldr	r0, [pc, #464]	; (8002d9c <main+0x280>)
 8002bca:	f001 ff65 	bl	8004a98 <atmosphere_init>

    rocket_init(&rocket, "1A", &altitude, &atmosphere, &accelerate, &angle, &angle_velocity);
 8002bce:	4b74      	ldr	r3, [pc, #464]	; (8002da0 <main+0x284>)
 8002bd0:	9302      	str	r3, [sp, #8]
 8002bd2:	4b74      	ldr	r3, [pc, #464]	; (8002da4 <main+0x288>)
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	4b74      	ldr	r3, [pc, #464]	; (8002da8 <main+0x28c>)
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	4b70      	ldr	r3, [pc, #448]	; (8002d9c <main+0x280>)
 8002bdc:	4a73      	ldr	r2, [pc, #460]	; (8002dac <main+0x290>)
 8002bde:	4974      	ldr	r1, [pc, #464]	; (8002db0 <main+0x294>)
 8002be0:	4874      	ldr	r0, [pc, #464]	; (8002db4 <main+0x298>)
 8002be2:	f001 ff1c 	bl	8004a1e <rocket_init>

    if (CheckFlashData()) {
 8002be6:	f7ff fd8b 	bl	8002700 <CheckFlashData>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <main+0xdc>
  	  ReadFromFlash(&rocket); // Чтение данных из Flash, если они корректны
 8002bf0:	4870      	ldr	r0, [pc, #448]	; (8002db4 <main+0x298>)
 8002bf2:	f7ff fe25 	bl	8002840 <ReadFromFlash>
 8002bf6:	e002      	b.n	8002bfe <main+0xe2>
    }
    else {
  	  delta_init(&rocket);
 8002bf8:	486e      	ldr	r0, [pc, #440]	; (8002db4 <main+0x298>)
 8002bfa:	f001 fffe 	bl	8004bfa <delta_init>
    }

    angle_init(&angle);
 8002bfe:	4869      	ldr	r0, [pc, #420]	; (8002da4 <main+0x288>)
 8002c00:	f000 fd78 	bl	80036f4 <angle_init>

    angle_velocity_init(&angle_velocity);
 8002c04:	4866      	ldr	r0, [pc, #408]	; (8002da0 <main+0x284>)
 8002c06:	f000 fd8b 	bl	8003720 <angle_velocity_init>

    PID_init(&pid);
 8002c0a:	486b      	ldr	r0, [pc, #428]	; (8002db8 <main+0x29c>)
 8002c0c:	f000 ffdd 	bl	8003bca <PID_init>

    set_PID_coefficients(&pid, Kp, Ki, Kd);
 8002c10:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <main+0x2a0>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	4b6a      	ldr	r3, [pc, #424]	; (8002dc0 <main+0x2a4>)
 8002c18:	ed93 7a00 	vldr	s14, [r3]
 8002c1c:	4b69      	ldr	r3, [pc, #420]	; (8002dc4 <main+0x2a8>)
 8002c1e:	edd3 6a00 	vldr	s13, [r3]
 8002c22:	eeb0 1a66 	vmov.f32	s2, s13
 8002c26:	eef0 0a47 	vmov.f32	s1, s14
 8002c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2e:	4862      	ldr	r0, [pc, #392]	; (8002db8 <main+0x29c>)
 8002c30:	f001 f827 	bl	8003c82 <set_PID_coefficients>

    altitude_init(&rocket);
 8002c34:	485f      	ldr	r0, [pc, #380]	; (8002db4 <main+0x298>)
 8002c36:	f001 fa61 	bl	80040fc <altitude_init>

    rescue_system_init(TIM1);
 8002c3a:	4863      	ldr	r0, [pc, #396]	; (8002dc8 <main+0x2ac>)
 8002c3c:	f001 fee0 	bl	8004a00 <rescue_system_init>

    initGMedian(&gmedian_alt);
 8002c40:	4862      	ldr	r0, [pc, #392]	; (8002dcc <main+0x2b0>)
 8002c42:	f000 fee5 	bl	8003a10 <initGMedian>

    for(int i = 0; i < 3; i++){
 8002c46:	2300      	movs	r3, #0
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	e016      	b.n	8002c7a <main+0x15e>
  	  initGMedian(&(gmedian_a[i]));
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4a5e      	ldr	r2, [pc, #376]	; (8002dd0 <main+0x2b4>)
 8002c58:	4413      	add	r3, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fed8 	bl	8003a10 <initGMedian>
  	  initGMedian(&(gmedian_g[i]));
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4413      	add	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	4a5a      	ldr	r2, [pc, #360]	; (8002dd4 <main+0x2b8>)
 8002c6c:	4413      	add	r3, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fece 	bl	8003a10 <initGMedian>
    for(int i = 0; i < 3; i++){
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3301      	adds	r3, #1
 8002c78:	607b      	str	r3, [r7, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	dde5      	ble.n	8002c4c <main+0x130>
    }

    radio_init(&radio);
 8002c80:	4855      	ldr	r0, [pc, #340]	; (8002dd8 <main+0x2bc>)
 8002c82:	f001 fc79 	bl	8004578 <radio_init>

    HAL_TIM_Base_Start_IT(&htim3);
 8002c86:	4855      	ldr	r0, [pc, #340]	; (8002ddc <main+0x2c0>)
 8002c88:	f005 fe56 	bl	8008938 <HAL_TIM_Base_Start_IT>

    HAL_Delay(500);
 8002c8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c90:	f002 f862 	bl	8004d58 <HAL_Delay>
    HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8002c94:	2200      	movs	r2, #0
 8002c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c9a:	483f      	ldr	r0, [pc, #252]	; (8002d98 <main+0x27c>)
 8002c9c:	f003 fee0 	bl	8006a60 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8002ca0:	20c8      	movs	r0, #200	; 0xc8
 8002ca2:	f002 f859 	bl	8004d58 <HAL_Delay>
    start_blink_led(led_GPIO_Port, led_Pin, 200);
 8002ca6:	22c8      	movs	r2, #200	; 0xc8
 8002ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cac:	483a      	ldr	r0, [pc, #232]	; (8002d98 <main+0x27c>)
 8002cae:	f7ff ff01 	bl	8002ab4 <start_blink_led>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_inertia_measurement(&accelerate, &gyro);
 8002cb2:	494b      	ldr	r1, [pc, #300]	; (8002de0 <main+0x2c4>)
 8002cb4:	483c      	ldr	r0, [pc, #240]	; (8002da8 <main+0x28c>)
 8002cb6:	f001 fb5c 	bl	8004372 <get_inertia_measurement>

	  filtered_inertia_measurement(&accelerate, &gyro,gmedian_a,gmedian_g);
 8002cba:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <main+0x2b8>)
 8002cbc:	4a44      	ldr	r2, [pc, #272]	; (8002dd0 <main+0x2b4>)
 8002cbe:	4948      	ldr	r1, [pc, #288]	; (8002de0 <main+0x2c4>)
 8002cc0:	4839      	ldr	r0, [pc, #228]	; (8002da8 <main+0x28c>)
 8002cc2:	f001 fb67 	bl	8004394 <filtered_inertia_measurement>

	  get_inertia_measurement_mod(&accelerate, &gyro);
 8002cc6:	4946      	ldr	r1, [pc, #280]	; (8002de0 <main+0x2c4>)
 8002cc8:	4837      	ldr	r0, [pc, #220]	; (8002da8 <main+0x28c>)
 8002cca:	f001 fc09 	bl	80044e0 <get_inertia_measurement_mod>

	  angle_calculate(&angle, &accelerate);
 8002cce:	4936      	ldr	r1, [pc, #216]	; (8002da8 <main+0x28c>)
 8002cd0:	4834      	ldr	r0, [pc, #208]	; (8002da4 <main+0x288>)
 8002cd2:	f000 fd51 	bl	8003778 <angle_calculate>

	  angle_velocity_calculate(&angle_velocity, &gyro);
 8002cd6:	4942      	ldr	r1, [pc, #264]	; (8002de0 <main+0x2c4>)
 8002cd8:	4831      	ldr	r0, [pc, #196]	; (8002da0 <main+0x284>)
 8002cda:	f000 fe47 	bl	800396c <angle_velocity_calculate>

	  get_altitude_measurement(&rocket);
 8002cde:	4835      	ldr	r0, [pc, #212]	; (8002db4 <main+0x298>)
 8002ce0:	f001 fa9a 	bl	8004218 <get_altitude_measurement>

	  filtered_altitude_measurement(&rocket, &gmedian_alt);
 8002ce4:	4939      	ldr	r1, [pc, #228]	; (8002dcc <main+0x2b0>)
 8002ce6:	4833      	ldr	r0, [pc, #204]	; (8002db4 <main+0x298>)
 8002ce8:	f001 fac0 	bl	800426c <filtered_altitude_measurement>

	  if(flag_irq && (HAL_GetTick() - time_irq) > btn_time)
 8002cec:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <main+0x2c8>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <main+0x1ee>
 8002cf4:	f002 f824 	bl	8004d40 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <main+0x2cc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2bc8      	cmp	r3, #200	; 0xc8
 8002d02:	d902      	bls.n	8002d0a <main+0x1ee>
		  {
		  turn_servo(90);
 8002d04:	205a      	movs	r0, #90	; 0x5a
 8002d06:	f001 fe4b 	bl	80049a0 <turn_servo>
		  }

	  fly_control(&rocket);
 8002d0a:	482a      	ldr	r0, [pc, #168]	; (8002db4 <main+0x298>)
 8002d0c:	f001 fee6 	bl	8004adc <fly_control>

	  if(rocket.activate_point){
		 //turn_servo(90);
	  }
	  rocket.time = tick_to_sec(HAL_GetTick());
 8002d10:	f002 f816 	bl	8004d40 <HAL_GetTick>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fee8 	bl	8002aec <tick_to_sec>
 8002d1c:	eef0 7a40 	vmov.f32	s15, s0
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <main+0x298>)
 8002d22:	edc3 7a07 	vstr	s15, [r3, #28]
	  rocket.battery_voltage = get_mcu_voltage();
 8002d26:	f001 fbfb 	bl	8004520 <get_mcu_voltage>
 8002d2a:	eef0 7a40 	vmov.f32	s15, s0
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <main+0x298>)
 8002d30:	edc3 7a06 	vstr	s15, [r3, #24]

	  if(PID_WORK == true){
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <main+0x2d0>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <main+0x232>
		  get_PID_out(&pid, &angle, &angle_velocity, set_data);
 8002d3c:	4b2c      	ldr	r3, [pc, #176]	; (8002df0 <main+0x2d4>)
 8002d3e:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <main+0x284>)
 8002d40:	4918      	ldr	r1, [pc, #96]	; (8002da4 <main+0x288>)
 8002d42:	481d      	ldr	r0, [pc, #116]	; (8002db8 <main+0x29c>)
 8002d44:	f001 f836 	bl	8003db4 <get_PID_out>
		  //set_pwm(&pid);			//Раскоментировать при стабильном уровне питания 5Вольт
		  PID_WORK = false;
 8002d48:	4b28      	ldr	r3, [pc, #160]	; (8002dec <main+0x2d0>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
	  }

	  if(HAL_GetTick() - time > Hz_to_ms(radio.frequency_data_transmission)){
 8002d4e:	f001 fff7 	bl	8004d40 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	4b27      	ldr	r3, [pc, #156]	; (8002df4 <main+0x2d8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	1ad4      	subs	r4, r2, r3
 8002d5a:	4b1f      	ldr	r3, [pc, #124]	; (8002dd8 <main+0x2bc>)
 8002d5c:	895b      	ldrh	r3, [r3, #10]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fa74 	bl	800224c <Hz_to_ms>
 8002d64:	4603      	mov	r3, r0
 8002d66:	429c      	cmp	r4, r3
 8002d68:	d9a3      	bls.n	8002cb2 <main+0x196>
		  time = HAL_GetTick();
 8002d6a:	f001 ffe9 	bl	8004d40 <HAL_GetTick>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <main+0x2d8>)
 8002d72:	6013      	str	r3, [r2, #0]

		  transmit_data(&rocket, &radio);
 8002d74:	4918      	ldr	r1, [pc, #96]	; (8002dd8 <main+0x2bc>)
 8002d76:	480f      	ldr	r0, [pc, #60]	; (8002db4 <main+0x298>)
 8002d78:	f001 fc26 	bl	80045c8 <transmit_data>
	  get_inertia_measurement(&accelerate, &gyro);
 8002d7c:	e799      	b.n	8002cb2 <main+0x196>
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	20000560 	.word	0x20000560
 8002d88:	200006b8 	.word	0x200006b8
 8002d8c:	20000210 	.word	0x20000210
 8002d90:	200005e0 	.word	0x200005e0
 8002d94:	20000628 	.word	0x20000628
 8002d98:	40020800 	.word	0x40020800
 8002d9c:	200002dc 	.word	0x200002dc
 8002da0:	200004ac 	.word	0x200004ac
 8002da4:	20000494 	.word	0x20000494
 8002da8:	20000300 	.word	0x20000300
 8002dac:	200002f4 	.word	0x200002f4
 8002db0:	08010ea8 	.word	0x08010ea8
 8002db4:	200002ac 	.word	0x200002ac
 8002db8:	200004c4 	.word	0x200004c4
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	20000004 	.word	0x20000004
 8002dc4:	2000055c 	.word	0x2000055c
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	20000464 	.word	0x20000464
 8002dd0:	20000344 	.word	0x20000344
 8002dd4:	200003d4 	.word	0x200003d4
 8002dd8:	20000338 	.word	0x20000338
 8002ddc:	20000670 	.word	0x20000670
 8002de0:	2000031c 	.word	0x2000031c
 8002de4:	200005c4 	.word	0x200005c4
 8002de8:	200005c8 	.word	0x200005c8
 8002dec:	200005d0 	.word	0x200005d0
 8002df0:	200005d4 	.word	0x200005d4
 8002df4:	200005cc 	.word	0x200005cc

08002df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b094      	sub	sp, #80	; 0x50
 8002dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dfe:	f107 0320 	add.w	r3, r7, #32
 8002e02:	2230      	movs	r2, #48	; 0x30
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f008 fcc6 	bl	800b798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e0c:	f107 030c 	add.w	r3, r7, #12
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <SystemClock_Config+0xb4>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	4a21      	ldr	r2, [pc, #132]	; (8002eac <SystemClock_Config+0xb4>)
 8002e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2c:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <SystemClock_Config+0xb4>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <SystemClock_Config+0xb8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <SystemClock_Config+0xb8>)
 8002e42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b19      	ldr	r3, [pc, #100]	; (8002eb0 <SystemClock_Config+0xb8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e54:	2302      	movs	r3, #2
 8002e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e64:	f107 0320 	add.w	r3, r7, #32
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f004 feef 	bl	8007c4c <HAL_RCC_OscConfig>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002e74:	f000 f83a 	bl	8002eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e78:	230f      	movs	r3, #15
 8002e7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e8c:	f107 030c 	add.w	r3, r7, #12
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f005 fa02 	bl	800829c <HAL_RCC_ClockConfig>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002e9e:	f000 f825 	bl	8002eec <Error_Handler>
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3750      	adds	r7, #80	; 0x50
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40007000 	.word	0x40007000

08002eb4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == btn_Pin){
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ec4:	d10a      	bne.n	8002edc <HAL_GPIO_EXTI_Callback+0x28>
  	  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);  // сразу же отключаем прерывания на этом пине
 8002ec6:	2028      	movs	r0, #40	; 0x28
 8002ec8:	f002 fd86 	bl	80059d8 <HAL_NVIC_DisableIRQ>
  	  flag_irq = 1;							//поднимаем флажок
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0x30>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
  	  time_irq = HAL_GetTick();				//запоминаем текущее время
 8002ed2:	f001 ff35 	bl	8004d40 <HAL_GetTick>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4a03      	ldr	r2, [pc, #12]	; (8002ee8 <HAL_GPIO_EXTI_Callback+0x34>)
 8002eda:	6013      	str	r3, [r2, #0]
    }
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	200005c4 	.word	0x200005c4
 8002ee8:	200005c8 	.word	0x200005c8

08002eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef0:	b672      	cpsid	i
}
 8002ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <Error_Handler+0x8>

08002ef6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f20:	6453      	str	r3, [r2, #68]	; 0x44
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_MspInit+0x4c>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800

08002f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f60:	e7fe      	b.n	8002f60 <NMI_Handler+0x4>

08002f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f66:	e7fe      	b.n	8002f66 <HardFault_Handler+0x4>

08002f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f6c:	e7fe      	b.n	8002f6c <MemManage_Handler+0x4>

08002f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f72:	e7fe      	b.n	8002f72 <BusFault_Handler+0x4>

08002f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f78:	e7fe      	b.n	8002f78 <UsageFault_Handler+0x4>

08002f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fa8:	f001 feb6 	bl	8004d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fb4:	4802      	ldr	r0, [pc, #8]	; (8002fc0 <TIM3_IRQHandler+0x10>)
 8002fb6:	f005 ff4d 	bl	8008e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000670 	.word	0x20000670

08002fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fc8:	4802      	ldr	r0, [pc, #8]	; (8002fd4 <USART1_IRQHandler+0x10>)
 8002fca:	f007 fc0b 	bl	800a7e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200006b8 	.word	0x200006b8

08002fd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn_Pin);
 8002fdc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fe0:	f003 fd70 	bl	8006ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return 1;
 8002fec:	2301      	movs	r3, #1
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <_kill>:

int _kill(int pid, int sig)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003002:	f008 fb9f 	bl	800b744 <__errno>
 8003006:	4603      	mov	r3, r0
 8003008:	2216      	movs	r2, #22
 800300a:	601a      	str	r2, [r3, #0]
  return -1;
 800300c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <_exit>:

void _exit (int status)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ffe7 	bl	8002ff8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800302a:	e7fe      	b.n	800302a <_exit+0x12>

0800302c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	e00a      	b.n	8003054 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800303e:	f3af 8000 	nop.w
 8003042:	4601      	mov	r1, r0
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	60ba      	str	r2, [r7, #8]
 800304a:	b2ca      	uxtb	r2, r1
 800304c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	3301      	adds	r3, #1
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	dbf0      	blt.n	800303e <_read+0x12>
  }

  return len;
 800305c:	687b      	ldr	r3, [r7, #4]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e009      	b.n	800308c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	60ba      	str	r2, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3301      	adds	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	dbf1      	blt.n	8003078 <_write+0x12>
  }
  return len;
 8003094:	687b      	ldr	r3, [r7, #4]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_close>:

int _close(int file)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030c6:	605a      	str	r2, [r3, #4]
  return 0;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <_isatty>:

int _isatty(int file)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030de:	2301      	movs	r3, #1
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <_sbrk+0x5c>)
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <_sbrk+0x60>)
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <_sbrk+0x64>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <_sbrk+0x64>)
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <_sbrk+0x68>)
 8003128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <_sbrk+0x64>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	429a      	cmp	r2, r3
 8003136:	d207      	bcs.n	8003148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003138:	f008 fb04 	bl	800b744 <__errno>
 800313c:	4603      	mov	r3, r0
 800313e:	220c      	movs	r2, #12
 8003140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	e009      	b.n	800315c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <_sbrk+0x64>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	4a05      	ldr	r2, [pc, #20]	; (800316c <_sbrk+0x64>)
 8003158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800315a:	68fb      	ldr	r3, [r7, #12]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20020000 	.word	0x20020000
 8003168:	00000400 	.word	0x00000400
 800316c:	200005dc 	.word	0x200005dc
 8003170:	20000870 	.word	0x20000870

08003174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <SystemInit+0x20>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	4a05      	ldr	r2, [pc, #20]	; (8003194 <SystemInit+0x20>)
 8003180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b096      	sub	sp, #88	; 0x58
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800319e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	611a      	str	r2, [r3, #16]
 80031c6:	615a      	str	r2, [r3, #20]
 80031c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031ca:	1d3b      	adds	r3, r7, #4
 80031cc:	2220      	movs	r2, #32
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f008 fae1 	bl	800b798 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031d6:	4b3e      	ldr	r3, [pc, #248]	; (80032d0 <MX_TIM1_Init+0x138>)
 80031d8:	4a3e      	ldr	r2, [pc, #248]	; (80032d4 <MX_TIM1_Init+0x13c>)
 80031da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80031dc:	4b3c      	ldr	r3, [pc, #240]	; (80032d0 <MX_TIM1_Init+0x138>)
 80031de:	220f      	movs	r2, #15
 80031e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e2:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <MX_TIM1_Init+0x138>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <MX_TIM1_Init+0x138>)
 80031ea:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80031ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f0:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <MX_TIM1_Init+0x138>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031f6:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <MX_TIM1_Init+0x138>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031fc:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <MX_TIM1_Init+0x138>)
 80031fe:	2280      	movs	r2, #128	; 0x80
 8003200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003202:	4833      	ldr	r0, [pc, #204]	; (80032d0 <MX_TIM1_Init+0x138>)
 8003204:	f005 fad2 	bl	80087ac <HAL_TIM_Base_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800320e:	f7ff fe6d 	bl	8002eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003216:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003218:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800321c:	4619      	mov	r1, r3
 800321e:	482c      	ldr	r0, [pc, #176]	; (80032d0 <MX_TIM1_Init+0x138>)
 8003220:	f006 f8c6 	bl	80093b0 <HAL_TIM_ConfigClockSource>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800322a:	f7ff fe5f 	bl	8002eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800322e:	4828      	ldr	r0, [pc, #160]	; (80032d0 <MX_TIM1_Init+0x138>)
 8003230:	f005 fc14 	bl	8008a5c <HAL_TIM_PWM_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800323a:	f7ff fe57 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003246:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800324a:	4619      	mov	r1, r3
 800324c:	4820      	ldr	r0, [pc, #128]	; (80032d0 <MX_TIM1_Init+0x138>)
 800324e:	f006 ff83 	bl	800a158 <HAL_TIMEx_MasterConfigSynchronization>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003258:	f7ff fe48 	bl	8002eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800325c:	2360      	movs	r3, #96	; 0x60
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003264:	2300      	movs	r3, #0
 8003266:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003268:	2300      	movs	r3, #0
 800326a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800326c:	2300      	movs	r3, #0
 800326e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003270:	2300      	movs	r3, #0
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003274:	2300      	movs	r3, #0
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800327c:	2200      	movs	r2, #0
 800327e:	4619      	mov	r1, r3
 8003280:	4813      	ldr	r0, [pc, #76]	; (80032d0 <MX_TIM1_Init+0x138>)
 8003282:	f005 feef 	bl	8009064 <HAL_TIM_PWM_ConfigChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800328c:	f7ff fe2e 	bl	8002eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003290:	2300      	movs	r3, #0
 8003292:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032aa:	2300      	movs	r3, #0
 80032ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032ae:	1d3b      	adds	r3, r7, #4
 80032b0:	4619      	mov	r1, r3
 80032b2:	4807      	ldr	r0, [pc, #28]	; (80032d0 <MX_TIM1_Init+0x138>)
 80032b4:	f007 f80e 	bl	800a2d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80032be:	f7ff fe15 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80032c2:	4803      	ldr	r0, [pc, #12]	; (80032d0 <MX_TIM1_Init+0x138>)
 80032c4:	f000 f93e 	bl	8003544 <HAL_TIM_MspPostInit>

}
 80032c8:	bf00      	nop
 80032ca:	3758      	adds	r7, #88	; 0x58
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	200005e0 	.word	0x200005e0
 80032d4:	40010000 	.word	0x40010000

080032d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08e      	sub	sp, #56	; 0x38
 80032dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ec:	f107 0320 	add.w	r3, r7, #32
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032f6:	1d3b      	adds	r3, r7, #4
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	611a      	str	r2, [r3, #16]
 8003304:	615a      	str	r2, [r3, #20]
 8003306:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003308:	4b3d      	ldr	r3, [pc, #244]	; (8003400 <MX_TIM2_Init+0x128>)
 800330a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800330e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8003310:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <MX_TIM2_Init+0x128>)
 8003312:	220f      	movs	r2, #15
 8003314:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003316:	4b3a      	ldr	r3, [pc, #232]	; (8003400 <MX_TIM2_Init+0x128>)
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800331c:	4b38      	ldr	r3, [pc, #224]	; (8003400 <MX_TIM2_Init+0x128>)
 800331e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003322:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <MX_TIM2_Init+0x128>)
 8003326:	2200      	movs	r2, #0
 8003328:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800332a:	4b35      	ldr	r3, [pc, #212]	; (8003400 <MX_TIM2_Init+0x128>)
 800332c:	2280      	movs	r2, #128	; 0x80
 800332e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003330:	4833      	ldr	r0, [pc, #204]	; (8003400 <MX_TIM2_Init+0x128>)
 8003332:	f005 fa3b 	bl	80087ac <HAL_TIM_Base_Init>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800333c:	f7ff fdd6 	bl	8002eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003344:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800334a:	4619      	mov	r1, r3
 800334c:	482c      	ldr	r0, [pc, #176]	; (8003400 <MX_TIM2_Init+0x128>)
 800334e:	f006 f82f 	bl	80093b0 <HAL_TIM_ConfigClockSource>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003358:	f7ff fdc8 	bl	8002eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800335c:	4828      	ldr	r0, [pc, #160]	; (8003400 <MX_TIM2_Init+0x128>)
 800335e:	f005 fb7d 	bl	8008a5c <HAL_TIM_PWM_Init>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003368:	f7ff fdc0 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800336c:	2300      	movs	r3, #0
 800336e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003374:	f107 0320 	add.w	r3, r7, #32
 8003378:	4619      	mov	r1, r3
 800337a:	4821      	ldr	r0, [pc, #132]	; (8003400 <MX_TIM2_Init+0x128>)
 800337c:	f006 feec 	bl	800a158 <HAL_TIMEx_MasterConfigSynchronization>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003386:	f7ff fdb1 	bl	8002eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800338a:	2360      	movs	r3, #96	; 0x60
 800338c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800339a:	1d3b      	adds	r3, r7, #4
 800339c:	2200      	movs	r2, #0
 800339e:	4619      	mov	r1, r3
 80033a0:	4817      	ldr	r0, [pc, #92]	; (8003400 <MX_TIM2_Init+0x128>)
 80033a2:	f005 fe5f 	bl	8009064 <HAL_TIM_PWM_ConfigChannel>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80033ac:	f7ff fd9e 	bl	8002eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	2204      	movs	r2, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	4812      	ldr	r0, [pc, #72]	; (8003400 <MX_TIM2_Init+0x128>)
 80033b8:	f005 fe54 	bl	8009064 <HAL_TIM_PWM_ConfigChannel>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80033c2:	f7ff fd93 	bl	8002eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	2208      	movs	r2, #8
 80033ca:	4619      	mov	r1, r3
 80033cc:	480c      	ldr	r0, [pc, #48]	; (8003400 <MX_TIM2_Init+0x128>)
 80033ce:	f005 fe49 	bl	8009064 <HAL_TIM_PWM_ConfigChannel>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80033d8:	f7ff fd88 	bl	8002eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	220c      	movs	r2, #12
 80033e0:	4619      	mov	r1, r3
 80033e2:	4807      	ldr	r0, [pc, #28]	; (8003400 <MX_TIM2_Init+0x128>)
 80033e4:	f005 fe3e 	bl	8009064 <HAL_TIM_PWM_ConfigChannel>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 80033ee:	f7ff fd7d 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80033f2:	4803      	ldr	r0, [pc, #12]	; (8003400 <MX_TIM2_Init+0x128>)
 80033f4:	f000 f8a6 	bl	8003544 <HAL_TIM_MspPostInit>

}
 80033f8:	bf00      	nop
 80033fa:	3738      	adds	r7, #56	; 0x38
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000628 	.word	0x20000628

08003404 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800340a:	f107 0308 	add.w	r3, r7, #8
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	605a      	str	r2, [r3, #4]
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003418:	463b      	mov	r3, r7
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <MX_TIM3_Init+0x94>)
 8003422:	4a1e      	ldr	r2, [pc, #120]	; (800349c <MX_TIM3_Init+0x98>)
 8003424:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8003426:	4b1c      	ldr	r3, [pc, #112]	; (8003498 <MX_TIM3_Init+0x94>)
 8003428:	220f      	movs	r2, #15
 800342a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <MX_TIM3_Init+0x94>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003432:	4b19      	ldr	r3, [pc, #100]	; (8003498 <MX_TIM3_Init+0x94>)
 8003434:	f242 720f 	movw	r2, #9999	; 0x270f
 8003438:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800343a:	4b17      	ldr	r3, [pc, #92]	; (8003498 <MX_TIM3_Init+0x94>)
 800343c:	2200      	movs	r2, #0
 800343e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003440:	4b15      	ldr	r3, [pc, #84]	; (8003498 <MX_TIM3_Init+0x94>)
 8003442:	2280      	movs	r2, #128	; 0x80
 8003444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003446:	4814      	ldr	r0, [pc, #80]	; (8003498 <MX_TIM3_Init+0x94>)
 8003448:	f005 f9b0 	bl	80087ac <HAL_TIM_Base_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003452:	f7ff fd4b 	bl	8002eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800345a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800345c:	f107 0308 	add.w	r3, r7, #8
 8003460:	4619      	mov	r1, r3
 8003462:	480d      	ldr	r0, [pc, #52]	; (8003498 <MX_TIM3_Init+0x94>)
 8003464:	f005 ffa4 	bl	80093b0 <HAL_TIM_ConfigClockSource>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800346e:	f7ff fd3d 	bl	8002eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800347a:	463b      	mov	r3, r7
 800347c:	4619      	mov	r1, r3
 800347e:	4806      	ldr	r0, [pc, #24]	; (8003498 <MX_TIM3_Init+0x94>)
 8003480:	f006 fe6a 	bl	800a158 <HAL_TIMEx_MasterConfigSynchronization>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800348a:	f7ff fd2f 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800348e:	bf00      	nop
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000670 	.word	0x20000670
 800349c:	40000400 	.word	0x40000400

080034a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a22      	ldr	r2, [pc, #136]	; (8003538 <HAL_TIM_Base_MspInit+0x98>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	4b21      	ldr	r3, [pc, #132]	; (800353c <HAL_TIM_Base_MspInit+0x9c>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	4a20      	ldr	r2, [pc, #128]	; (800353c <HAL_TIM_Base_MspInit+0x9c>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6453      	str	r3, [r2, #68]	; 0x44
 80034c2:	4b1e      	ldr	r3, [pc, #120]	; (800353c <HAL_TIM_Base_MspInit+0x9c>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80034ce:	e02e      	b.n	800352e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d8:	d10e      	bne.n	80034f8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	4b17      	ldr	r3, [pc, #92]	; (800353c <HAL_TIM_Base_MspInit+0x9c>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	4a16      	ldr	r2, [pc, #88]	; (800353c <HAL_TIM_Base_MspInit+0x9c>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ea:	4b14      	ldr	r3, [pc, #80]	; (800353c <HAL_TIM_Base_MspInit+0x9c>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
}
 80034f6:	e01a      	b.n	800352e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a10      	ldr	r2, [pc, #64]	; (8003540 <HAL_TIM_Base_MspInit+0xa0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d115      	bne.n	800352e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	4b0d      	ldr	r3, [pc, #52]	; (800353c <HAL_TIM_Base_MspInit+0x9c>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a0c      	ldr	r2, [pc, #48]	; (800353c <HAL_TIM_Base_MspInit+0x9c>)
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_TIM_Base_MspInit+0x9c>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800351e:	2200      	movs	r2, #0
 8003520:	2100      	movs	r1, #0
 8003522:	201d      	movs	r0, #29
 8003524:	f002 fa14 	bl	8005950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003528:	201d      	movs	r0, #29
 800352a:	f002 fa3d 	bl	80059a8 <HAL_NVIC_EnableIRQ>
}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40010000 	.word	0x40010000
 800353c:	40023800 	.word	0x40023800
 8003540:	40000400 	.word	0x40000400

08003544 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a24      	ldr	r2, [pc, #144]	; (80035f4 <HAL_TIM_MspPostInit+0xb0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d11f      	bne.n	80035a6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	4b23      	ldr	r3, [pc, #140]	; (80035f8 <HAL_TIM_MspPostInit+0xb4>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <HAL_TIM_MspPostInit+0xb4>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6313      	str	r3, [r2, #48]	; 0x30
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <HAL_TIM_MspPostInit+0xb4>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003588:	2302      	movs	r3, #2
 800358a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003590:	2300      	movs	r3, #0
 8003592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003594:	2301      	movs	r3, #1
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003598:	f107 0314 	add.w	r3, r7, #20
 800359c:	4619      	mov	r1, r3
 800359e:	4817      	ldr	r0, [pc, #92]	; (80035fc <HAL_TIM_MspPostInit+0xb8>)
 80035a0:	f002 fe9c 	bl	80062dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80035a4:	e022      	b.n	80035ec <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ae:	d11d      	bne.n	80035ec <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_TIM_MspPostInit+0xb4>)
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <HAL_TIM_MspPostInit+0xb4>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6313      	str	r3, [r2, #48]	; 0x30
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <HAL_TIM_MspPostInit+0xb4>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80035cc:	230f      	movs	r3, #15
 80035ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d0:	2302      	movs	r3, #2
 80035d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d8:	2300      	movs	r3, #0
 80035da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035dc:	2301      	movs	r3, #1
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e0:	f107 0314 	add.w	r3, r7, #20
 80035e4:	4619      	mov	r1, r3
 80035e6:	4805      	ldr	r0, [pc, #20]	; (80035fc <HAL_TIM_MspPostInit+0xb8>)
 80035e8:	f002 fe78 	bl	80062dc <HAL_GPIO_Init>
}
 80035ec:	bf00      	nop
 80035ee:	3728      	adds	r7, #40	; 0x28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40010000 	.word	0x40010000
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40020000 	.word	0x40020000

08003600 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <MX_USART1_UART_Init+0x4c>)
 8003606:	4a12      	ldr	r2, [pc, #72]	; (8003650 <MX_USART1_UART_Init+0x50>)
 8003608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800360a:	4b10      	ldr	r3, [pc, #64]	; (800364c <MX_USART1_UART_Init+0x4c>)
 800360c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003612:	4b0e      	ldr	r3, [pc, #56]	; (800364c <MX_USART1_UART_Init+0x4c>)
 8003614:	2200      	movs	r2, #0
 8003616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003618:	4b0c      	ldr	r3, [pc, #48]	; (800364c <MX_USART1_UART_Init+0x4c>)
 800361a:	2200      	movs	r2, #0
 800361c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <MX_USART1_UART_Init+0x4c>)
 8003620:	2200      	movs	r2, #0
 8003622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <MX_USART1_UART_Init+0x4c>)
 8003626:	220c      	movs	r2, #12
 8003628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <MX_USART1_UART_Init+0x4c>)
 800362c:	2200      	movs	r2, #0
 800362e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <MX_USART1_UART_Init+0x4c>)
 8003632:	2200      	movs	r2, #0
 8003634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003636:	4805      	ldr	r0, [pc, #20]	; (800364c <MX_USART1_UART_Init+0x4c>)
 8003638:	f006 ff26 	bl	800a488 <HAL_UART_Init>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003642:	f7ff fc53 	bl	8002eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	200006b8 	.word	0x200006b8
 8003650:	40011000 	.word	0x40011000

08003654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <HAL_UART_MspInit+0x94>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d134      	bne.n	80036e0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	4b1c      	ldr	r3, [pc, #112]	; (80036ec <HAL_UART_MspInit+0x98>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	4a1b      	ldr	r2, [pc, #108]	; (80036ec <HAL_UART_MspInit+0x98>)
 8003680:	f043 0310 	orr.w	r3, r3, #16
 8003684:	6453      	str	r3, [r2, #68]	; 0x44
 8003686:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_UART_MspInit+0x98>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <HAL_UART_MspInit+0x98>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4a14      	ldr	r2, [pc, #80]	; (80036ec <HAL_UART_MspInit+0x98>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6313      	str	r3, [r2, #48]	; 0x30
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_UART_MspInit+0x98>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80036b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b4:	2302      	movs	r3, #2
 80036b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036bc:	2303      	movs	r3, #3
 80036be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036c0:	2307      	movs	r3, #7
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	4619      	mov	r1, r3
 80036ca:	4809      	ldr	r0, [pc, #36]	; (80036f0 <HAL_UART_MspInit+0x9c>)
 80036cc:	f002 fe06 	bl	80062dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036d0:	2200      	movs	r2, #0
 80036d2:	2100      	movs	r1, #0
 80036d4:	2025      	movs	r0, #37	; 0x25
 80036d6:	f002 f93b 	bl	8005950 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036da:	2025      	movs	r0, #37	; 0x25
 80036dc:	f002 f964 	bl	80059a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80036e0:	bf00      	nop
 80036e2:	3728      	adds	r7, #40	; 0x28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40011000 	.word	0x40011000
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020000 	.word	0x40020000

080036f4 <angle_init>:
#include "math/angle.h"
#include <stdint.h>
#include <stdio.h>
#include <math.h>

void angle_init(struct Angle* angle){
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
	angle->pitch = 0;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
	angle->roll = 0;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
	angle->yaw = 0;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <angle_velocity_init>:

void angle_velocity_init(struct Angle_velocity* angle_velocity){
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	angle_velocity->d_pitch = 0;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
	angle_velocity->d_roll = 0;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	605a      	str	r2, [r3, #4]
	angle_velocity->d_yaw = 0;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < dimension_in; i++){
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e00b      	b.n	800375e <angle_velocity_init+0x3e>
		angle_velocity->d_angle[i] = 0;
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3302      	adds	r3, #2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	3304      	adds	r3, #4
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < dimension_in; i++){
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3301      	adds	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b01      	cmp	r3, #1
 8003762:	ddf0      	ble.n	8003746 <angle_velocity_init+0x26>
	}
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	0000      	movs	r0, r0
 8003774:	0000      	movs	r0, r0
	...

08003778 <angle_calculate>:

void angle_calculate(struct Angle* angle, struct Accelerate* accelerate){
 8003778:	b5b0      	push	{r4, r5, r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]

	float Bx = accelerate->destination_a_f[0];
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	617b      	str	r3, [r7, #20]
	float By = accelerate->destination_a_f[1];
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	613b      	str	r3, [r7, #16]
	float Bz = accelerate->destination_a_f[2];
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	60fb      	str	r3, [r7, #12]

	angle->pitch = atan2(-Bx, sqrt(By * By + Bz * Bz)) / M_PI * 180;
 8003794:	edd7 7a05 	vldr	s15, [r7, #20]
 8003798:	eef1 7a67 	vneg.f32	s15, s15
 800379c:	ee17 3a90 	vmov	r3, s15
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fc fee9 	bl	8000578 <__aeabi_f2d>
 80037a6:	4604      	mov	r4, r0
 80037a8:	460d      	mov	r5, r1
 80037aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80037ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80037b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80037b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037be:	ee17 0a90 	vmov	r0, s15
 80037c2:	f7fc fed9 	bl	8000578 <__aeabi_f2d>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	ec43 2b10 	vmov	d0, r2, r3
 80037ce:	f00c fda1 	bl	8010314 <sqrt>
 80037d2:	eeb0 7a40 	vmov.f32	s14, s0
 80037d6:	eef0 7a60 	vmov.f32	s15, s1
 80037da:	eeb0 1a47 	vmov.f32	s2, s14
 80037de:	eef0 1a67 	vmov.f32	s3, s15
 80037e2:	ec45 4b10 	vmov	d0, r4, r5
 80037e6:	f00c fd55 	bl	8010294 <atan2>
 80037ea:	ec51 0b10 	vmov	r0, r1, d0
 80037ee:	a35c      	add	r3, pc, #368	; (adr r3, 8003960 <angle_calculate+0x1e8>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f7fd f842 	bl	800087c <__aeabi_ddiv>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	4b58      	ldr	r3, [pc, #352]	; (8003968 <angle_calculate+0x1f0>)
 8003806:	f7fc ff0f 	bl	8000628 <__aeabi_dmul>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4610      	mov	r0, r2
 8003810:	4619      	mov	r1, r3
 8003812:	f7fd fa01 	bl	8000c18 <__aeabi_d2f>
 8003816:	4602      	mov	r2, r0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	601a      	str	r2, [r3, #0]
	angle->roll = atan2(By, Bz) / M_PI * 180;
 800381c:	6938      	ldr	r0, [r7, #16]
 800381e:	f7fc feab 	bl	8000578 <__aeabi_f2d>
 8003822:	4604      	mov	r4, r0
 8003824:	460d      	mov	r5, r1
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f7fc fea6 	bl	8000578 <__aeabi_f2d>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	ec43 2b11 	vmov	d1, r2, r3
 8003834:	ec45 4b10 	vmov	d0, r4, r5
 8003838:	f00c fd2c 	bl	8010294 <atan2>
 800383c:	ec51 0b10 	vmov	r0, r1, d0
 8003840:	a347      	add	r3, pc, #284	; (adr r3, 8003960 <angle_calculate+0x1e8>)
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	f7fd f819 	bl	800087c <__aeabi_ddiv>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	4b44      	ldr	r3, [pc, #272]	; (8003968 <angle_calculate+0x1f0>)
 8003858:	f7fc fee6 	bl	8000628 <__aeabi_dmul>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	f7fd f9d8 	bl	8000c18 <__aeabi_d2f>
 8003868:	4602      	mov	r2, r0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	605a      	str	r2, [r3, #4]
	angle->yaw = 0;//надо реализовать
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	609a      	str	r2, [r3, #8]

	angle->angle[0] = atan2(-Bx, sqrt(By * By + Bz * Bz)) / M_PI * 180;
 8003876:	edd7 7a05 	vldr	s15, [r7, #20]
 800387a:	eef1 7a67 	vneg.f32	s15, s15
 800387e:	ee17 3a90 	vmov	r3, s15
 8003882:	4618      	mov	r0, r3
 8003884:	f7fc fe78 	bl	8000578 <__aeabi_f2d>
 8003888:	4604      	mov	r4, r0
 800388a:	460d      	mov	r5, r1
 800388c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003890:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003894:	edd7 7a03 	vldr	s15, [r7, #12]
 8003898:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800389c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038a0:	ee17 0a90 	vmov	r0, s15
 80038a4:	f7fc fe68 	bl	8000578 <__aeabi_f2d>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	ec43 2b10 	vmov	d0, r2, r3
 80038b0:	f00c fd30 	bl	8010314 <sqrt>
 80038b4:	eeb0 7a40 	vmov.f32	s14, s0
 80038b8:	eef0 7a60 	vmov.f32	s15, s1
 80038bc:	eeb0 1a47 	vmov.f32	s2, s14
 80038c0:	eef0 1a67 	vmov.f32	s3, s15
 80038c4:	ec45 4b10 	vmov	d0, r4, r5
 80038c8:	f00c fce4 	bl	8010294 <atan2>
 80038cc:	ec51 0b10 	vmov	r0, r1, d0
 80038d0:	a323      	add	r3, pc, #140	; (adr r3, 8003960 <angle_calculate+0x1e8>)
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	f7fc ffd1 	bl	800087c <__aeabi_ddiv>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4610      	mov	r0, r2
 80038e0:	4619      	mov	r1, r3
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	4b20      	ldr	r3, [pc, #128]	; (8003968 <angle_calculate+0x1f0>)
 80038e8:	f7fc fe9e 	bl	8000628 <__aeabi_dmul>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	f7fd f990 	bl	8000c18 <__aeabi_d2f>
 80038f8:	4602      	mov	r2, r0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	60da      	str	r2, [r3, #12]
	angle->angle[1] = atan2(By, Bz) / M_PI * 180;
 80038fe:	6938      	ldr	r0, [r7, #16]
 8003900:	f7fc fe3a 	bl	8000578 <__aeabi_f2d>
 8003904:	4604      	mov	r4, r0
 8003906:	460d      	mov	r5, r1
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7fc fe35 	bl	8000578 <__aeabi_f2d>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	ec43 2b11 	vmov	d1, r2, r3
 8003916:	ec45 4b10 	vmov	d0, r4, r5
 800391a:	f00c fcbb 	bl	8010294 <atan2>
 800391e:	ec51 0b10 	vmov	r0, r1, d0
 8003922:	a30f      	add	r3, pc, #60	; (adr r3, 8003960 <angle_calculate+0x1e8>)
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f7fc ffa8 	bl	800087c <__aeabi_ddiv>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4610      	mov	r0, r2
 8003932:	4619      	mov	r1, r3
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <angle_calculate+0x1f0>)
 800393a:	f7fc fe75 	bl	8000628 <__aeabi_dmul>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4610      	mov	r0, r2
 8003944:	4619      	mov	r1, r3
 8003946:	f7fd f967 	bl	8000c18 <__aeabi_d2f>
 800394a:	4602      	mov	r2, r0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	611a      	str	r2, [r3, #16]
	angle->angle[2] = 0;//надо реализовать
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	615a      	str	r2, [r3, #20]
}
 8003958:	bf00      	nop
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bdb0      	pop	{r4, r5, r7, pc}
 8003960:	54442d18 	.word	0x54442d18
 8003964:	400921fb 	.word	0x400921fb
 8003968:	40668000 	.word	0x40668000

0800396c <angle_velocity_calculate>:


void angle_velocity_calculate(struct Angle_velocity* angle_velocity, struct Gyro* gyro){
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]

	angle_velocity->d_pitch = gyro->destination_g_f[0];
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	601a      	str	r2, [r3, #0]
	angle_velocity->d_roll = gyro->destination_g_f[1];
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	605a      	str	r2, [r3, #4]
	angle_velocity->d_yaw = gyro->destination_g_f[2];
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	609a      	str	r2, [r3, #8]

	for(int i = 0; i < 3; i++){
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e010      	b.n	80039b6 <angle_velocity_calculate+0x4a>
		angle_velocity->d_angle[i] = gyro->destination_g_f[i];
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3302      	adds	r3, #2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	3304      	adds	r3, #4
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3302      	adds	r3, #2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3304      	adds	r3, #4
 80039ae:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3301      	adds	r3, #1
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	ddeb      	ble.n	8003994 <angle_velocity_calculate+0x28>
	}
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <average_filter>:

float k_gyro = 0.09;															//коэфицент фильтра скользящего среднего для данных с гироскопа

float k_alt = 0.09;																//коэфицент фильтра скользящего среднего для данных с барометра

float average_filter(float newVal, float filVal, float k){
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	ed87 0a03 	vstr	s0, [r7, #12]
 80039d4:	edc7 0a02 	vstr	s1, [r7, #8]
 80039d8:	ed87 1a01 	vstr	s2, [r7, #4]
	filVal += (newVal - filVal)*k;
 80039dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80039e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80039e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80039ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80039f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f8:	edc7 7a02 	vstr	s15, [r7, #8]
	return filVal;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	ee07 3a90 	vmov	s15, r3
}
 8003a02:	eeb0 0a67 	vmov.f32	s0, s15
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <initGMedian>:


void initGMedian(struct GMedian* gmedian) {
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
    gmedian->count = 0;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    gmedian->destination_f_m = 0;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <filtered>:

TYPE filtered(struct GMedian* gmedian, TYPE newVal) {
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	ed87 0a00 	vstr	s0, [r7]
    gmedian->buffer[gmedian->count] = newVal;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	601a      	str	r2, [r3, #0]

    if ((gmedian->count < MAX_SIZE - 1) && (gmedian->buffer[gmedian->count] > gmedian->buffer[gmedian->count + 1])) {
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d84b      	bhi.n	8003af2 <filtered+0xbe>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	ed93 7a00 	vldr	s14, [r3]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a70:	3301      	adds	r3, #1
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	edd3 7a00 	vldr	s15, [r3]
 8003a7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a84:	dd35      	ble.n	8003af2 <filtered+0xbe>
        for (int i = gmedian->count; i < MAX_SIZE - 1; i++) {
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e02c      	b.n	8003aea <filtered+0xb6>
            if (gmedian->buffer[i] > gmedian->buffer[i + 1]) {
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	ed93 7a00 	vldr	s14, [r3]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	edd3 7a00 	vldr	s15, [r3]
 8003aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab2:	dd17      	ble.n	8003ae4 <filtered+0xb0>
                TYPE buff = gmedian->buffer[i];
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60fb      	str	r3, [r7, #12]
                gmedian->buffer[i] = gmedian->buffer[i + 1];
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	601a      	str	r2, [r3, #0]
                gmedian->buffer[i + 1] = buff;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	601a      	str	r2, [r3, #0]
        for (int i = gmedian->count; i < MAX_SIZE - 1; i++) {
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	ddcf      	ble.n	8003a90 <filtered+0x5c>
 8003af0:	e04f      	b.n	8003b92 <filtered+0x15e>
            }
        }
    } else {
        if ((gmedian->count > 0) && (gmedian->buffer[gmedian->count - 1] > gmedian->buffer[gmedian->count])) {
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d04a      	beq.n	8003b92 <filtered+0x15e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b02:	3b01      	subs	r3, #1
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	ed93 7a00 	vldr	s14, [r3]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b26:	dd34      	ble.n	8003b92 <filtered+0x15e>
            for (int i = gmedian->count; i > 0; i--) {
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	e02c      	b.n	8003b8c <filtered+0x158>
                if (gmedian->buffer[i] < gmedian->buffer[i - 1]) {
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	ed93 7a00 	vldr	s14, [r3]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b54:	d517      	bpl.n	8003b86 <filtered+0x152>
                    TYPE buff = gmedian->buffer[i];
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60bb      	str	r3, [r7, #8]
                    gmedian->buffer[i] = gmedian->buffer[i - 1];
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	601a      	str	r2, [r3, #0]
                    gmedian->buffer[i - 1] = buff;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	601a      	str	r2, [r3, #0]
            for (int i = gmedian->count; i > 0; i--) {
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	613b      	str	r3, [r7, #16]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	dccf      	bgt.n	8003b32 <filtered+0xfe>
                }
            }
        }
    }

    if (++gmedian->count >= MAX_SIZE) {
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b98:	3301      	adds	r3, #1
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ba8:	2b09      	cmp	r3, #9
 8003baa:	d903      	bls.n	8003bb4 <filtered+0x180>
        gmedian->count = 0;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }

    return gmedian->buffer[MAX_SIZE / 2];
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	ee07 3a90 	vmov	s15, r3
}
 8003bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <PID_init>:
#include "math/pid.h"


void PID_init(struct PID* pid){
 8003bca:	b480      	push	{r7}
 8003bcc:	b087      	sub	sp, #28
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < dimension_in; i++){
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e02b      	b.n	8003c30 <PID_init+0x66>
		for(int j = 0; j < dimension_out; j++){
 8003bd8:	2300      	movs	r3, #0
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	e022      	b.n	8003c24 <PID_init+0x5a>
			pid->kp[i][j] = 0;
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	0059      	lsls	r1, r3, #1
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	440b      	add	r3, r1
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
			pid->ki[i][j] = 0;
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	0059      	lsls	r1, r3, #1
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
			pid->kd[i][j] = 0;
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	0059      	lsls	r1, r3, #1
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	440b      	add	r3, r1
 8003c12:	3310      	adds	r3, #16
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < dimension_out; j++){
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	3301      	adds	r3, #1
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	ddd9      	ble.n	8003bde <PID_init+0x14>
	for(int i = 0; i < dimension_in; i++){
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	ddd0      	ble.n	8003bd8 <PID_init+0xe>
		}
	}
	for(int j = 0; j < dimension_out; j++){
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	e018      	b.n	8003c6e <PID_init+0xa4>
		pid->prev_data[j] = 0;
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	331a      	adds	r3, #26
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
		pid->error[j] = 0;
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	331c      	adds	r3, #28
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
		pid->out[j] = 0;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	3248      	adds	r2, #72	; 0x48
 8003c62:	2100      	movs	r1, #0
 8003c64:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int j = 0; j < dimension_out; j++){
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	dde3      	ble.n	8003c3c <PID_init+0x72>
	}
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <set_PID_coefficients>:
/*
 * функция set_PID_coefficients написана для регуятора не корректирующего вращение ракеты
 * Также считается, что ракета симметрична
 * и коэффиценты по одной горизонтальной оси полность совпадают с коэффицентами по другой горизонтальной оси
 */
void set_PID_coefficients(struct PID* pid,float Kp, float Ki, float Kd){
 8003c82:	b480      	push	{r7}
 8003c84:	b087      	sub	sp, #28
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c8e:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c92:	ed87 1a00 	vstr	s2, [r7]

	for(int i = 0; i < dimension_out; i++){
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	e080      	b.n	8003d9e <set_PID_coefficients+0x11c>
			for(int j = 0; j < dimension_in; j++){
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	e077      	b.n	8003d92 <set_PID_coefficients+0x110>
				if((i + j) % 2 != 0){
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d020      	beq.n	8003cf2 <set_PID_coefficients+0x70>
					pid->kp[i][j] = 0;
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	0059      	lsls	r1, r3, #1
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	440b      	add	r3, r1
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
					pid->ki[i][j] = 0;
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	0059      	lsls	r1, r3, #1
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	440b      	add	r3, r1
 8003cce:	3308      	adds	r3, #8
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
					pid->kd[i][j] = 0;
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	0059      	lsls	r1, r3, #1
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	440b      	add	r3, r1
 8003ce4:	3310      	adds	r3, #16
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	e04c      	b.n	8003d8c <set_PID_coefficients+0x10a>
				} else {
					if(i == 0 || i == 1){
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <set_PID_coefficients+0x7c>
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d11d      	bne.n	8003d3a <set_PID_coefficients+0xb8>
						pid->kp[i][j] = Kp;
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	0059      	lsls	r1, r3, #1
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	440b      	add	r3, r1
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	601a      	str	r2, [r3, #0]
						pid->ki[i][j] = Ki;
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	0059      	lsls	r1, r3, #1
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	440b      	add	r3, r1
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	601a      	str	r2, [r3, #0]
						pid->kd[i][j] = Kd;
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	0059      	lsls	r1, r3, #1
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	440b      	add	r3, r1
 8003d2e:	3310      	adds	r3, #16
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e028      	b.n	8003d8c <set_PID_coefficients+0x10a>
					} else {
						pid->kp[i][j] = -Kp;
 8003d3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d3e:	eef1 7a67 	vneg.f32	s15, s15
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	0059      	lsls	r1, r3, #1
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	440b      	add	r3, r1
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	edc3 7a00 	vstr	s15, [r3]
						pid->ki[i][j] = -Ki;
 8003d54:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d58:	eef1 7a67 	vneg.f32	s15, s15
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	0059      	lsls	r1, r3, #1
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	440b      	add	r3, r1
 8003d66:	3308      	adds	r3, #8
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	edc3 7a00 	vstr	s15, [r3]
						pid->kd[i][j] = -Kd;
 8003d70:	edd7 7a00 	vldr	s15, [r7]
 8003d74:	eef1 7a67 	vneg.f32	s15, s15
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	0059      	lsls	r1, r3, #1
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	440b      	add	r3, r1
 8003d82:	3310      	adds	r3, #16
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	edc3 7a00 	vstr	s15, [r3]
			for(int j = 0; j < dimension_in; j++){
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	dd84      	ble.n	8003ca2 <set_PID_coefficients+0x20>
	for(int i = 0; i < dimension_out; i++){
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	f77f af7b 	ble.w	8003c9c <set_PID_coefficients+0x1a>
					}
				}
			}
		}
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <get_PID_out>:


void get_PID_out(struct PID* pid, struct Angle* angle, struct Angle_velocity* angle_velocity, float set_data[dimension_in]){
 8003db4:	b480      	push	{r7}
 8003db6:	b095      	sub	sp, #84	; 0x54
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]

	int16_t protect_out[dimension_out] = {0,};
 8003dc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]

	int16_t P[dimension_in] = {0,};
 8003dcc:	2300      	movs	r3, #0
 8003dce:	633b      	str	r3, [r7, #48]	; 0x30

	int16_t I[dimension_in] = {0,};
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c

	int16_t D[dimension_in] = {0,};
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28

	int16_t P_out[dimension_out] = {0,};
 8003dd8:	f107 0320 	add.w	r3, r7, #32
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	605a      	str	r2, [r3, #4]

	int16_t I_out[dimension_out] = {0,};
 8003de2:	f107 0318 	add.w	r3, r7, #24
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	605a      	str	r2, [r3, #4]

	int16_t D_out[dimension_out] = {0,};
 8003dec:	f107 0310 	add.w	r3, r7, #16
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]

	for(int i = 0;i < dimension_in; i++){
 8003df6:	2300      	movs	r3, #0
 8003df8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dfa:	e00e      	b.n	8003e1a <get_PID_out+0x66>
		pid->prev_error[i] = pid->error[i];
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e00:	331c      	adds	r3, #28
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68f9      	ldr	r1, [r7, #12]
 8003e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e0c:	331e      	adds	r3, #30
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < dimension_in; i++){
 8003e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e16:	3301      	adds	r3, #1
 8003e18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	dded      	ble.n	8003dfc <get_PID_out+0x48>
	}

	for(int i = 0;i < dimension_in; i++){
 8003e20:	2300      	movs	r3, #0
 8003e22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e24:	e019      	b.n	8003e5a <get_PID_out+0xa6>
		pid->error[i] = set_data[i] - angle->angle[i];
 8003e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	ed93 7a00 	vldr	s14, [r3]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e36:	3302      	adds	r3, #2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	edd3 7a00 	vldr	s15, [r3]
 8003e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e4a:	331c      	adds	r3, #28
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0;i < dimension_in; i++){
 8003e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e56:	3301      	adds	r3, #1
 8003e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	dde2      	ble.n	8003e26 <get_PID_out+0x72>
	}

	for(int i = 0; i < dimension_in; i++){
 8003e60:	2300      	movs	r3, #0
 8003e62:	647b      	str	r3, [r7, #68]	; 0x44
 8003e64:	e05a      	b.n	8003f1c <get_PID_out+0x168>
		P[i] = pid->error[i];
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6a:	331c      	adds	r3, #28
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	edd3 7a00 	vldr	s15, [r3]
 8003e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e78:	ee17 3a90 	vmov	r3, s15
 8003e7c:	b21a      	sxth	r2, r3
 8003e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	3350      	adds	r3, #80	; 0x50
 8003e84:	443b      	add	r3, r7
 8003e86:	f823 2c20 	strh.w	r2, [r3, #-32]
		I[i] = I[i] + (pid->error[i] + pid->prev_error[i])/2;
 8003e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	3350      	adds	r3, #80	; 0x50
 8003e90:	443b      	add	r3, r7
 8003e92:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea2:	331c      	adds	r3, #28
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	edd3 6a00 	vldr	s13, [r3]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb0:	331e      	adds	r3, #30
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	edd3 7a00 	vldr	s15, [r3]
 8003eba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003ebe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003ec2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ece:	ee17 3a90 	vmov	r3, s15
 8003ed2:	b21a      	sxth	r2, r3
 8003ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	3350      	adds	r3, #80	; 0x50
 8003eda:	443b      	add	r3, r7
 8003edc:	f823 2c24 	strh.w	r2, [r3, #-36]
		D[i] = pid->error[i] - pid->prev_error[i];
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ee4:	331c      	adds	r3, #28
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	ed93 7a00 	vldr	s14, [r3]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef2:	331e      	adds	r3, #30
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	edd3 7a00 	vldr	s15, [r3]
 8003efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f04:	ee17 3a90 	vmov	r3, s15
 8003f08:	b21a      	sxth	r2, r3
 8003f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	3350      	adds	r3, #80	; 0x50
 8003f10:	443b      	add	r3, r7
 8003f12:	f823 2c28 	strh.w	r2, [r3, #-40]
	for(int i = 0; i < dimension_in; i++){
 8003f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f18:	3301      	adds	r3, #1
 8003f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	dda1      	ble.n	8003e66 <get_PID_out+0xb2>
	}

	for(int i = 0; i < dimension_out; i++){
 8003f22:	2300      	movs	r3, #0
 8003f24:	643b      	str	r3, [r7, #64]	; 0x40
 8003f26:	e0dd      	b.n	80040e4 <get_PID_out+0x330>
		for(int j = 0; j < dimension_in; j++){
 8003f28:	2300      	movs	r3, #0
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2c:	e088      	b.n	8004040 <get_PID_out+0x28c>
			P_out[i] += pid->kp[i][j] * P[i];
 8003f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	3350      	adds	r3, #80	; 0x50
 8003f34:	443b      	add	r3, r7
 8003f36:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8003f3a:	ee07 3a90 	vmov	s15, r3
 8003f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f46:	0059      	lsls	r1, r3, #1
 8003f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4a:	440b      	add	r3, r1
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	edd3 6a00 	vldr	s13, [r3]
 8003f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	3350      	adds	r3, #80	; 0x50
 8003f5a:	443b      	add	r3, r7
 8003f5c:	f933 3c20 	ldrsh.w	r3, [r3, #-32]
 8003f60:	ee07 3a90 	vmov	s15, r3
 8003f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f74:	ee17 3a90 	vmov	r3, s15
 8003f78:	b21a      	sxth	r2, r3
 8003f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	3350      	adds	r3, #80	; 0x50
 8003f80:	443b      	add	r3, r7
 8003f82:	f823 2c30 	strh.w	r2, [r3, #-48]

			I_out[i] += pid->ki[i][j] * I[i];
 8003f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	3350      	adds	r3, #80	; 0x50
 8003f8c:	443b      	add	r3, r7
 8003f8e:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9e:	0059      	lsls	r1, r3, #1
 8003fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	edd3 6a00 	vldr	s13, [r3]
 8003fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	3350      	adds	r3, #80	; 0x50
 8003fb4:	443b      	add	r3, r7
 8003fb6:	f933 3c24 	ldrsh.w	r3, [r3, #-36]
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fce:	ee17 3a90 	vmov	r3, s15
 8003fd2:	b21a      	sxth	r2, r3
 8003fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	3350      	adds	r3, #80	; 0x50
 8003fda:	443b      	add	r3, r7
 8003fdc:	f823 2c38 	strh.w	r2, [r3, #-56]

			D_out[i] += pid->kd[i][j] * D[i];
 8003fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	3350      	adds	r3, #80	; 0x50
 8003fe6:	443b      	add	r3, r7
 8003fe8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff8:	0059      	lsls	r1, r3, #1
 8003ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3310      	adds	r3, #16
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	edd3 6a00 	vldr	s13, [r3]
 8004008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	3350      	adds	r3, #80	; 0x50
 800400e:	443b      	add	r3, r7
 8004010:	f933 3c28 	ldrsh.w	r3, [r3, #-40]
 8004014:	ee07 3a90 	vmov	s15, r3
 8004018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004028:	ee17 3a90 	vmov	r3, s15
 800402c:	b21a      	sxth	r2, r3
 800402e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	3350      	adds	r3, #80	; 0x50
 8004034:	443b      	add	r3, r7
 8004036:	f823 2c40 	strh.w	r2, [r3, #-64]
		for(int j = 0; j < dimension_in; j++){
 800403a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800403c:	3301      	adds	r3, #1
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004042:	2b01      	cmp	r3, #1
 8004044:	f77f af73 	ble.w	8003f2e <get_PID_out+0x17a>
		}

		protect_out[i] = P_out[i] + I_out[i] + D_out[i];
 8004048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	3350      	adds	r3, #80	; 0x50
 800404e:	443b      	add	r3, r7
 8004050:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8004054:	b29a      	uxth	r2, r3
 8004056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	3350      	adds	r3, #80	; 0x50
 800405c:	443b      	add	r3, r7
 800405e:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8004062:	b29b      	uxth	r3, r3
 8004064:	4413      	add	r3, r2
 8004066:	b29a      	uxth	r2, r3
 8004068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	3350      	adds	r3, #80	; 0x50
 800406e:	443b      	add	r3, r7
 8004070:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8004074:	b29b      	uxth	r3, r3
 8004076:	4413      	add	r3, r2
 8004078:	b29b      	uxth	r3, r3
 800407a:	b21a      	sxth	r2, r3
 800407c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	3350      	adds	r3, #80	; 0x50
 8004082:	443b      	add	r3, r7
 8004084:	f823 2c1c 	strh.w	r2, [r3, #-28]

		if(protect_out[i] > MAX_ANGLE){
 8004088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	3350      	adds	r3, #80	; 0x50
 800408e:	443b      	add	r3, r7
 8004090:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 8004094:	2b5a      	cmp	r3, #90	; 0x5a
 8004096:	dd06      	ble.n	80040a6 <get_PID_out+0x2f2>
			pid->out[i] = MAX_ANGLE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800409c:	3248      	adds	r2, #72	; 0x48
 800409e:	215a      	movs	r1, #90	; 0x5a
 80040a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80040a4:	e01b      	b.n	80040de <get_PID_out+0x32a>
		}
		else if (protect_out[i] < MIN_ANGLE){
 80040a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	3350      	adds	r3, #80	; 0x50
 80040ac:	443b      	add	r3, r7
 80040ae:	f933 3c1c 	ldrsh.w	r3, [r3, #-28]
 80040b2:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 80040b6:	da07      	bge.n	80040c8 <get_PID_out+0x314>
			pid->out[i] = MIN_ANGLE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040bc:	3248      	adds	r2, #72	; 0x48
 80040be:	f64f 71a6 	movw	r1, #65446	; 0xffa6
 80040c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80040c6:	e00a      	b.n	80040de <get_PID_out+0x32a>
		}
		else {
			pid->out[i] = protect_out[i];
 80040c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	3350      	adds	r3, #80	; 0x50
 80040ce:	443b      	add	r3, r7
 80040d0:	f933 1c1c 	ldrsh.w	r1, [r3, #-28]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040d8:	3248      	adds	r2, #72	; 0x48
 80040da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < dimension_out; i++){
 80040de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e0:	3301      	adds	r3, #1
 80040e2:	643b      	str	r3, [r7, #64]	; 0x40
 80040e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	f77f af1e 	ble.w	8003f28 <get_PID_out+0x174>
		}
	}
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	3754      	adds	r7, #84	; 0x54
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <altitude_init>:
uint8_t Data[256];


BMP280_HandleTypedef bmp280;

void altitude_init(struct Rocket* rocket){
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]

	if (rocket->altitude == NULL) {
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d06d      	beq.n	80041e8 <altitude_init+0xec>
		// Обработка ошибки: указатель не инициализирован
		return;
	}

	rocket->altitude->altitude = 0;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	601a      	str	r2, [r3, #0]

	rocket->altitude->altitude_f = 0;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	605a      	str	r2, [r3, #4]

	rocket->altitude->max_altitude = 0;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	609a      	str	r2, [r3, #8]

	bmp280_init_default_params(&bmp280.params);
 800412a:	4831      	ldr	r0, [pc, #196]	; (80041f0 <altitude_init+0xf4>)
 800412c:	f7fd fa60 	bl	80015f0 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8004130:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <altitude_init+0xf8>)
 8004132:	2276      	movs	r2, #118	; 0x76
 8004134:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8004136:	4b2f      	ldr	r3, [pc, #188]	; (80041f4 <altitude_init+0xf8>)
 8004138:	4a2f      	ldr	r2, [pc, #188]	; (80041f8 <altitude_init+0xfc>)
 800413a:	629a      	str	r2, [r3, #40]	; 0x28

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 800413c:	e013      	b.n	8004166 <altitude_init+0x6a>
		size = sprintf((char *)Data, "BMP280 initialization failed\n");
 800413e:	492f      	ldr	r1, [pc, #188]	; (80041fc <altitude_init+0x100>)
 8004140:	482f      	ldr	r0, [pc, #188]	; (8004200 <altitude_init+0x104>)
 8004142:	f008 f9e5 	bl	800c510 <siprintf>
 8004146:	4603      	mov	r3, r0
 8004148:	b29a      	uxth	r2, r3
 800414a:	4b2e      	ldr	r3, [pc, #184]	; (8004204 <altitude_init+0x108>)
 800414c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Data, size, 1000);
 800414e:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <altitude_init+0x108>)
 8004150:	881a      	ldrh	r2, [r3, #0]
 8004152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004156:	492a      	ldr	r1, [pc, #168]	; (8004200 <altitude_init+0x104>)
 8004158:	482b      	ldr	r0, [pc, #172]	; (8004208 <altitude_init+0x10c>)
 800415a:	f006 fa4b 	bl	800a5f4 <HAL_UART_Transmit>
		HAL_Delay(2000);
 800415e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004162:	f000 fdf9 	bl	8004d58 <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8004166:	4922      	ldr	r1, [pc, #136]	; (80041f0 <altitude_init+0xf4>)
 8004168:	4822      	ldr	r0, [pc, #136]	; (80041f4 <altitude_init+0xf8>)
 800416a:	f7fd fbbb 	bl	80018e4 <bmp280_init>
 800416e:	4603      	mov	r3, r0
 8004170:	f083 0301 	eor.w	r3, r3, #1
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e1      	bne.n	800413e <altitude_init+0x42>
	}
	bool bme280p = bmp280.id == BME280_CHIP_ID;
 800417a:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <altitude_init+0xf8>)
 800417c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004180:	2b60      	cmp	r3, #96	; 0x60
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	72fb      	strb	r3, [r7, #11]
	size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 800418a:	7afb      	ldrb	r3, [r7, #11]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <altitude_init+0x98>
 8004190:	4b1e      	ldr	r3, [pc, #120]	; (800420c <altitude_init+0x110>)
 8004192:	e000      	b.n	8004196 <altitude_init+0x9a>
 8004194:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <altitude_init+0x114>)
 8004196:	461a      	mov	r2, r3
 8004198:	491e      	ldr	r1, [pc, #120]	; (8004214 <altitude_init+0x118>)
 800419a:	4819      	ldr	r0, [pc, #100]	; (8004200 <altitude_init+0x104>)
 800419c:	f008 f9b8 	bl	800c510 <siprintf>
 80041a0:	4603      	mov	r3, r0
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	4b17      	ldr	r3, [pc, #92]	; (8004204 <altitude_init+0x108>)
 80041a6:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Data, size, 1000);
 80041a8:	4b16      	ldr	r3, [pc, #88]	; (8004204 <altitude_init+0x108>)
 80041aa:	881a      	ldrh	r2, [r3, #0]
 80041ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041b0:	4913      	ldr	r1, [pc, #76]	; (8004200 <altitude_init+0x104>)
 80041b2:	4815      	ldr	r0, [pc, #84]	; (8004208 <altitude_init+0x10c>)
 80041b4:	f006 fa1e 	bl	800a5f4 <HAL_UART_Transmit>
	for(int i = 0; i < 100; i++){
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e010      	b.n	80041e0 <altitude_init+0xe4>
		bmp280_read_float(&bmp280, &(rocket->atmosphere->start_temperature), &(rocket->atmosphere->start_pressure), &(rocket->atmosphere->start_humidity));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f103 0110 	add.w	r1, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f103 020c 	add.w	r2, r3, #12
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	3314      	adds	r3, #20
 80041d4:	4807      	ldr	r0, [pc, #28]	; (80041f4 <altitude_init+0xf8>)
 80041d6:	f7fd ffed 	bl	80021b4 <bmp280_read_float>
	for(int i = 0; i < 100; i++){
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b63      	cmp	r3, #99	; 0x63
 80041e4:	ddeb      	ble.n	80041be <altitude_init+0xc2>
 80041e6:	e000      	b.n	80041ea <altitude_init+0xee>
		return;
 80041e8:	bf00      	nop
	}

}
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	2000082c 	.word	0x2000082c
 80041f4:	20000800 	.word	0x20000800
 80041f8:	20000258 	.word	0x20000258
 80041fc:	08010eac 	.word	0x08010eac
 8004200:	20000700 	.word	0x20000700
 8004204:	200006fc 	.word	0x200006fc
 8004208:	200006b8 	.word	0x200006b8
 800420c:	08010ecc 	.word	0x08010ecc
 8004210:	08010ed4 	.word	0x08010ed4
 8004214:	08010edc 	.word	0x08010edc

08004218 <get_altitude_measurement>:



void get_altitude_measurement(struct Rocket* rocket){
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	  bmp280_read_float(&bmp280, &(rocket->atmosphere->temperature), &(rocket->atmosphere->pressure), &(rocket->atmosphere->humidity));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	1d19      	adds	r1, r3, #4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	461a      	mov	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	3308      	adds	r3, #8
 8004232:	480d      	ldr	r0, [pc, #52]	; (8004268 <get_altitude_measurement+0x50>)
 8004234:	f7fd ffbe 	bl	80021b4 <bmp280_read_float>
	  rocket->altitude->altitude = pascal_to_metrs(rocket->atmosphere->pressure,rocket->atmosphere->start_pressure);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	edd3 7a00 	vldr	s15, [r3]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	ed93 7a03 	vldr	s14, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68dc      	ldr	r4, [r3, #12]
 800424c:	eef0 0a47 	vmov.f32	s1, s14
 8004250:	eeb0 0a67 	vmov.f32	s0, s15
 8004254:	f7fd f980 	bl	8001558 <pascal_to_metrs>
 8004258:	eef0 7a40 	vmov.f32	s15, s0
 800425c:	edc4 7a00 	vstr	s15, [r4]
	  //rocket->altitude->altitude_f = average_filter(rocket->altitude->altitude, rocket->altitude->altitude_f, k_alt);
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	bd90      	pop	{r4, r7, pc}
 8004268:	20000800 	.word	0x20000800

0800426c <filtered_altitude_measurement>:

void filtered_altitude_measurement(struct Rocket* rocket, struct GMedian* gmedian_alt){
 800426c:	b590      	push	{r4, r7, lr}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
	gmedian_alt->destination_f_m = filtered(gmedian_alt, rocket->altitude->altitude);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	edd3 7a00 	vldr	s15, [r3]
 800427e:	eeb0 0a67 	vmov.f32	s0, s15
 8004282:	6838      	ldr	r0, [r7, #0]
 8004284:	f7ff fbd6 	bl	8003a34 <filtered>
 8004288:	eef0 7a40 	vmov.f32	s15, s0
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	rocket->altitude->altitude_f = average_filter(gmedian_alt->destination_f_m,rocket->altitude->altitude_f, k_alt);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	ed93 7a01 	vldr	s14, [r3, #4]
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <filtered_altitude_measurement+0x60>)
 80042a2:	edd3 6a00 	vldr	s13, [r3]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68dc      	ldr	r4, [r3, #12]
 80042aa:	eeb0 1a66 	vmov.f32	s2, s13
 80042ae:	eef0 0a47 	vmov.f32	s1, s14
 80042b2:	eeb0 0a67 	vmov.f32	s0, s15
 80042b6:	f7ff fb88 	bl	80039ca <average_filter>
 80042ba:	eef0 7a40 	vmov.f32	s15, s0
 80042be:	edc4 7a01 	vstr	s15, [r4, #4]

	//rocket->altitude->altitude_f = average_filter(rocket->altitude->altitude, rocket->altitude->altitude_f, k_alt);

}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd90      	pop	{r4, r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000014 	.word	0x20000014

080042d0 <pow2>:
//int16_t destination_m[3] = { 0, };
//float acceleration = 0;



float pow2(float a){
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	ed87 0a01 	vstr	s0, [r7, #4]
	return a*a;
 80042da:	edd7 7a01 	vldr	s15, [r7, #4]
 80042de:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 80042e2:	eeb0 0a67 	vmov.f32	s0, s15
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <acceleration_modulus>:
		gyro->destination_g_f[i] = 0;
	}
	gyro->gyro_mod = 0;
}

float acceleration_modulus(float* destination_a){
 80042f0:	b580      	push	{r7, lr}
 80042f2:	ed2d 8b02 	vpush	{d8}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	return sqrt(pow2(destination_a[0]) + pow2(destination_a[1]) + pow2(destination_a[2]));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	eeb0 0a67 	vmov.f32	s0, s15
 8004306:	f7ff ffe3 	bl	80042d0 <pow2>
 800430a:	eeb0 8a40 	vmov.f32	s16, s0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3304      	adds	r3, #4
 8004312:	edd3 7a00 	vldr	s15, [r3]
 8004316:	eeb0 0a67 	vmov.f32	s0, s15
 800431a:	f7ff ffd9 	bl	80042d0 <pow2>
 800431e:	eef0 7a40 	vmov.f32	s15, s0
 8004322:	ee38 8a27 	vadd.f32	s16, s16, s15
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3308      	adds	r3, #8
 800432a:	edd3 7a00 	vldr	s15, [r3]
 800432e:	eeb0 0a67 	vmov.f32	s0, s15
 8004332:	f7ff ffcd 	bl	80042d0 <pow2>
 8004336:	eef0 7a40 	vmov.f32	s15, s0
 800433a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800433e:	ee17 0a90 	vmov	r0, s15
 8004342:	f7fc f919 	bl	8000578 <__aeabi_f2d>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	ec43 2b10 	vmov	d0, r2, r3
 800434e:	f00b ffe1 	bl	8010314 <sqrt>
 8004352:	ec53 2b10 	vmov	r2, r3, d0
 8004356:	4610      	mov	r0, r2
 8004358:	4619      	mov	r1, r3
 800435a:	f7fc fc5d 	bl	8000c18 <__aeabi_d2f>
 800435e:	4603      	mov	r3, r0
 8004360:	ee07 3a90 	vmov	s15, r3

}
 8004364:	eeb0 0a67 	vmov.f32	s0, s15
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	ecbd 8b02 	vpop	{d8}
 8004370:	bd80      	pop	{r7, pc}

08004372 <get_inertia_measurement>:
	//accelerate_init(accelerate);
	//gyro_init(gyro);
	MPU_init();
}

void get_inertia_measurement(struct Accelerate* accelerate, struct Gyro* gyro){
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
	MPU_get_accel(accelerate->destination_a);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4618      	mov	r0, r3
 8004380:	f7fc ff8a 	bl	8001298 <MPU_get_accel>
	MPU_get_gyro(gyro->destination_g);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd f816 	bl	80013b8 <MPU_get_gyro>
		rocket->gyro->destination_g_f[i] = average_filter(rocket->gyro->destination_g[i],rocket->gyro->destination_g_f[i], k_gyro);

	}*///если раскоментировать, то только for
	//destination_a_f_m[0] = filtered(&gmedian, rocket->accelerate->destination_a_f[0]);
	//rocket->accelerate->destination_a[i]
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <filtered_inertia_measurement>:

void filtered_inertia_measurement(struct Accelerate* accelerate, struct Gyro* gyro, struct GMedian* gmedian_a, struct GMedian* gmedian_g){
 8004394:	b590      	push	{r4, r7, lr}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	603b      	str	r3, [r7, #0]

	for(int i = 0; i < 3; i++){
 80043a2:	2300      	movs	r3, #0
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e08e      	b.n	80044c6 <filtered_inertia_measurement+0x132>
			gmedian_a[i].destination_f_m = filtered(&(gmedian_a[i]), accelerate->destination_a[i]);
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4613      	mov	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4413      	add	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	461a      	mov	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	1899      	adds	r1, r3, r2
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	edd3 7a00 	vldr	s15, [r3]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	461a      	mov	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	189c      	adds	r4, r3, r2
 80043d4:	eeb0 0a67 	vmov.f32	s0, s15
 80043d8:	4608      	mov	r0, r1
 80043da:	f7ff fb2b 	bl	8003a34 <filtered>
 80043de:	eef0 7a40 	vmov.f32	s15, s0
 80043e2:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
			accelerate->destination_a_f[i] = average_filter(gmedian_a[i].destination_f_m, accelerate->destination_a_f[i], k_accel);
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4613      	mov	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	461a      	mov	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4413      	add	r3, r2
 80043f6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	3302      	adds	r3, #2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	3304      	adds	r3, #4
 8004406:	ed93 7a00 	vldr	s14, [r3]
 800440a:	4b33      	ldr	r3, [pc, #204]	; (80044d8 <filtered_inertia_measurement+0x144>)
 800440c:	edd3 6a00 	vldr	s13, [r3]
 8004410:	eeb0 1a66 	vmov.f32	s2, s13
 8004414:	eef0 0a47 	vmov.f32	s1, s14
 8004418:	eeb0 0a67 	vmov.f32	s0, s15
 800441c:	f7ff fad5 	bl	80039ca <average_filter>
 8004420:	eef0 7a40 	vmov.f32	s15, s0
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	3302      	adds	r3, #2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	3304      	adds	r3, #4
 8004430:	edc3 7a00 	vstr	s15, [r3]

			gmedian_g[i].destination_f_m = filtered(&(gmedian_g[i]), gyro->destination_g[i]);
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4613      	mov	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	4413      	add	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	461a      	mov	r2, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	1899      	adds	r1, r3, r2
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	edd3 7a00 	vldr	s15, [r3]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4613      	mov	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	461a      	mov	r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	189c      	adds	r4, r3, r2
 8004460:	eeb0 0a67 	vmov.f32	s0, s15
 8004464:	4608      	mov	r0, r1
 8004466:	f7ff fae5 	bl	8003a34 <filtered>
 800446a:	eef0 7a40 	vmov.f32	s15, s0
 800446e:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
			gyro->destination_g_f[i] = average_filter(gmedian_g[i].destination_f_m, gyro->destination_g_f[i], k_gyro);
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4613      	mov	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4413      	add	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	461a      	mov	r2, r3
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	4413      	add	r3, r2
 8004482:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	3302      	adds	r3, #2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	3304      	adds	r3, #4
 8004492:	ed93 7a00 	vldr	s14, [r3]
 8004496:	4b11      	ldr	r3, [pc, #68]	; (80044dc <filtered_inertia_measurement+0x148>)
 8004498:	edd3 6a00 	vldr	s13, [r3]
 800449c:	eeb0 1a66 	vmov.f32	s2, s13
 80044a0:	eef0 0a47 	vmov.f32	s1, s14
 80044a4:	eeb0 0a67 	vmov.f32	s0, s15
 80044a8:	f7ff fa8f 	bl	80039ca <average_filter>
 80044ac:	eef0 7a40 	vmov.f32	s15, s0
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	3302      	adds	r3, #2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	3304      	adds	r3, #4
 80044bc:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 3; i++){
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	3301      	adds	r3, #1
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	f77f af6d 	ble.w	80043a8 <filtered_inertia_measurement+0x14>
		}
}
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd90      	pop	{r4, r7, pc}
 80044d8:	2000000c 	.word	0x2000000c
 80044dc:	20000010 	.word	0x20000010

080044e0 <get_inertia_measurement_mod>:

void get_inertia_measurement_mod(struct Accelerate* accelerate, struct Gyro* gyro){
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
	accelerate->accel_mod = acceleration_modulus(accelerate->destination_a_f);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	330c      	adds	r3, #12
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fefe 	bl	80042f0 <acceleration_modulus>
 80044f4:	eef0 7a40 	vmov.f32	s15, s0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	edc3 7a06 	vstr	s15, [r3, #24]
	gyro->gyro_mod = acceleration_modulus(gyro->destination_g_f);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	330c      	adds	r3, #12
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff fef4 	bl	80042f0 <acceleration_modulus>
 8004508:	eef0 7a40 	vmov.f32	s15, s0
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	0000      	movs	r0, r0
 800451c:	0000      	movs	r0, r0
	...

08004520 <get_mcu_voltage>:
#include "system/power.h"

uint16_t adcData = 0;


float get_mcu_voltage(){
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
	//HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
	adcData = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8004524:	4812      	ldr	r0, [pc, #72]	; (8004570 <get_mcu_voltage+0x50>)
 8004526:	f000 fe71 	bl	800520c <HAL_ADC_GetValue>
 800452a:	4603      	mov	r3, r0
 800452c:	b29a      	uxth	r2, r3
 800452e:	4b11      	ldr	r3, [pc, #68]	; (8004574 <get_mcu_voltage+0x54>)
 8004530:	801a      	strh	r2, [r3, #0]
	return ADC_MAX * ADC_REFERENCE_VOLTAGE / adcData;
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <get_mcu_voltage+0x54>)
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fc f80c 	bl	8000554 <__aeabi_i2d>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	a109      	add	r1, pc, #36	; (adr r1, 8004568 <get_mcu_voltage+0x48>)
 8004542:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004546:	f7fc f999 	bl	800087c <__aeabi_ddiv>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4610      	mov	r0, r2
 8004550:	4619      	mov	r1, r3
 8004552:	f7fc fb61 	bl	8000c18 <__aeabi_d2f>
 8004556:	4603      	mov	r3, r0
 8004558:	ee07 3a90 	vmov	s15, r3
}
 800455c:	eeb0 0a67 	vmov.f32	s0, s15
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	f3af 8000 	nop.w
 8004568:	00000000 	.word	0x00000000
 800456c:	40b33200 	.word	0x40b33200
 8004570:	20000210 	.word	0x20000210
 8004574:	20000834 	.word	0x20000834

08004578 <radio_init>:
#include "system/radio.h"


void radio_init(struct Radio* radio){
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	radio->TRANSMIT_IS_OK = false;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
	radio->ALTITUDE_IS_OK = false;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	705a      	strb	r2, [r3, #1]
	radio->PITCH_IS_OK = false;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	709a      	strb	r2, [r3, #2]
	radio->ROLL_IS_OK = false;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	70da      	strb	r2, [r3, #3]
	radio->YAW_IS_OK = false;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	711a      	strb	r2, [r3, #4]
	radio->D_PITCH_IS_OK = false;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	715a      	strb	r2, [r3, #5]
	radio->D_ROLL_IS_OK = false;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	719a      	strb	r2, [r3, #6]
	radio->D_YAW_IS_OK = false;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	71da      	strb	r2, [r3, #7]
	radio->TEMPERATURE_IS_OK = false;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	721a      	strb	r2, [r3, #8]
	radio->frequency_data_transmission = 1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	815a      	strh	r2, [r3, #10]
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <transmit_data>:

void set_data_transmit_frequency(TIM_HandleTypeDef *htim, struct Radio* radio){
	htim->Instance->ARR = 8*powf(10,6) / radio->frequency_data_transmission/ htim->Instance->PSC;
}

void transmit_data(struct Rocket* rocket, struct Radio* radio){
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b0fa      	sub	sp, #488	; 0x1e8
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80045d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80045d6:	6018      	str	r0, [r3, #0]
 80045d8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80045dc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80045e0:	6019      	str	r1, [r3, #0]
	char d_roll_buf[50];
	char d_yaw_buf[50];
	char temperature_buf[50];


	if(radio->TRANSMIT_IS_OK == true){
 80045e2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80045e6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 816e 	beq.w	80048d0 <transmit_data+0x308>
		snprintf(time_buf, sizeof(time_buf), "time:%f ", rocket->time);
 80045f4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80045f8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fb ffb9 	bl	8000578 <__aeabi_f2d>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	f507 70d6 	add.w	r0, r7, #428	; 0x1ac
 800460e:	e9cd 2300 	strd	r2, r3, [sp]
 8004612:	4ab2      	ldr	r2, [pc, #712]	; (80048dc <transmit_data+0x314>)
 8004614:	2132      	movs	r1, #50	; 0x32
 8004616:	f007 ff47 	bl	800c4a8 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)time_buf, strlen(time_buf), 100);
 800461a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800461e:	4618      	mov	r0, r3
 8004620:	f7fb fde8 	bl	80001f4 <strlen>
 8004624:	4603      	mov	r3, r0
 8004626:	b29a      	uxth	r2, r3
 8004628:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 800462c:	2364      	movs	r3, #100	; 0x64
 800462e:	48ac      	ldr	r0, [pc, #688]	; (80048e0 <transmit_data+0x318>)
 8004630:	f005 ffe0 	bl	800a5f4 <HAL_UART_Transmit>

		if(radio->ALTITUDE_IS_OK == true){
 8004634:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004638:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <transmit_data+0xbe>
			snprintf(altitude_buf, sizeof(altitude_buf), "altitude:%f ", rocket->altitude->altitude_f);
 8004644:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004648:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fb ff90 	bl	8000578 <__aeabi_f2d>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 8004660:	e9cd 2300 	strd	r2, r3, [sp]
 8004664:	4a9f      	ldr	r2, [pc, #636]	; (80048e4 <transmit_data+0x31c>)
 8004666:	2132      	movs	r1, #50	; 0x32
 8004668:	f007 ff1e 	bl	800c4a8 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)altitude_buf, strlen(altitude_buf), 100);
 800466c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004670:	4618      	mov	r0, r3
 8004672:	f7fb fdbf 	bl	80001f4 <strlen>
 8004676:	4603      	mov	r3, r0
 8004678:	b29a      	uxth	r2, r3
 800467a:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800467e:	2364      	movs	r3, #100	; 0x64
 8004680:	4897      	ldr	r0, [pc, #604]	; (80048e0 <transmit_data+0x318>)
 8004682:	f005 ffb7 	bl	800a5f4 <HAL_UART_Transmit>
		}
		if(radio->PITCH_IS_OK == true){
 8004686:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800468a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	789b      	ldrb	r3, [r3, #2]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d020      	beq.n	80046d8 <transmit_data+0x110>
			snprintf(pitch_buf, sizeof(pitch_buf), "pitch:%f ", rocket->angle->pitch);
 8004696:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800469a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fb ff67 	bl	8000578 <__aeabi_f2d>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	f507 70a2 	add.w	r0, r7, #324	; 0x144
 80046b2:	e9cd 2300 	strd	r2, r3, [sp]
 80046b6:	4a8c      	ldr	r2, [pc, #560]	; (80048e8 <transmit_data+0x320>)
 80046b8:	2132      	movs	r1, #50	; 0x32
 80046ba:	f007 fef5 	bl	800c4a8 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)pitch_buf, strlen(pitch_buf), 100);
 80046be:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fb fd96 	bl	80001f4 <strlen>
 80046c8:	4603      	mov	r3, r0
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 80046d0:	2364      	movs	r3, #100	; 0x64
 80046d2:	4883      	ldr	r0, [pc, #524]	; (80048e0 <transmit_data+0x318>)
 80046d4:	f005 ff8e 	bl	800a5f4 <HAL_UART_Transmit>
		}
		if(radio->ROLL_IS_OK == true){
 80046d8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80046dc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	78db      	ldrb	r3, [r3, #3]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d020      	beq.n	800472a <transmit_data+0x162>
			snprintf(roll_buf, sizeof(roll_buf), "roll:%f ", rocket->angle->roll);
 80046e8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80046ec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fb ff3e 	bl	8000578 <__aeabi_f2d>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8004704:	e9cd 2300 	strd	r2, r3, [sp]
 8004708:	4a78      	ldr	r2, [pc, #480]	; (80048ec <transmit_data+0x324>)
 800470a:	2132      	movs	r1, #50	; 0x32
 800470c:	f007 fecc 	bl	800c4a8 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)roll_buf, strlen(roll_buf), 100);
 8004710:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004714:	4618      	mov	r0, r3
 8004716:	f7fb fd6d 	bl	80001f4 <strlen>
 800471a:	4603      	mov	r3, r0
 800471c:	b29a      	uxth	r2, r3
 800471e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8004722:	2364      	movs	r3, #100	; 0x64
 8004724:	486e      	ldr	r0, [pc, #440]	; (80048e0 <transmit_data+0x318>)
 8004726:	f005 ff65 	bl	800a5f4 <HAL_UART_Transmit>
		}
		if(radio->YAW_IS_OK == true){
 800472a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800472e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	791b      	ldrb	r3, [r3, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d020      	beq.n	800477c <transmit_data+0x1b4>
			snprintf(yaw_buf, sizeof(yaw_buf), "yaw:%f ", rocket->angle->yaw);
 800473a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800473e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4618      	mov	r0, r3
 800474a:	f7fb ff15 	bl	8000578 <__aeabi_f2d>
 800474e:	4602      	mov	r2, r0
 8004750:	460b      	mov	r3, r1
 8004752:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8004756:	e9cd 2300 	strd	r2, r3, [sp]
 800475a:	4a65      	ldr	r2, [pc, #404]	; (80048f0 <transmit_data+0x328>)
 800475c:	2132      	movs	r1, #50	; 0x32
 800475e:	f007 fea3 	bl	800c4a8 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)yaw_buf, strlen(yaw_buf), 100);
 8004762:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004766:	4618      	mov	r0, r3
 8004768:	f7fb fd44 	bl	80001f4 <strlen>
 800476c:	4603      	mov	r3, r0
 800476e:	b29a      	uxth	r2, r3
 8004770:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8004774:	2364      	movs	r3, #100	; 0x64
 8004776:	485a      	ldr	r0, [pc, #360]	; (80048e0 <transmit_data+0x318>)
 8004778:	f005 ff3c 	bl	800a5f4 <HAL_UART_Transmit>
		}

		if(radio->D_PITCH_IS_OK == true){
 800477c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004780:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	795b      	ldrb	r3, [r3, #5]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <transmit_data+0x206>
			snprintf(d_pitch_buf, sizeof(d_pitch_buf), "d_pitch:%f ", rocket->angle_velocity->d_pitch);
 800478c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004790:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fb feec 	bl	8000578 <__aeabi_f2d>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80047a8:	e9cd 2300 	strd	r2, r3, [sp]
 80047ac:	4a51      	ldr	r2, [pc, #324]	; (80048f4 <transmit_data+0x32c>)
 80047ae:	2132      	movs	r1, #50	; 0x32
 80047b0:	f007 fe7a 	bl	800c4a8 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)d_pitch_buf, strlen(d_pitch_buf), 100);
 80047b4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fb fd1b 	bl	80001f4 <strlen>
 80047be:	4603      	mov	r3, r0
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 80047c6:	2364      	movs	r3, #100	; 0x64
 80047c8:	4845      	ldr	r0, [pc, #276]	; (80048e0 <transmit_data+0x318>)
 80047ca:	f005 ff13 	bl	800a5f4 <HAL_UART_Transmit>
		}
		if(radio->D_ROLL_IS_OK == true){
 80047ce:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80047d2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	799b      	ldrb	r3, [r3, #6]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d020      	beq.n	8004820 <transmit_data+0x258>
			snprintf(d_roll_buf, sizeof(d_roll_buf), "d_roll:%f ", rocket->angle_velocity->d_roll);
 80047de:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80047e2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fb fec3 	bl	8000578 <__aeabi_f2d>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80047fa:	e9cd 2300 	strd	r2, r3, [sp]
 80047fe:	4a3e      	ldr	r2, [pc, #248]	; (80048f8 <transmit_data+0x330>)
 8004800:	2132      	movs	r1, #50	; 0x32
 8004802:	f007 fe51 	bl	800c4a8 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)d_roll_buf, strlen(d_roll_buf), 100);
 8004806:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800480a:	4618      	mov	r0, r3
 800480c:	f7fb fcf2 	bl	80001f4 <strlen>
 8004810:	4603      	mov	r3, r0
 8004812:	b29a      	uxth	r2, r3
 8004814:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8004818:	2364      	movs	r3, #100	; 0x64
 800481a:	4831      	ldr	r0, [pc, #196]	; (80048e0 <transmit_data+0x318>)
 800481c:	f005 feea 	bl	800a5f4 <HAL_UART_Transmit>
		}
		if(radio->D_YAW_IS_OK == true){
 8004820:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004824:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	79db      	ldrb	r3, [r3, #7]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d020      	beq.n	8004872 <transmit_data+0x2aa>
			snprintf(d_yaw_buf, sizeof(d_yaw_buf), "d_yaw:%f ", rocket->angle_velocity->d_yaw);
 8004830:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004834:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fb fe9a 	bl	8000578 <__aeabi_f2d>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800484c:	e9cd 2300 	strd	r2, r3, [sp]
 8004850:	4a2a      	ldr	r2, [pc, #168]	; (80048fc <transmit_data+0x334>)
 8004852:	2132      	movs	r1, #50	; 0x32
 8004854:	f007 fe28 	bl	800c4a8 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)d_yaw_buf, strlen(d_yaw_buf), 100);
 8004858:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800485c:	4618      	mov	r0, r3
 800485e:	f7fb fcc9 	bl	80001f4 <strlen>
 8004862:	4603      	mov	r3, r0
 8004864:	b29a      	uxth	r2, r3
 8004866:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800486a:	2364      	movs	r3, #100	; 0x64
 800486c:	481c      	ldr	r0, [pc, #112]	; (80048e0 <transmit_data+0x318>)
 800486e:	f005 fec1 	bl	800a5f4 <HAL_UART_Transmit>
		}

		if(radio->TEMPERATURE_IS_OK == true){
 8004872:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004876:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	7a1b      	ldrb	r3, [r3, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d020      	beq.n	80048c4 <transmit_data+0x2fc>
			snprintf(temperature_buf, sizeof(temperature_buf), "temperature:%f ", rocket->atmosphere->temperature);
 8004882:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8004886:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4618      	mov	r0, r3
 8004892:	f7fb fe71 	bl	8000578 <__aeabi_f2d>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	f107 000c 	add.w	r0, r7, #12
 800489e:	e9cd 2300 	strd	r2, r3, [sp]
 80048a2:	4a17      	ldr	r2, [pc, #92]	; (8004900 <transmit_data+0x338>)
 80048a4:	2132      	movs	r1, #50	; 0x32
 80048a6:	f007 fdff 	bl	800c4a8 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)temperature_buf, strlen(temperature_buf), 100);
 80048aa:	f107 030c 	add.w	r3, r7, #12
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fb fca0 	bl	80001f4 <strlen>
 80048b4:	4603      	mov	r3, r0
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	f107 010c 	add.w	r1, r7, #12
 80048bc:	2364      	movs	r3, #100	; 0x64
 80048be:	4808      	ldr	r0, [pc, #32]	; (80048e0 <transmit_data+0x318>)
 80048c0:	f005 fe98 	bl	800a5f4 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart1, (uint8_t*)";\n", strlen(";\n"), 100);
 80048c4:	2364      	movs	r3, #100	; 0x64
 80048c6:	2202      	movs	r2, #2
 80048c8:	490e      	ldr	r1, [pc, #56]	; (8004904 <transmit_data+0x33c>)
 80048ca:	4805      	ldr	r0, [pc, #20]	; (80048e0 <transmit_data+0x318>)
 80048cc:	f005 fe92 	bl	800a5f4 <HAL_UART_Transmit>
	}
}
 80048d0:	bf00      	nop
 80048d2:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	08010ef0 	.word	0x08010ef0
 80048e0:	200006b8 	.word	0x200006b8
 80048e4:	08010efc 	.word	0x08010efc
 80048e8:	08010f0c 	.word	0x08010f0c
 80048ec:	08010f18 	.word	0x08010f18
 80048f0:	08010f24 	.word	0x08010f24
 80048f4:	08010f2c 	.word	0x08010f2c
 80048f8:	08010f38 	.word	0x08010f38
 80048fc:	08010f44 	.word	0x08010f44
 8004900:	08010f50 	.word	0x08010f50
 8004904:	08010f60 	.word	0x08010f60

08004908 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004916:	2b00      	cmp	r3, #0
 8004918:	db0c      	blt.n	8004934 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	f003 021f 	and.w	r2, r3, #31
 8004920:	4907      	ldr	r1, [pc, #28]	; (8004940 <__NVIC_ClearPendingIRQ+0x38>)
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	2001      	movs	r0, #1
 800492a:	fa00 f202 	lsl.w	r2, r0, r2
 800492e:	3360      	adds	r3, #96	; 0x60
 8004930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	e000e100 	.word	0xe000e100
 8004944:	00000000 	.word	0x00000000

08004948 <degrees_to_pulse>:
#include "system/rescue.h"

uint16_t degrees_to_pulse(int16_t degrees){
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	80fb      	strh	r3, [r7, #6]
  return 11.1*degrees + 1500;
 8004952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fb fdfc 	bl	8000554 <__aeabi_i2d>
 800495c:	a30c      	add	r3, pc, #48	; (adr r3, 8004990 <degrees_to_pulse+0x48>)
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	f7fb fe61 	bl	8000628 <__aeabi_dmul>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4610      	mov	r0, r2
 800496c:	4619      	mov	r1, r3
 800496e:	a30a      	add	r3, pc, #40	; (adr r3, 8004998 <degrees_to_pulse+0x50>)
 8004970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004974:	f7fb fca2 	bl	80002bc <__adddf3>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4610      	mov	r0, r2
 800497e:	4619      	mov	r1, r3
 8004980:	f7fc f92a 	bl	8000bd8 <__aeabi_d2uiz>
 8004984:	4603      	mov	r3, r0
 8004986:	b29b      	uxth	r3, r3
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	33333333 	.word	0x33333333
 8004994:	40263333 	.word	0x40263333
 8004998:	00000000 	.word	0x00000000
 800499c:	40977000 	.word	0x40977000

080049a0 <turn_servo>:

void turn_servo(int16_t degrees){
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	80fb      	strh	r3, [r7, #6]
	__HAL_GPIO_EXTI_CLEAR_IT(btn_Pin);  // очищаем бит EXTI_PR
 80049aa:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <turn_servo+0x54>)
 80049ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049b0:	615a      	str	r2, [r3, #20]
	NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // очищаем бит NVIC_ICPRx
 80049b2:	2028      	movs	r0, #40	; 0x28
 80049b4:	f7ff ffa8 	bl	8004908 <__NVIC_ClearPendingIRQ>

	TIM1->CCR1 = degrees_to_pulse(degrees);
 80049b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff ffc3 	bl	8004948 <degrees_to_pulse>
 80049c2:	4603      	mov	r3, r0
 80049c4:	461a      	mov	r2, r3
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <turn_servo+0x58>)
 80049c8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(500);
 80049ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049ce:	f000 f9c3 	bl	8004d58 <HAL_Delay>
	TIM1->CCR1 = degrees_to_pulse(0);
 80049d2:	2000      	movs	r0, #0
 80049d4:	f7ff ffb8 	bl	8004948 <degrees_to_pulse>
 80049d8:	4603      	mov	r3, r0
 80049da:	461a      	mov	r2, r3
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <turn_servo+0x58>)
 80049de:	635a      	str	r2, [r3, #52]	; 0x34

	//HAL_UART_Transmit(&huart1, (uint8_t*)"servo is turn\n", sizeof("servo is turn\n"), 200);

	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);   // включаем внешнее прерывание
 80049e0:	2028      	movs	r0, #40	; 0x28
 80049e2:	f000 ffe1 	bl	80059a8 <HAL_NVIC_EnableIRQ>

	flag_irq = 0;
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <turn_servo+0x5c>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]
}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40013c00 	.word	0x40013c00
 80049f8:	40010000 	.word	0x40010000
 80049fc:	200005c4 	.word	0x200005c4

08004a00 <rescue_system_init>:

void rescue_system_init(TIM_TypeDef* TIM){
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
	TIM->CCR2 = degrees_to_pulse(0);
 8004a08:	2000      	movs	r0, #0
 8004a0a:	f7ff ff9d 	bl	8004948 <degrees_to_pulse>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	461a      	mov	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <rocket_init>:
#include <stdio.h>
#include <string.h>
#include "system/rocket.h"
#include "MPU9250.h"

void rocket_init(struct Rocket *rocket, const char *teamId, struct Altitude* altitude, struct Atmosphere_param* atmosphere,struct Accelerate* accelerate, struct Angle* angle, struct Angle_velocity* angle_velocity) {
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	603b      	str	r3, [r7, #0]

	strncpy(rocket->teamId, teamId, sizeof(rocket->teamId) - 1);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2209      	movs	r2, #9
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f007 fd8c 	bl	800c550 <strncpy>
	rocket->teamId[sizeof(rocket->teamId) - 1] = '\0'; // Обеспечиваем нуль-терминатор
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	725a      	strb	r2, [r3, #9]

	/*rocket->altitude = 0;

	rocket->max_altitude = 0;*/

	rocket->altitude = altitude;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	60da      	str	r2, [r3, #12]

	//rocket->accelerate = accelerate;

	//rocket->gyro = gyro;

	rocket->angle = angle;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	629a      	str	r2, [r3, #40]	; 0x28

	rocket->angle_velocity = angle_velocity;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a3a      	ldr	r2, [r7, #32]
 8004a4e:	62da      	str	r2, [r3, #44]	; 0x2c

	rocket->accel_mod = accelerate->accel_mod;
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	699a      	ldr	r2, [r3, #24]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	621a      	str	r2, [r3, #32]

    rocket->start_point = 0;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	741a      	strb	r2, [r3, #16]
    rocket->apogee_point = 0;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	745a      	strb	r2, [r3, #17]
    rocket->activate_point = 0;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	749a      	strb	r2, [r3, #18]
    rocket->landing_point = 0;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	74da      	strb	r2, [r3, #19]

    //rocket->delta_apogee = 1;
    //rocket->delta_activate = 1;
    //rocket->starting_height = 3;

    rocket->battery_voltage = 0;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	619a      	str	r2, [r3, #24]

    rocket->time = HAL_GetTick();
 8004a78:	f000 f962 	bl	8004d40 <HAL_GetTick>
 8004a7c:	ee07 0a90 	vmov	s15, r0
 8004a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	edc3 7a07 	vstr	s15, [r3, #28]

    rocket->atmosphere = atmosphere;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24

}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <atmosphere_init>:

void atmosphere_init(struct Atmosphere_param* atmosphere){
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	atmosphere->pressure = 0;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
	atmosphere->temperature = 0;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	605a      	str	r2, [r3, #4]
	atmosphere->humidity = 0;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	609a      	str	r2, [r3, #8]

	atmosphere->start_pressure = 0;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	60da      	str	r2, [r3, #12]
	atmosphere->start_temperature = 0;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	611a      	str	r2, [r3, #16]
	atmosphere->start_humidity = 0;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	615a      	str	r2, [r3, #20]
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <fly_control>:

void fly_control(struct Rocket* rocket){
 8004adc:	b5b0      	push	{r4, r5, r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	if (rocket->altitude->altitude > rocket->starting_height)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	ed93 7a00 	vldr	s14, [r3]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	7d9b      	ldrb	r3, [r3, #22]
 8004af0:	ee07 3a90 	vmov	s15, r3
 8004af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b00:	dd02      	ble.n	8004b08 <fly_control+0x2c>
	{
	  rocket->start_point = 1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	741a      	strb	r2, [r3, #16]
	}

	rocket->altitude->max_altitude= fmax( rocket->altitude->max_altitude, rocket->altitude->altitude );
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fb fd32 	bl	8000578 <__aeabi_f2d>
 8004b14:	4604      	mov	r4, r0
 8004b16:	460d      	mov	r5, r1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fb fd2a 	bl	8000578 <__aeabi_f2d>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	ec43 2b11 	vmov	d1, r2, r3
 8004b2c:	ec45 4b10 	vmov	d0, r4, r5
 8004b30:	f00b fb5e 	bl	80101f0 <fmax>
 8004b34:	ec51 0b10 	vmov	r0, r1, d0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68dc      	ldr	r4, [r3, #12]
 8004b3c:	f7fc f86c 	bl	8000c18 <__aeabi_d2f>
 8004b40:	4603      	mov	r3, r0
 8004b42:	60a3      	str	r3, [r4, #8]

	if ((rocket->altitude->max_altitude - rocket->altitude->altitude) > rocket->delta_apogee && rocket->start_point == 1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	edd3 7a00 	vldr	s15, [r3]
 8004b54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	7d1b      	ldrb	r3, [r3, #20]
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6c:	dd06      	ble.n	8004b7c <fly_control+0xa0>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	7c1b      	ldrb	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <fly_control+0xa0>
	{
	  rocket->apogee_point = 1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	745a      	strb	r2, [r3, #17]
	}

	if ((rocket->altitude->max_altitude - rocket->altitude->altitude) > rocket->delta_activate && rocket->apogee_point == 1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	edd3 7a00 	vldr	s15, [r3]
 8004b8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	7d5b      	ldrb	r3, [r3, #21]
 8004b94:	ee07 3a90 	vmov	s15, r3
 8004b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba4:	dd06      	ble.n	8004bb4 <fly_control+0xd8>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	7c5b      	ldrb	r3, [r3, #17]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <fly_control+0xd8>
	{
	  rocket->activate_point = 1;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	749a      	strb	r2, [r3, #18]
	}

	if(rocket->start_point == 1 && rocket->apogee_point == 1 && rocket->activate_point == 1 && rocket->altitude->altitude < rocket->starting_height)//высота считающаяся приземлением
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	7c1b      	ldrb	r3, [r3, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01a      	beq.n	8004bf2 <fly_control+0x116>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	7c5b      	ldrb	r3, [r3, #17]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d016      	beq.n	8004bf2 <fly_control+0x116>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	7c9b      	ldrb	r3, [r3, #18]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <fly_control+0x116>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	ed93 7a00 	vldr	s14, [r3]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	7d9b      	ldrb	r3, [r3, #22]
 8004bd8:	ee07 3a90 	vmov	s15, r3
 8004bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be8:	d400      	bmi.n	8004bec <fly_control+0x110>
	{
	  rocket->landing_point = 1;
	}
}
 8004bea:	e002      	b.n	8004bf2 <fly_control+0x116>
	  rocket->landing_point = 1;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	74da      	strb	r2, [r3, #19]
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bdb0      	pop	{r4, r5, r7, pc}

08004bfa <delta_init>:

void delta_init(struct Rocket* rocket){
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
	rocket->delta_apogee = 1;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	751a      	strb	r2, [r3, #20]
	rocket->delta_activate = 1;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	755a      	strb	r2, [r3, #21]
	rocket->starting_height = 2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	759a      	strb	r2, [r3, #22]
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c24:	480d      	ldr	r0, [pc, #52]	; (8004c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004c26:	490e      	ldr	r1, [pc, #56]	; (8004c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004c28:	4a0e      	ldr	r2, [pc, #56]	; (8004c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c2c:	e002      	b.n	8004c34 <LoopCopyDataInit>

08004c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c32:	3304      	adds	r3, #4

08004c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c38:	d3f9      	bcc.n	8004c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c3a:	4a0b      	ldr	r2, [pc, #44]	; (8004c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c3c:	4c0b      	ldr	r4, [pc, #44]	; (8004c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c40:	e001      	b.n	8004c46 <LoopFillZerobss>

08004c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c44:	3204      	adds	r2, #4

08004c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c48:	d3fb      	bcc.n	8004c42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c4a:	f7fe fa93 	bl	8003174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c4e:	f006 fd7f 	bl	800b750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c52:	f7fd ff63 	bl	8002b1c <main>
  bx  lr    
 8004c56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c60:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8004c64:	08011748 	.word	0x08011748
  ldr r2, =_sbss
 8004c68:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8004c6c:	2000086c 	.word	0x2000086c

08004c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c70:	e7fe      	b.n	8004c70 <ADC_IRQHandler>
	...

08004c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c78:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <HAL_Init+0x40>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a0d      	ldr	r2, [pc, #52]	; (8004cb4 <HAL_Init+0x40>)
 8004c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_Init+0x40>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a0a      	ldr	r2, [pc, #40]	; (8004cb4 <HAL_Init+0x40>)
 8004c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c90:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <HAL_Init+0x40>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a07      	ldr	r2, [pc, #28]	; (8004cb4 <HAL_Init+0x40>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c9c:	2003      	movs	r0, #3
 8004c9e:	f000 fe37 	bl	8005910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ca2:	200f      	movs	r0, #15
 8004ca4:	f000 f808 	bl	8004cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ca8:	f7fe f930 	bl	8002f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023c00 	.word	0x40023c00

08004cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004cc0:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <HAL_InitTick+0x54>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <HAL_InitTick+0x58>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fe96 	bl	8005a08 <HAL_SYSTICK_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e00e      	b.n	8004d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b0f      	cmp	r3, #15
 8004cea:	d80a      	bhi.n	8004d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cec:	2200      	movs	r2, #0
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	f000 fe2c 	bl	8005950 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cf8:	4a06      	ldr	r2, [pc, #24]	; (8004d14 <HAL_InitTick+0x5c>)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e000      	b.n	8004d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20000008 	.word	0x20000008
 8004d10:	2000001c 	.word	0x2000001c
 8004d14:	20000018 	.word	0x20000018

08004d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_IncTick+0x20>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_IncTick+0x24>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4413      	add	r3, r2
 8004d28:	4a04      	ldr	r2, [pc, #16]	; (8004d3c <HAL_IncTick+0x24>)
 8004d2a:	6013      	str	r3, [r2, #0]
}
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	2000001c 	.word	0x2000001c
 8004d3c:	20000838 	.word	0x20000838

08004d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return uwTick;
 8004d44:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <HAL_GetTick+0x14>)
 8004d46:	681b      	ldr	r3, [r3, #0]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	20000838 	.word	0x20000838

08004d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d60:	f7ff ffee 	bl	8004d40 <HAL_GetTick>
 8004d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d70:	d005      	beq.n	8004d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d72:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <HAL_Delay+0x44>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d7e:	bf00      	nop
 8004d80:	f7ff ffde 	bl	8004d40 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d8f7      	bhi.n	8004d80 <HAL_Delay+0x28>
  {
  }
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	2000001c 	.word	0x2000001c

08004da0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e14e      	b.n	8005054 <HAL_ADC_Init+0x2b4>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a90      	ldr	r2, [pc, #576]	; (8004ffc <HAL_ADC_Init+0x25c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d004      	beq.n	8004dca <HAL_ADC_Init+0x2a>
 8004dc0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004dc4:	488e      	ldr	r0, [pc, #568]	; (8005000 <HAL_ADC_Init+0x260>)
 8004dc6:	f7fe f896 	bl	8002ef6 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d013      	beq.n	8004dfa <HAL_ADC_Init+0x5a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dda:	d00e      	beq.n	8004dfa <HAL_ADC_Init+0x5a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004de4:	d009      	beq.n	8004dfa <HAL_ADC_Init+0x5a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dee:	d004      	beq.n	8004dfa <HAL_ADC_Init+0x5a>
 8004df0:	f240 1143 	movw	r1, #323	; 0x143
 8004df4:	4882      	ldr	r0, [pc, #520]	; (8005000 <HAL_ADC_Init+0x260>)
 8004df6:	f7fe f87e 	bl	8002ef6 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d013      	beq.n	8004e2a <HAL_ADC_Init+0x8a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e0a:	d00e      	beq.n	8004e2a <HAL_ADC_Init+0x8a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e14:	d009      	beq.n	8004e2a <HAL_ADC_Init+0x8a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e1e:	d004      	beq.n	8004e2a <HAL_ADC_Init+0x8a>
 8004e20:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8004e24:	4876      	ldr	r0, [pc, #472]	; (8005000 <HAL_ADC_Init+0x260>)
 8004e26:	f7fe f866 	bl	8002ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d008      	beq.n	8004e44 <HAL_ADC_Init+0xa4>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d004      	beq.n	8004e44 <HAL_ADC_Init+0xa4>
 8004e3a:	f240 1145 	movw	r1, #325	; 0x145
 8004e3e:	4870      	ldr	r0, [pc, #448]	; (8005000 <HAL_ADC_Init+0x260>)
 8004e40:	f7fe f859 	bl	8002ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	7e1b      	ldrb	r3, [r3, #24]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_ADC_Init+0xbe>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	7e1b      	ldrb	r3, [r3, #24]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d004      	beq.n	8004e5e <HAL_ADC_Init+0xbe>
 8004e54:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004e58:	4869      	ldr	r0, [pc, #420]	; (8005000 <HAL_ADC_Init+0x260>)
 8004e5a:	f7fe f84c 	bl	8002ef6 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d054      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e6e:	d04f      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e78:	d04a      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e82:	d045      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e8c:	d040      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004e96:	d03b      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004ea0:	d036      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8004eaa:	d031      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb4:	d02c      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eba:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8004ebe:	d027      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004ec8:	d022      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ece:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8004ed2:	d01d      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004edc:	d018      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8004ee6:	d013      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004ef0:	d00e      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004efa:	d009      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f00:	4a40      	ldr	r2, [pc, #256]	; (8005004 <HAL_ADC_Init+0x264>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <HAL_ADC_Init+0x170>
 8004f06:	f240 1147 	movw	r1, #327	; 0x147
 8004f0a:	483d      	ldr	r0, [pc, #244]	; (8005000 <HAL_ADC_Init+0x260>)
 8004f0c:	f7fd fff3 	bl	8002ef6 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d009      	beq.n	8004f2c <HAL_ADC_Init+0x18c>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f20:	d004      	beq.n	8004f2c <HAL_ADC_Init+0x18c>
 8004f22:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004f26:	4836      	ldr	r0, [pc, #216]	; (8005000 <HAL_ADC_Init+0x260>)
 8004f28:	f7fd ffe5 	bl	8002ef6 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_ADC_Init+0x19c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	2b10      	cmp	r3, #16
 8004f3a:	d904      	bls.n	8004f46 <HAL_ADC_Init+0x1a6>
 8004f3c:	f240 1149 	movw	r1, #329	; 0x149
 8004f40:	482f      	ldr	r0, [pc, #188]	; (8005000 <HAL_ADC_Init+0x260>)
 8004f42:	f7fd ffd8 	bl	8002ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d009      	beq.n	8004f64 <HAL_ADC_Init+0x1c4>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d004      	beq.n	8004f64 <HAL_ADC_Init+0x1c4>
 8004f5a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004f5e:	4828      	ldr	r0, [pc, #160]	; (8005000 <HAL_ADC_Init+0x260>)
 8004f60:	f7fd ffc9 	bl	8002ef6 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d00c      	beq.n	8004f86 <HAL_ADC_Init+0x1e6>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <HAL_ADC_Init+0x1e6>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d004      	beq.n	8004f86 <HAL_ADC_Init+0x1e6>
 8004f7c:	f240 114b 	movw	r1, #331	; 0x14b
 8004f80:	481f      	ldr	r0, [pc, #124]	; (8005000 <HAL_ADC_Init+0x260>)
 8004f82:	f7fd ffb8 	bl	8002ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d009      	beq.n	8004fa4 <HAL_ADC_Init+0x204>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d004      	beq.n	8004fa4 <HAL_ADC_Init+0x204>
 8004f9a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004f9e:	4818      	ldr	r0, [pc, #96]	; (8005000 <HAL_ADC_Init+0x260>)
 8004fa0:	f7fd ffa9 	bl	8002ef6 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	4a16      	ldr	r2, [pc, #88]	; (8005004 <HAL_ADC_Init+0x264>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d017      	beq.n	8004fde <HAL_ADC_Init+0x23e>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d013      	beq.n	8004fde <HAL_ADC_Init+0x23e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fbe:	d00e      	beq.n	8004fde <HAL_ADC_Init+0x23e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc8:	d009      	beq.n	8004fde <HAL_ADC_Init+0x23e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004fd2:	d004      	beq.n	8004fde <HAL_ADC_Init+0x23e>
 8004fd4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004fd8:	4809      	ldr	r0, [pc, #36]	; (8005000 <HAL_ADC_Init+0x260>)
 8004fda:	f7fd ff8c 	bl	8002ef6 <assert_failed>
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d110      	bne.n	8005008 <HAL_ADC_Init+0x268>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fc fa94 	bl	8001514 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ffa:	e005      	b.n	8005008 <HAL_ADC_Init+0x268>
 8004ffc:	40012000 	.word	0x40012000
 8005000:	08010f64 	.word	0x08010f64
 8005004:	0f000001 	.word	0x0f000001
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b00      	cmp	r3, #0
 8005012:	d118      	bne.n	8005046 <HAL_ADC_Init+0x2a6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800501c:	f023 0302 	bic.w	r3, r3, #2
 8005020:	f043 0202 	orr.w	r2, r3, #2
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fa73 	bl	8005514 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	f023 0303 	bic.w	r3, r3, #3
 800503c:	f043 0201 	orr.w	r2, r3, #1
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40
 8005044:	e001      	b.n	800504a <HAL_ADC_Init+0x2aa>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005052:	7bfb      	ldrb	r3, [r7, #15]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	7e1b      	ldrb	r3, [r3, #24]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_ADC_Start+0x26>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	7e1b      	ldrb	r3, [r3, #24]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d004      	beq.n	8005082 <HAL_ADC_Start+0x26>
 8005078:	f240 21d2 	movw	r1, #722	; 0x2d2
 800507c:	485e      	ldr	r0, [pc, #376]	; (80051f8 <HAL_ADC_Start+0x19c>)
 800507e:	f7fd ff3a 	bl	8002ef6 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d013      	beq.n	80050b2 <HAL_ADC_Start+0x56>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005092:	d00e      	beq.n	80050b2 <HAL_ADC_Start+0x56>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509c:	d009      	beq.n	80050b2 <HAL_ADC_Start+0x56>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050a6:	d004      	beq.n	80050b2 <HAL_ADC_Start+0x56>
 80050a8:	f240 21d3 	movw	r1, #723	; 0x2d3
 80050ac:	4852      	ldr	r0, [pc, #328]	; (80051f8 <HAL_ADC_Start+0x19c>)
 80050ae:	f7fd ff22 	bl	8002ef6 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_ADC_Start+0x64>
 80050bc:	2302      	movs	r3, #2
 80050be:	e097      	b.n	80051f0 <HAL_ADC_Start+0x194>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d018      	beq.n	8005108 <HAL_ADC_Start+0xac>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80050e6:	4b45      	ldr	r3, [pc, #276]	; (80051fc <HAL_ADC_Start+0x1a0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a45      	ldr	r2, [pc, #276]	; (8005200 <HAL_ADC_Start+0x1a4>)
 80050ec:	fba2 2303 	umull	r2, r3, r2, r3
 80050f0:	0c9a      	lsrs	r2, r3, #18
 80050f2:	4613      	mov	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80050fa:	e002      	b.n	8005102 <HAL_ADC_Start+0xa6>
    {
      counter--;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	3b01      	subs	r3, #1
 8005100:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f9      	bne.n	80050fc <HAL_ADC_Start+0xa0>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d15f      	bne.n	80051d6 <HAL_ADC_Start+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800511e:	f023 0301 	bic.w	r3, r3, #1
 8005122:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005140:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005154:	d106      	bne.n	8005164 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515a:	f023 0206 	bic.w	r2, r3, #6
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	645a      	str	r2, [r3, #68]	; 0x44
 8005162:	e002      	b.n	800516a <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005172:	4b24      	ldr	r3, [pc, #144]	; (8005204 <HAL_ADC_Start+0x1a8>)
 8005174:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800517e:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10f      	bne.n	80051ac <HAL_ADC_Start+0x150>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d129      	bne.n	80051ee <HAL_ADC_Start+0x192>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80051a8:	609a      	str	r2, [r3, #8]
 80051aa:	e020      	b.n	80051ee <HAL_ADC_Start+0x192>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a15      	ldr	r2, [pc, #84]	; (8005208 <HAL_ADC_Start+0x1ac>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d11b      	bne.n	80051ee <HAL_ADC_Start+0x192>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d114      	bne.n	80051ee <HAL_ADC_Start+0x192>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	e00b      	b.n	80051ee <HAL_ADC_Start+0x192>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	f043 0210 	orr.w	r2, r3, #16
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e6:	f043 0201 	orr.w	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	08010f64 	.word	0x08010f64
 80051fc:	20000008 	.word	0x20000008
 8005200:	431bde83 	.word	0x431bde83
 8005204:	40012300 	.word	0x40012300
 8005208:	40012000 	.word	0x40012000

0800520c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
	...

08005228 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b12      	cmp	r3, #18
 800523c:	d909      	bls.n	8005252 <HAL_ADC_ConfigChannel+0x2a>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a72      	ldr	r2, [pc, #456]	; (800540c <HAL_ADC_ConfigChannel+0x1e4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_ADC_ConfigChannel+0x2a>
 8005248:	f240 618b 	movw	r1, #1675	; 0x68b
 800524c:	4870      	ldr	r0, [pc, #448]	; (8005410 <HAL_ADC_ConfigChannel+0x1e8>)
 800524e:	f7fd fe52 	bl	8002ef6 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_ADC_ConfigChannel+0x3a>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b10      	cmp	r3, #16
 8005260:	d904      	bls.n	800526c <HAL_ADC_ConfigChannel+0x44>
 8005262:	f240 618c 	movw	r1, #1676	; 0x68c
 8005266:	486a      	ldr	r0, [pc, #424]	; (8005410 <HAL_ADC_ConfigChannel+0x1e8>)
 8005268:	f7fd fe45 	bl	8002ef6 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d020      	beq.n	80052b6 <HAL_ADC_ConfigChannel+0x8e>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d01c      	beq.n	80052b6 <HAL_ADC_ConfigChannel+0x8e>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d018      	beq.n	80052b6 <HAL_ADC_ConfigChannel+0x8e>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	2b03      	cmp	r3, #3
 800528a:	d014      	beq.n	80052b6 <HAL_ADC_ConfigChannel+0x8e>
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d010      	beq.n	80052b6 <HAL_ADC_ConfigChannel+0x8e>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b05      	cmp	r3, #5
 800529a:	d00c      	beq.n	80052b6 <HAL_ADC_ConfigChannel+0x8e>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b06      	cmp	r3, #6
 80052a2:	d008      	beq.n	80052b6 <HAL_ADC_ConfigChannel+0x8e>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b07      	cmp	r3, #7
 80052aa:	d004      	beq.n	80052b6 <HAL_ADC_ConfigChannel+0x8e>
 80052ac:	f240 618d 	movw	r1, #1677	; 0x68d
 80052b0:	4857      	ldr	r0, [pc, #348]	; (8005410 <HAL_ADC_ConfigChannel+0x1e8>)
 80052b2:	f7fd fe20 	bl	8002ef6 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_ADC_ConfigChannel+0x9c>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e118      	b.n	80054f6 <HAL_ADC_ConfigChannel+0x2ce>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b09      	cmp	r3, #9
 80052d2:	d925      	bls.n	8005320 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68d9      	ldr	r1, [r3, #12]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	4613      	mov	r3, r2
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	4413      	add	r3, r2
 80052e8:	3b1e      	subs	r3, #30
 80052ea:	2207      	movs	r2, #7
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	43da      	mvns	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	400a      	ands	r2, r1
 80052f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68d9      	ldr	r1, [r3, #12]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	4618      	mov	r0, r3
 800530c:	4603      	mov	r3, r0
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	4403      	add	r3, r0
 8005312:	3b1e      	subs	r3, #30
 8005314:	409a      	lsls	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	60da      	str	r2, [r3, #12]
 800531e:	e022      	b.n	8005366 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6919      	ldr	r1, [r3, #16]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	461a      	mov	r2, r3
 800532e:	4613      	mov	r3, r2
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	4413      	add	r3, r2
 8005334:	2207      	movs	r2, #7
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43da      	mvns	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	400a      	ands	r2, r1
 8005342:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6919      	ldr	r1, [r3, #16]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	4618      	mov	r0, r3
 8005356:	4603      	mov	r3, r0
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	4403      	add	r3, r0
 800535c:	409a      	lsls	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b06      	cmp	r3, #6
 800536c:	d824      	bhi.n	80053b8 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	3b05      	subs	r3, #5
 8005380:	221f      	movs	r2, #31
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	43da      	mvns	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	400a      	ands	r2, r1
 800538e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	4618      	mov	r0, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	3b05      	subs	r3, #5
 80053aa:	fa00 f203 	lsl.w	r2, r0, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	635a      	str	r2, [r3, #52]	; 0x34
 80053b6:	e051      	b.n	800545c <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	2b0c      	cmp	r3, #12
 80053be:	d829      	bhi.n	8005414 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	3b23      	subs	r3, #35	; 0x23
 80053d2:	221f      	movs	r2, #31
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	43da      	mvns	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	400a      	ands	r2, r1
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	4618      	mov	r0, r3
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	3b23      	subs	r3, #35	; 0x23
 80053fc:	fa00 f203 	lsl.w	r2, r0, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
 8005408:	e028      	b.n	800545c <HAL_ADC_ConfigChannel+0x234>
 800540a:	bf00      	nop
 800540c:	10000012 	.word	0x10000012
 8005410:	08010f64 	.word	0x08010f64
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	3b41      	subs	r3, #65	; 0x41
 8005426:	221f      	movs	r2, #31
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	43da      	mvns	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	400a      	ands	r2, r1
 8005434:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	4618      	mov	r0, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	3b41      	subs	r3, #65	; 0x41
 8005450:	fa00 f203 	lsl.w	r2, r0, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800545c:	4b28      	ldr	r3, [pc, #160]	; (8005500 <HAL_ADC_ConfigChannel+0x2d8>)
 800545e:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a27      	ldr	r2, [pc, #156]	; (8005504 <HAL_ADC_ConfigChannel+0x2dc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d10f      	bne.n	800548a <HAL_ADC_ConfigChannel+0x262>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b12      	cmp	r3, #18
 8005470:	d10b      	bne.n	800548a <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1d      	ldr	r2, [pc, #116]	; (8005504 <HAL_ADC_ConfigChannel+0x2dc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d12b      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x2c4>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1b      	ldr	r2, [pc, #108]	; (8005508 <HAL_ADC_ConfigChannel+0x2e0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d003      	beq.n	80054a6 <HAL_ADC_ConfigChannel+0x27e>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b11      	cmp	r3, #17
 80054a4:	d122      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a11      	ldr	r2, [pc, #68]	; (8005508 <HAL_ADC_ConfigChannel+0x2e0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d111      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80054c8:	4b10      	ldr	r3, [pc, #64]	; (800550c <HAL_ADC_ConfigChannel+0x2e4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a10      	ldr	r2, [pc, #64]	; (8005510 <HAL_ADC_ConfigChannel+0x2e8>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	0c9a      	lsrs	r2, r3, #18
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054de:	e002      	b.n	80054e6 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f9      	bne.n	80054e0 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	40012300 	.word	0x40012300
 8005504:	40012000 	.word	0x40012000
 8005508:	10000012 	.word	0x10000012
 800550c:	20000008 	.word	0x20000008
 8005510:	431bde83 	.word	0x431bde83

08005514 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800551c:	4b7f      	ldr	r3, [pc, #508]	; (800571c <ADC_Init+0x208>)
 800551e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	431a      	orrs	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005548:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6859      	ldr	r1, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	021a      	lsls	r2, r3, #8
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800556c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6859      	ldr	r1, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800558e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6899      	ldr	r1, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	4a5e      	ldr	r2, [pc, #376]	; (8005720 <ADC_Init+0x20c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d022      	beq.n	80055f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6899      	ldr	r1, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6899      	ldr	r1, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]
 80055f0:	e00f      	b.n	8005612 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005610:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0202 	bic.w	r2, r2, #2
 8005620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6899      	ldr	r1, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	7e1b      	ldrb	r3, [r3, #24]
 800562c:	005a      	lsls	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d028      	beq.n	8005692 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <ADC_Init+0x13c>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b08      	cmp	r3, #8
 800564e:	d904      	bls.n	800565a <ADC_Init+0x146>
 8005650:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8005654:	4833      	ldr	r0, [pc, #204]	; (8005724 <ADC_Init+0x210>)
 8005656:	f7fd fc4e 	bl	8002ef6 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005668:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005678:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6859      	ldr	r1, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	3b01      	subs	r3, #1
 8005686:	035a      	lsls	r2, r3, #13
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	605a      	str	r2, [r3, #4]
 8005690:	e007      	b.n	80056a2 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056a0:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80056b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	3b01      	subs	r3, #1
 80056be:	051a      	lsls	r2, r3, #20
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6899      	ldr	r1, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056e4:	025a      	lsls	r2, r3, #9
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6899      	ldr	r1, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	029a      	lsls	r2, r3, #10
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	609a      	str	r2, [r3, #8]
}
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	40012300 	.word	0x40012300
 8005720:	0f000001 	.word	0x0f000001
 8005724:	08010f64 	.word	0x08010f64

08005728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005738:	4b0c      	ldr	r3, [pc, #48]	; (800576c <__NVIC_SetPriorityGrouping+0x44>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005744:	4013      	ands	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800575a:	4a04      	ldr	r2, [pc, #16]	; (800576c <__NVIC_SetPriorityGrouping+0x44>)
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	60d3      	str	r3, [r2, #12]
}
 8005760:	bf00      	nop
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	e000ed00 	.word	0xe000ed00

08005770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <__NVIC_GetPriorityGrouping+0x18>)
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	0a1b      	lsrs	r3, r3, #8
 800577a:	f003 0307 	and.w	r3, r3, #7
}
 800577e:	4618      	mov	r0, r3
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	e000ed00 	.word	0xe000ed00

0800578c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800579a:	2b00      	cmp	r3, #0
 800579c:	db0b      	blt.n	80057b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	f003 021f 	and.w	r2, r3, #31
 80057a4:	4907      	ldr	r1, [pc, #28]	; (80057c4 <__NVIC_EnableIRQ+0x38>)
 80057a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	2001      	movs	r0, #1
 80057ae:	fa00 f202 	lsl.w	r2, r0, r2
 80057b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	e000e100 	.word	0xe000e100

080057c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	db12      	blt.n	8005800 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	f003 021f 	and.w	r2, r3, #31
 80057e0:	490a      	ldr	r1, [pc, #40]	; (800580c <__NVIC_DisableIRQ+0x44>)
 80057e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	2001      	movs	r0, #1
 80057ea:	fa00 f202 	lsl.w	r2, r0, r2
 80057ee:	3320      	adds	r3, #32
 80057f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80057f4:	f3bf 8f4f 	dsb	sy
}
 80057f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80057fa:	f3bf 8f6f 	isb	sy
}
 80057fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	e000e100 	.word	0xe000e100

08005810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	6039      	str	r1, [r7, #0]
 800581a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800581c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005820:	2b00      	cmp	r3, #0
 8005822:	db0a      	blt.n	800583a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	490c      	ldr	r1, [pc, #48]	; (800585c <__NVIC_SetPriority+0x4c>)
 800582a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582e:	0112      	lsls	r2, r2, #4
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	440b      	add	r3, r1
 8005834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005838:	e00a      	b.n	8005850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	4908      	ldr	r1, [pc, #32]	; (8005860 <__NVIC_SetPriority+0x50>)
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	3b04      	subs	r3, #4
 8005848:	0112      	lsls	r2, r2, #4
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	440b      	add	r3, r1
 800584e:	761a      	strb	r2, [r3, #24]
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000e100 	.word	0xe000e100
 8005860:	e000ed00 	.word	0xe000ed00

08005864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	; 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f1c3 0307 	rsb	r3, r3, #7
 800587e:	2b04      	cmp	r3, #4
 8005880:	bf28      	it	cs
 8005882:	2304      	movcs	r3, #4
 8005884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	3304      	adds	r3, #4
 800588a:	2b06      	cmp	r3, #6
 800588c:	d902      	bls.n	8005894 <NVIC_EncodePriority+0x30>
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3b03      	subs	r3, #3
 8005892:	e000      	b.n	8005896 <NVIC_EncodePriority+0x32>
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005898:	f04f 32ff 	mov.w	r2, #4294967295
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43da      	mvns	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	401a      	ands	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058ac:	f04f 31ff 	mov.w	r1, #4294967295
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	fa01 f303 	lsl.w	r3, r1, r3
 80058b6:	43d9      	mvns	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058bc:	4313      	orrs	r3, r2
         );
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3724      	adds	r7, #36	; 0x24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058dc:	d301      	bcc.n	80058e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058de:	2301      	movs	r3, #1
 80058e0:	e00f      	b.n	8005902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058e2:	4a0a      	ldr	r2, [pc, #40]	; (800590c <SysTick_Config+0x40>)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ea:	210f      	movs	r1, #15
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295
 80058f0:	f7ff ff8e 	bl	8005810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <SysTick_Config+0x40>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058fa:	4b04      	ldr	r3, [pc, #16]	; (800590c <SysTick_Config+0x40>)
 80058fc:	2207      	movs	r2, #7
 80058fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	e000e010 	.word	0xe000e010

08005910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b07      	cmp	r3, #7
 800591c:	d00f      	beq.n	800593e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b06      	cmp	r3, #6
 8005922:	d00c      	beq.n	800593e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b05      	cmp	r3, #5
 8005928:	d009      	beq.n	800593e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b04      	cmp	r3, #4
 800592e:	d006      	beq.n	800593e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b03      	cmp	r3, #3
 8005934:	d003      	beq.n	800593e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005936:	2190      	movs	r1, #144	; 0x90
 8005938:	4804      	ldr	r0, [pc, #16]	; (800594c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800593a:	f7fd fadc 	bl	8002ef6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff fef2 	bl	8005728 <__NVIC_SetPriorityGrouping>
}
 8005944:	bf00      	nop
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	08010f9c 	.word	0x08010f9c

08005950 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b0f      	cmp	r3, #15
 8005966:	d903      	bls.n	8005970 <HAL_NVIC_SetPriority+0x20>
 8005968:	21a8      	movs	r1, #168	; 0xa8
 800596a:	480e      	ldr	r0, [pc, #56]	; (80059a4 <HAL_NVIC_SetPriority+0x54>)
 800596c:	f7fd fac3 	bl	8002ef6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b0f      	cmp	r3, #15
 8005974:	d903      	bls.n	800597e <HAL_NVIC_SetPriority+0x2e>
 8005976:	21a9      	movs	r1, #169	; 0xa9
 8005978:	480a      	ldr	r0, [pc, #40]	; (80059a4 <HAL_NVIC_SetPriority+0x54>)
 800597a:	f7fd fabc 	bl	8002ef6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800597e:	f7ff fef7 	bl	8005770 <__NVIC_GetPriorityGrouping>
 8005982:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	6978      	ldr	r0, [r7, #20]
 800598a:	f7ff ff6b 	bl	8005864 <NVIC_EncodePriority>
 800598e:	4602      	mov	r2, r0
 8005990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005994:	4611      	mov	r1, r2
 8005996:	4618      	mov	r0, r3
 8005998:	f7ff ff3a 	bl	8005810 <__NVIC_SetPriority>
}
 800599c:	bf00      	nop
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	08010f9c 	.word	0x08010f9c

080059a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80059b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	da03      	bge.n	80059c2 <HAL_NVIC_EnableIRQ+0x1a>
 80059ba:	21bc      	movs	r1, #188	; 0xbc
 80059bc:	4805      	ldr	r0, [pc, #20]	; (80059d4 <HAL_NVIC_EnableIRQ+0x2c>)
 80059be:	f7fd fa9a 	bl	8002ef6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fee0 	bl	800578c <__NVIC_EnableIRQ>
}
 80059cc:	bf00      	nop
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	08010f9c 	.word	0x08010f9c

080059d8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	4603      	mov	r3, r0
 80059e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80059e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	da03      	bge.n	80059f2 <HAL_NVIC_DisableIRQ+0x1a>
 80059ea:	21cc      	movs	r1, #204	; 0xcc
 80059ec:	4805      	ldr	r0, [pc, #20]	; (8005a04 <HAL_NVIC_DisableIRQ+0x2c>)
 80059ee:	f7fd fa82 	bl	8002ef6 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80059f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fee6 	bl	80057c8 <__NVIC_DisableIRQ>
}
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	08010f9c 	.word	0x08010f9c

08005a08 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff ff5b 	bl	80058cc <SysTick_Config>
 8005a16:	4603      	mov	r3, r0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a2e:	f7ff f987 	bl	8004d40 <HAL_GetTick>
 8005a32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d008      	beq.n	8005a52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2280      	movs	r2, #128	; 0x80
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e052      	b.n	8005af8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0216 	bic.w	r2, r2, #22
 8005a60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695a      	ldr	r2, [r3, #20]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d103      	bne.n	8005a82 <HAL_DMA_Abort+0x62>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0208 	bic.w	r2, r2, #8
 8005a90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005aa2:	e013      	b.n	8005acc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aa4:	f7ff f94c 	bl	8004d40 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b05      	cmp	r3, #5
 8005ab0:	d90c      	bls.n	8005acc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2203      	movs	r2, #3
 8005abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e015      	b.n	8005af8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e4      	bne.n	8005aa4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ade:	223f      	movs	r2, #63	; 0x3f
 8005ae0:	409a      	lsls	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d004      	beq.n	8005b1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2280      	movs	r2, #128	; 0x80
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e00c      	b.n	8005b38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2205      	movs	r2, #5
 8005b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0201 	bic.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b56:	4b2b      	ldr	r3, [pc, #172]	; (8005c04 <HAL_FLASH_Program+0xc0>)
 8005b58:	7e1b      	ldrb	r3, [r3, #24]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_FLASH_Program+0x1e>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e04b      	b.n	8005bfa <HAL_FLASH_Program+0xb6>
 8005b62:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <HAL_FLASH_Program+0xc0>)
 8005b64:	2201      	movs	r2, #1
 8005b66:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00c      	beq.n	8005b88 <HAL_FLASH_Program+0x44>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d009      	beq.n	8005b88 <HAL_FLASH_Program+0x44>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d006      	beq.n	8005b88 <HAL_FLASH_Program+0x44>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d003      	beq.n	8005b88 <HAL_FLASH_Program+0x44>
 8005b80:	21a2      	movs	r1, #162	; 0xa2
 8005b82:	4821      	ldr	r0, [pc, #132]	; (8005c08 <HAL_FLASH_Program+0xc4>)
 8005b84:	f7fd f9b7 	bl	8002ef6 <assert_failed>
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005b8c:	f000 f872 	bl	8005c74 <FLASH_WaitForLastOperation>
 8005b90:	4603      	mov	r3, r0
 8005b92:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d12b      	bne.n	8005bf2 <HAL_FLASH_Program+0xae>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d105      	bne.n	8005bac <HAL_FLASH_Program+0x68>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005ba0:	783b      	ldrb	r3, [r7, #0]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	68b8      	ldr	r0, [r7, #8]
 8005ba6:	f000 f96f 	bl	8005e88 <FLASH_Program_Byte>
 8005baa:	e016      	b.n	8005bda <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d105      	bne.n	8005bbe <HAL_FLASH_Program+0x7a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005bb2:	883b      	ldrh	r3, [r7, #0]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	68b8      	ldr	r0, [r7, #8]
 8005bb8:	f000 f928 	bl	8005e0c <FLASH_Program_HalfWord>
 8005bbc:	e00d      	b.n	8005bda <HAL_FLASH_Program+0x96>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d105      	bne.n	8005bd0 <HAL_FLASH_Program+0x8c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	68b8      	ldr	r0, [r7, #8]
 8005bca:	f000 f8e1 	bl	8005d90 <FLASH_Program_Word>
 8005bce:	e004      	b.n	8005bda <HAL_FLASH_Program+0x96>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd4:	68b8      	ldr	r0, [r7, #8]
 8005bd6:	f000 f88d 	bl	8005cf4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bda:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bde:	f000 f849 	bl	8005c74 <FLASH_WaitForLastOperation>
 8005be2:	4603      	mov	r3, r0
 8005be4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005be6:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <HAL_FLASH_Program+0xc8>)
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <HAL_FLASH_Program+0xc8>)
 8005bec:	f023 0301 	bic.w	r3, r3, #1
 8005bf0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005bf2:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <HAL_FLASH_Program+0xc0>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	2000083c 	.word	0x2000083c
 8005c08:	08010fd8 	.word	0x08010fd8
 8005c0c:	40023c00 	.word	0x40023c00

08005c10 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <HAL_FLASH_Unlock+0x38>)
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	da0b      	bge.n	8005c3a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005c22:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <HAL_FLASH_Unlock+0x38>)
 8005c24:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <HAL_FLASH_Unlock+0x3c>)
 8005c26:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005c28:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <HAL_FLASH_Unlock+0x38>)
 8005c2a:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <HAL_FLASH_Unlock+0x40>)
 8005c2c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c2e:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <HAL_FLASH_Unlock+0x38>)
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	da01      	bge.n	8005c3a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	40023c00 	.word	0x40023c00
 8005c4c:	45670123 	.word	0x45670123
 8005c50:	cdef89ab 	.word	0xcdef89ab

08005c54 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <HAL_FLASH_Lock+0x1c>)
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	4a04      	ldr	r2, [pc, #16]	; (8005c70 <HAL_FLASH_Lock+0x1c>)
 8005c5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c62:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	40023c00 	.word	0x40023c00

08005c74 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c80:	4b1a      	ldr	r3, [pc, #104]	; (8005cec <FLASH_WaitForLastOperation+0x78>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005c86:	f7ff f85b 	bl	8004d40 <HAL_GetTick>
 8005c8a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005c8c:	e010      	b.n	8005cb0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c94:	d00c      	beq.n	8005cb0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d007      	beq.n	8005cac <FLASH_WaitForLastOperation+0x38>
 8005c9c:	f7ff f850 	bl	8004d40 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d201      	bcs.n	8005cb0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e019      	b.n	8005ce4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005cb0:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <FLASH_WaitForLastOperation+0x7c>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e8      	bne.n	8005c8e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <FLASH_WaitForLastOperation+0x7c>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005cc8:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <FLASH_WaitForLastOperation+0x7c>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005cce:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <FLASH_WaitForLastOperation+0x7c>)
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005cda:	f000 f911 	bl	8005f00 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
  
}  
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	2000083c 	.word	0x2000083c
 8005cf0:	40023c00 	.word	0x40023c00

08005cf4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d06:	d303      	bcc.n	8005d10 <FLASH_Program_DoubleWord+0x1c>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4a1c      	ldr	r2, [pc, #112]	; (8005d7c <FLASH_Program_DoubleWord+0x88>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d90c      	bls.n	8005d2a <FLASH_Program_DoubleWord+0x36>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4a1b      	ldr	r2, [pc, #108]	; (8005d80 <FLASH_Program_DoubleWord+0x8c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d903      	bls.n	8005d20 <FLASH_Program_DoubleWord+0x2c>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4a1a      	ldr	r2, [pc, #104]	; (8005d84 <FLASH_Program_DoubleWord+0x90>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d904      	bls.n	8005d2a <FLASH_Program_DoubleWord+0x36>
 8005d20:	f240 2165 	movw	r1, #613	; 0x265
 8005d24:	4818      	ldr	r0, [pc, #96]	; (8005d88 <FLASH_Program_DoubleWord+0x94>)
 8005d26:	f7fd f8e6 	bl	8002ef6 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d2a:	4b18      	ldr	r3, [pc, #96]	; (8005d8c <FLASH_Program_DoubleWord+0x98>)
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <FLASH_Program_DoubleWord+0x98>)
 8005d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005d36:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <FLASH_Program_DoubleWord+0x98>)
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	4a14      	ldr	r2, [pc, #80]	; (8005d8c <FLASH_Program_DoubleWord+0x98>)
 8005d3c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005d40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d42:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <FLASH_Program_DoubleWord+0x98>)
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	4a11      	ldr	r2, [pc, #68]	; (8005d8c <FLASH_Program_DoubleWord+0x98>)
 8005d48:	f043 0301 	orr.w	r3, r3, #1
 8005d4c:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005d54:	f3bf 8f6f 	isb	sy
}
 8005d58:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005d5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	000a      	movs	r2, r1
 8005d68:	2300      	movs	r3, #0
 8005d6a:	68f9      	ldr	r1, [r7, #12]
 8005d6c:	3104      	adds	r1, #4
 8005d6e:	4613      	mov	r3, r2
 8005d70:	600b      	str	r3, [r1, #0]
}
 8005d72:	bf00      	nop
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	0807ffff 	.word	0x0807ffff
 8005d80:	1fff77ff 	.word	0x1fff77ff
 8005d84:	1fff7a0f 	.word	0x1fff7a0f
 8005d88:	08010fd8 	.word	0x08010fd8
 8005d8c:	40023c00 	.word	0x40023c00

08005d90 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005da0:	d303      	bcc.n	8005daa <FLASH_Program_Word+0x1a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a14      	ldr	r2, [pc, #80]	; (8005df8 <FLASH_Program_Word+0x68>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d90c      	bls.n	8005dc4 <FLASH_Program_Word+0x34>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a13      	ldr	r2, [pc, #76]	; (8005dfc <FLASH_Program_Word+0x6c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d903      	bls.n	8005dba <FLASH_Program_Word+0x2a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <FLASH_Program_Word+0x70>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d904      	bls.n	8005dc4 <FLASH_Program_Word+0x34>
 8005dba:	f240 2187 	movw	r1, #647	; 0x287
 8005dbe:	4811      	ldr	r0, [pc, #68]	; (8005e04 <FLASH_Program_Word+0x74>)
 8005dc0:	f7fd f899 	bl	8002ef6 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005dc4:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <FLASH_Program_Word+0x78>)
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	4a0f      	ldr	r2, [pc, #60]	; (8005e08 <FLASH_Program_Word+0x78>)
 8005dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005dd0:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <FLASH_Program_Word+0x78>)
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	4a0c      	ldr	r2, [pc, #48]	; (8005e08 <FLASH_Program_Word+0x78>)
 8005dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	; (8005e08 <FLASH_Program_Word+0x78>)
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	4a09      	ldr	r2, [pc, #36]	; (8005e08 <FLASH_Program_Word+0x78>)
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	601a      	str	r2, [r3, #0]
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	0807ffff 	.word	0x0807ffff
 8005dfc:	1fff77ff 	.word	0x1fff77ff
 8005e00:	1fff7a0f 	.word	0x1fff7a0f
 8005e04:	08010fd8 	.word	0x08010fd8
 8005e08:	40023c00 	.word	0x40023c00

08005e0c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e1e:	d303      	bcc.n	8005e28 <FLASH_Program_HalfWord+0x1c>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a14      	ldr	r2, [pc, #80]	; (8005e74 <FLASH_Program_HalfWord+0x68>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d90c      	bls.n	8005e42 <FLASH_Program_HalfWord+0x36>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a13      	ldr	r2, [pc, #76]	; (8005e78 <FLASH_Program_HalfWord+0x6c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d903      	bls.n	8005e38 <FLASH_Program_HalfWord+0x2c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a12      	ldr	r2, [pc, #72]	; (8005e7c <FLASH_Program_HalfWord+0x70>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d904      	bls.n	8005e42 <FLASH_Program_HalfWord+0x36>
 8005e38:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8005e3c:	4810      	ldr	r0, [pc, #64]	; (8005e80 <FLASH_Program_HalfWord+0x74>)
 8005e3e:	f7fd f85a 	bl	8002ef6 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e42:	4b10      	ldr	r3, [pc, #64]	; (8005e84 <FLASH_Program_HalfWord+0x78>)
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	4a0f      	ldr	r2, [pc, #60]	; (8005e84 <FLASH_Program_HalfWord+0x78>)
 8005e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005e4e:	4b0d      	ldr	r3, [pc, #52]	; (8005e84 <FLASH_Program_HalfWord+0x78>)
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	4a0c      	ldr	r2, [pc, #48]	; (8005e84 <FLASH_Program_HalfWord+0x78>)
 8005e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005e5a:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <FLASH_Program_HalfWord+0x78>)
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	4a09      	ldr	r2, [pc, #36]	; (8005e84 <FLASH_Program_HalfWord+0x78>)
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	887a      	ldrh	r2, [r7, #2]
 8005e6a:	801a      	strh	r2, [r3, #0]
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	0807ffff 	.word	0x0807ffff
 8005e78:	1fff77ff 	.word	0x1fff77ff
 8005e7c:	1fff7a0f 	.word	0x1fff7a0f
 8005e80:	08010fd8 	.word	0x08010fd8
 8005e84:	40023c00 	.word	0x40023c00

08005e88 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e9a:	d303      	bcc.n	8005ea4 <FLASH_Program_Byte+0x1c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a13      	ldr	r2, [pc, #76]	; (8005eec <FLASH_Program_Byte+0x64>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d90c      	bls.n	8005ebe <FLASH_Program_Byte+0x36>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a12      	ldr	r2, [pc, #72]	; (8005ef0 <FLASH_Program_Byte+0x68>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d903      	bls.n	8005eb4 <FLASH_Program_Byte+0x2c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a11      	ldr	r2, [pc, #68]	; (8005ef4 <FLASH_Program_Byte+0x6c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d904      	bls.n	8005ebe <FLASH_Program_Byte+0x36>
 8005eb4:	f240 21b9 	movw	r1, #697	; 0x2b9
 8005eb8:	480f      	ldr	r0, [pc, #60]	; (8005ef8 <FLASH_Program_Byte+0x70>)
 8005eba:	f7fd f81c 	bl	8002ef6 <assert_failed>
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ebe:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <FLASH_Program_Byte+0x74>)
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	4a0e      	ldr	r2, [pc, #56]	; (8005efc <FLASH_Program_Byte+0x74>)
 8005ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005eca:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <FLASH_Program_Byte+0x74>)
 8005ecc:	4a0b      	ldr	r2, [pc, #44]	; (8005efc <FLASH_Program_Byte+0x74>)
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <FLASH_Program_Byte+0x74>)
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	4a09      	ldr	r2, [pc, #36]	; (8005efc <FLASH_Program_Byte+0x74>)
 8005ed8:	f043 0301 	orr.w	r3, r3, #1
 8005edc:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	78fa      	ldrb	r2, [r7, #3]
 8005ee2:	701a      	strb	r2, [r3, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	0807ffff 	.word	0x0807ffff
 8005ef0:	1fff77ff 	.word	0x1fff77ff
 8005ef4:	1fff7a0f 	.word	0x1fff7a0f
 8005ef8:	08010fd8 	.word	0x08010fd8
 8005efc:	40023c00 	.word	0x40023c00

08005f00 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005f04:	4b2f      	ldr	r3, [pc, #188]	; (8005fc4 <FLASH_SetErrorCode+0xc4>)
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005f10:	4b2d      	ldr	r3, [pc, #180]	; (8005fc8 <FLASH_SetErrorCode+0xc8>)
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	f043 0310 	orr.w	r3, r3, #16
 8005f18:	4a2b      	ldr	r2, [pc, #172]	; (8005fc8 <FLASH_SetErrorCode+0xc8>)
 8005f1a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005f1c:	4b29      	ldr	r3, [pc, #164]	; (8005fc4 <FLASH_SetErrorCode+0xc4>)
 8005f1e:	2210      	movs	r2, #16
 8005f20:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005f22:	4b28      	ldr	r3, [pc, #160]	; (8005fc4 <FLASH_SetErrorCode+0xc4>)
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d008      	beq.n	8005f40 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005f2e:	4b26      	ldr	r3, [pc, #152]	; (8005fc8 <FLASH_SetErrorCode+0xc8>)
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	f043 0308 	orr.w	r3, r3, #8
 8005f36:	4a24      	ldr	r2, [pc, #144]	; (8005fc8 <FLASH_SetErrorCode+0xc8>)
 8005f38:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005f3a:	4b22      	ldr	r3, [pc, #136]	; (8005fc4 <FLASH_SetErrorCode+0xc4>)
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005f40:	4b20      	ldr	r3, [pc, #128]	; (8005fc4 <FLASH_SetErrorCode+0xc4>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005f4c:	4b1e      	ldr	r3, [pc, #120]	; (8005fc8 <FLASH_SetErrorCode+0xc8>)
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	f043 0304 	orr.w	r3, r3, #4
 8005f54:	4a1c      	ldr	r2, [pc, #112]	; (8005fc8 <FLASH_SetErrorCode+0xc8>)
 8005f56:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005f58:	4b1a      	ldr	r3, [pc, #104]	; (8005fc4 <FLASH_SetErrorCode+0xc4>)
 8005f5a:	2240      	movs	r2, #64	; 0x40
 8005f5c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005f5e:	4b19      	ldr	r3, [pc, #100]	; (8005fc4 <FLASH_SetErrorCode+0xc4>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d008      	beq.n	8005f7c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005f6a:	4b17      	ldr	r3, [pc, #92]	; (8005fc8 <FLASH_SetErrorCode+0xc8>)
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f043 0302 	orr.w	r3, r3, #2
 8005f72:	4a15      	ldr	r2, [pc, #84]	; (8005fc8 <FLASH_SetErrorCode+0xc8>)
 8005f74:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005f76:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <FLASH_SetErrorCode+0xc4>)
 8005f78:	2280      	movs	r2, #128	; 0x80
 8005f7a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005f7c:	4b11      	ldr	r3, [pc, #68]	; (8005fc4 <FLASH_SetErrorCode+0xc4>)
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d009      	beq.n	8005f9c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005f88:	4b0f      	ldr	r3, [pc, #60]	; (8005fc8 <FLASH_SetErrorCode+0xc8>)
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	f043 0301 	orr.w	r3, r3, #1
 8005f90:	4a0d      	ldr	r2, [pc, #52]	; (8005fc8 <FLASH_SetErrorCode+0xc8>)
 8005f92:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005f94:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <FLASH_SetErrorCode+0xc4>)
 8005f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f9a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005f9c:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <FLASH_SetErrorCode+0xc4>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d008      	beq.n	8005fba <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005fa8:	4b07      	ldr	r3, [pc, #28]	; (8005fc8 <FLASH_SetErrorCode+0xc8>)
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	f043 0320 	orr.w	r3, r3, #32
 8005fb0:	4a05      	ldr	r2, [pc, #20]	; (8005fc8 <FLASH_SetErrorCode+0xc8>)
 8005fb2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005fb4:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <FLASH_SetErrorCode+0xc4>)
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	60da      	str	r2, [r3, #12]
  }
}
 8005fba:	bf00      	nop
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	40023c00 	.word	0x40023c00
 8005fc8:	2000083c 	.word	0x2000083c

08005fcc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005fde:	4b40      	ldr	r3, [pc, #256]	; (80060e0 <HAL_FLASHEx_Erase+0x114>)
 8005fe0:	7e1b      	ldrb	r3, [r3, #24]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <HAL_FLASHEx_Erase+0x1e>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e076      	b.n	80060d8 <HAL_FLASHEx_Erase+0x10c>
 8005fea:	4b3d      	ldr	r3, [pc, #244]	; (80060e0 <HAL_FLASHEx_Erase+0x114>)
 8005fec:	2201      	movs	r2, #1
 8005fee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <HAL_FLASHEx_Erase+0x3c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d003      	beq.n	8006008 <HAL_FLASHEx_Erase+0x3c>
 8006000:	21a9      	movs	r1, #169	; 0xa9
 8006002:	4838      	ldr	r0, [pc, #224]	; (80060e4 <HAL_FLASHEx_Erase+0x118>)
 8006004:	f7fc ff77 	bl	8002ef6 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006008:	f24c 3050 	movw	r0, #50000	; 0xc350
 800600c:	f7ff fe32 	bl	8005c74 <FLASH_WaitForLastOperation>
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d15a      	bne.n	80060d0 <HAL_FLASHEx_Erase+0x104>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	f04f 32ff 	mov.w	r2, #4294967295
 8006020:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d115      	bne.n	8006056 <HAL_FLASHEx_Erase+0x8a>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	b2da      	uxtb	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f000 f858 	bl	80060ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800603c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006040:	f7ff fe18 	bl	8005c74 <FLASH_WaitForLastOperation>
 8006044:	4603      	mov	r3, r0
 8006046:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006048:	4b27      	ldr	r3, [pc, #156]	; (80060e8 <HAL_FLASHEx_Erase+0x11c>)
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	4a26      	ldr	r2, [pc, #152]	; (80060e8 <HAL_FLASHEx_Erase+0x11c>)
 800604e:	f023 0304 	bic.w	r3, r3, #4
 8006052:	6113      	str	r3, [r2, #16]
 8006054:	e03a      	b.n	80060cc <HAL_FLASHEx_Erase+0x100>
    }
    else
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	4413      	add	r3, r2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d006      	beq.n	8006072 <HAL_FLASHEx_Erase+0xa6>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	4413      	add	r3, r2
 800606e:	2b08      	cmp	r3, #8
 8006070:	d903      	bls.n	800607a <HAL_FLASHEx_Erase+0xae>
 8006072:	21c1      	movs	r1, #193	; 0xc1
 8006074:	481b      	ldr	r0, [pc, #108]	; (80060e4 <HAL_FLASHEx_Erase+0x118>)
 8006076:	f7fc ff3e 	bl	8002ef6 <assert_failed>

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	60bb      	str	r3, [r7, #8]
 8006080:	e01c      	b.n	80060bc <HAL_FLASHEx_Erase+0xf0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	4619      	mov	r1, r3
 800608a:	68b8      	ldr	r0, [r7, #8]
 800608c:	f000 f86a 	bl	8006164 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006090:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006094:	f7ff fdee 	bl	8005c74 <FLASH_WaitForLastOperation>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800609c:	4b12      	ldr	r3, [pc, #72]	; (80060e8 <HAL_FLASHEx_Erase+0x11c>)
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	4a11      	ldr	r2, [pc, #68]	; (80060e8 <HAL_FLASHEx_Erase+0x11c>)
 80060a2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80060a6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <HAL_FLASHEx_Erase+0xea>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	601a      	str	r2, [r3, #0]
          break;
 80060b4:	e00a      	b.n	80060cc <HAL_FLASHEx_Erase+0x100>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	3301      	adds	r3, #1
 80060ba:	60bb      	str	r3, [r7, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	4413      	add	r3, r2
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d3da      	bcc.n	8006082 <HAL_FLASHEx_Erase+0xb6>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80060cc:	f000 f8c0 	bl	8006250 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80060d0:	4b03      	ldr	r3, [pc, #12]	; (80060e0 <HAL_FLASHEx_Erase+0x114>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	761a      	strb	r2, [r3, #24]

  return status;
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	2000083c 	.word	0x2000083c
 80060e4:	08011014 	.word	0x08011014
 80060e8:	40023c00 	.word	0x40023c00

080060ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	6039      	str	r1, [r7, #0]
 80060f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 80060f8:	79fb      	ldrb	r3, [r7, #7]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00d      	beq.n	800611a <FLASH_MassErase+0x2e>
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d00a      	beq.n	800611a <FLASH_MassErase+0x2e>
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d007      	beq.n	800611a <FLASH_MassErase+0x2e>
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	2b03      	cmp	r3, #3
 800610e:	d004      	beq.n	800611a <FLASH_MassErase+0x2e>
 8006110:	f240 31ba 	movw	r1, #954	; 0x3ba
 8006114:	4811      	ldr	r0, [pc, #68]	; (800615c <FLASH_MassErase+0x70>)
 8006116:	f7fc feee 	bl	8002ef6 <assert_failed>
  assert_param(IS_FLASH_BANK(Banks));
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d004      	beq.n	800612a <FLASH_MassErase+0x3e>
 8006120:	f240 31bb 	movw	r1, #955	; 0x3bb
 8006124:	480d      	ldr	r0, [pc, #52]	; (800615c <FLASH_MassErase+0x70>)
 8006126:	f7fc fee6 	bl	8002ef6 <assert_failed>

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800612a:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <FLASH_MassErase+0x74>)
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	4a0c      	ldr	r2, [pc, #48]	; (8006160 <FLASH_MassErase+0x74>)
 8006130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006134:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006136:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <FLASH_MassErase+0x74>)
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	4a09      	ldr	r2, [pc, #36]	; (8006160 <FLASH_MassErase+0x74>)
 800613c:	f043 0304 	orr.w	r3, r3, #4
 8006140:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006142:	4b07      	ldr	r3, [pc, #28]	; (8006160 <FLASH_MassErase+0x74>)
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	4313      	orrs	r3, r2
 800614c:	4a04      	ldr	r2, [pc, #16]	; (8006160 <FLASH_MassErase+0x74>)
 800614e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006152:	6113      	str	r3, [r2, #16]
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	08011014 	.word	0x08011014
 8006160:	40023c00 	.word	0x40023c00

08006164 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d019      	beq.n	80061ae <FLASH_Erase_Sector+0x4a>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d016      	beq.n	80061ae <FLASH_Erase_Sector+0x4a>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d013      	beq.n	80061ae <FLASH_Erase_Sector+0x4a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b03      	cmp	r3, #3
 800618a:	d010      	beq.n	80061ae <FLASH_Erase_Sector+0x4a>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b04      	cmp	r3, #4
 8006190:	d00d      	beq.n	80061ae <FLASH_Erase_Sector+0x4a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b05      	cmp	r3, #5
 8006196:	d00a      	beq.n	80061ae <FLASH_Erase_Sector+0x4a>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b06      	cmp	r3, #6
 800619c:	d007      	beq.n	80061ae <FLASH_Erase_Sector+0x4a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b07      	cmp	r3, #7
 80061a2:	d004      	beq.n	80061ae <FLASH_Erase_Sector+0x4a>
 80061a4:	f240 31d9 	movw	r1, #985	; 0x3d9
 80061a8:	4827      	ldr	r0, [pc, #156]	; (8006248 <FLASH_Erase_Sector+0xe4>)
 80061aa:	f7fc fea4 	bl	8002ef6 <assert_failed>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 80061ae:	78fb      	ldrb	r3, [r7, #3]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00d      	beq.n	80061d0 <FLASH_Erase_Sector+0x6c>
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d00a      	beq.n	80061d0 <FLASH_Erase_Sector+0x6c>
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d007      	beq.n	80061d0 <FLASH_Erase_Sector+0x6c>
 80061c0:	78fb      	ldrb	r3, [r7, #3]
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d004      	beq.n	80061d0 <FLASH_Erase_Sector+0x6c>
 80061c6:	f240 31da 	movw	r1, #986	; 0x3da
 80061ca:	481f      	ldr	r0, [pc, #124]	; (8006248 <FLASH_Erase_Sector+0xe4>)
 80061cc:	f7fc fe93 	bl	8002ef6 <assert_failed>

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <FLASH_Erase_Sector+0x78>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	e010      	b.n	80061fe <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d103      	bne.n	80061ea <FLASH_Erase_Sector+0x86>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80061e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	e009      	b.n	80061fe <FLASH_Erase_Sector+0x9a>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d103      	bne.n	80061f8 <FLASH_Erase_Sector+0x94>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80061f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	e002      	b.n	80061fe <FLASH_Erase_Sector+0x9a>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80061f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80061fc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061fe:	4b13      	ldr	r3, [pc, #76]	; (800624c <FLASH_Erase_Sector+0xe8>)
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	4a12      	ldr	r2, [pc, #72]	; (800624c <FLASH_Erase_Sector+0xe8>)
 8006204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006208:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800620a:	4b10      	ldr	r3, [pc, #64]	; (800624c <FLASH_Erase_Sector+0xe8>)
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	490f      	ldr	r1, [pc, #60]	; (800624c <FLASH_Erase_Sector+0xe8>)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006216:	4b0d      	ldr	r3, [pc, #52]	; (800624c <FLASH_Erase_Sector+0xe8>)
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	4a0c      	ldr	r2, [pc, #48]	; (800624c <FLASH_Erase_Sector+0xe8>)
 800621c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006220:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006222:	4b0a      	ldr	r3, [pc, #40]	; (800624c <FLASH_Erase_Sector+0xe8>)
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	4313      	orrs	r3, r2
 800622c:	4a07      	ldr	r2, [pc, #28]	; (800624c <FLASH_Erase_Sector+0xe8>)
 800622e:	f043 0302 	orr.w	r3, r3, #2
 8006232:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <FLASH_Erase_Sector+0xe8>)
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	4a04      	ldr	r2, [pc, #16]	; (800624c <FLASH_Erase_Sector+0xe8>)
 800623a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623e:	6113      	str	r3, [r2, #16]
}
 8006240:	bf00      	nop
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	08011014 	.word	0x08011014
 800624c:	40023c00 	.word	0x40023c00

08006250 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006254:	4b20      	ldr	r3, [pc, #128]	; (80062d8 <FLASH_FlushCaches+0x88>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800625c:	2b00      	cmp	r3, #0
 800625e:	d017      	beq.n	8006290 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006260:	4b1d      	ldr	r3, [pc, #116]	; (80062d8 <FLASH_FlushCaches+0x88>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a1c      	ldr	r2, [pc, #112]	; (80062d8 <FLASH_FlushCaches+0x88>)
 8006266:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800626a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800626c:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <FLASH_FlushCaches+0x88>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a19      	ldr	r2, [pc, #100]	; (80062d8 <FLASH_FlushCaches+0x88>)
 8006272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <FLASH_FlushCaches+0x88>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a16      	ldr	r2, [pc, #88]	; (80062d8 <FLASH_FlushCaches+0x88>)
 800627e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006282:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006284:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <FLASH_FlushCaches+0x88>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a13      	ldr	r2, [pc, #76]	; (80062d8 <FLASH_FlushCaches+0x88>)
 800628a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800628e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006290:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <FLASH_FlushCaches+0x88>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006298:	2b00      	cmp	r3, #0
 800629a:	d017      	beq.n	80062cc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800629c:	4b0e      	ldr	r3, [pc, #56]	; (80062d8 <FLASH_FlushCaches+0x88>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0d      	ldr	r2, [pc, #52]	; (80062d8 <FLASH_FlushCaches+0x88>)
 80062a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062a6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80062a8:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <FLASH_FlushCaches+0x88>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a0a      	ldr	r2, [pc, #40]	; (80062d8 <FLASH_FlushCaches+0x88>)
 80062ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	4b08      	ldr	r3, [pc, #32]	; (80062d8 <FLASH_FlushCaches+0x88>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a07      	ldr	r2, [pc, #28]	; (80062d8 <FLASH_FlushCaches+0x88>)
 80062ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062be:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80062c0:	4b05      	ldr	r3, [pc, #20]	; (80062d8 <FLASH_FlushCaches+0x88>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a04      	ldr	r2, [pc, #16]	; (80062d8 <FLASH_FlushCaches+0x88>)
 80062c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062ca:	6013      	str	r3, [r2, #0]
  }
}
 80062cc:	bf00      	nop
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40023c00 	.word	0x40023c00

080062dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a33      	ldr	r2, [pc, #204]	; (80063c4 <HAL_GPIO_Init+0xe8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d017      	beq.n	800632a <HAL_GPIO_Init+0x4e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a32      	ldr	r2, [pc, #200]	; (80063c8 <HAL_GPIO_Init+0xec>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <HAL_GPIO_Init+0x4e>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a31      	ldr	r2, [pc, #196]	; (80063cc <HAL_GPIO_Init+0xf0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00f      	beq.n	800632a <HAL_GPIO_Init+0x4e>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a30      	ldr	r2, [pc, #192]	; (80063d0 <HAL_GPIO_Init+0xf4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00b      	beq.n	800632a <HAL_GPIO_Init+0x4e>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a2f      	ldr	r2, [pc, #188]	; (80063d4 <HAL_GPIO_Init+0xf8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d007      	beq.n	800632a <HAL_GPIO_Init+0x4e>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a2e      	ldr	r2, [pc, #184]	; (80063d8 <HAL_GPIO_Init+0xfc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d003      	beq.n	800632a <HAL_GPIO_Init+0x4e>
 8006322:	21ac      	movs	r1, #172	; 0xac
 8006324:	482d      	ldr	r0, [pc, #180]	; (80063dc <HAL_GPIO_Init+0x100>)
 8006326:	f7fc fde6 	bl	8002ef6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_GPIO_Init+0x64>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	0c1b      	lsrs	r3, r3, #16
 800633a:	041b      	lsls	r3, r3, #16
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <HAL_GPIO_Init+0x6c>
 8006340:	21ad      	movs	r1, #173	; 0xad
 8006342:	4826      	ldr	r0, [pc, #152]	; (80063dc <HAL_GPIO_Init+0x100>)
 8006344:	f7fc fdd7 	bl	8002ef6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d035      	beq.n	80063bc <HAL_GPIO_Init+0xe0>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d031      	beq.n	80063bc <HAL_GPIO_Init+0xe0>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b11      	cmp	r3, #17
 800635e:	d02d      	beq.n	80063bc <HAL_GPIO_Init+0xe0>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2b02      	cmp	r3, #2
 8006366:	d029      	beq.n	80063bc <HAL_GPIO_Init+0xe0>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b12      	cmp	r3, #18
 800636e:	d025      	beq.n	80063bc <HAL_GPIO_Init+0xe0>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8006378:	d020      	beq.n	80063bc <HAL_GPIO_Init+0xe0>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8006382:	d01b      	beq.n	80063bc <HAL_GPIO_Init+0xe0>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800638c:	d016      	beq.n	80063bc <HAL_GPIO_Init+0xe0>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8006396:	d011      	beq.n	80063bc <HAL_GPIO_Init+0xe0>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80063a0:	d00c      	beq.n	80063bc <HAL_GPIO_Init+0xe0>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80063aa:	d007      	beq.n	80063bc <HAL_GPIO_Init+0xe0>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	d003      	beq.n	80063bc <HAL_GPIO_Init+0xe0>
 80063b4:	21ae      	movs	r1, #174	; 0xae
 80063b6:	4809      	ldr	r0, [pc, #36]	; (80063dc <HAL_GPIO_Init+0x100>)
 80063b8:	f7fc fd9d 	bl	8002ef6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063bc:	2300      	movs	r3, #0
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	e20c      	b.n	80067dc <HAL_GPIO_Init+0x500>
 80063c2:	bf00      	nop
 80063c4:	40020000 	.word	0x40020000
 80063c8:	40020400 	.word	0x40020400
 80063cc:	40020800 	.word	0x40020800
 80063d0:	40020c00 	.word	0x40020c00
 80063d4:	40021000 	.word	0x40021000
 80063d8:	40021c00 	.word	0x40021c00
 80063dc:	08011054 	.word	0x08011054
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80063e0:	2201      	movs	r2, #1
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4013      	ands	r3, r2
 80063f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	f040 81ec 	bne.w	80067d6 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	2b01      	cmp	r3, #1
 8006408:	d005      	beq.n	8006416 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006412:	2b02      	cmp	r3, #2
 8006414:	d144      	bne.n	80064a0 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00f      	beq.n	800643e <HAL_GPIO_Init+0x162>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d00b      	beq.n	800643e <HAL_GPIO_Init+0x162>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	2b02      	cmp	r3, #2
 800642c:	d007      	beq.n	800643e <HAL_GPIO_Init+0x162>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	2b03      	cmp	r3, #3
 8006434:	d003      	beq.n	800643e <HAL_GPIO_Init+0x162>
 8006436:	21c0      	movs	r1, #192	; 0xc0
 8006438:	4884      	ldr	r0, [pc, #528]	; (800664c <HAL_GPIO_Init+0x370>)
 800643a:	f7fc fd5c 	bl	8002ef6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	2203      	movs	r2, #3
 800644a:	fa02 f303 	lsl.w	r3, r2, r3
 800644e:	43db      	mvns	r3, r3
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	4013      	ands	r3, r2
 8006454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	4313      	orrs	r3, r2
 8006466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006474:	2201      	movs	r2, #1
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	fa02 f303 	lsl.w	r3, r2, r3
 800647c:	43db      	mvns	r3, r3
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	4013      	ands	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	091b      	lsrs	r3, r3, #4
 800648a:	f003 0201 	and.w	r2, r3, #1
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	fa02 f303 	lsl.w	r3, r2, r3
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	4313      	orrs	r3, r2
 8006498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f003 0303 	and.w	r3, r3, #3
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d027      	beq.n	80064fc <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <HAL_GPIO_Init+0x1f0>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d007      	beq.n	80064cc <HAL_GPIO_Init+0x1f0>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d003      	beq.n	80064cc <HAL_GPIO_Init+0x1f0>
 80064c4:	21d1      	movs	r1, #209	; 0xd1
 80064c6:	4861      	ldr	r0, [pc, #388]	; (800664c <HAL_GPIO_Init+0x370>)
 80064c8:	f7fc fd15 	bl	8002ef6 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	2203      	movs	r2, #3
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	43db      	mvns	r3, r3
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	4013      	ands	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	fa02 f303 	lsl.w	r3, r2, r3
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	2b02      	cmp	r3, #2
 8006506:	f040 80a3 	bne.w	8006650 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d077      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b09      	cmp	r3, #9
 8006518:	d073      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d06f      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d06b      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d067      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d063      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d05f      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d05b      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d057      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b02      	cmp	r3, #2
 8006558:	d053      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	2b02      	cmp	r3, #2
 8006560:	d04f      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	2b04      	cmp	r3, #4
 8006568:	d04b      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b04      	cmp	r3, #4
 8006570:	d047      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b04      	cmp	r3, #4
 8006578:	d043      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b05      	cmp	r3, #5
 8006580:	d03f      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b05      	cmp	r3, #5
 8006588:	d03b      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b05      	cmp	r3, #5
 8006590:	d037      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b06      	cmp	r3, #6
 8006598:	d033      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b06      	cmp	r3, #6
 80065a0:	d02f      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	2b05      	cmp	r3, #5
 80065a8:	d02b      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b06      	cmp	r3, #6
 80065b0:	d027      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b07      	cmp	r3, #7
 80065b8:	d023      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b07      	cmp	r3, #7
 80065c0:	d01f      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2b07      	cmp	r3, #7
 80065c8:	d01b      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b08      	cmp	r3, #8
 80065d0:	d017      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	2b0a      	cmp	r3, #10
 80065d8:	d013      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b09      	cmp	r3, #9
 80065e0:	d00f      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b09      	cmp	r3, #9
 80065e8:	d00b      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b0c      	cmp	r3, #12
 80065f0:	d007      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b0f      	cmp	r3, #15
 80065f8:	d003      	beq.n	8006602 <HAL_GPIO_Init+0x326>
 80065fa:	21de      	movs	r1, #222	; 0xde
 80065fc:	4813      	ldr	r0, [pc, #76]	; (800664c <HAL_GPIO_Init+0x370>)
 80065fe:	f7fc fc7a 	bl	8002ef6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	08da      	lsrs	r2, r3, #3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3208      	adds	r2, #8
 800660a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	220f      	movs	r2, #15
 800661a:	fa02 f303 	lsl.w	r3, r2, r3
 800661e:	43db      	mvns	r3, r3
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	4013      	ands	r3, r2
 8006624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	691a      	ldr	r2, [r3, #16]
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	4313      	orrs	r3, r2
 800663a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	08da      	lsrs	r2, r3, #3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3208      	adds	r2, #8
 8006644:	69b9      	ldr	r1, [r7, #24]
 8006646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800664a:	e001      	b.n	8006650 <HAL_GPIO_Init+0x374>
 800664c:	08011054 	.word	0x08011054
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	2203      	movs	r2, #3
 800665c:	fa02 f303 	lsl.w	r3, r2, r3
 8006660:	43db      	mvns	r3, r3
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	4013      	ands	r3, r2
 8006666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f003 0203 	and.w	r2, r3, #3
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	fa02 f303 	lsl.w	r3, r2, r3
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	4313      	orrs	r3, r2
 800667c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80a2 	beq.w	80067d6 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	4b56      	ldr	r3, [pc, #344]	; (80067f0 <HAL_GPIO_Init+0x514>)
 8006698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669a:	4a55      	ldr	r2, [pc, #340]	; (80067f0 <HAL_GPIO_Init+0x514>)
 800669c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066a0:	6453      	str	r3, [r2, #68]	; 0x44
 80066a2:	4b53      	ldr	r3, [pc, #332]	; (80067f0 <HAL_GPIO_Init+0x514>)
 80066a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066ae:	4a51      	ldr	r2, [pc, #324]	; (80067f4 <HAL_GPIO_Init+0x518>)
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	089b      	lsrs	r3, r3, #2
 80066b4:	3302      	adds	r3, #2
 80066b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	220f      	movs	r2, #15
 80066c6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ca:	43db      	mvns	r3, r3
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4013      	ands	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a48      	ldr	r2, [pc, #288]	; (80067f8 <HAL_GPIO_Init+0x51c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d019      	beq.n	800670e <HAL_GPIO_Init+0x432>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a47      	ldr	r2, [pc, #284]	; (80067fc <HAL_GPIO_Init+0x520>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d013      	beq.n	800670a <HAL_GPIO_Init+0x42e>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a46      	ldr	r2, [pc, #280]	; (8006800 <HAL_GPIO_Init+0x524>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00d      	beq.n	8006706 <HAL_GPIO_Init+0x42a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a45      	ldr	r2, [pc, #276]	; (8006804 <HAL_GPIO_Init+0x528>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d007      	beq.n	8006702 <HAL_GPIO_Init+0x426>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a44      	ldr	r2, [pc, #272]	; (8006808 <HAL_GPIO_Init+0x52c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d101      	bne.n	80066fe <HAL_GPIO_Init+0x422>
 80066fa:	2304      	movs	r3, #4
 80066fc:	e008      	b.n	8006710 <HAL_GPIO_Init+0x434>
 80066fe:	2307      	movs	r3, #7
 8006700:	e006      	b.n	8006710 <HAL_GPIO_Init+0x434>
 8006702:	2303      	movs	r3, #3
 8006704:	e004      	b.n	8006710 <HAL_GPIO_Init+0x434>
 8006706:	2302      	movs	r3, #2
 8006708:	e002      	b.n	8006710 <HAL_GPIO_Init+0x434>
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <HAL_GPIO_Init+0x434>
 800670e:	2300      	movs	r3, #0
 8006710:	69fa      	ldr	r2, [r7, #28]
 8006712:	f002 0203 	and.w	r2, r2, #3
 8006716:	0092      	lsls	r2, r2, #2
 8006718:	4093      	lsls	r3, r2
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	4313      	orrs	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006720:	4934      	ldr	r1, [pc, #208]	; (80067f4 <HAL_GPIO_Init+0x518>)
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	089b      	lsrs	r3, r3, #2
 8006726:	3302      	adds	r3, #2
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800672e:	4b37      	ldr	r3, [pc, #220]	; (800680c <HAL_GPIO_Init+0x530>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	43db      	mvns	r3, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	4013      	ands	r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006752:	4a2e      	ldr	r2, [pc, #184]	; (800680c <HAL_GPIO_Init+0x530>)
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006758:	4b2c      	ldr	r3, [pc, #176]	; (800680c <HAL_GPIO_Init+0x530>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	43db      	mvns	r3, r3
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	4013      	ands	r3, r2
 8006766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800677c:	4a23      	ldr	r2, [pc, #140]	; (800680c <HAL_GPIO_Init+0x530>)
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006782:	4b22      	ldr	r3, [pc, #136]	; (800680c <HAL_GPIO_Init+0x530>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	43db      	mvns	r3, r3
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	4013      	ands	r3, r2
 8006790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067a6:	4a19      	ldr	r2, [pc, #100]	; (800680c <HAL_GPIO_Init+0x530>)
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067ac:	4b17      	ldr	r3, [pc, #92]	; (800680c <HAL_GPIO_Init+0x530>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	43db      	mvns	r3, r3
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	4013      	ands	r3, r2
 80067ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067d0:	4a0e      	ldr	r2, [pc, #56]	; (800680c <HAL_GPIO_Init+0x530>)
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	3301      	adds	r3, #1
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	2b0f      	cmp	r3, #15
 80067e0:	f67f adfe 	bls.w	80063e0 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	3720      	adds	r7, #32
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	40023800 	.word	0x40023800
 80067f4:	40013800 	.word	0x40013800
 80067f8:	40020000 	.word	0x40020000
 80067fc:	40020400 	.word	0x40020400
 8006800:	40020800 	.word	0x40020800
 8006804:	40020c00 	.word	0x40020c00
 8006808:	40021000 	.word	0x40021000
 800680c:	40013c00 	.word	0x40013c00

08006810 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800681a:	2300      	movs	r3, #0
 800681c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a71      	ldr	r2, [pc, #452]	; (80069f0 <HAL_GPIO_DeInit+0x1e0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d018      	beq.n	8006860 <HAL_GPIO_DeInit+0x50>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a70      	ldr	r2, [pc, #448]	; (80069f4 <HAL_GPIO_DeInit+0x1e4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d014      	beq.n	8006860 <HAL_GPIO_DeInit+0x50>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a6f      	ldr	r2, [pc, #444]	; (80069f8 <HAL_GPIO_DeInit+0x1e8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d010      	beq.n	8006860 <HAL_GPIO_DeInit+0x50>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a6e      	ldr	r2, [pc, #440]	; (80069fc <HAL_GPIO_DeInit+0x1ec>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00c      	beq.n	8006860 <HAL_GPIO_DeInit+0x50>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a6d      	ldr	r2, [pc, #436]	; (8006a00 <HAL_GPIO_DeInit+0x1f0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d008      	beq.n	8006860 <HAL_GPIO_DeInit+0x50>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a6c      	ldr	r2, [pc, #432]	; (8006a04 <HAL_GPIO_DeInit+0x1f4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d004      	beq.n	8006860 <HAL_GPIO_DeInit+0x50>
 8006856:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800685a:	486b      	ldr	r0, [pc, #428]	; (8006a08 <HAL_GPIO_DeInit+0x1f8>)
 800685c:	f7fc fb4b 	bl	8002ef6 <assert_failed>
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	e0bb      	b.n	80069de <HAL_GPIO_DeInit+0x1ce>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006866:	2201      	movs	r2, #1
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	fa02 f303 	lsl.w	r3, r2, r3
 800686e:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	4013      	ands	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	429a      	cmp	r2, r3
 800687e:	f040 80ab 	bne.w	80069d8 <HAL_GPIO_DeInit+0x1c8>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006882:	4a62      	ldr	r2, [pc, #392]	; (8006a0c <HAL_GPIO_DeInit+0x1fc>)
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	089b      	lsrs	r3, r3, #2
 8006888:	3302      	adds	r3, #2
 800688a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800688e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f003 0303 	and.w	r3, r3, #3
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	220f      	movs	r2, #15
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	4013      	ands	r3, r2
 80068a2:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a52      	ldr	r2, [pc, #328]	; (80069f0 <HAL_GPIO_DeInit+0x1e0>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d019      	beq.n	80068e0 <HAL_GPIO_DeInit+0xd0>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a51      	ldr	r2, [pc, #324]	; (80069f4 <HAL_GPIO_DeInit+0x1e4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d013      	beq.n	80068dc <HAL_GPIO_DeInit+0xcc>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a50      	ldr	r2, [pc, #320]	; (80069f8 <HAL_GPIO_DeInit+0x1e8>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00d      	beq.n	80068d8 <HAL_GPIO_DeInit+0xc8>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a4f      	ldr	r2, [pc, #316]	; (80069fc <HAL_GPIO_DeInit+0x1ec>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <HAL_GPIO_DeInit+0xc4>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a4e      	ldr	r2, [pc, #312]	; (8006a00 <HAL_GPIO_DeInit+0x1f0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d101      	bne.n	80068d0 <HAL_GPIO_DeInit+0xc0>
 80068cc:	2304      	movs	r3, #4
 80068ce:	e008      	b.n	80068e2 <HAL_GPIO_DeInit+0xd2>
 80068d0:	2307      	movs	r3, #7
 80068d2:	e006      	b.n	80068e2 <HAL_GPIO_DeInit+0xd2>
 80068d4:	2303      	movs	r3, #3
 80068d6:	e004      	b.n	80068e2 <HAL_GPIO_DeInit+0xd2>
 80068d8:	2302      	movs	r3, #2
 80068da:	e002      	b.n	80068e2 <HAL_GPIO_DeInit+0xd2>
 80068dc:	2301      	movs	r3, #1
 80068de:	e000      	b.n	80068e2 <HAL_GPIO_DeInit+0xd2>
 80068e0:	2300      	movs	r3, #0
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	f002 0203 	and.w	r2, r2, #3
 80068e8:	0092      	lsls	r2, r2, #2
 80068ea:	4093      	lsls	r3, r2
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d132      	bne.n	8006958 <HAL_GPIO_DeInit+0x148>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80068f2:	4b47      	ldr	r3, [pc, #284]	; (8006a10 <HAL_GPIO_DeInit+0x200>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	43db      	mvns	r3, r3
 80068fa:	4945      	ldr	r1, [pc, #276]	; (8006a10 <HAL_GPIO_DeInit+0x200>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006900:	4b43      	ldr	r3, [pc, #268]	; (8006a10 <HAL_GPIO_DeInit+0x200>)
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	43db      	mvns	r3, r3
 8006908:	4941      	ldr	r1, [pc, #260]	; (8006a10 <HAL_GPIO_DeInit+0x200>)
 800690a:	4013      	ands	r3, r2
 800690c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800690e:	4b40      	ldr	r3, [pc, #256]	; (8006a10 <HAL_GPIO_DeInit+0x200>)
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	43db      	mvns	r3, r3
 8006916:	493e      	ldr	r1, [pc, #248]	; (8006a10 <HAL_GPIO_DeInit+0x200>)
 8006918:	4013      	ands	r3, r2
 800691a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800691c:	4b3c      	ldr	r3, [pc, #240]	; (8006a10 <HAL_GPIO_DeInit+0x200>)
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	43db      	mvns	r3, r3
 8006924:	493a      	ldr	r1, [pc, #232]	; (8006a10 <HAL_GPIO_DeInit+0x200>)
 8006926:	4013      	ands	r3, r2
 8006928:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f003 0303 	and.w	r3, r3, #3
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	220f      	movs	r2, #15
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800693a:	4a34      	ldr	r2, [pc, #208]	; (8006a0c <HAL_GPIO_DeInit+0x1fc>)
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	089b      	lsrs	r3, r3, #2
 8006940:	3302      	adds	r3, #2
 8006942:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	43da      	mvns	r2, r3
 800694a:	4830      	ldr	r0, [pc, #192]	; (8006a0c <HAL_GPIO_DeInit+0x1fc>)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	089b      	lsrs	r3, r3, #2
 8006950:	400a      	ands	r2, r1
 8006952:	3302      	adds	r3, #2
 8006954:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	2103      	movs	r1, #3
 8006962:	fa01 f303 	lsl.w	r3, r1, r3
 8006966:	43db      	mvns	r3, r3
 8006968:	401a      	ands	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	08da      	lsrs	r2, r3, #3
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	3208      	adds	r2, #8
 8006976:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	220f      	movs	r2, #15
 8006984:	fa02 f303 	lsl.w	r3, r2, r3
 8006988:	43db      	mvns	r3, r3
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	08d2      	lsrs	r2, r2, #3
 800698e:	4019      	ands	r1, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3208      	adds	r2, #8
 8006994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	2103      	movs	r1, #3
 80069a2:	fa01 f303 	lsl.w	r3, r1, r3
 80069a6:	43db      	mvns	r3, r3
 80069a8:	401a      	ands	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	2101      	movs	r1, #1
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ba:	43db      	mvns	r3, r3
 80069bc:	401a      	ands	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	2103      	movs	r1, #3
 80069cc:	fa01 f303 	lsl.w	r3, r1, r3
 80069d0:	43db      	mvns	r3, r3
 80069d2:	401a      	ands	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	3301      	adds	r3, #1
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2b0f      	cmp	r3, #15
 80069e2:	f67f af40 	bls.w	8006866 <HAL_GPIO_DeInit+0x56>
    }
  }
}
 80069e6:	bf00      	nop
 80069e8:	bf00      	nop
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40020000 	.word	0x40020000
 80069f4:	40020400 	.word	0x40020400
 80069f8:	40020800 	.word	0x40020800
 80069fc:	40020c00 	.word	0x40020c00
 8006a00:	40021000 	.word	0x40021000
 8006a04:	40021c00 	.word	0x40021c00
 8006a08:	08011054 	.word	0x08011054
 8006a0c:	40013800 	.word	0x40013800
 8006a10:	40013c00 	.word	0x40013c00

08006a14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006a20:	887b      	ldrh	r3, [r7, #2]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d004      	beq.n	8006a30 <HAL_GPIO_ReadPin+0x1c>
 8006a26:	887b      	ldrh	r3, [r7, #2]
 8006a28:	0c1b      	lsrs	r3, r3, #16
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d004      	beq.n	8006a3a <HAL_GPIO_ReadPin+0x26>
 8006a30:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8006a34:	4809      	ldr	r0, [pc, #36]	; (8006a5c <HAL_GPIO_ReadPin+0x48>)
 8006a36:	f7fc fa5e 	bl	8002ef6 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	887b      	ldrh	r3, [r7, #2]
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8006a46:	2301      	movs	r3, #1
 8006a48:	73fb      	strb	r3, [r7, #15]
 8006a4a:	e001      	b.n	8006a50 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	08011054 	.word	0x08011054

08006a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	807b      	strh	r3, [r7, #2]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006a70:	887b      	ldrh	r3, [r7, #2]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <HAL_GPIO_WritePin+0x20>
 8006a76:	887b      	ldrh	r3, [r7, #2]
 8006a78:	0c1b      	lsrs	r3, r3, #16
 8006a7a:	041b      	lsls	r3, r3, #16
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d004      	beq.n	8006a8a <HAL_GPIO_WritePin+0x2a>
 8006a80:	f240 119d 	movw	r1, #413	; 0x19d
 8006a84:	480e      	ldr	r0, [pc, #56]	; (8006ac0 <HAL_GPIO_WritePin+0x60>)
 8006a86:	f7fc fa36 	bl	8002ef6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006a8a:	787b      	ldrb	r3, [r7, #1]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <HAL_GPIO_WritePin+0x40>
 8006a90:	787b      	ldrb	r3, [r7, #1]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d004      	beq.n	8006aa0 <HAL_GPIO_WritePin+0x40>
 8006a96:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8006a9a:	4809      	ldr	r0, [pc, #36]	; (8006ac0 <HAL_GPIO_WritePin+0x60>)
 8006a9c:	f7fc fa2b 	bl	8002ef6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8006aa0:	787b      	ldrb	r3, [r7, #1]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006aa6:	887a      	ldrh	r2, [r7, #2]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006aac:	e003      	b.n	8006ab6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006aae:	887b      	ldrh	r3, [r7, #2]
 8006ab0:	041a      	lsls	r2, r3, #16
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	619a      	str	r2, [r3, #24]
}
 8006ab6:	bf00      	nop
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	08011054 	.word	0x08011054

08006ac4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4603      	mov	r3, r0
 8006acc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006ace:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006ad0:	695a      	ldr	r2, [r3, #20]
 8006ad2:	88fb      	ldrh	r3, [r7, #6]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d006      	beq.n	8006ae8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ada:	4a05      	ldr	r2, [pc, #20]	; (8006af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006adc:	88fb      	ldrh	r3, [r7, #6]
 8006ade:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ae0:	88fb      	ldrh	r3, [r7, #6]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fc f9e6 	bl	8002eb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	40013c00 	.word	0x40013c00

08006af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e1bd      	b.n	8006e82 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a93      	ldr	r2, [pc, #588]	; (8006d58 <HAL_I2C_Init+0x264>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00e      	beq.n	8006b2e <HAL_I2C_Init+0x3a>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a91      	ldr	r2, [pc, #580]	; (8006d5c <HAL_I2C_Init+0x268>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d009      	beq.n	8006b2e <HAL_I2C_Init+0x3a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a90      	ldr	r2, [pc, #576]	; (8006d60 <HAL_I2C_Init+0x26c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d004      	beq.n	8006b2e <HAL_I2C_Init+0x3a>
 8006b24:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8006b28:	488e      	ldr	r0, [pc, #568]	; (8006d64 <HAL_I2C_Init+0x270>)
 8006b2a:	f7fc f9e4 	bl	8002ef6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <HAL_I2C_Init+0x4c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	4a8b      	ldr	r2, [pc, #556]	; (8006d68 <HAL_I2C_Init+0x274>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d904      	bls.n	8006b4a <HAL_I2C_Init+0x56>
 8006b40:	f240 11bf 	movw	r1, #447	; 0x1bf
 8006b44:	4887      	ldr	r0, [pc, #540]	; (8006d64 <HAL_I2C_Init+0x270>)
 8006b46:	f7fc f9d6 	bl	8002ef6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d009      	beq.n	8006b66 <HAL_I2C_Init+0x72>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b5a:	d004      	beq.n	8006b66 <HAL_I2C_Init+0x72>
 8006b5c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006b60:	4880      	ldr	r0, [pc, #512]	; (8006d64 <HAL_I2C_Init+0x270>)
 8006b62:	f7fc f9c8 	bl	8002ef6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b6e:	f023 0303 	bic.w	r3, r3, #3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d004      	beq.n	8006b80 <HAL_I2C_Init+0x8c>
 8006b76:	f240 11c1 	movw	r1, #449	; 0x1c1
 8006b7a:	487a      	ldr	r0, [pc, #488]	; (8006d64 <HAL_I2C_Init+0x270>)
 8006b7c:	f7fc f9bb 	bl	8002ef6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b88:	d009      	beq.n	8006b9e <HAL_I2C_Init+0xaa>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b92:	d004      	beq.n	8006b9e <HAL_I2C_Init+0xaa>
 8006b94:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8006b98:	4872      	ldr	r0, [pc, #456]	; (8006d64 <HAL_I2C_Init+0x270>)
 8006b9a:	f7fc f9ac 	bl	8002ef6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d008      	beq.n	8006bb8 <HAL_I2C_Init+0xc4>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d004      	beq.n	8006bb8 <HAL_I2C_Init+0xc4>
 8006bae:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006bb2:	486c      	ldr	r0, [pc, #432]	; (8006d64 <HAL_I2C_Init+0x270>)
 8006bb4:	f7fc f99f 	bl	8002ef6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d004      	beq.n	8006bce <HAL_I2C_Init+0xda>
 8006bc4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8006bc8:	4866      	ldr	r0, [pc, #408]	; (8006d64 <HAL_I2C_Init+0x270>)
 8006bca:	f7fc f994 	bl	8002ef6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d008      	beq.n	8006be8 <HAL_I2C_Init+0xf4>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d004      	beq.n	8006be8 <HAL_I2C_Init+0xf4>
 8006bde:	f240 11c5 	movw	r1, #453	; 0x1c5
 8006be2:	4860      	ldr	r0, [pc, #384]	; (8006d64 <HAL_I2C_Init+0x270>)
 8006be4:	f7fc f987 	bl	8002ef6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_I2C_Init+0x10e>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	2b80      	cmp	r3, #128	; 0x80
 8006bf6:	d004      	beq.n	8006c02 <HAL_I2C_Init+0x10e>
 8006bf8:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8006bfc:	4859      	ldr	r0, [pc, #356]	; (8006d64 <HAL_I2C_Init+0x270>)
 8006bfe:	f7fc f97a 	bl	8002ef6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fb fed4 	bl	80029c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2224      	movs	r2, #36	; 0x24
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0201 	bic.w	r2, r2, #1
 8006c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006c54:	f001 fd82 	bl	800875c <HAL_RCC_GetPCLK1Freq>
 8006c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	4a43      	ldr	r2, [pc, #268]	; (8006d6c <HAL_I2C_Init+0x278>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d807      	bhi.n	8006c74 <HAL_I2C_Init+0x180>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4a42      	ldr	r2, [pc, #264]	; (8006d70 <HAL_I2C_Init+0x27c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	bf94      	ite	ls
 8006c6c:	2301      	movls	r3, #1
 8006c6e:	2300      	movhi	r3, #0
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	e006      	b.n	8006c82 <HAL_I2C_Init+0x18e>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a3f      	ldr	r2, [pc, #252]	; (8006d74 <HAL_I2C_Init+0x280>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	bf94      	ite	ls
 8006c7c:	2301      	movls	r3, #1
 8006c7e:	2300      	movhi	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e0fb      	b.n	8006e82 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4a3a      	ldr	r2, [pc, #232]	; (8006d78 <HAL_I2C_Init+0x284>)
 8006c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c92:	0c9b      	lsrs	r3, r3, #18
 8006c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	4a2c      	ldr	r2, [pc, #176]	; (8006d6c <HAL_I2C_Init+0x278>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d802      	bhi.n	8006cc4 <HAL_I2C_Init+0x1d0>
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	e009      	b.n	8006cd8 <HAL_I2C_Init+0x1e4>
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006cca:	fb02 f303 	mul.w	r3, r2, r3
 8006cce:	4a2b      	ldr	r2, [pc, #172]	; (8006d7c <HAL_I2C_Init+0x288>)
 8006cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd4:	099b      	lsrs	r3, r3, #6
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	6812      	ldr	r2, [r2, #0]
 8006cdc:	430b      	orrs	r3, r1
 8006cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006cea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	491e      	ldr	r1, [pc, #120]	; (8006d6c <HAL_I2C_Init+0x278>)
 8006cf4:	428b      	cmp	r3, r1
 8006cf6:	d819      	bhi.n	8006d2c <HAL_I2C_Init+0x238>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	1e59      	subs	r1, r3, #1
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d06:	1c59      	adds	r1, r3, #1
 8006d08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006d0c:	400b      	ands	r3, r1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00a      	beq.n	8006d28 <HAL_I2C_Init+0x234>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	1e59      	subs	r1, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d20:	3301      	adds	r3, #1
 8006d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d26:	e065      	b.n	8006df4 <HAL_I2C_Init+0x300>
 8006d28:	2304      	movs	r3, #4
 8006d2a:	e063      	b.n	8006df4 <HAL_I2C_Init+0x300>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d125      	bne.n	8006d80 <HAL_I2C_Init+0x28c>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	1e58      	subs	r0, r3, #1
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6859      	ldr	r1, [r3, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	440b      	add	r3, r1
 8006d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d46:	3301      	adds	r3, #1
 8006d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	bf0c      	ite	eq
 8006d50:	2301      	moveq	r3, #1
 8006d52:	2300      	movne	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	e026      	b.n	8006da6 <HAL_I2C_Init+0x2b2>
 8006d58:	40005400 	.word	0x40005400
 8006d5c:	40005800 	.word	0x40005800
 8006d60:	40005c00 	.word	0x40005c00
 8006d64:	08011090 	.word	0x08011090
 8006d68:	00061a80 	.word	0x00061a80
 8006d6c:	000186a0 	.word	0x000186a0
 8006d70:	001e847f 	.word	0x001e847f
 8006d74:	003d08ff 	.word	0x003d08ff
 8006d78:	431bde83 	.word	0x431bde83
 8006d7c:	10624dd3 	.word	0x10624dd3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	1e58      	subs	r0, r3, #1
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6859      	ldr	r1, [r3, #4]
 8006d88:	460b      	mov	r3, r1
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	0099      	lsls	r1, r3, #2
 8006d90:	440b      	add	r3, r1
 8006d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d96:	3301      	adds	r3, #1
 8006d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	bf0c      	ite	eq
 8006da0:	2301      	moveq	r3, #1
 8006da2:	2300      	movne	r3, #0
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <HAL_I2C_Init+0x2ba>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e022      	b.n	8006df4 <HAL_I2C_Init+0x300>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10e      	bne.n	8006dd4 <HAL_I2C_Init+0x2e0>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	1e58      	subs	r0, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6859      	ldr	r1, [r3, #4]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	440b      	add	r3, r1
 8006dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dc8:	3301      	adds	r3, #1
 8006dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd2:	e00f      	b.n	8006df4 <HAL_I2C_Init+0x300>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	1e58      	subs	r0, r3, #1
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6859      	ldr	r1, [r3, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	0099      	lsls	r1, r3, #2
 8006de4:	440b      	add	r3, r1
 8006de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dea:	3301      	adds	r3, #1
 8006dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	6809      	ldr	r1, [r1, #0]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	69da      	ldr	r2, [r3, #28]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006e22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6911      	ldr	r1, [r2, #16]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	68d2      	ldr	r2, [r2, #12]
 8006e2e:	4311      	orrs	r1, r2
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6812      	ldr	r2, [r2, #0]
 8006e34:	430b      	orrs	r3, r1
 8006e36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	695a      	ldr	r2, [r3, #20]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop

08006e8c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e035      	b.n	8006f0a <HAL_I2C_DeInit+0x7e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a1c      	ldr	r2, [pc, #112]	; (8006f14 <HAL_I2C_DeInit+0x88>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00e      	beq.n	8006ec6 <HAL_I2C_DeInit+0x3a>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a1a      	ldr	r2, [pc, #104]	; (8006f18 <HAL_I2C_DeInit+0x8c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d009      	beq.n	8006ec6 <HAL_I2C_DeInit+0x3a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a19      	ldr	r2, [pc, #100]	; (8006f1c <HAL_I2C_DeInit+0x90>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d004      	beq.n	8006ec6 <HAL_I2C_DeInit+0x3a>
 8006ebc:	f240 212e 	movw	r1, #558	; 0x22e
 8006ec0:	4817      	ldr	r0, [pc, #92]	; (8006f20 <HAL_I2C_DeInit+0x94>)
 8006ec2:	f7fc f818 	bl	8002ef6 <assert_failed>

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2224      	movs	r2, #36	; 0x24
 8006eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fb fdc6 	bl	8002a70 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	40005400 	.word	0x40005400
 8006f18:	40005800 	.word	0x40005800
 8006f1c:	40005c00 	.word	0x40005c00
 8006f20:	08011090 	.word	0x08011090

08006f24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af02      	add	r7, sp, #8
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	4611      	mov	r1, r2
 8006f30:	461a      	mov	r2, r3
 8006f32:	4603      	mov	r3, r0
 8006f34:	817b      	strh	r3, [r7, #10]
 8006f36:	460b      	mov	r3, r1
 8006f38:	813b      	strh	r3, [r7, #8]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f3e:	f7fd feff 	bl	8004d40 <HAL_GetTick>
 8006f42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d007      	beq.n	8006f5a <HAL_I2C_Mem_Write+0x36>
 8006f4a:	88fb      	ldrh	r3, [r7, #6]
 8006f4c:	2b10      	cmp	r3, #16
 8006f4e:	d004      	beq.n	8006f5a <HAL_I2C_Mem_Write+0x36>
 8006f50:	f640 11b9 	movw	r1, #2489	; 0x9b9
 8006f54:	4873      	ldr	r0, [pc, #460]	; (8007124 <HAL_I2C_Mem_Write+0x200>)
 8006f56:	f7fb ffce 	bl	8002ef6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	f040 80d9 	bne.w	800711a <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	2319      	movs	r3, #25
 8006f6e:	2201      	movs	r2, #1
 8006f70:	496d      	ldr	r1, [pc, #436]	; (8007128 <HAL_I2C_Mem_Write+0x204>)
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 fc8c 	bl	8007890 <I2C_WaitOnFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8006f7e:	2302      	movs	r3, #2
 8006f80:	e0cc      	b.n	800711c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_I2C_Mem_Write+0x6c>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e0c5      	b.n	800711c <HAL_I2C_Mem_Write+0x1f8>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d007      	beq.n	8006fb6 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fc4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2221      	movs	r2, #33	; 0x21
 8006fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2240      	movs	r2, #64	; 0x40
 8006fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a3a      	ldr	r2, [r7, #32]
 8006fe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4a4d      	ldr	r2, [pc, #308]	; (800712c <HAL_I2C_Mem_Write+0x208>)
 8006ff6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ff8:	88f8      	ldrh	r0, [r7, #6]
 8006ffa:	893a      	ldrh	r2, [r7, #8]
 8006ffc:	8979      	ldrh	r1, [r7, #10]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	4603      	mov	r3, r0
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 fac3 	bl	8007594 <I2C_RequestMemoryWrite>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d052      	beq.n	80070ba <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e081      	b.n	800711c <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 fd0d 	bl	8007a3c <I2C_WaitOnTXEFlagUntilTimeout>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00d      	beq.n	8007044 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	2b04      	cmp	r3, #4
 800702e:	d107      	bne.n	8007040 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800703e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e06b      	b.n	800711c <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	781a      	ldrb	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800706a:	b29b      	uxth	r3, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	b29a      	uxth	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	f003 0304 	and.w	r3, r3, #4
 800707e:	2b04      	cmp	r3, #4
 8007080:	d11b      	bne.n	80070ba <HAL_I2C_Mem_Write+0x196>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007086:	2b00      	cmp	r3, #0
 8007088:	d017      	beq.n	80070ba <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	781a      	ldrb	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1aa      	bne.n	8007018 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 fcf9 	bl	8007abe <I2C_WaitOnBTFFlagUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00d      	beq.n	80070ee <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d107      	bne.n	80070ea <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e016      	b.n	800711c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2220      	movs	r2, #32
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	e000      	b.n	800711c <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 800711a:	2302      	movs	r3, #2
  }
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	08011090 	.word	0x08011090
 8007128:	00100002 	.word	0x00100002
 800712c:	ffff0000 	.word	0xffff0000

08007130 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08c      	sub	sp, #48	; 0x30
 8007134:	af02      	add	r7, sp, #8
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	4608      	mov	r0, r1
 800713a:	4611      	mov	r1, r2
 800713c:	461a      	mov	r2, r3
 800713e:	4603      	mov	r3, r0
 8007140:	817b      	strh	r3, [r7, #10]
 8007142:	460b      	mov	r3, r1
 8007144:	813b      	strh	r3, [r7, #8]
 8007146:	4613      	mov	r3, r2
 8007148:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800714a:	f7fd fdf9 	bl	8004d40 <HAL_GetTick>
 800714e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8007150:	88fb      	ldrh	r3, [r7, #6]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d007      	beq.n	8007166 <HAL_I2C_Mem_Read+0x36>
 8007156:	88fb      	ldrh	r3, [r7, #6]
 8007158:	2b10      	cmp	r3, #16
 800715a:	d004      	beq.n	8007166 <HAL_I2C_Mem_Read+0x36>
 800715c:	f640 2134 	movw	r1, #2612	; 0xa34
 8007160:	4881      	ldr	r0, [pc, #516]	; (8007368 <HAL_I2C_Mem_Read+0x238>)
 8007162:	f7fb fec8 	bl	8002ef6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b20      	cmp	r3, #32
 8007170:	f040 8209 	bne.w	8007586 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	2319      	movs	r3, #25
 800717a:	2201      	movs	r2, #1
 800717c:	497b      	ldr	r1, [pc, #492]	; (800736c <HAL_I2C_Mem_Read+0x23c>)
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 fb86 	bl	8007890 <I2C_WaitOnFlagUntilTimeout>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800718a:	2302      	movs	r3, #2
 800718c:	e1fc      	b.n	8007588 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_I2C_Mem_Read+0x6c>
 8007198:	2302      	movs	r3, #2
 800719a:	e1f5      	b.n	8007588 <HAL_I2C_Mem_Read+0x458>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d007      	beq.n	80071c2 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0201 	orr.w	r2, r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071d0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2222      	movs	r2, #34	; 0x22
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2240      	movs	r2, #64	; 0x40
 80071de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80071f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4a5b      	ldr	r2, [pc, #364]	; (8007370 <HAL_I2C_Mem_Read+0x240>)
 8007202:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007204:	88f8      	ldrh	r0, [r7, #6]
 8007206:	893a      	ldrh	r2, [r7, #8]
 8007208:	8979      	ldrh	r1, [r7, #10]
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	4603      	mov	r3, r0
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 fa53 	bl	80076c0 <I2C_RequestMemoryRead>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e1b1      	b.n	8007588 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007228:	2b00      	cmp	r3, #0
 800722a:	d113      	bne.n	8007254 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800722c:	2300      	movs	r3, #0
 800722e:	623b      	str	r3, [r7, #32]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	623b      	str	r3, [r7, #32]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	623b      	str	r3, [r7, #32]
 8007240:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007250:	601a      	str	r2, [r3, #0]
 8007252:	e185      	b.n	8007560 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007258:	2b01      	cmp	r3, #1
 800725a:	d11b      	bne.n	8007294 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800726a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800726c:	2300      	movs	r3, #0
 800726e:	61fb      	str	r3, [r7, #28]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	61fb      	str	r3, [r7, #28]
 8007280:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	e165      	b.n	8007560 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007298:	2b02      	cmp	r3, #2
 800729a:	d11b      	bne.n	80072d4 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072aa:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ba:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072bc:	2300      	movs	r3, #0
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	61bb      	str	r3, [r7, #24]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	e145      	b.n	8007560 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072d4:	2300      	movs	r3, #0
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	617b      	str	r3, [r7, #20]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80072ea:	e139      	b.n	8007560 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	f200 80f2 	bhi.w	80074da <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d123      	bne.n	8007346 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007300:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 fc1c 	bl	8007b40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e13a      	b.n	8007588 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732e:	3b01      	subs	r3, #1
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007344:	e10c      	b.n	8007560 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800734a:	2b02      	cmp	r3, #2
 800734c:	d14f      	bne.n	80073ee <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	2200      	movs	r2, #0
 8007356:	4907      	ldr	r1, [pc, #28]	; (8007374 <HAL_I2C_Mem_Read+0x244>)
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 fa99 	bl	8007890 <I2C_WaitOnFlagUntilTimeout>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d009      	beq.n	8007378 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e10f      	b.n	8007588 <HAL_I2C_Mem_Read+0x458>
 8007368:	08011090 	.word	0x08011090
 800736c:	00100002 	.word	0x00100002
 8007370:	ffff0000 	.word	0xffff0000
 8007374:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a4:	3b01      	subs	r3, #1
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	691a      	ldr	r2, [r3, #16]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	b2d2      	uxtb	r2, r2
 80073c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d6:	3b01      	subs	r3, #1
 80073d8:	b29a      	uxth	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	3b01      	subs	r3, #1
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073ec:	e0b8      	b.n	8007560 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	2200      	movs	r2, #0
 80073f6:	4966      	ldr	r1, [pc, #408]	; (8007590 <HAL_I2C_Mem_Read+0x460>)
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 fa49 	bl	8007890 <I2C_WaitOnFlagUntilTimeout>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e0bf      	b.n	8007588 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007416:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007450:	2200      	movs	r2, #0
 8007452:	494f      	ldr	r1, [pc, #316]	; (8007590 <HAL_I2C_Mem_Read+0x460>)
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fa1b 	bl	8007890 <I2C_WaitOnFlagUntilTimeout>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e091      	b.n	8007588 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691a      	ldr	r2, [r3, #16]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007490:	3b01      	subs	r3, #1
 8007492:	b29a      	uxth	r2, r3
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	691a      	ldr	r2, [r3, #16]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	b2d2      	uxtb	r2, r2
 80074b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c2:	3b01      	subs	r3, #1
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	3b01      	subs	r3, #1
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074d8:	e042      	b.n	8007560 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fb2e 	bl	8007b40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e04c      	b.n	8007588 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	691a      	ldr	r2, [r3, #16]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	b2d2      	uxtb	r2, r2
 80074fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800750a:	3b01      	subs	r3, #1
 800750c:	b29a      	uxth	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007516:	b29b      	uxth	r3, r3
 8007518:	3b01      	subs	r3, #1
 800751a:	b29a      	uxth	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b04      	cmp	r3, #4
 800752c:	d118      	bne.n	8007560 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	691a      	ldr	r2, [r3, #16]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	b2d2      	uxtb	r2, r2
 800753a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007564:	2b00      	cmp	r3, #0
 8007566:	f47f aec1 	bne.w	80072ec <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2220      	movs	r2, #32
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	e000      	b.n	8007588 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007586:	2302      	movs	r3, #2
  }
}
 8007588:	4618      	mov	r0, r3
 800758a:	3728      	adds	r7, #40	; 0x28
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	00010004 	.word	0x00010004

08007594 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b088      	sub	sp, #32
 8007598:	af02      	add	r7, sp, #8
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	4608      	mov	r0, r1
 800759e:	4611      	mov	r1, r2
 80075a0:	461a      	mov	r2, r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	817b      	strh	r3, [r7, #10]
 80075a6:	460b      	mov	r3, r1
 80075a8:	813b      	strh	r3, [r7, #8]
 80075aa:	4613      	mov	r3, r2
 80075ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 f960 	bl	8007890 <I2C_WaitOnFlagUntilTimeout>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00d      	beq.n	80075f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e4:	d103      	bne.n	80075ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e05f      	b.n	80076b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80075f2:	897b      	ldrh	r3, [r7, #10]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	461a      	mov	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007600:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	6a3a      	ldr	r2, [r7, #32]
 8007606:	492d      	ldr	r1, [pc, #180]	; (80076bc <I2C_RequestMemoryWrite+0x128>)
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 f998 	bl	800793e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e04c      	b.n	80076b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007618:	2300      	movs	r3, #0
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800762e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007630:	6a39      	ldr	r1, [r7, #32]
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 fa02 	bl	8007a3c <I2C_WaitOnTXEFlagUntilTimeout>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00d      	beq.n	800765a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	2b04      	cmp	r3, #4
 8007644:	d107      	bne.n	8007656 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007654:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e02b      	b.n	80076b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800765a:	88fb      	ldrh	r3, [r7, #6]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d105      	bne.n	800766c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007660:	893b      	ldrh	r3, [r7, #8]
 8007662:	b2da      	uxtb	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	611a      	str	r2, [r3, #16]
 800766a:	e021      	b.n	80076b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800766c:	893b      	ldrh	r3, [r7, #8]
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	b29b      	uxth	r3, r3
 8007672:	b2da      	uxtb	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800767a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767c:	6a39      	ldr	r1, [r7, #32]
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 f9dc 	bl	8007a3c <I2C_WaitOnTXEFlagUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00d      	beq.n	80076a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	2b04      	cmp	r3, #4
 8007690:	d107      	bne.n	80076a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e005      	b.n	80076b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076a6:	893b      	ldrh	r3, [r7, #8]
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	00010002 	.word	0x00010002

080076c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	461a      	mov	r2, r3
 80076ce:	4603      	mov	r3, r0
 80076d0:	817b      	strh	r3, [r7, #10]
 80076d2:	460b      	mov	r3, r1
 80076d4:	813b      	strh	r3, [r7, #8]
 80076d6:	4613      	mov	r3, r2
 80076d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	2200      	movs	r2, #0
 8007702:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 f8c2 	bl	8007890 <I2C_WaitOnFlagUntilTimeout>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00d      	beq.n	800772e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007720:	d103      	bne.n	800772a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007728:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e0aa      	b.n	8007884 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800772e:	897b      	ldrh	r3, [r7, #10]
 8007730:	b2db      	uxtb	r3, r3
 8007732:	461a      	mov	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800773c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	6a3a      	ldr	r2, [r7, #32]
 8007742:	4952      	ldr	r1, [pc, #328]	; (800788c <I2C_RequestMemoryRead+0x1cc>)
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 f8fa 	bl	800793e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e097      	b.n	8007884 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800776a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776c:	6a39      	ldr	r1, [r7, #32]
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 f964 	bl	8007a3c <I2C_WaitOnTXEFlagUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00d      	beq.n	8007796 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	2b04      	cmp	r3, #4
 8007780:	d107      	bne.n	8007792 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007790:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e076      	b.n	8007884 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007796:	88fb      	ldrh	r3, [r7, #6]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d105      	bne.n	80077a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800779c:	893b      	ldrh	r3, [r7, #8]
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	611a      	str	r2, [r3, #16]
 80077a6:	e021      	b.n	80077ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80077a8:	893b      	ldrh	r3, [r7, #8]
 80077aa:	0a1b      	lsrs	r3, r3, #8
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b8:	6a39      	ldr	r1, [r7, #32]
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 f93e 	bl	8007a3c <I2C_WaitOnTXEFlagUntilTimeout>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00d      	beq.n	80077e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	2b04      	cmp	r3, #4
 80077cc:	d107      	bne.n	80077de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e050      	b.n	8007884 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077e2:	893b      	ldrh	r3, [r7, #8]
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ee:	6a39      	ldr	r1, [r7, #32]
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 f923 	bl	8007a3c <I2C_WaitOnTXEFlagUntilTimeout>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00d      	beq.n	8007818 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007800:	2b04      	cmp	r3, #4
 8007802:	d107      	bne.n	8007814 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007812:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e035      	b.n	8007884 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007826:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	2200      	movs	r2, #0
 8007830:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 f82b 	bl	8007890 <I2C_WaitOnFlagUntilTimeout>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00d      	beq.n	800785c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784e:	d103      	bne.n	8007858 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007856:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e013      	b.n	8007884 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800785c:	897b      	ldrh	r3, [r7, #10]
 800785e:	b2db      	uxtb	r3, r3
 8007860:	f043 0301 	orr.w	r3, r3, #1
 8007864:	b2da      	uxtb	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	6a3a      	ldr	r2, [r7, #32]
 8007870:	4906      	ldr	r1, [pc, #24]	; (800788c <I2C_RequestMemoryRead+0x1cc>)
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f000 f863 	bl	800793e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e000      	b.n	8007884 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	00010002 	.word	0x00010002

08007890 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	603b      	str	r3, [r7, #0]
 800789c:	4613      	mov	r3, r2
 800789e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078a0:	e025      	b.n	80078ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a8:	d021      	beq.n	80078ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078aa:	f7fd fa49 	bl	8004d40 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d302      	bcc.n	80078c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d116      	bne.n	80078ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2220      	movs	r2, #32
 80078ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	f043 0220 	orr.w	r2, r3, #32
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e023      	b.n	8007936 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	0c1b      	lsrs	r3, r3, #16
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d10d      	bne.n	8007914 <I2C_WaitOnFlagUntilTimeout+0x84>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	43da      	mvns	r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4013      	ands	r3, r2
 8007904:	b29b      	uxth	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	bf0c      	ite	eq
 800790a:	2301      	moveq	r3, #1
 800790c:	2300      	movne	r3, #0
 800790e:	b2db      	uxtb	r3, r3
 8007910:	461a      	mov	r2, r3
 8007912:	e00c      	b.n	800792e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	43da      	mvns	r2, r3
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	4013      	ands	r3, r2
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	bf0c      	ite	eq
 8007926:	2301      	moveq	r3, #1
 8007928:	2300      	movne	r3, #0
 800792a:	b2db      	uxtb	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	79fb      	ldrb	r3, [r7, #7]
 8007930:	429a      	cmp	r2, r3
 8007932:	d0b6      	beq.n	80078a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	607a      	str	r2, [r7, #4]
 800794a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800794c:	e051      	b.n	80079f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800795c:	d123      	bne.n	80079a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800796c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007976:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2220      	movs	r2, #32
 8007982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	f043 0204 	orr.w	r2, r3, #4
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e046      	b.n	8007a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ac:	d021      	beq.n	80079f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ae:	f7fd f9c7 	bl	8004d40 <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d302      	bcc.n	80079c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d116      	bne.n	80079f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	f043 0220 	orr.w	r2, r3, #32
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e020      	b.n	8007a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	0c1b      	lsrs	r3, r3, #16
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d10c      	bne.n	8007a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	43da      	mvns	r2, r3
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	4013      	ands	r3, r2
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bf14      	ite	ne
 8007a0e:	2301      	movne	r3, #1
 8007a10:	2300      	moveq	r3, #0
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	e00b      	b.n	8007a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	43da      	mvns	r2, r3
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	4013      	ands	r3, r2
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	bf14      	ite	ne
 8007a28:	2301      	movne	r3, #1
 8007a2a:	2300      	moveq	r3, #0
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d18d      	bne.n	800794e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a48:	e02d      	b.n	8007aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f8ce 	bl	8007bec <I2C_IsAcknowledgeFailed>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e02d      	b.n	8007ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a60:	d021      	beq.n	8007aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a62:	f7fd f96d 	bl	8004d40 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d302      	bcc.n	8007a78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d116      	bne.n	8007aa6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a92:	f043 0220 	orr.w	r2, r3, #32
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e007      	b.n	8007ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab0:	2b80      	cmp	r3, #128	; 0x80
 8007ab2:	d1ca      	bne.n	8007a4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007aca:	e02d      	b.n	8007b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 f88d 	bl	8007bec <I2C_IsAcknowledgeFailed>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e02d      	b.n	8007b38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae2:	d021      	beq.n	8007b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ae4:	f7fd f92c 	bl	8004d40 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d302      	bcc.n	8007afa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d116      	bne.n	8007b28 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b14:	f043 0220 	orr.w	r2, r3, #32
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e007      	b.n	8007b38 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	f003 0304 	and.w	r3, r3, #4
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	d1ca      	bne.n	8007acc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b4c:	e042      	b.n	8007bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	f003 0310 	and.w	r3, r3, #16
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	d119      	bne.n	8007b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f06f 0210 	mvn.w	r2, #16
 8007b64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e029      	b.n	8007be4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b90:	f7fd f8d6 	bl	8004d40 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d302      	bcc.n	8007ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d116      	bne.n	8007bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc0:	f043 0220 	orr.w	r2, r3, #32
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e007      	b.n	8007be4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bde:	2b40      	cmp	r3, #64	; 0x40
 8007be0:	d1b5      	bne.n	8007b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c02:	d11b      	bne.n	8007c3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c28:	f043 0204 	orr.w	r2, r3, #4
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e000      	b.n	8007c3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
	...

08007c4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e314      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b0f      	cmp	r3, #15
 8007c64:	d903      	bls.n	8007c6e <HAL_RCC_OscConfig+0x22>
 8007c66:	21e6      	movs	r1, #230	; 0xe6
 8007c68:	4897      	ldr	r0, [pc, #604]	; (8007ec8 <HAL_RCC_OscConfig+0x27c>)
 8007c6a:	f7fb f944 	bl	8002ef6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 8088 	beq.w	8007d8c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00d      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x54>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c8c:	d008      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x54>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c96:	d003      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x54>
 8007c98:	21eb      	movs	r1, #235	; 0xeb
 8007c9a:	488b      	ldr	r0, [pc, #556]	; (8007ec8 <HAL_RCC_OscConfig+0x27c>)
 8007c9c:	f7fb f92b 	bl	8002ef6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ca0:	4b8a      	ldr	r3, [pc, #552]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f003 030c 	and.w	r3, r3, #12
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d00c      	beq.n	8007cc6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cac:	4b87      	ldr	r3, [pc, #540]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	d112      	bne.n	8007cde <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cb8:	4b84      	ldr	r3, [pc, #528]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cc4:	d10b      	bne.n	8007cde <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cc6:	4b81      	ldr	r3, [pc, #516]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d05b      	beq.n	8007d8a <HAL_RCC_OscConfig+0x13e>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d157      	bne.n	8007d8a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e2d4      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce6:	d106      	bne.n	8007cf6 <HAL_RCC_OscConfig+0xaa>
 8007ce8:	4b78      	ldr	r3, [pc, #480]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a77      	ldr	r2, [pc, #476]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cf2:	6013      	str	r3, [r2, #0]
 8007cf4:	e01d      	b.n	8007d32 <HAL_RCC_OscConfig+0xe6>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cfe:	d10c      	bne.n	8007d1a <HAL_RCC_OscConfig+0xce>
 8007d00:	4b72      	ldr	r3, [pc, #456]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a71      	ldr	r2, [pc, #452]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007d06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d0a:	6013      	str	r3, [r2, #0]
 8007d0c:	4b6f      	ldr	r3, [pc, #444]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a6e      	ldr	r2, [pc, #440]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	e00b      	b.n	8007d32 <HAL_RCC_OscConfig+0xe6>
 8007d1a:	4b6c      	ldr	r3, [pc, #432]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a6b      	ldr	r2, [pc, #428]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	4b69      	ldr	r3, [pc, #420]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a68      	ldr	r2, [pc, #416]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d013      	beq.n	8007d62 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d3a:	f7fd f801 	bl	8004d40 <HAL_GetTick>
 8007d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d40:	e008      	b.n	8007d54 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d42:	f7fc fffd 	bl	8004d40 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	2b64      	cmp	r3, #100	; 0x64
 8007d4e:	d901      	bls.n	8007d54 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e299      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d54:	4b5d      	ldr	r3, [pc, #372]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d0f0      	beq.n	8007d42 <HAL_RCC_OscConfig+0xf6>
 8007d60:	e014      	b.n	8007d8c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d62:	f7fc ffed 	bl	8004d40 <HAL_GetTick>
 8007d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d68:	e008      	b.n	8007d7c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d6a:	f7fc ffe9 	bl	8004d40 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	2b64      	cmp	r3, #100	; 0x64
 8007d76:	d901      	bls.n	8007d7c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e285      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d7c:	4b53      	ldr	r3, [pc, #332]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1f0      	bne.n	8007d6a <HAL_RCC_OscConfig+0x11e>
 8007d88:	e000      	b.n	8007d8c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d079      	beq.n	8007e8c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d008      	beq.n	8007db2 <HAL_RCC_OscConfig+0x166>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d004      	beq.n	8007db2 <HAL_RCC_OscConfig+0x166>
 8007da8:	f240 111d 	movw	r1, #285	; 0x11d
 8007dac:	4846      	ldr	r0, [pc, #280]	; (8007ec8 <HAL_RCC_OscConfig+0x27c>)
 8007dae:	f7fb f8a2 	bl	8002ef6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	2b1f      	cmp	r3, #31
 8007db8:	d904      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x178>
 8007dba:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8007dbe:	4842      	ldr	r0, [pc, #264]	; (8007ec8 <HAL_RCC_OscConfig+0x27c>)
 8007dc0:	f7fb f899 	bl	8002ef6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dc4:	4b41      	ldr	r3, [pc, #260]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 030c 	and.w	r3, r3, #12
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dd0:	4b3e      	ldr	r3, [pc, #248]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	d11c      	bne.n	8007e16 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ddc:	4b3b      	ldr	r3, [pc, #236]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d116      	bne.n	8007e16 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007de8:	4b38      	ldr	r3, [pc, #224]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <HAL_RCC_OscConfig+0x1b4>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d001      	beq.n	8007e00 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e243      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e00:	4b32      	ldr	r3, [pc, #200]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	492f      	ldr	r1, [pc, #188]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e14:	e03a      	b.n	8007e8c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d020      	beq.n	8007e60 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e1e:	4b2c      	ldr	r3, [pc, #176]	; (8007ed0 <HAL_RCC_OscConfig+0x284>)
 8007e20:	2201      	movs	r2, #1
 8007e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e24:	f7fc ff8c 	bl	8004d40 <HAL_GetTick>
 8007e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e2a:	e008      	b.n	8007e3e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e2c:	f7fc ff88 	bl	8004d40 <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d901      	bls.n	8007e3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e224      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e3e:	4b23      	ldr	r3, [pc, #140]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0302 	and.w	r3, r3, #2
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0f0      	beq.n	8007e2c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e4a:	4b20      	ldr	r3, [pc, #128]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	491c      	ldr	r1, [pc, #112]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	600b      	str	r3, [r1, #0]
 8007e5e:	e015      	b.n	8007e8c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e60:	4b1b      	ldr	r3, [pc, #108]	; (8007ed0 <HAL_RCC_OscConfig+0x284>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e66:	f7fc ff6b 	bl	8004d40 <HAL_GetTick>
 8007e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e6c:	e008      	b.n	8007e80 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e6e:	f7fc ff67 	bl	8004d40 <HAL_GetTick>
 8007e72:	4602      	mov	r2, r0
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d901      	bls.n	8007e80 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e203      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e80:	4b12      	ldr	r3, [pc, #72]	; (8007ecc <HAL_RCC_OscConfig+0x280>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0302 	and.w	r3, r3, #2
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f0      	bne.n	8007e6e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0308 	and.w	r3, r3, #8
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d045      	beq.n	8007f24 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d008      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x266>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d004      	beq.n	8007eb2 <HAL_RCC_OscConfig+0x266>
 8007ea8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007eac:	4806      	ldr	r0, [pc, #24]	; (8007ec8 <HAL_RCC_OscConfig+0x27c>)
 8007eae:	f7fb f822 	bl	8002ef6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d01e      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eba:	4b06      	ldr	r3, [pc, #24]	; (8007ed4 <HAL_RCC_OscConfig+0x288>)
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ec0:	f7fc ff3e 	bl	8004d40 <HAL_GetTick>
 8007ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ec6:	e010      	b.n	8007eea <HAL_RCC_OscConfig+0x29e>
 8007ec8:	080110c8 	.word	0x080110c8
 8007ecc:	40023800 	.word	0x40023800
 8007ed0:	42470000 	.word	0x42470000
 8007ed4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ed8:	f7fc ff32 	bl	8004d40 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d901      	bls.n	8007eea <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e1ce      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eea:	4b5e      	ldr	r3, [pc, #376]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8007eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0f0      	beq.n	8007ed8 <HAL_RCC_OscConfig+0x28c>
 8007ef6:	e015      	b.n	8007f24 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ef8:	4b5b      	ldr	r3, [pc, #364]	; (8008068 <HAL_RCC_OscConfig+0x41c>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007efe:	f7fc ff1f 	bl	8004d40 <HAL_GetTick>
 8007f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f04:	e008      	b.n	8007f18 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f06:	f7fc ff1b 	bl	8004d40 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d901      	bls.n	8007f18 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e1b7      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f18:	4b52      	ldr	r3, [pc, #328]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8007f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1f0      	bne.n	8007f06 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 80b0 	beq.w	8008092 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f32:	2300      	movs	r3, #0
 8007f34:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00c      	beq.n	8007f58 <HAL_RCC_OscConfig+0x30c>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d008      	beq.n	8007f58 <HAL_RCC_OscConfig+0x30c>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	2b05      	cmp	r3, #5
 8007f4c:	d004      	beq.n	8007f58 <HAL_RCC_OscConfig+0x30c>
 8007f4e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8007f52:	4846      	ldr	r0, [pc, #280]	; (800806c <HAL_RCC_OscConfig+0x420>)
 8007f54:	f7fa ffcf 	bl	8002ef6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f58:	4b42      	ldr	r3, [pc, #264]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8007f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10f      	bne.n	8007f84 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f64:	2300      	movs	r3, #0
 8007f66:	60bb      	str	r3, [r7, #8]
 8007f68:	4b3e      	ldr	r3, [pc, #248]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8007f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6c:	4a3d      	ldr	r2, [pc, #244]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8007f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f72:	6413      	str	r3, [r2, #64]	; 0x40
 8007f74:	4b3b      	ldr	r3, [pc, #236]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8007f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f7c:	60bb      	str	r3, [r7, #8]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f80:	2301      	movs	r3, #1
 8007f82:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f84:	4b3a      	ldr	r3, [pc, #232]	; (8008070 <HAL_RCC_OscConfig+0x424>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d118      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f90:	4b37      	ldr	r3, [pc, #220]	; (8008070 <HAL_RCC_OscConfig+0x424>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a36      	ldr	r2, [pc, #216]	; (8008070 <HAL_RCC_OscConfig+0x424>)
 8007f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f9c:	f7fc fed0 	bl	8004d40 <HAL_GetTick>
 8007fa0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fa2:	e008      	b.n	8007fb6 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fa4:	f7fc fecc 	bl	8004d40 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d901      	bls.n	8007fb6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e168      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fb6:	4b2e      	ldr	r3, [pc, #184]	; (8008070 <HAL_RCC_OscConfig+0x424>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0f0      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d106      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x38c>
 8007fca:	4b26      	ldr	r3, [pc, #152]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fce:	4a25      	ldr	r2, [pc, #148]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8007fd0:	f043 0301 	orr.w	r3, r3, #1
 8007fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8007fd6:	e01c      	b.n	8008012 <HAL_RCC_OscConfig+0x3c6>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	2b05      	cmp	r3, #5
 8007fde:	d10c      	bne.n	8007ffa <HAL_RCC_OscConfig+0x3ae>
 8007fe0:	4b20      	ldr	r3, [pc, #128]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8007fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe4:	4a1f      	ldr	r2, [pc, #124]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8007fe6:	f043 0304 	orr.w	r3, r3, #4
 8007fea:	6713      	str	r3, [r2, #112]	; 0x70
 8007fec:	4b1d      	ldr	r3, [pc, #116]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8007fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff0:	4a1c      	ldr	r2, [pc, #112]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8007ff2:	f043 0301 	orr.w	r3, r3, #1
 8007ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ff8:	e00b      	b.n	8008012 <HAL_RCC_OscConfig+0x3c6>
 8007ffa:	4b1a      	ldr	r3, [pc, #104]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8007ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffe:	4a19      	ldr	r2, [pc, #100]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8008000:	f023 0301 	bic.w	r3, r3, #1
 8008004:	6713      	str	r3, [r2, #112]	; 0x70
 8008006:	4b17      	ldr	r3, [pc, #92]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 8008008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800a:	4a16      	ldr	r2, [pc, #88]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 800800c:	f023 0304 	bic.w	r3, r3, #4
 8008010:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d015      	beq.n	8008046 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800801a:	f7fc fe91 	bl	8004d40 <HAL_GetTick>
 800801e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008020:	e00a      	b.n	8008038 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008022:	f7fc fe8d 	bl	8004d40 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008030:	4293      	cmp	r3, r2
 8008032:	d901      	bls.n	8008038 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e127      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <HAL_RCC_OscConfig+0x418>)
 800803a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d0ee      	beq.n	8008022 <HAL_RCC_OscConfig+0x3d6>
 8008044:	e01c      	b.n	8008080 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008046:	f7fc fe7b 	bl	8004d40 <HAL_GetTick>
 800804a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800804c:	e012      	b.n	8008074 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800804e:	f7fc fe77 	bl	8004d40 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	f241 3288 	movw	r2, #5000	; 0x1388
 800805c:	4293      	cmp	r3, r2
 800805e:	d909      	bls.n	8008074 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e111      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
 8008064:	40023800 	.word	0x40023800
 8008068:	42470e80 	.word	0x42470e80
 800806c:	080110c8 	.word	0x080110c8
 8008070:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008074:	4b86      	ldr	r3, [pc, #536]	; (8008290 <HAL_RCC_OscConfig+0x644>)
 8008076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e6      	bne.n	800804e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008080:	7dfb      	ldrb	r3, [r7, #23]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d105      	bne.n	8008092 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008086:	4b82      	ldr	r3, [pc, #520]	; (8008290 <HAL_RCC_OscConfig+0x644>)
 8008088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808a:	4a81      	ldr	r2, [pc, #516]	; (8008290 <HAL_RCC_OscConfig+0x644>)
 800808c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008090:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00c      	beq.n	80080b4 <HAL_RCC_OscConfig+0x468>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d008      	beq.n	80080b4 <HAL_RCC_OscConfig+0x468>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d004      	beq.n	80080b4 <HAL_RCC_OscConfig+0x468>
 80080aa:	f240 11cd 	movw	r1, #461	; 0x1cd
 80080ae:	4879      	ldr	r0, [pc, #484]	; (8008294 <HAL_RCC_OscConfig+0x648>)
 80080b0:	f7fa ff21 	bl	8002ef6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 80e4 	beq.w	8008286 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080be:	4b74      	ldr	r3, [pc, #464]	; (8008290 <HAL_RCC_OscConfig+0x644>)
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f003 030c 	and.w	r3, r3, #12
 80080c6:	2b08      	cmp	r3, #8
 80080c8:	f000 80a5 	beq.w	8008216 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	f040 8089 	bne.w	80081e8 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d009      	beq.n	80080f2 <HAL_RCC_OscConfig+0x4a6>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080e6:	d004      	beq.n	80080f2 <HAL_RCC_OscConfig+0x4a6>
 80080e8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80080ec:	4869      	ldr	r0, [pc, #420]	; (8008294 <HAL_RCC_OscConfig+0x648>)
 80080ee:	f7fa ff02 	bl	8002ef6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	2b3f      	cmp	r3, #63	; 0x3f
 80080f8:	d904      	bls.n	8008104 <HAL_RCC_OscConfig+0x4b8>
 80080fa:	f240 11d7 	movw	r1, #471	; 0x1d7
 80080fe:	4865      	ldr	r0, [pc, #404]	; (8008294 <HAL_RCC_OscConfig+0x648>)
 8008100:	f7fa fef9 	bl	8002ef6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	2b31      	cmp	r3, #49	; 0x31
 800810a:	d904      	bls.n	8008116 <HAL_RCC_OscConfig+0x4ca>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008114:	d904      	bls.n	8008120 <HAL_RCC_OscConfig+0x4d4>
 8008116:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800811a:	485e      	ldr	r0, [pc, #376]	; (8008294 <HAL_RCC_OscConfig+0x648>)
 800811c:	f7fa feeb 	bl	8002ef6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008124:	2b02      	cmp	r3, #2
 8008126:	d010      	beq.n	800814a <HAL_RCC_OscConfig+0x4fe>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812c:	2b04      	cmp	r3, #4
 800812e:	d00c      	beq.n	800814a <HAL_RCC_OscConfig+0x4fe>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008134:	2b06      	cmp	r3, #6
 8008136:	d008      	beq.n	800814a <HAL_RCC_OscConfig+0x4fe>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813c:	2b08      	cmp	r3, #8
 800813e:	d004      	beq.n	800814a <HAL_RCC_OscConfig+0x4fe>
 8008140:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008144:	4853      	ldr	r0, [pc, #332]	; (8008294 <HAL_RCC_OscConfig+0x648>)
 8008146:	f7fa fed6 	bl	8002ef6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814e:	2b01      	cmp	r3, #1
 8008150:	d903      	bls.n	800815a <HAL_RCC_OscConfig+0x50e>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008156:	2b0f      	cmp	r3, #15
 8008158:	d904      	bls.n	8008164 <HAL_RCC_OscConfig+0x518>
 800815a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800815e:	484d      	ldr	r0, [pc, #308]	; (8008294 <HAL_RCC_OscConfig+0x648>)
 8008160:	f7fa fec9 	bl	8002ef6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008164:	4b4c      	ldr	r3, [pc, #304]	; (8008298 <HAL_RCC_OscConfig+0x64c>)
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800816a:	f7fc fde9 	bl	8004d40 <HAL_GetTick>
 800816e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008170:	e008      	b.n	8008184 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008172:	f7fc fde5 	bl	8004d40 <HAL_GetTick>
 8008176:	4602      	mov	r2, r0
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	1ad3      	subs	r3, r2, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d901      	bls.n	8008184 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e081      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008184:	4b42      	ldr	r3, [pc, #264]	; (8008290 <HAL_RCC_OscConfig+0x644>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1f0      	bne.n	8008172 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	69da      	ldr	r2, [r3, #28]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	431a      	orrs	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	019b      	lsls	r3, r3, #6
 80081a0:	431a      	orrs	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a6:	085b      	lsrs	r3, r3, #1
 80081a8:	3b01      	subs	r3, #1
 80081aa:	041b      	lsls	r3, r3, #16
 80081ac:	431a      	orrs	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b2:	061b      	lsls	r3, r3, #24
 80081b4:	4936      	ldr	r1, [pc, #216]	; (8008290 <HAL_RCC_OscConfig+0x644>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081ba:	4b37      	ldr	r3, [pc, #220]	; (8008298 <HAL_RCC_OscConfig+0x64c>)
 80081bc:	2201      	movs	r2, #1
 80081be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081c0:	f7fc fdbe 	bl	8004d40 <HAL_GetTick>
 80081c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081c6:	e008      	b.n	80081da <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081c8:	f7fc fdba 	bl	8004d40 <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d901      	bls.n	80081da <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e056      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081da:	4b2d      	ldr	r3, [pc, #180]	; (8008290 <HAL_RCC_OscConfig+0x644>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0f0      	beq.n	80081c8 <HAL_RCC_OscConfig+0x57c>
 80081e6:	e04e      	b.n	8008286 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081e8:	4b2b      	ldr	r3, [pc, #172]	; (8008298 <HAL_RCC_OscConfig+0x64c>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081ee:	f7fc fda7 	bl	8004d40 <HAL_GetTick>
 80081f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081f4:	e008      	b.n	8008208 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081f6:	f7fc fda3 	bl	8004d40 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	2b02      	cmp	r3, #2
 8008202:	d901      	bls.n	8008208 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e03f      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008208:	4b21      	ldr	r3, [pc, #132]	; (8008290 <HAL_RCC_OscConfig+0x644>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1f0      	bne.n	80081f6 <HAL_RCC_OscConfig+0x5aa>
 8008214:	e037      	b.n	8008286 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d101      	bne.n	8008222 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e032      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008222:	4b1b      	ldr	r3, [pc, #108]	; (8008290 <HAL_RCC_OscConfig+0x644>)
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d028      	beq.n	8008282 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800823a:	429a      	cmp	r2, r3
 800823c:	d121      	bne.n	8008282 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008248:	429a      	cmp	r2, r3
 800824a:	d11a      	bne.n	8008282 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008252:	4013      	ands	r3, r2
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008258:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800825a:	4293      	cmp	r3, r2
 800825c:	d111      	bne.n	8008282 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008268:	085b      	lsrs	r3, r3, #1
 800826a:	3b01      	subs	r3, #1
 800826c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800826e:	429a      	cmp	r2, r3
 8008270:	d107      	bne.n	8008282 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800827e:	429a      	cmp	r2, r3
 8008280:	d001      	beq.n	8008286 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	40023800 	.word	0x40023800
 8008294:	080110c8 	.word	0x080110c8
 8008298:	42470060 	.word	0x42470060

0800829c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e174      	b.n	800859a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d003      	beq.n	80082c0 <HAL_RCC_ClockConfig+0x24>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b0f      	cmp	r3, #15
 80082be:	d904      	bls.n	80082ca <HAL_RCC_ClockConfig+0x2e>
 80082c0:	f240 215a 	movw	r1, #602	; 0x25a
 80082c4:	487b      	ldr	r0, [pc, #492]	; (80084b4 <HAL_RCC_ClockConfig+0x218>)
 80082c6:	f7fa fe16 	bl	8002ef6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d019      	beq.n	8008304 <HAL_RCC_ClockConfig+0x68>
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d016      	beq.n	8008304 <HAL_RCC_ClockConfig+0x68>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d013      	beq.n	8008304 <HAL_RCC_ClockConfig+0x68>
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d010      	beq.n	8008304 <HAL_RCC_ClockConfig+0x68>
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d00d      	beq.n	8008304 <HAL_RCC_ClockConfig+0x68>
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	d00a      	beq.n	8008304 <HAL_RCC_ClockConfig+0x68>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b06      	cmp	r3, #6
 80082f2:	d007      	beq.n	8008304 <HAL_RCC_ClockConfig+0x68>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b07      	cmp	r3, #7
 80082f8:	d004      	beq.n	8008304 <HAL_RCC_ClockConfig+0x68>
 80082fa:	f240 215b 	movw	r1, #603	; 0x25b
 80082fe:	486d      	ldr	r0, [pc, #436]	; (80084b4 <HAL_RCC_ClockConfig+0x218>)
 8008300:	f7fa fdf9 	bl	8002ef6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008304:	4b6c      	ldr	r3, [pc, #432]	; (80084b8 <HAL_RCC_ClockConfig+0x21c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0307 	and.w	r3, r3, #7
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	429a      	cmp	r2, r3
 8008310:	d90c      	bls.n	800832c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008312:	4b69      	ldr	r3, [pc, #420]	; (80084b8 <HAL_RCC_ClockConfig+0x21c>)
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	b2d2      	uxtb	r2, r2
 8008318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800831a:	4b67      	ldr	r3, [pc, #412]	; (80084b8 <HAL_RCC_ClockConfig+0x21c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0307 	and.w	r3, r3, #7
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	429a      	cmp	r2, r3
 8008326:	d001      	beq.n	800832c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e136      	b.n	800859a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b00      	cmp	r3, #0
 8008336:	d049      	beq.n	80083cc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d005      	beq.n	8008350 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008344:	4b5d      	ldr	r3, [pc, #372]	; (80084bc <HAL_RCC_ClockConfig+0x220>)
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	4a5c      	ldr	r2, [pc, #368]	; (80084bc <HAL_RCC_ClockConfig+0x220>)
 800834a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800834e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0308 	and.w	r3, r3, #8
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800835c:	4b57      	ldr	r3, [pc, #348]	; (80084bc <HAL_RCC_ClockConfig+0x220>)
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	4a56      	ldr	r2, [pc, #344]	; (80084bc <HAL_RCC_ClockConfig+0x220>)
 8008362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d024      	beq.n	80083ba <HAL_RCC_ClockConfig+0x11e>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	2b80      	cmp	r3, #128	; 0x80
 8008376:	d020      	beq.n	80083ba <HAL_RCC_ClockConfig+0x11e>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	2b90      	cmp	r3, #144	; 0x90
 800837e:	d01c      	beq.n	80083ba <HAL_RCC_ClockConfig+0x11e>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2ba0      	cmp	r3, #160	; 0xa0
 8008386:	d018      	beq.n	80083ba <HAL_RCC_ClockConfig+0x11e>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	2bb0      	cmp	r3, #176	; 0xb0
 800838e:	d014      	beq.n	80083ba <HAL_RCC_ClockConfig+0x11e>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2bc0      	cmp	r3, #192	; 0xc0
 8008396:	d010      	beq.n	80083ba <HAL_RCC_ClockConfig+0x11e>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	2bd0      	cmp	r3, #208	; 0xd0
 800839e:	d00c      	beq.n	80083ba <HAL_RCC_ClockConfig+0x11e>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	2be0      	cmp	r3, #224	; 0xe0
 80083a6:	d008      	beq.n	80083ba <HAL_RCC_ClockConfig+0x11e>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	2bf0      	cmp	r3, #240	; 0xf0
 80083ae:	d004      	beq.n	80083ba <HAL_RCC_ClockConfig+0x11e>
 80083b0:	f240 217e 	movw	r1, #638	; 0x27e
 80083b4:	483f      	ldr	r0, [pc, #252]	; (80084b4 <HAL_RCC_ClockConfig+0x218>)
 80083b6:	f7fa fd9e 	bl	8002ef6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083ba:	4b40      	ldr	r3, [pc, #256]	; (80084bc <HAL_RCC_ClockConfig+0x220>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	493d      	ldr	r1, [pc, #244]	; (80084bc <HAL_RCC_ClockConfig+0x220>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d059      	beq.n	800848c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d010      	beq.n	8008402 <HAL_RCC_ClockConfig+0x166>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d00c      	beq.n	8008402 <HAL_RCC_ClockConfig+0x166>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d008      	beq.n	8008402 <HAL_RCC_ClockConfig+0x166>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d004      	beq.n	8008402 <HAL_RCC_ClockConfig+0x166>
 80083f8:	f240 2185 	movw	r1, #645	; 0x285
 80083fc:	482d      	ldr	r0, [pc, #180]	; (80084b4 <HAL_RCC_ClockConfig+0x218>)
 80083fe:	f7fa fd7a 	bl	8002ef6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d107      	bne.n	800841a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800840a:	4b2c      	ldr	r3, [pc, #176]	; (80084bc <HAL_RCC_ClockConfig+0x220>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d119      	bne.n	800844a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e0bf      	b.n	800859a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d003      	beq.n	800842a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008426:	2b03      	cmp	r3, #3
 8008428:	d107      	bne.n	800843a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800842a:	4b24      	ldr	r3, [pc, #144]	; (80084bc <HAL_RCC_ClockConfig+0x220>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d109      	bne.n	800844a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e0af      	b.n	800859a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800843a:	4b20      	ldr	r3, [pc, #128]	; (80084bc <HAL_RCC_ClockConfig+0x220>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e0a7      	b.n	800859a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800844a:	4b1c      	ldr	r3, [pc, #112]	; (80084bc <HAL_RCC_ClockConfig+0x220>)
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f023 0203 	bic.w	r2, r3, #3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	4919      	ldr	r1, [pc, #100]	; (80084bc <HAL_RCC_ClockConfig+0x220>)
 8008458:	4313      	orrs	r3, r2
 800845a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800845c:	f7fc fc70 	bl	8004d40 <HAL_GetTick>
 8008460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008462:	e00a      	b.n	800847a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008464:	f7fc fc6c 	bl	8004d40 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008472:	4293      	cmp	r3, r2
 8008474:	d901      	bls.n	800847a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e08f      	b.n	800859a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800847a:	4b10      	ldr	r3, [pc, #64]	; (80084bc <HAL_RCC_ClockConfig+0x220>)
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f003 020c 	and.w	r2, r3, #12
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	429a      	cmp	r2, r3
 800848a:	d1eb      	bne.n	8008464 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800848c:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <HAL_RCC_ClockConfig+0x21c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d212      	bcs.n	80084c0 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800849a:	4b07      	ldr	r3, [pc, #28]	; (80084b8 <HAL_RCC_ClockConfig+0x21c>)
 800849c:	683a      	ldr	r2, [r7, #0]
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084a2:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <HAL_RCC_ClockConfig+0x21c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0307 	and.w	r3, r3, #7
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d007      	beq.n	80084c0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e072      	b.n	800859a <HAL_RCC_ClockConfig+0x2fe>
 80084b4:	080110c8 	.word	0x080110c8
 80084b8:	40023c00 	.word	0x40023c00
 80084bc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0304 	and.w	r3, r3, #4
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d025      	beq.n	8008518 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d018      	beq.n	8008506 <HAL_RCC_ClockConfig+0x26a>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084dc:	d013      	beq.n	8008506 <HAL_RCC_ClockConfig+0x26a>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80084e6:	d00e      	beq.n	8008506 <HAL_RCC_ClockConfig+0x26a>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80084f0:	d009      	beq.n	8008506 <HAL_RCC_ClockConfig+0x26a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80084fa:	d004      	beq.n	8008506 <HAL_RCC_ClockConfig+0x26a>
 80084fc:	f240 21c3 	movw	r1, #707	; 0x2c3
 8008500:	4828      	ldr	r0, [pc, #160]	; (80085a4 <HAL_RCC_ClockConfig+0x308>)
 8008502:	f7fa fcf8 	bl	8002ef6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008506:	4b28      	ldr	r3, [pc, #160]	; (80085a8 <HAL_RCC_ClockConfig+0x30c>)
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	4925      	ldr	r1, [pc, #148]	; (80085a8 <HAL_RCC_ClockConfig+0x30c>)
 8008514:	4313      	orrs	r3, r2
 8008516:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f003 0308 	and.w	r3, r3, #8
 8008520:	2b00      	cmp	r3, #0
 8008522:	d026      	beq.n	8008572 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d018      	beq.n	800855e <HAL_RCC_ClockConfig+0x2c2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008534:	d013      	beq.n	800855e <HAL_RCC_ClockConfig+0x2c2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800853e:	d00e      	beq.n	800855e <HAL_RCC_ClockConfig+0x2c2>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008548:	d009      	beq.n	800855e <HAL_RCC_ClockConfig+0x2c2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008552:	d004      	beq.n	800855e <HAL_RCC_ClockConfig+0x2c2>
 8008554:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008558:	4812      	ldr	r0, [pc, #72]	; (80085a4 <HAL_RCC_ClockConfig+0x308>)
 800855a:	f7fa fccc 	bl	8002ef6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800855e:	4b12      	ldr	r3, [pc, #72]	; (80085a8 <HAL_RCC_ClockConfig+0x30c>)
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	00db      	lsls	r3, r3, #3
 800856c:	490e      	ldr	r1, [pc, #56]	; (80085a8 <HAL_RCC_ClockConfig+0x30c>)
 800856e:	4313      	orrs	r3, r2
 8008570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008572:	f000 f821 	bl	80085b8 <HAL_RCC_GetSysClockFreq>
 8008576:	4602      	mov	r2, r0
 8008578:	4b0b      	ldr	r3, [pc, #44]	; (80085a8 <HAL_RCC_ClockConfig+0x30c>)
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	091b      	lsrs	r3, r3, #4
 800857e:	f003 030f 	and.w	r3, r3, #15
 8008582:	490a      	ldr	r1, [pc, #40]	; (80085ac <HAL_RCC_ClockConfig+0x310>)
 8008584:	5ccb      	ldrb	r3, [r1, r3]
 8008586:	fa22 f303 	lsr.w	r3, r2, r3
 800858a:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <HAL_RCC_ClockConfig+0x314>)
 800858c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800858e:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <HAL_RCC_ClockConfig+0x318>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f7fc fb90 	bl	8004cb8 <HAL_InitTick>

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	080110c8 	.word	0x080110c8
 80085a8:	40023800 	.word	0x40023800
 80085ac:	080111b0 	.word	0x080111b0
 80085b0:	20000008 	.word	0x20000008
 80085b4:	20000018 	.word	0x20000018

080085b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085bc:	b090      	sub	sp, #64	; 0x40
 80085be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	637b      	str	r3, [r7, #52]	; 0x34
 80085c4:	2300      	movs	r3, #0
 80085c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085c8:	2300      	movs	r3, #0
 80085ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085d0:	4b59      	ldr	r3, [pc, #356]	; (8008738 <HAL_RCC_GetSysClockFreq+0x180>)
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f003 030c 	and.w	r3, r3, #12
 80085d8:	2b08      	cmp	r3, #8
 80085da:	d00d      	beq.n	80085f8 <HAL_RCC_GetSysClockFreq+0x40>
 80085dc:	2b08      	cmp	r3, #8
 80085de:	f200 80a1 	bhi.w	8008724 <HAL_RCC_GetSysClockFreq+0x16c>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <HAL_RCC_GetSysClockFreq+0x34>
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d003      	beq.n	80085f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80085ea:	e09b      	b.n	8008724 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085ec:	4b53      	ldr	r3, [pc, #332]	; (800873c <HAL_RCC_GetSysClockFreq+0x184>)
 80085ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80085f0:	e09b      	b.n	800872a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085f2:	4b53      	ldr	r3, [pc, #332]	; (8008740 <HAL_RCC_GetSysClockFreq+0x188>)
 80085f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80085f6:	e098      	b.n	800872a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085f8:	4b4f      	ldr	r3, [pc, #316]	; (8008738 <HAL_RCC_GetSysClockFreq+0x180>)
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008600:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008602:	4b4d      	ldr	r3, [pc, #308]	; (8008738 <HAL_RCC_GetSysClockFreq+0x180>)
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d028      	beq.n	8008660 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800860e:	4b4a      	ldr	r3, [pc, #296]	; (8008738 <HAL_RCC_GetSysClockFreq+0x180>)
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	099b      	lsrs	r3, r3, #6
 8008614:	2200      	movs	r2, #0
 8008616:	623b      	str	r3, [r7, #32]
 8008618:	627a      	str	r2, [r7, #36]	; 0x24
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008620:	2100      	movs	r1, #0
 8008622:	4b47      	ldr	r3, [pc, #284]	; (8008740 <HAL_RCC_GetSysClockFreq+0x188>)
 8008624:	fb03 f201 	mul.w	r2, r3, r1
 8008628:	2300      	movs	r3, #0
 800862a:	fb00 f303 	mul.w	r3, r0, r3
 800862e:	4413      	add	r3, r2
 8008630:	4a43      	ldr	r2, [pc, #268]	; (8008740 <HAL_RCC_GetSysClockFreq+0x188>)
 8008632:	fba0 1202 	umull	r1, r2, r0, r2
 8008636:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008638:	460a      	mov	r2, r1
 800863a:	62ba      	str	r2, [r7, #40]	; 0x28
 800863c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800863e:	4413      	add	r3, r2
 8008640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008644:	2200      	movs	r2, #0
 8008646:	61bb      	str	r3, [r7, #24]
 8008648:	61fa      	str	r2, [r7, #28]
 800864a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800864e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008652:	f7f8 fb81 	bl	8000d58 <__aeabi_uldivmod>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4613      	mov	r3, r2
 800865c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800865e:	e053      	b.n	8008708 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008660:	4b35      	ldr	r3, [pc, #212]	; (8008738 <HAL_RCC_GetSysClockFreq+0x180>)
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	099b      	lsrs	r3, r3, #6
 8008666:	2200      	movs	r2, #0
 8008668:	613b      	str	r3, [r7, #16]
 800866a:	617a      	str	r2, [r7, #20]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008672:	f04f 0b00 	mov.w	fp, #0
 8008676:	4652      	mov	r2, sl
 8008678:	465b      	mov	r3, fp
 800867a:	f04f 0000 	mov.w	r0, #0
 800867e:	f04f 0100 	mov.w	r1, #0
 8008682:	0159      	lsls	r1, r3, #5
 8008684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008688:	0150      	lsls	r0, r2, #5
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	ebb2 080a 	subs.w	r8, r2, sl
 8008692:	eb63 090b 	sbc.w	r9, r3, fp
 8008696:	f04f 0200 	mov.w	r2, #0
 800869a:	f04f 0300 	mov.w	r3, #0
 800869e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80086a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80086a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80086aa:	ebb2 0408 	subs.w	r4, r2, r8
 80086ae:	eb63 0509 	sbc.w	r5, r3, r9
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	f04f 0300 	mov.w	r3, #0
 80086ba:	00eb      	lsls	r3, r5, #3
 80086bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086c0:	00e2      	lsls	r2, r4, #3
 80086c2:	4614      	mov	r4, r2
 80086c4:	461d      	mov	r5, r3
 80086c6:	eb14 030a 	adds.w	r3, r4, sl
 80086ca:	603b      	str	r3, [r7, #0]
 80086cc:	eb45 030b 	adc.w	r3, r5, fp
 80086d0:	607b      	str	r3, [r7, #4]
 80086d2:	f04f 0200 	mov.w	r2, #0
 80086d6:	f04f 0300 	mov.w	r3, #0
 80086da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80086de:	4629      	mov	r1, r5
 80086e0:	028b      	lsls	r3, r1, #10
 80086e2:	4621      	mov	r1, r4
 80086e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80086e8:	4621      	mov	r1, r4
 80086ea:	028a      	lsls	r2, r1, #10
 80086ec:	4610      	mov	r0, r2
 80086ee:	4619      	mov	r1, r3
 80086f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f2:	2200      	movs	r2, #0
 80086f4:	60bb      	str	r3, [r7, #8]
 80086f6:	60fa      	str	r2, [r7, #12]
 80086f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086fc:	f7f8 fb2c 	bl	8000d58 <__aeabi_uldivmod>
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	4613      	mov	r3, r2
 8008706:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008708:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <HAL_RCC_GetSysClockFreq+0x180>)
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	0c1b      	lsrs	r3, r3, #16
 800870e:	f003 0303 	and.w	r3, r3, #3
 8008712:	3301      	adds	r3, #1
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008720:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008722:	e002      	b.n	800872a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <HAL_RCC_GetSysClockFreq+0x184>)
 8008726:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800872c:	4618      	mov	r0, r3
 800872e:	3740      	adds	r7, #64	; 0x40
 8008730:	46bd      	mov	sp, r7
 8008732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008736:	bf00      	nop
 8008738:	40023800 	.word	0x40023800
 800873c:	00f42400 	.word	0x00f42400
 8008740:	017d7840 	.word	0x017d7840

08008744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008748:	4b03      	ldr	r3, [pc, #12]	; (8008758 <HAL_RCC_GetHCLKFreq+0x14>)
 800874a:	681b      	ldr	r3, [r3, #0]
}
 800874c:	4618      	mov	r0, r3
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	20000008 	.word	0x20000008

0800875c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008760:	f7ff fff0 	bl	8008744 <HAL_RCC_GetHCLKFreq>
 8008764:	4602      	mov	r2, r0
 8008766:	4b05      	ldr	r3, [pc, #20]	; (800877c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	0a9b      	lsrs	r3, r3, #10
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	4903      	ldr	r1, [pc, #12]	; (8008780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008772:	5ccb      	ldrb	r3, [r1, r3]
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008778:	4618      	mov	r0, r3
 800877a:	bd80      	pop	{r7, pc}
 800877c:	40023800 	.word	0x40023800
 8008780:	080111c0 	.word	0x080111c0

08008784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008788:	f7ff ffdc 	bl	8008744 <HAL_RCC_GetHCLKFreq>
 800878c:	4602      	mov	r2, r0
 800878e:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	0b5b      	lsrs	r3, r3, #13
 8008794:	f003 0307 	and.w	r3, r3, #7
 8008798:	4903      	ldr	r1, [pc, #12]	; (80087a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800879a:	5ccb      	ldrb	r3, [r1, r3]
 800879c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	40023800 	.word	0x40023800
 80087a8:	080111c0 	.word	0x080111c0

080087ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e0a7      	b.n	800890e <HAL_TIM_Base_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a55      	ldr	r2, [pc, #340]	; (8008918 <HAL_TIM_Base_Init+0x16c>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d027      	beq.n	8008818 <HAL_TIM_Base_Init+0x6c>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d0:	d022      	beq.n	8008818 <HAL_TIM_Base_Init+0x6c>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a51      	ldr	r2, [pc, #324]	; (800891c <HAL_TIM_Base_Init+0x170>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d01d      	beq.n	8008818 <HAL_TIM_Base_Init+0x6c>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a4f      	ldr	r2, [pc, #316]	; (8008920 <HAL_TIM_Base_Init+0x174>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d018      	beq.n	8008818 <HAL_TIM_Base_Init+0x6c>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a4e      	ldr	r2, [pc, #312]	; (8008924 <HAL_TIM_Base_Init+0x178>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d013      	beq.n	8008818 <HAL_TIM_Base_Init+0x6c>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a4c      	ldr	r2, [pc, #304]	; (8008928 <HAL_TIM_Base_Init+0x17c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d00e      	beq.n	8008818 <HAL_TIM_Base_Init+0x6c>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a4b      	ldr	r2, [pc, #300]	; (800892c <HAL_TIM_Base_Init+0x180>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d009      	beq.n	8008818 <HAL_TIM_Base_Init+0x6c>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a49      	ldr	r2, [pc, #292]	; (8008930 <HAL_TIM_Base_Init+0x184>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d004      	beq.n	8008818 <HAL_TIM_Base_Init+0x6c>
 800880e:	f240 1113 	movw	r1, #275	; 0x113
 8008812:	4848      	ldr	r0, [pc, #288]	; (8008934 <HAL_TIM_Base_Init+0x188>)
 8008814:	f7fa fb6f 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d014      	beq.n	800884a <HAL_TIM_Base_Init+0x9e>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	2b10      	cmp	r3, #16
 8008826:	d010      	beq.n	800884a <HAL_TIM_Base_Init+0x9e>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	2b20      	cmp	r3, #32
 800882e:	d00c      	beq.n	800884a <HAL_TIM_Base_Init+0x9e>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	2b40      	cmp	r3, #64	; 0x40
 8008836:	d008      	beq.n	800884a <HAL_TIM_Base_Init+0x9e>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	2b60      	cmp	r3, #96	; 0x60
 800883e:	d004      	beq.n	800884a <HAL_TIM_Base_Init+0x9e>
 8008840:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008844:	483b      	ldr	r0, [pc, #236]	; (8008934 <HAL_TIM_Base_Init+0x188>)
 8008846:	f7fa fb56 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00e      	beq.n	8008870 <HAL_TIM_Base_Init+0xc4>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800885a:	d009      	beq.n	8008870 <HAL_TIM_Base_Init+0xc4>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008864:	d004      	beq.n	8008870 <HAL_TIM_Base_Init+0xc4>
 8008866:	f240 1115 	movw	r1, #277	; 0x115
 800886a:	4832      	ldr	r0, [pc, #200]	; (8008934 <HAL_TIM_Base_Init+0x188>)
 800886c:	f7fa fb43 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d008      	beq.n	800888a <HAL_TIM_Base_Init+0xde>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	2b80      	cmp	r3, #128	; 0x80
 800887e:	d004      	beq.n	800888a <HAL_TIM_Base_Init+0xde>
 8008880:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008884:	482b      	ldr	r0, [pc, #172]	; (8008934 <HAL_TIM_Base_Init+0x188>)
 8008886:	f7fa fb36 	bl	8002ef6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d106      	bne.n	80088a4 <HAL_TIM_Base_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7fa fdfe 	bl	80034a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2202      	movs	r2, #2
 80088a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f001 f8b2 	bl	8009a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	40010000 	.word	0x40010000
 800891c:	40000400 	.word	0x40000400
 8008920:	40000800 	.word	0x40000800
 8008924:	40000c00 	.word	0x40000c00
 8008928:	40014000 	.word	0x40014000
 800892c:	40014400 	.word	0x40014400
 8008930:	40014800 	.word	0x40014800
 8008934:	08011100 	.word	0x08011100

08008938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a3d      	ldr	r2, [pc, #244]	; (8008a3c <HAL_TIM_Base_Start_IT+0x104>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d027      	beq.n	800899a <HAL_TIM_Base_Start_IT+0x62>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008952:	d022      	beq.n	800899a <HAL_TIM_Base_Start_IT+0x62>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a39      	ldr	r2, [pc, #228]	; (8008a40 <HAL_TIM_Base_Start_IT+0x108>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d01d      	beq.n	800899a <HAL_TIM_Base_Start_IT+0x62>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a38      	ldr	r2, [pc, #224]	; (8008a44 <HAL_TIM_Base_Start_IT+0x10c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d018      	beq.n	800899a <HAL_TIM_Base_Start_IT+0x62>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a36      	ldr	r2, [pc, #216]	; (8008a48 <HAL_TIM_Base_Start_IT+0x110>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d013      	beq.n	800899a <HAL_TIM_Base_Start_IT+0x62>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a35      	ldr	r2, [pc, #212]	; (8008a4c <HAL_TIM_Base_Start_IT+0x114>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d00e      	beq.n	800899a <HAL_TIM_Base_Start_IT+0x62>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a33      	ldr	r2, [pc, #204]	; (8008a50 <HAL_TIM_Base_Start_IT+0x118>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d009      	beq.n	800899a <HAL_TIM_Base_Start_IT+0x62>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a32      	ldr	r2, [pc, #200]	; (8008a54 <HAL_TIM_Base_Start_IT+0x11c>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d004      	beq.n	800899a <HAL_TIM_Base_Start_IT+0x62>
 8008990:	f240 11cf 	movw	r1, #463	; 0x1cf
 8008994:	4830      	ldr	r0, [pc, #192]	; (8008a58 <HAL_TIM_Base_Start_IT+0x120>)
 8008996:	f7fa faae 	bl	8002ef6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d001      	beq.n	80089aa <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e044      	b.n	8008a34 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2202      	movs	r2, #2
 80089ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f042 0201 	orr.w	r2, r2, #1
 80089c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a1d      	ldr	r2, [pc, #116]	; (8008a3c <HAL_TIM_Base_Start_IT+0x104>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d018      	beq.n	80089fe <HAL_TIM_Base_Start_IT+0xc6>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d4:	d013      	beq.n	80089fe <HAL_TIM_Base_Start_IT+0xc6>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a19      	ldr	r2, [pc, #100]	; (8008a40 <HAL_TIM_Base_Start_IT+0x108>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00e      	beq.n	80089fe <HAL_TIM_Base_Start_IT+0xc6>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a17      	ldr	r2, [pc, #92]	; (8008a44 <HAL_TIM_Base_Start_IT+0x10c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d009      	beq.n	80089fe <HAL_TIM_Base_Start_IT+0xc6>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a16      	ldr	r2, [pc, #88]	; (8008a48 <HAL_TIM_Base_Start_IT+0x110>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d004      	beq.n	80089fe <HAL_TIM_Base_Start_IT+0xc6>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a14      	ldr	r2, [pc, #80]	; (8008a4c <HAL_TIM_Base_Start_IT+0x114>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d111      	bne.n	8008a22 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f003 0307 	and.w	r3, r3, #7
 8008a08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b06      	cmp	r3, #6
 8008a0e:	d010      	beq.n	8008a32 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f042 0201 	orr.w	r2, r2, #1
 8008a1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a20:	e007      	b.n	8008a32 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f042 0201 	orr.w	r2, r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	40010000 	.word	0x40010000
 8008a40:	40000400 	.word	0x40000400
 8008a44:	40000800 	.word	0x40000800
 8008a48:	40000c00 	.word	0x40000c00
 8008a4c:	40014000 	.word	0x40014000
 8008a50:	40014400 	.word	0x40014400
 8008a54:	40014800 	.word	0x40014800
 8008a58:	08011100 	.word	0x08011100

08008a5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e0a7      	b.n	8008bbe <HAL_TIM_PWM_Init+0x162>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a55      	ldr	r2, [pc, #340]	; (8008bc8 <HAL_TIM_PWM_Init+0x16c>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d027      	beq.n	8008ac8 <HAL_TIM_PWM_Init+0x6c>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a80:	d022      	beq.n	8008ac8 <HAL_TIM_PWM_Init+0x6c>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a51      	ldr	r2, [pc, #324]	; (8008bcc <HAL_TIM_PWM_Init+0x170>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d01d      	beq.n	8008ac8 <HAL_TIM_PWM_Init+0x6c>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a4f      	ldr	r2, [pc, #316]	; (8008bd0 <HAL_TIM_PWM_Init+0x174>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d018      	beq.n	8008ac8 <HAL_TIM_PWM_Init+0x6c>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a4e      	ldr	r2, [pc, #312]	; (8008bd4 <HAL_TIM_PWM_Init+0x178>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d013      	beq.n	8008ac8 <HAL_TIM_PWM_Init+0x6c>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a4c      	ldr	r2, [pc, #304]	; (8008bd8 <HAL_TIM_PWM_Init+0x17c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d00e      	beq.n	8008ac8 <HAL_TIM_PWM_Init+0x6c>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a4b      	ldr	r2, [pc, #300]	; (8008bdc <HAL_TIM_PWM_Init+0x180>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d009      	beq.n	8008ac8 <HAL_TIM_PWM_Init+0x6c>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a49      	ldr	r2, [pc, #292]	; (8008be0 <HAL_TIM_PWM_Init+0x184>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d004      	beq.n	8008ac8 <HAL_TIM_PWM_Init+0x6c>
 8008abe:	f240 5129 	movw	r1, #1321	; 0x529
 8008ac2:	4848      	ldr	r0, [pc, #288]	; (8008be4 <HAL_TIM_PWM_Init+0x188>)
 8008ac4:	f7fa fa17 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d014      	beq.n	8008afa <HAL_TIM_PWM_Init+0x9e>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	2b10      	cmp	r3, #16
 8008ad6:	d010      	beq.n	8008afa <HAL_TIM_PWM_Init+0x9e>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	d00c      	beq.n	8008afa <HAL_TIM_PWM_Init+0x9e>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	2b40      	cmp	r3, #64	; 0x40
 8008ae6:	d008      	beq.n	8008afa <HAL_TIM_PWM_Init+0x9e>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	2b60      	cmp	r3, #96	; 0x60
 8008aee:	d004      	beq.n	8008afa <HAL_TIM_PWM_Init+0x9e>
 8008af0:	f240 512a 	movw	r1, #1322	; 0x52a
 8008af4:	483b      	ldr	r0, [pc, #236]	; (8008be4 <HAL_TIM_PWM_Init+0x188>)
 8008af6:	f7fa f9fe 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00e      	beq.n	8008b20 <HAL_TIM_PWM_Init+0xc4>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b0a:	d009      	beq.n	8008b20 <HAL_TIM_PWM_Init+0xc4>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b14:	d004      	beq.n	8008b20 <HAL_TIM_PWM_Init+0xc4>
 8008b16:	f240 512b 	movw	r1, #1323	; 0x52b
 8008b1a:	4832      	ldr	r0, [pc, #200]	; (8008be4 <HAL_TIM_PWM_Init+0x188>)
 8008b1c:	f7fa f9eb 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d008      	beq.n	8008b3a <HAL_TIM_PWM_Init+0xde>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	2b80      	cmp	r3, #128	; 0x80
 8008b2e:	d004      	beq.n	8008b3a <HAL_TIM_PWM_Init+0xde>
 8008b30:	f240 512c 	movw	r1, #1324	; 0x52c
 8008b34:	482b      	ldr	r0, [pc, #172]	; (8008be4 <HAL_TIM_PWM_Init+0x188>)
 8008b36:	f7fa f9de 	bl	8002ef6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d106      	bne.n	8008b54 <HAL_TIM_PWM_Init+0xf8>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f84a 	bl	8008be8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2202      	movs	r2, #2
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3304      	adds	r3, #4
 8008b64:	4619      	mov	r1, r3
 8008b66:	4610      	mov	r0, r2
 8008b68:	f000 ff5a 	bl	8009a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	40010000 	.word	0x40010000
 8008bcc:	40000400 	.word	0x40000400
 8008bd0:	40000800 	.word	0x40000800
 8008bd4:	40000c00 	.word	0x40000c00
 8008bd8:	40014000 	.word	0x40014000
 8008bdc:	40014400 	.word	0x40014400
 8008be0:	40014800 	.word	0x40014800
 8008be4:	08011100 	.word	0x08011100

08008be8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a8a      	ldr	r2, [pc, #552]	; (8008e34 <HAL_TIM_PWM_Start+0x238>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d10b      	bne.n	8008c28 <HAL_TIM_PWM_Start+0x2c>
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d06c      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	d069      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b08      	cmp	r3, #8
 8008c20:	d066      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b0c      	cmp	r3, #12
 8008c26:	d063      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c30:	d10b      	bne.n	8008c4a <HAL_TIM_PWM_Start+0x4e>
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d05b      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	2b04      	cmp	r3, #4
 8008c3c:	d058      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d055      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	2b0c      	cmp	r3, #12
 8008c48:	d052      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a7a      	ldr	r2, [pc, #488]	; (8008e38 <HAL_TIM_PWM_Start+0x23c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d10b      	bne.n	8008c6c <HAL_TIM_PWM_Start+0x70>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d04a      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	d047      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	2b08      	cmp	r3, #8
 8008c64:	d044      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b0c      	cmp	r3, #12
 8008c6a:	d041      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a72      	ldr	r2, [pc, #456]	; (8008e3c <HAL_TIM_PWM_Start+0x240>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d10b      	bne.n	8008c8e <HAL_TIM_PWM_Start+0x92>
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d039      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	d036      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b08      	cmp	r3, #8
 8008c86:	d033      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2b0c      	cmp	r3, #12
 8008c8c:	d030      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a6b      	ldr	r2, [pc, #428]	; (8008e40 <HAL_TIM_PWM_Start+0x244>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d10b      	bne.n	8008cb0 <HAL_TIM_PWM_Start+0xb4>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d028      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	d025      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2b08      	cmp	r3, #8
 8008ca8:	d022      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b0c      	cmp	r3, #12
 8008cae:	d01f      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a63      	ldr	r2, [pc, #396]	; (8008e44 <HAL_TIM_PWM_Start+0x248>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d105      	bne.n	8008cc6 <HAL_TIM_PWM_Start+0xca>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d017      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d014      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a5f      	ldr	r2, [pc, #380]	; (8008e48 <HAL_TIM_PWM_Start+0x24c>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d102      	bne.n	8008cd6 <HAL_TIM_PWM_Start+0xda>
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00c      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a5c      	ldr	r2, [pc, #368]	; (8008e4c <HAL_TIM_PWM_Start+0x250>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d102      	bne.n	8008ce6 <HAL_TIM_PWM_Start+0xea>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d004      	beq.n	8008cf0 <HAL_TIM_PWM_Start+0xf4>
 8008ce6:	f240 51af 	movw	r1, #1455	; 0x5af
 8008cea:	4859      	ldr	r0, [pc, #356]	; (8008e50 <HAL_TIM_PWM_Start+0x254>)
 8008cec:	f7fa f903 	bl	8002ef6 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d109      	bne.n	8008d0a <HAL_TIM_PWM_Start+0x10e>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	bf14      	ite	ne
 8008d02:	2301      	movne	r3, #1
 8008d04:	2300      	moveq	r3, #0
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	e022      	b.n	8008d50 <HAL_TIM_PWM_Start+0x154>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b04      	cmp	r3, #4
 8008d0e:	d109      	bne.n	8008d24 <HAL_TIM_PWM_Start+0x128>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	bf14      	ite	ne
 8008d1c:	2301      	movne	r3, #1
 8008d1e:	2300      	moveq	r3, #0
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	e015      	b.n	8008d50 <HAL_TIM_PWM_Start+0x154>
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	2b08      	cmp	r3, #8
 8008d28:	d109      	bne.n	8008d3e <HAL_TIM_PWM_Start+0x142>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	bf14      	ite	ne
 8008d36:	2301      	movne	r3, #1
 8008d38:	2300      	moveq	r3, #0
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	e008      	b.n	8008d50 <HAL_TIM_PWM_Start+0x154>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	bf14      	ite	ne
 8008d4a:	2301      	movne	r3, #1
 8008d4c:	2300      	moveq	r3, #0
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <HAL_TIM_PWM_Start+0x15c>
  {
    return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e068      	b.n	8008e2a <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <HAL_TIM_PWM_Start+0x16c>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2202      	movs	r2, #2
 8008d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d66:	e013      	b.n	8008d90 <HAL_TIM_PWM_Start+0x194>
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	d104      	bne.n	8008d78 <HAL_TIM_PWM_Start+0x17c>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2202      	movs	r2, #2
 8008d72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d76:	e00b      	b.n	8008d90 <HAL_TIM_PWM_Start+0x194>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2b08      	cmp	r3, #8
 8008d7c:	d104      	bne.n	8008d88 <HAL_TIM_PWM_Start+0x18c>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2202      	movs	r2, #2
 8008d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d86:	e003      	b.n	8008d90 <HAL_TIM_PWM_Start+0x194>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2201      	movs	r2, #1
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 f971 	bl	800a080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a24      	ldr	r2, [pc, #144]	; (8008e34 <HAL_TIM_PWM_Start+0x238>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d107      	bne.n	8008db8 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008db6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a1d      	ldr	r2, [pc, #116]	; (8008e34 <HAL_TIM_PWM_Start+0x238>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d018      	beq.n	8008df4 <HAL_TIM_PWM_Start+0x1f8>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dca:	d013      	beq.n	8008df4 <HAL_TIM_PWM_Start+0x1f8>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a19      	ldr	r2, [pc, #100]	; (8008e38 <HAL_TIM_PWM_Start+0x23c>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d00e      	beq.n	8008df4 <HAL_TIM_PWM_Start+0x1f8>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a18      	ldr	r2, [pc, #96]	; (8008e3c <HAL_TIM_PWM_Start+0x240>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d009      	beq.n	8008df4 <HAL_TIM_PWM_Start+0x1f8>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a16      	ldr	r2, [pc, #88]	; (8008e40 <HAL_TIM_PWM_Start+0x244>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d004      	beq.n	8008df4 <HAL_TIM_PWM_Start+0x1f8>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a15      	ldr	r2, [pc, #84]	; (8008e44 <HAL_TIM_PWM_Start+0x248>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d111      	bne.n	8008e18 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b06      	cmp	r3, #6
 8008e04:	d010      	beq.n	8008e28 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f042 0201 	orr.w	r2, r2, #1
 8008e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e16:	e007      	b.n	8008e28 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f042 0201 	orr.w	r2, r2, #1
 8008e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	40010000 	.word	0x40010000
 8008e38:	40000400 	.word	0x40000400
 8008e3c:	40000800 	.word	0x40000800
 8008e40:	40000c00 	.word	0x40000c00
 8008e44:	40014000 	.word	0x40014000
 8008e48:	40014400 	.word	0x40014400
 8008e4c:	40014800 	.word	0x40014800
 8008e50:	08011100 	.word	0x08011100

08008e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	f003 0302 	and.w	r3, r3, #2
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d122      	bne.n	8008eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d11b      	bne.n	8008eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f06f 0202 	mvn.w	r2, #2
 8008e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	f003 0303 	and.w	r3, r3, #3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fda4 	bl	80099e4 <HAL_TIM_IC_CaptureCallback>
 8008e9c:	e005      	b.n	8008eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fd96 	bl	80099d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fda7 	bl	80099f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	f003 0304 	and.w	r3, r3, #4
 8008eba:	2b04      	cmp	r3, #4
 8008ebc:	d122      	bne.n	8008f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	2b04      	cmp	r3, #4
 8008eca:	d11b      	bne.n	8008f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f06f 0204 	mvn.w	r2, #4
 8008ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2202      	movs	r2, #2
 8008eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fd7a 	bl	80099e4 <HAL_TIM_IC_CaptureCallback>
 8008ef0:	e005      	b.n	8008efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fd6c 	bl	80099d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fd7d 	bl	80099f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	f003 0308 	and.w	r3, r3, #8
 8008f0e:	2b08      	cmp	r3, #8
 8008f10:	d122      	bne.n	8008f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	f003 0308 	and.w	r3, r3, #8
 8008f1c:	2b08      	cmp	r3, #8
 8008f1e:	d11b      	bne.n	8008f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f06f 0208 	mvn.w	r2, #8
 8008f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2204      	movs	r2, #4
 8008f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	f003 0303 	and.w	r3, r3, #3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fd50 	bl	80099e4 <HAL_TIM_IC_CaptureCallback>
 8008f44:	e005      	b.n	8008f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fd42 	bl	80099d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fd53 	bl	80099f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	f003 0310 	and.w	r3, r3, #16
 8008f62:	2b10      	cmp	r3, #16
 8008f64:	d122      	bne.n	8008fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f003 0310 	and.w	r3, r3, #16
 8008f70:	2b10      	cmp	r3, #16
 8008f72:	d11b      	bne.n	8008fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f06f 0210 	mvn.w	r2, #16
 8008f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2208      	movs	r2, #8
 8008f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fd26 	bl	80099e4 <HAL_TIM_IC_CaptureCallback>
 8008f98:	e005      	b.n	8008fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fd18 	bl	80099d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fd29 	bl	80099f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d10e      	bne.n	8008fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d107      	bne.n	8008fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f06f 0201 	mvn.w	r2, #1
 8008fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7f9 fb7e 	bl	80026d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe2:	2b80      	cmp	r3, #128	; 0x80
 8008fe4:	d10e      	bne.n	8009004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff0:	2b80      	cmp	r3, #128	; 0x80
 8008ff2:	d107      	bne.n	8009004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f001 fa38 	bl	800a474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900e:	2b40      	cmp	r3, #64	; 0x40
 8009010:	d10e      	bne.n	8009030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800901c:	2b40      	cmp	r3, #64	; 0x40
 800901e:	d107      	bne.n	8009030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fcee 	bl	8009a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b20      	cmp	r3, #32
 800903c:	d10e      	bne.n	800905c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f003 0320 	and.w	r3, r3, #32
 8009048:	2b20      	cmp	r3, #32
 800904a:	d107      	bne.n	800905c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f06f 0220 	mvn.w	r2, #32
 8009054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 fa02 	bl	800a460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800905c:	bf00      	nop
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d010      	beq.n	800909c <HAL_TIM_PWM_ConfigChannel+0x38>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b04      	cmp	r3, #4
 800907e:	d00d      	beq.n	800909c <HAL_TIM_PWM_ConfigChannel+0x38>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b08      	cmp	r3, #8
 8009084:	d00a      	beq.n	800909c <HAL_TIM_PWM_ConfigChannel+0x38>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b0c      	cmp	r3, #12
 800908a:	d007      	beq.n	800909c <HAL_TIM_PWM_ConfigChannel+0x38>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b3c      	cmp	r3, #60	; 0x3c
 8009090:	d004      	beq.n	800909c <HAL_TIM_PWM_ConfigChannel+0x38>
 8009092:	f241 0177 	movw	r1, #4215	; 0x1077
 8009096:	4893      	ldr	r0, [pc, #588]	; (80092e4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009098:	f7f9 ff2d 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2b60      	cmp	r3, #96	; 0x60
 80090a2:	d008      	beq.n	80090b6 <HAL_TIM_PWM_ConfigChannel+0x52>
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b70      	cmp	r3, #112	; 0x70
 80090aa:	d004      	beq.n	80090b6 <HAL_TIM_PWM_ConfigChannel+0x52>
 80090ac:	f241 0178 	movw	r1, #4216	; 0x1078
 80090b0:	488c      	ldr	r0, [pc, #560]	; (80092e4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80090b2:	f7f9 ff20 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d008      	beq.n	80090d0 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d004      	beq.n	80090d0 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80090c6:	f241 0179 	movw	r1, #4217	; 0x1079
 80090ca:	4886      	ldr	r0, [pc, #536]	; (80092e4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80090cc:	f7f9 ff13 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d008      	beq.n	80090ea <HAL_TIM_PWM_ConfigChannel+0x86>
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d004      	beq.n	80090ea <HAL_TIM_PWM_ConfigChannel+0x86>
 80090e0:	f241 017a 	movw	r1, #4218	; 0x107a
 80090e4:	487f      	ldr	r0, [pc, #508]	; (80092e4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80090e6:	f7f9 ff06 	bl	8002ef6 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d101      	bne.n	80090f8 <HAL_TIM_PWM_ConfigChannel+0x94>
 80090f4:	2302      	movs	r3, #2
 80090f6:	e14c      	b.n	8009392 <HAL_TIM_PWM_ConfigChannel+0x32e>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b0c      	cmp	r3, #12
 8009104:	f200 813d 	bhi.w	8009382 <HAL_TIM_PWM_ConfigChannel+0x31e>
 8009108:	a201      	add	r2, pc, #4	; (adr r2, 8009110 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800910a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910e:	bf00      	nop
 8009110:	08009145 	.word	0x08009145
 8009114:	08009383 	.word	0x08009383
 8009118:	08009383 	.word	0x08009383
 800911c:	08009383 	.word	0x08009383
 8009120:	080091df 	.word	0x080091df
 8009124:	08009383 	.word	0x08009383
 8009128:	08009383 	.word	0x08009383
 800912c:	08009383 	.word	0x08009383
 8009130:	08009267 	.word	0x08009267
 8009134:	08009383 	.word	0x08009383
 8009138:	08009383 	.word	0x08009383
 800913c:	08009383 	.word	0x08009383
 8009140:	08009305 	.word	0x08009305
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a67      	ldr	r2, [pc, #412]	; (80092e8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d027      	beq.n	800919e <HAL_TIM_PWM_ConfigChannel+0x13a>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009156:	d022      	beq.n	800919e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a63      	ldr	r2, [pc, #396]	; (80092ec <HAL_TIM_PWM_ConfigChannel+0x288>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d01d      	beq.n	800919e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a62      	ldr	r2, [pc, #392]	; (80092f0 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d018      	beq.n	800919e <HAL_TIM_PWM_ConfigChannel+0x13a>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a60      	ldr	r2, [pc, #384]	; (80092f4 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d013      	beq.n	800919e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a5f      	ldr	r2, [pc, #380]	; (80092f8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d00e      	beq.n	800919e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a5d      	ldr	r2, [pc, #372]	; (80092fc <HAL_TIM_PWM_ConfigChannel+0x298>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d009      	beq.n	800919e <HAL_TIM_PWM_ConfigChannel+0x13a>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a5c      	ldr	r2, [pc, #368]	; (8009300 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d004      	beq.n	800919e <HAL_TIM_PWM_ConfigChannel+0x13a>
 8009194:	f241 0184 	movw	r1, #4228	; 0x1084
 8009198:	4852      	ldr	r0, [pc, #328]	; (80092e4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800919a:	f7f9 feac 	bl	8002ef6 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68b9      	ldr	r1, [r7, #8]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 fcbb 	bl	8009b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	699a      	ldr	r2, [r3, #24]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f042 0208 	orr.w	r2, r2, #8
 80091b8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	699a      	ldr	r2, [r3, #24]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 0204 	bic.w	r2, r2, #4
 80091c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6999      	ldr	r1, [r3, #24]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	691a      	ldr	r2, [r3, #16]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	430a      	orrs	r2, r1
 80091da:	619a      	str	r2, [r3, #24]
      break;
 80091dc:	e0d4      	b.n	8009388 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a41      	ldr	r2, [pc, #260]	; (80092e8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d01d      	beq.n	8009224 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091f0:	d018      	beq.n	8009224 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a3d      	ldr	r2, [pc, #244]	; (80092ec <HAL_TIM_PWM_ConfigChannel+0x288>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d013      	beq.n	8009224 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a3b      	ldr	r2, [pc, #236]	; (80092f0 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d00e      	beq.n	8009224 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a3a      	ldr	r2, [pc, #232]	; (80092f4 <HAL_TIM_PWM_ConfigChannel+0x290>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d009      	beq.n	8009224 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a38      	ldr	r2, [pc, #224]	; (80092f8 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d004      	beq.n	8009224 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 800921a:	f241 0195 	movw	r1, #4245	; 0x1095
 800921e:	4831      	ldr	r0, [pc, #196]	; (80092e4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8009220:	f7f9 fe69 	bl	8002ef6 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68b9      	ldr	r1, [r7, #8]
 800922a:	4618      	mov	r0, r3
 800922c:	f000 fd08 	bl	8009c40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	699a      	ldr	r2, [r3, #24]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800923e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	699a      	ldr	r2, [r3, #24]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800924e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6999      	ldr	r1, [r3, #24]
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	021a      	lsls	r2, r3, #8
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	619a      	str	r2, [r3, #24]
      break;
 8009264:	e090      	b.n	8009388 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a1f      	ldr	r2, [pc, #124]	; (80092e8 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d018      	beq.n	80092a2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009278:	d013      	beq.n	80092a2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a1b      	ldr	r2, [pc, #108]	; (80092ec <HAL_TIM_PWM_ConfigChannel+0x288>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d00e      	beq.n	80092a2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a19      	ldr	r2, [pc, #100]	; (80092f0 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d009      	beq.n	80092a2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a18      	ldr	r2, [pc, #96]	; (80092f4 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d004      	beq.n	80092a2 <HAL_TIM_PWM_ConfigChannel+0x23e>
 8009298:	f241 01a6 	movw	r1, #4262	; 0x10a6
 800929c:	4811      	ldr	r0, [pc, #68]	; (80092e4 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800929e:	f7f9 fe2a 	bl	8002ef6 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68b9      	ldr	r1, [r7, #8]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 fd5d 	bl	8009d68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	69da      	ldr	r2, [r3, #28]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f042 0208 	orr.w	r2, r2, #8
 80092bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	69da      	ldr	r2, [r3, #28]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f022 0204 	bic.w	r2, r2, #4
 80092cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	69d9      	ldr	r1, [r3, #28]
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	691a      	ldr	r2, [r3, #16]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	430a      	orrs	r2, r1
 80092de:	61da      	str	r2, [r3, #28]
      break;
 80092e0:	e052      	b.n	8009388 <HAL_TIM_PWM_ConfigChannel+0x324>
 80092e2:	bf00      	nop
 80092e4:	08011100 	.word	0x08011100
 80092e8:	40010000 	.word	0x40010000
 80092ec:	40000400 	.word	0x40000400
 80092f0:	40000800 	.word	0x40000800
 80092f4:	40000c00 	.word	0x40000c00
 80092f8:	40014000 	.word	0x40014000
 80092fc:	40014400 	.word	0x40014400
 8009300:	40014800 	.word	0x40014800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a24      	ldr	r2, [pc, #144]	; (800939c <HAL_TIM_PWM_ConfigChannel+0x338>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d018      	beq.n	8009340 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009316:	d013      	beq.n	8009340 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a20      	ldr	r2, [pc, #128]	; (80093a0 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d00e      	beq.n	8009340 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a1f      	ldr	r2, [pc, #124]	; (80093a4 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d009      	beq.n	8009340 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a1d      	ldr	r2, [pc, #116]	; (80093a8 <HAL_TIM_PWM_ConfigChannel+0x344>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d004      	beq.n	8009340 <HAL_TIM_PWM_ConfigChannel+0x2dc>
 8009336:	f241 01b7 	movw	r1, #4279	; 0x10b7
 800933a:	481c      	ldr	r0, [pc, #112]	; (80093ac <HAL_TIM_PWM_ConfigChannel+0x348>)
 800933c:	f7f9 fddb 	bl	8002ef6 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 fda2 	bl	8009e90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	69da      	ldr	r2, [r3, #28]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800935a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	69da      	ldr	r2, [r3, #28]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800936a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	69d9      	ldr	r1, [r3, #28]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	021a      	lsls	r2, r3, #8
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	430a      	orrs	r2, r1
 800937e:	61da      	str	r2, [r3, #28]
      break;
 8009380:	e002      	b.n	8009388 <HAL_TIM_PWM_ConfigChannel+0x324>
    }

    default:
      status = HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	75fb      	strb	r3, [r7, #23]
      break;
 8009386:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009390:	7dfb      	ldrb	r3, [r7, #23]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	40010000 	.word	0x40010000
 80093a0:	40000400 	.word	0x40000400
 80093a4:	40000800 	.word	0x40000800
 80093a8:	40000c00 	.word	0x40000c00
 80093ac:	08011100 	.word	0x08011100

080093b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d101      	bne.n	80093cc <HAL_TIM_ConfigClockSource+0x1c>
 80093c8:	2302      	movs	r3, #2
 80093ca:	e2f0      	b.n	80099ae <HAL_TIM_ConfigClockSource+0x5fe>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093e4:	d029      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x8a>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b70      	cmp	r3, #112	; 0x70
 80093ec:	d025      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x8a>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093f6:	d020      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x8a>
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b40      	cmp	r3, #64	; 0x40
 80093fe:	d01c      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x8a>
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b50      	cmp	r3, #80	; 0x50
 8009406:	d018      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x8a>
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	2b60      	cmp	r3, #96	; 0x60
 800940e:	d014      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x8a>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d010      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x8a>
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b10      	cmp	r3, #16
 800941e:	d00c      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x8a>
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b20      	cmp	r3, #32
 8009426:	d008      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x8a>
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b30      	cmp	r3, #48	; 0x30
 800942e:	d004      	beq.n	800943a <HAL_TIM_ConfigClockSource+0x8a>
 8009430:	f241 41b7 	movw	r1, #5303	; 0x14b7
 8009434:	487c      	ldr	r0, [pc, #496]	; (8009628 <HAL_TIM_ConfigClockSource+0x278>)
 8009436:	f7f9 fd5e 	bl	8002ef6 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009448:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009450:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009462:	f000 80f1 	beq.w	8009648 <HAL_TIM_ConfigClockSource+0x298>
 8009466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800946a:	f200 8293 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x5e4>
 800946e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009472:	d02d      	beq.n	80094d0 <HAL_TIM_ConfigClockSource+0x120>
 8009474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009478:	f200 828c 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x5e4>
 800947c:	2b70      	cmp	r3, #112	; 0x70
 800947e:	d05d      	beq.n	800953c <HAL_TIM_ConfigClockSource+0x18c>
 8009480:	2b70      	cmp	r3, #112	; 0x70
 8009482:	f200 8287 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x5e4>
 8009486:	2b60      	cmp	r3, #96	; 0x60
 8009488:	f000 81a0 	beq.w	80097cc <HAL_TIM_ConfigClockSource+0x41c>
 800948c:	2b60      	cmp	r3, #96	; 0x60
 800948e:	f200 8281 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x5e4>
 8009492:	2b50      	cmp	r3, #80	; 0x50
 8009494:	f000 8144 	beq.w	8009720 <HAL_TIM_ConfigClockSource+0x370>
 8009498:	2b50      	cmp	r3, #80	; 0x50
 800949a:	f200 827b 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x5e4>
 800949e:	2b40      	cmp	r3, #64	; 0x40
 80094a0:	f000 81f6 	beq.w	8009890 <HAL_TIM_ConfigClockSource+0x4e0>
 80094a4:	2b40      	cmp	r3, #64	; 0x40
 80094a6:	f200 8275 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x5e4>
 80094aa:	2b30      	cmp	r3, #48	; 0x30
 80094ac:	f000 8246 	beq.w	800993c <HAL_TIM_ConfigClockSource+0x58c>
 80094b0:	2b30      	cmp	r3, #48	; 0x30
 80094b2:	f200 826f 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x5e4>
 80094b6:	2b20      	cmp	r3, #32
 80094b8:	f000 8240 	beq.w	800993c <HAL_TIM_ConfigClockSource+0x58c>
 80094bc:	2b20      	cmp	r3, #32
 80094be:	f200 8269 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x5e4>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 823a 	beq.w	800993c <HAL_TIM_ConfigClockSource+0x58c>
 80094c8:	2b10      	cmp	r3, #16
 80094ca:	f000 8237 	beq.w	800993c <HAL_TIM_ConfigClockSource+0x58c>
 80094ce:	e261      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x5e4>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a55      	ldr	r2, [pc, #340]	; (800962c <HAL_TIM_ConfigClockSource+0x27c>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	f000 825f 	beq.w	800999a <HAL_TIM_ConfigClockSource+0x5ea>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094e4:	f000 8259 	beq.w	800999a <HAL_TIM_ConfigClockSource+0x5ea>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a50      	ldr	r2, [pc, #320]	; (8009630 <HAL_TIM_ConfigClockSource+0x280>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	f000 8253 	beq.w	800999a <HAL_TIM_ConfigClockSource+0x5ea>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a4e      	ldr	r2, [pc, #312]	; (8009634 <HAL_TIM_ConfigClockSource+0x284>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	f000 824d 	beq.w	800999a <HAL_TIM_ConfigClockSource+0x5ea>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a4c      	ldr	r2, [pc, #304]	; (8009638 <HAL_TIM_ConfigClockSource+0x288>)
 8009506:	4293      	cmp	r3, r2
 8009508:	f000 8247 	beq.w	800999a <HAL_TIM_ConfigClockSource+0x5ea>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a4a      	ldr	r2, [pc, #296]	; (800963c <HAL_TIM_ConfigClockSource+0x28c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	f000 8241 	beq.w	800999a <HAL_TIM_ConfigClockSource+0x5ea>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a48      	ldr	r2, [pc, #288]	; (8009640 <HAL_TIM_ConfigClockSource+0x290>)
 800951e:	4293      	cmp	r3, r2
 8009520:	f000 823b 	beq.w	800999a <HAL_TIM_ConfigClockSource+0x5ea>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a46      	ldr	r2, [pc, #280]	; (8009644 <HAL_TIM_ConfigClockSource+0x294>)
 800952a:	4293      	cmp	r3, r2
 800952c:	f000 8235 	beq.w	800999a <HAL_TIM_ConfigClockSource+0x5ea>
 8009530:	f241 41c3 	movw	r1, #5315	; 0x14c3
 8009534:	483c      	ldr	r0, [pc, #240]	; (8009628 <HAL_TIM_ConfigClockSource+0x278>)
 8009536:	f7f9 fcde 	bl	8002ef6 <assert_failed>
      break;
 800953a:	e22e      	b.n	800999a <HAL_TIM_ConfigClockSource+0x5ea>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a3a      	ldr	r2, [pc, #232]	; (800962c <HAL_TIM_ConfigClockSource+0x27c>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d01d      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x1d2>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800954e:	d018      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x1d2>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a36      	ldr	r2, [pc, #216]	; (8009630 <HAL_TIM_ConfigClockSource+0x280>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d013      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x1d2>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a35      	ldr	r2, [pc, #212]	; (8009634 <HAL_TIM_ConfigClockSource+0x284>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d00e      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x1d2>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a33      	ldr	r2, [pc, #204]	; (8009638 <HAL_TIM_ConfigClockSource+0x288>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d009      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x1d2>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a32      	ldr	r2, [pc, #200]	; (800963c <HAL_TIM_ConfigClockSource+0x28c>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d004      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x1d2>
 8009578:	f241 41ca 	movw	r1, #5322	; 0x14ca
 800957c:	482a      	ldr	r0, [pc, #168]	; (8009628 <HAL_TIM_ConfigClockSource+0x278>)
 800957e:	f7f9 fcba 	bl	8002ef6 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d013      	beq.n	80095b2 <HAL_TIM_ConfigClockSource+0x202>
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009592:	d00e      	beq.n	80095b2 <HAL_TIM_ConfigClockSource+0x202>
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800959c:	d009      	beq.n	80095b2 <HAL_TIM_ConfigClockSource+0x202>
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095a6:	d004      	beq.n	80095b2 <HAL_TIM_ConfigClockSource+0x202>
 80095a8:	f241 41cd 	movw	r1, #5325	; 0x14cd
 80095ac:	481e      	ldr	r0, [pc, #120]	; (8009628 <HAL_TIM_ConfigClockSource+0x278>)
 80095ae:	f7f9 fca2 	bl	8002ef6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ba:	d014      	beq.n	80095e6 <HAL_TIM_ConfigClockSource+0x236>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d010      	beq.n	80095e6 <HAL_TIM_ConfigClockSource+0x236>
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00c      	beq.n	80095e6 <HAL_TIM_ConfigClockSource+0x236>
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d008      	beq.n	80095e6 <HAL_TIM_ConfigClockSource+0x236>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	2b0a      	cmp	r3, #10
 80095da:	d004      	beq.n	80095e6 <HAL_TIM_ConfigClockSource+0x236>
 80095dc:	f241 41ce 	movw	r1, #5326	; 0x14ce
 80095e0:	4811      	ldr	r0, [pc, #68]	; (8009628 <HAL_TIM_ConfigClockSource+0x278>)
 80095e2:	f7f9 fc88 	bl	8002ef6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	2b0f      	cmp	r3, #15
 80095ec:	d904      	bls.n	80095f8 <HAL_TIM_ConfigClockSource+0x248>
 80095ee:	f241 41cf 	movw	r1, #5327	; 0x14cf
 80095f2:	480d      	ldr	r0, [pc, #52]	; (8009628 <HAL_TIM_ConfigClockSource+0x278>)
 80095f4:	f7f9 fc7f 	bl	8002ef6 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6818      	ldr	r0, [r3, #0]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	6899      	ldr	r1, [r3, #8]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	f000 fd1a 	bl	800a040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800961a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	609a      	str	r2, [r3, #8]
      break;
 8009624:	e1ba      	b.n	800999c <HAL_TIM_ConfigClockSource+0x5ec>
 8009626:	bf00      	nop
 8009628:	08011100 	.word	0x08011100
 800962c:	40010000 	.word	0x40010000
 8009630:	40000400 	.word	0x40000400
 8009634:	40000800 	.word	0x40000800
 8009638:	40000c00 	.word	0x40000c00
 800963c:	40014000 	.word	0x40014000
 8009640:	40014400 	.word	0x40014400
 8009644:	40014800 	.word	0x40014800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a8a      	ldr	r2, [pc, #552]	; (8009878 <HAL_TIM_ConfigClockSource+0x4c8>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d018      	beq.n	8009684 <HAL_TIM_ConfigClockSource+0x2d4>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800965a:	d013      	beq.n	8009684 <HAL_TIM_ConfigClockSource+0x2d4>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a86      	ldr	r2, [pc, #536]	; (800987c <HAL_TIM_ConfigClockSource+0x4cc>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d00e      	beq.n	8009684 <HAL_TIM_ConfigClockSource+0x2d4>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a85      	ldr	r2, [pc, #532]	; (8009880 <HAL_TIM_ConfigClockSource+0x4d0>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d009      	beq.n	8009684 <HAL_TIM_ConfigClockSource+0x2d4>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a83      	ldr	r2, [pc, #524]	; (8009884 <HAL_TIM_ConfigClockSource+0x4d4>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d004      	beq.n	8009684 <HAL_TIM_ConfigClockSource+0x2d4>
 800967a:	f241 41e2 	movw	r1, #5346	; 0x14e2
 800967e:	4882      	ldr	r0, [pc, #520]	; (8009888 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009680:	f7f9 fc39 	bl	8002ef6 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d013      	beq.n	80096b4 <HAL_TIM_ConfigClockSource+0x304>
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009694:	d00e      	beq.n	80096b4 <HAL_TIM_ConfigClockSource+0x304>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800969e:	d009      	beq.n	80096b4 <HAL_TIM_ConfigClockSource+0x304>
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096a8:	d004      	beq.n	80096b4 <HAL_TIM_ConfigClockSource+0x304>
 80096aa:	f241 41e5 	movw	r1, #5349	; 0x14e5
 80096ae:	4876      	ldr	r0, [pc, #472]	; (8009888 <HAL_TIM_ConfigClockSource+0x4d8>)
 80096b0:	f7f9 fc21 	bl	8002ef6 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096bc:	d014      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0x338>
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d010      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0x338>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00c      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0x338>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d008      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0x338>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	2b0a      	cmp	r3, #10
 80096dc:	d004      	beq.n	80096e8 <HAL_TIM_ConfigClockSource+0x338>
 80096de:	f241 41e6 	movw	r1, #5350	; 0x14e6
 80096e2:	4869      	ldr	r0, [pc, #420]	; (8009888 <HAL_TIM_ConfigClockSource+0x4d8>)
 80096e4:	f7f9 fc07 	bl	8002ef6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	2b0f      	cmp	r3, #15
 80096ee:	d904      	bls.n	80096fa <HAL_TIM_ConfigClockSource+0x34a>
 80096f0:	f241 41e7 	movw	r1, #5351	; 0x14e7
 80096f4:	4864      	ldr	r0, [pc, #400]	; (8009888 <HAL_TIM_ConfigClockSource+0x4d8>)
 80096f6:	f7f9 fbfe 	bl	8002ef6 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6818      	ldr	r0, [r3, #0]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	6899      	ldr	r1, [r3, #8]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	f000 fc99 	bl	800a040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689a      	ldr	r2, [r3, #8]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800971c:	609a      	str	r2, [r3, #8]
      break;
 800971e:	e13d      	b.n	800999c <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a54      	ldr	r2, [pc, #336]	; (8009878 <HAL_TIM_ConfigClockSource+0x4c8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d01d      	beq.n	8009766 <HAL_TIM_ConfigClockSource+0x3b6>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009732:	d018      	beq.n	8009766 <HAL_TIM_ConfigClockSource+0x3b6>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a50      	ldr	r2, [pc, #320]	; (800987c <HAL_TIM_ConfigClockSource+0x4cc>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d013      	beq.n	8009766 <HAL_TIM_ConfigClockSource+0x3b6>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a4f      	ldr	r2, [pc, #316]	; (8009880 <HAL_TIM_ConfigClockSource+0x4d0>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d00e      	beq.n	8009766 <HAL_TIM_ConfigClockSource+0x3b6>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a4d      	ldr	r2, [pc, #308]	; (8009884 <HAL_TIM_ConfigClockSource+0x4d4>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d009      	beq.n	8009766 <HAL_TIM_ConfigClockSource+0x3b6>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a4d      	ldr	r2, [pc, #308]	; (800988c <HAL_TIM_ConfigClockSource+0x4dc>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d004      	beq.n	8009766 <HAL_TIM_ConfigClockSource+0x3b6>
 800975c:	f241 41f6 	movw	r1, #5366	; 0x14f6
 8009760:	4849      	ldr	r0, [pc, #292]	; (8009888 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009762:	f7f9 fbc8 	bl	8002ef6 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800976e:	d014      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x3ea>
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d010      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x3ea>
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00c      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x3ea>
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	2b02      	cmp	r3, #2
 8009786:	d008      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x3ea>
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	2b0a      	cmp	r3, #10
 800978e:	d004      	beq.n	800979a <HAL_TIM_ConfigClockSource+0x3ea>
 8009790:	f241 41f9 	movw	r1, #5369	; 0x14f9
 8009794:	483c      	ldr	r0, [pc, #240]	; (8009888 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009796:	f7f9 fbae 	bl	8002ef6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	2b0f      	cmp	r3, #15
 80097a0:	d904      	bls.n	80097ac <HAL_TIM_ConfigClockSource+0x3fc>
 80097a2:	f241 41fa 	movw	r1, #5370	; 0x14fa
 80097a6:	4838      	ldr	r0, [pc, #224]	; (8009888 <HAL_TIM_ConfigClockSource+0x4d8>)
 80097a8:	f7f9 fba5 	bl	8002ef6 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6818      	ldr	r0, [r3, #0]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	6859      	ldr	r1, [r3, #4]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	461a      	mov	r2, r3
 80097ba:	f000 fbc7 	bl	8009f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2150      	movs	r1, #80	; 0x50
 80097c4:	4618      	mov	r0, r3
 80097c6:	f000 fc20 	bl	800a00a <TIM_ITRx_SetConfig>
      break;
 80097ca:	e0e7      	b.n	800999c <HAL_TIM_ConfigClockSource+0x5ec>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a29      	ldr	r2, [pc, #164]	; (8009878 <HAL_TIM_ConfigClockSource+0x4c8>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d01d      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x462>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097de:	d018      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x462>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a25      	ldr	r2, [pc, #148]	; (800987c <HAL_TIM_ConfigClockSource+0x4cc>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d013      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x462>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a24      	ldr	r2, [pc, #144]	; (8009880 <HAL_TIM_ConfigClockSource+0x4d0>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d00e      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x462>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a22      	ldr	r2, [pc, #136]	; (8009884 <HAL_TIM_ConfigClockSource+0x4d4>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d009      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x462>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a22      	ldr	r2, [pc, #136]	; (800988c <HAL_TIM_ConfigClockSource+0x4dc>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d004      	beq.n	8009812 <HAL_TIM_ConfigClockSource+0x462>
 8009808:	f241 5106 	movw	r1, #5382	; 0x1506
 800980c:	481e      	ldr	r0, [pc, #120]	; (8009888 <HAL_TIM_ConfigClockSource+0x4d8>)
 800980e:	f7f9 fb72 	bl	8002ef6 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800981a:	d014      	beq.n	8009846 <HAL_TIM_ConfigClockSource+0x496>
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d010      	beq.n	8009846 <HAL_TIM_ConfigClockSource+0x496>
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00c      	beq.n	8009846 <HAL_TIM_ConfigClockSource+0x496>
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2b02      	cmp	r3, #2
 8009832:	d008      	beq.n	8009846 <HAL_TIM_ConfigClockSource+0x496>
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	2b0a      	cmp	r3, #10
 800983a:	d004      	beq.n	8009846 <HAL_TIM_ConfigClockSource+0x496>
 800983c:	f241 5109 	movw	r1, #5385	; 0x1509
 8009840:	4811      	ldr	r0, [pc, #68]	; (8009888 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009842:	f7f9 fb58 	bl	8002ef6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	2b0f      	cmp	r3, #15
 800984c:	d904      	bls.n	8009858 <HAL_TIM_ConfigClockSource+0x4a8>
 800984e:	f241 510a 	movw	r1, #5386	; 0x150a
 8009852:	480d      	ldr	r0, [pc, #52]	; (8009888 <HAL_TIM_ConfigClockSource+0x4d8>)
 8009854:	f7f9 fb4f 	bl	8002ef6 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6818      	ldr	r0, [r3, #0]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	6859      	ldr	r1, [r3, #4]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	461a      	mov	r2, r3
 8009866:	f000 fba0 	bl	8009faa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2160      	movs	r1, #96	; 0x60
 8009870:	4618      	mov	r0, r3
 8009872:	f000 fbca 	bl	800a00a <TIM_ITRx_SetConfig>
      break;
 8009876:	e091      	b.n	800999c <HAL_TIM_ConfigClockSource+0x5ec>
 8009878:	40010000 	.word	0x40010000
 800987c:	40000400 	.word	0x40000400
 8009880:	40000800 	.word	0x40000800
 8009884:	40000c00 	.word	0x40000c00
 8009888:	08011100 	.word	0x08011100
 800988c:	40014000 	.word	0x40014000
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a48      	ldr	r2, [pc, #288]	; (80099b8 <HAL_TIM_ConfigClockSource+0x608>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d01d      	beq.n	80098d6 <HAL_TIM_ConfigClockSource+0x526>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098a2:	d018      	beq.n	80098d6 <HAL_TIM_ConfigClockSource+0x526>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a44      	ldr	r2, [pc, #272]	; (80099bc <HAL_TIM_ConfigClockSource+0x60c>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d013      	beq.n	80098d6 <HAL_TIM_ConfigClockSource+0x526>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a43      	ldr	r2, [pc, #268]	; (80099c0 <HAL_TIM_ConfigClockSource+0x610>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d00e      	beq.n	80098d6 <HAL_TIM_ConfigClockSource+0x526>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a41      	ldr	r2, [pc, #260]	; (80099c4 <HAL_TIM_ConfigClockSource+0x614>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d009      	beq.n	80098d6 <HAL_TIM_ConfigClockSource+0x526>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a40      	ldr	r2, [pc, #256]	; (80099c8 <HAL_TIM_ConfigClockSource+0x618>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d004      	beq.n	80098d6 <HAL_TIM_ConfigClockSource+0x526>
 80098cc:	f241 5116 	movw	r1, #5398	; 0x1516
 80098d0:	483e      	ldr	r0, [pc, #248]	; (80099cc <HAL_TIM_ConfigClockSource+0x61c>)
 80098d2:	f7f9 fb10 	bl	8002ef6 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098de:	d014      	beq.n	800990a <HAL_TIM_ConfigClockSource+0x55a>
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d010      	beq.n	800990a <HAL_TIM_ConfigClockSource+0x55a>
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00c      	beq.n	800990a <HAL_TIM_ConfigClockSource+0x55a>
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d008      	beq.n	800990a <HAL_TIM_ConfigClockSource+0x55a>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	2b0a      	cmp	r3, #10
 80098fe:	d004      	beq.n	800990a <HAL_TIM_ConfigClockSource+0x55a>
 8009900:	f241 5119 	movw	r1, #5401	; 0x1519
 8009904:	4831      	ldr	r0, [pc, #196]	; (80099cc <HAL_TIM_ConfigClockSource+0x61c>)
 8009906:	f7f9 faf6 	bl	8002ef6 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	2b0f      	cmp	r3, #15
 8009910:	d904      	bls.n	800991c <HAL_TIM_ConfigClockSource+0x56c>
 8009912:	f241 511a 	movw	r1, #5402	; 0x151a
 8009916:	482d      	ldr	r0, [pc, #180]	; (80099cc <HAL_TIM_ConfigClockSource+0x61c>)
 8009918:	f7f9 faed 	bl	8002ef6 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6818      	ldr	r0, [r3, #0]
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	6859      	ldr	r1, [r3, #4]
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	461a      	mov	r2, r3
 800992a:	f000 fb0f 	bl	8009f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2140      	movs	r1, #64	; 0x40
 8009934:	4618      	mov	r0, r3
 8009936:	f000 fb68 	bl	800a00a <TIM_ITRx_SetConfig>
      break;
 800993a:	e02f      	b.n	800999c <HAL_TIM_ConfigClockSource+0x5ec>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a1d      	ldr	r2, [pc, #116]	; (80099b8 <HAL_TIM_ConfigClockSource+0x608>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d01d      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x5d2>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800994e:	d018      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x5d2>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a19      	ldr	r2, [pc, #100]	; (80099bc <HAL_TIM_ConfigClockSource+0x60c>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d013      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x5d2>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a18      	ldr	r2, [pc, #96]	; (80099c0 <HAL_TIM_ConfigClockSource+0x610>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d00e      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x5d2>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a16      	ldr	r2, [pc, #88]	; (80099c4 <HAL_TIM_ConfigClockSource+0x614>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d009      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x5d2>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a15      	ldr	r2, [pc, #84]	; (80099c8 <HAL_TIM_ConfigClockSource+0x618>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d004      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x5d2>
 8009978:	f241 5129 	movw	r1, #5417	; 0x1529
 800997c:	4813      	ldr	r0, [pc, #76]	; (80099cc <HAL_TIM_ConfigClockSource+0x61c>)
 800997e:	f7f9 faba 	bl	8002ef6 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4619      	mov	r1, r3
 800998c:	4610      	mov	r0, r2
 800998e:	f000 fb3c 	bl	800a00a <TIM_ITRx_SetConfig>
      break;
 8009992:	e003      	b.n	800999c <HAL_TIM_ConfigClockSource+0x5ec>
    }

    default:
      status = HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	73fb      	strb	r3, [r7, #15]
      break;
 8009998:	e000      	b.n	800999c <HAL_TIM_ConfigClockSource+0x5ec>
      break;
 800999a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	40010000 	.word	0x40010000
 80099bc:	40000400 	.word	0x40000400
 80099c0:	40000800 	.word	0x40000800
 80099c4:	40000c00 	.word	0x40000c00
 80099c8:	40014000 	.word	0x40014000
 80099cc:	08011100 	.word	0x08011100

080099d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr

08009a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a34      	ldr	r2, [pc, #208]	; (8009b04 <TIM_Base_SetConfig+0xe4>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d00f      	beq.n	8009a58 <TIM_Base_SetConfig+0x38>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a3e:	d00b      	beq.n	8009a58 <TIM_Base_SetConfig+0x38>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a31      	ldr	r2, [pc, #196]	; (8009b08 <TIM_Base_SetConfig+0xe8>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d007      	beq.n	8009a58 <TIM_Base_SetConfig+0x38>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a30      	ldr	r2, [pc, #192]	; (8009b0c <TIM_Base_SetConfig+0xec>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d003      	beq.n	8009a58 <TIM_Base_SetConfig+0x38>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a2f      	ldr	r2, [pc, #188]	; (8009b10 <TIM_Base_SetConfig+0xf0>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d108      	bne.n	8009a6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a25      	ldr	r2, [pc, #148]	; (8009b04 <TIM_Base_SetConfig+0xe4>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d01b      	beq.n	8009aaa <TIM_Base_SetConfig+0x8a>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a78:	d017      	beq.n	8009aaa <TIM_Base_SetConfig+0x8a>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a22      	ldr	r2, [pc, #136]	; (8009b08 <TIM_Base_SetConfig+0xe8>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d013      	beq.n	8009aaa <TIM_Base_SetConfig+0x8a>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a21      	ldr	r2, [pc, #132]	; (8009b0c <TIM_Base_SetConfig+0xec>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d00f      	beq.n	8009aaa <TIM_Base_SetConfig+0x8a>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a20      	ldr	r2, [pc, #128]	; (8009b10 <TIM_Base_SetConfig+0xf0>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d00b      	beq.n	8009aaa <TIM_Base_SetConfig+0x8a>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a1f      	ldr	r2, [pc, #124]	; (8009b14 <TIM_Base_SetConfig+0xf4>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d007      	beq.n	8009aaa <TIM_Base_SetConfig+0x8a>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a1e      	ldr	r2, [pc, #120]	; (8009b18 <TIM_Base_SetConfig+0xf8>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d003      	beq.n	8009aaa <TIM_Base_SetConfig+0x8a>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a1d      	ldr	r2, [pc, #116]	; (8009b1c <TIM_Base_SetConfig+0xfc>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d108      	bne.n	8009abc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a08      	ldr	r2, [pc, #32]	; (8009b04 <TIM_Base_SetConfig+0xe4>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d103      	bne.n	8009af0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	691a      	ldr	r2, [r3, #16]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	615a      	str	r2, [r3, #20]
}
 8009af6:	bf00      	nop
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	40010000 	.word	0x40010000
 8009b08:	40000400 	.word	0x40000400
 8009b0c:	40000800 	.word	0x40000800
 8009b10:	40000c00 	.word	0x40000c00
 8009b14:	40014000 	.word	0x40014000
 8009b18:	40014400 	.word	0x40014400
 8009b1c:	40014800 	.word	0x40014800

08009b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a1b      	ldr	r3, [r3, #32]
 8009b2e:	f023 0201 	bic.w	r2, r3, #1
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f023 0303 	bic.w	r3, r3, #3
 8009b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f023 0302 	bic.w	r3, r3, #2
 8009b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	689b      	ldr	r3, [r3, #8]
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a30      	ldr	r2, [pc, #192]	; (8009c38 <TIM_OC1_SetConfig+0x118>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d119      	bne.n	8009bb0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d008      	beq.n	8009b96 <TIM_OC1_SetConfig+0x76>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	d004      	beq.n	8009b96 <TIM_OC1_SetConfig+0x76>
 8009b8c:	f641 21c7 	movw	r1, #6855	; 0x1ac7
 8009b90:	482a      	ldr	r0, [pc, #168]	; (8009c3c <TIM_OC1_SetConfig+0x11c>)
 8009b92:	f7f9 f9b0 	bl	8002ef6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f023 0308 	bic.w	r3, r3, #8
 8009b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f023 0304 	bic.w	r3, r3, #4
 8009bae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a21      	ldr	r2, [pc, #132]	; (8009c38 <TIM_OC1_SetConfig+0x118>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d12d      	bne.n	8009c14 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	699b      	ldr	r3, [r3, #24]
 8009bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bc0:	d008      	beq.n	8009bd4 <TIM_OC1_SetConfig+0xb4>
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d004      	beq.n	8009bd4 <TIM_OC1_SetConfig+0xb4>
 8009bca:	f641 21d4 	movw	r1, #6868	; 0x1ad4
 8009bce:	481b      	ldr	r0, [pc, #108]	; (8009c3c <TIM_OC1_SetConfig+0x11c>)
 8009bd0:	f7f9 f991 	bl	8002ef6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	695b      	ldr	r3, [r3, #20]
 8009bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bdc:	d008      	beq.n	8009bf0 <TIM_OC1_SetConfig+0xd0>
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d004      	beq.n	8009bf0 <TIM_OC1_SetConfig+0xd0>
 8009be6:	f641 21d5 	movw	r1, #6869	; 0x1ad5
 8009bea:	4814      	ldr	r0, [pc, #80]	; (8009c3c <TIM_OC1_SetConfig+0x11c>)
 8009bec:	f7f9 f983 	bl	8002ef6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	695b      	ldr	r3, [r3, #20]
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	621a      	str	r2, [r3, #32]
}
 8009c2e:	bf00      	nop
 8009c30:	3718      	adds	r7, #24
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	40010000 	.word	0x40010000
 8009c3c:	08011100 	.word	0x08011100

08009c40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	f023 0210 	bic.w	r2, r3, #16
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	021b      	lsls	r3, r3, #8
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	f023 0320 	bic.w	r3, r3, #32
 8009c8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	011b      	lsls	r3, r3, #4
 8009c92:	697a      	ldr	r2, [r7, #20]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a31      	ldr	r2, [pc, #196]	; (8009d60 <TIM_OC2_SetConfig+0x120>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d11a      	bne.n	8009cd6 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d008      	beq.n	8009cba <TIM_OC2_SetConfig+0x7a>
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	2b08      	cmp	r3, #8
 8009cae:	d004      	beq.n	8009cba <TIM_OC2_SetConfig+0x7a>
 8009cb0:	f641 3112 	movw	r1, #6930	; 0x1b12
 8009cb4:	482b      	ldr	r0, [pc, #172]	; (8009d64 <TIM_OC2_SetConfig+0x124>)
 8009cb6:	f7f9 f91e 	bl	8002ef6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	011b      	lsls	r3, r3, #4
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cd4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a21      	ldr	r2, [pc, #132]	; (8009d60 <TIM_OC2_SetConfig+0x120>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d12f      	bne.n	8009d3e <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ce6:	d008      	beq.n	8009cfa <TIM_OC2_SetConfig+0xba>
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d004      	beq.n	8009cfa <TIM_OC2_SetConfig+0xba>
 8009cf0:	f44f 51d9 	mov.w	r1, #6944	; 0x1b20
 8009cf4:	481b      	ldr	r0, [pc, #108]	; (8009d64 <TIM_OC2_SetConfig+0x124>)
 8009cf6:	f7f9 f8fe 	bl	8002ef6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d02:	d008      	beq.n	8009d16 <TIM_OC2_SetConfig+0xd6>
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d004      	beq.n	8009d16 <TIM_OC2_SetConfig+0xd6>
 8009d0c:	f641 3121 	movw	r1, #6945	; 0x1b21
 8009d10:	4814      	ldr	r0, [pc, #80]	; (8009d64 <TIM_OC2_SetConfig+0x124>)
 8009d12:	f7f9 f8f0 	bl	8002ef6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	695b      	ldr	r3, [r3, #20]
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	699b      	ldr	r3, [r3, #24]
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	697a      	ldr	r2, [r7, #20]
 8009d56:	621a      	str	r2, [r3, #32]
}
 8009d58:	bf00      	nop
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	40010000 	.word	0x40010000
 8009d64:	08011100 	.word	0x08011100

08009d68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f023 0303 	bic.w	r3, r3, #3
 8009d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	021b      	lsls	r3, r3, #8
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a31      	ldr	r2, [pc, #196]	; (8009e88 <TIM_OC3_SetConfig+0x120>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d11a      	bne.n	8009dfc <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d008      	beq.n	8009de0 <TIM_OC3_SetConfig+0x78>
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	2b08      	cmp	r3, #8
 8009dd4:	d004      	beq.n	8009de0 <TIM_OC3_SetConfig+0x78>
 8009dd6:	f641 315d 	movw	r1, #7005	; 0x1b5d
 8009dda:	482c      	ldr	r0, [pc, #176]	; (8009e8c <TIM_OC3_SetConfig+0x124>)
 8009ddc:	f7f9 f88b 	bl	8002ef6 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	021b      	lsls	r3, r3, #8
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009dfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a22      	ldr	r2, [pc, #136]	; (8009e88 <TIM_OC3_SetConfig+0x120>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d12f      	bne.n	8009e64 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	699b      	ldr	r3, [r3, #24]
 8009e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e0c:	d008      	beq.n	8009e20 <TIM_OC3_SetConfig+0xb8>
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d004      	beq.n	8009e20 <TIM_OC3_SetConfig+0xb8>
 8009e16:	f641 316a 	movw	r1, #7018	; 0x1b6a
 8009e1a:	481c      	ldr	r0, [pc, #112]	; (8009e8c <TIM_OC3_SetConfig+0x124>)
 8009e1c:	f7f9 f86b 	bl	8002ef6 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	695b      	ldr	r3, [r3, #20]
 8009e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e28:	d008      	beq.n	8009e3c <TIM_OC3_SetConfig+0xd4>
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d004      	beq.n	8009e3c <TIM_OC3_SetConfig+0xd4>
 8009e32:	f641 316b 	movw	r1, #7019	; 0x1b6b
 8009e36:	4815      	ldr	r0, [pc, #84]	; (8009e8c <TIM_OC3_SetConfig+0x124>)
 8009e38:	f7f9 f85d 	bl	8002ef6 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	011b      	lsls	r3, r3, #4
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	011b      	lsls	r3, r3, #4
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	621a      	str	r2, [r3, #32]
}
 8009e7e:	bf00      	nop
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	40010000 	.word	0x40010000
 8009e8c:	08011100 	.word	0x08011100

08009e90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	69db      	ldr	r3, [r3, #28]
 8009eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	021b      	lsls	r3, r3, #8
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	031b      	lsls	r3, r3, #12
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a16      	ldr	r2, [pc, #88]	; (8009f44 <TIM_OC4_SetConfig+0xb4>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d117      	bne.n	8009f20 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ef8:	d008      	beq.n	8009f0c <TIM_OC4_SetConfig+0x7c>
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	695b      	ldr	r3, [r3, #20]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d004      	beq.n	8009f0c <TIM_OC4_SetConfig+0x7c>
 8009f02:	f641 31a9 	movw	r1, #7081	; 0x1ba9
 8009f06:	4810      	ldr	r0, [pc, #64]	; (8009f48 <TIM_OC4_SetConfig+0xb8>)
 8009f08:	f7f8 fff5 	bl	8002ef6 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	695b      	ldr	r3, [r3, #20]
 8009f18:	019b      	lsls	r3, r3, #6
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	621a      	str	r2, [r3, #32]
}
 8009f3a:	bf00      	nop
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	40010000 	.word	0x40010000
 8009f48:	08011100 	.word	0x08011100

08009f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b087      	sub	sp, #28
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6a1b      	ldr	r3, [r3, #32]
 8009f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	f023 0201 	bic.w	r2, r3, #1
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	693a      	ldr	r2, [r7, #16]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f023 030a 	bic.w	r3, r3, #10
 8009f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	621a      	str	r2, [r3, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr

08009faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009faa:	b480      	push	{r7}
 8009fac:	b087      	sub	sp, #28
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	60b9      	str	r1, [r7, #8]
 8009fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	f023 0210 	bic.w	r2, r3, #16
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6a1b      	ldr	r3, [r3, #32]
 8009fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	031b      	lsls	r3, r3, #12
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fe6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	621a      	str	r2, [r3, #32]
}
 8009ffe:	bf00      	nop
 800a000:	371c      	adds	r7, #28
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b085      	sub	sp, #20
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	4313      	orrs	r3, r2
 800a028:	f043 0307 	orr.w	r3, r3, #7
 800a02c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	609a      	str	r2, [r3, #8]
}
 800a034:	bf00      	nop
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a040:	b480      	push	{r7}
 800a042:	b087      	sub	sp, #28
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a05a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	021a      	lsls	r2, r3, #8
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	431a      	orrs	r2, r3
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	4313      	orrs	r3, r2
 800a068:	697a      	ldr	r2, [r7, #20]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	609a      	str	r2, [r3, #8]
}
 800a074:	bf00      	nop
 800a076:	371c      	adds	r7, #28
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4a2a      	ldr	r2, [pc, #168]	; (800a138 <TIM_CCxChannelCmd+0xb8>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d020      	beq.n	800a0d6 <TIM_CCxChannelCmd+0x56>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a09a:	d01c      	beq.n	800a0d6 <TIM_CCxChannelCmd+0x56>
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4a27      	ldr	r2, [pc, #156]	; (800a13c <TIM_CCxChannelCmd+0xbc>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d018      	beq.n	800a0d6 <TIM_CCxChannelCmd+0x56>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	4a26      	ldr	r2, [pc, #152]	; (800a140 <TIM_CCxChannelCmd+0xc0>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d014      	beq.n	800a0d6 <TIM_CCxChannelCmd+0x56>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4a25      	ldr	r2, [pc, #148]	; (800a144 <TIM_CCxChannelCmd+0xc4>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d010      	beq.n	800a0d6 <TIM_CCxChannelCmd+0x56>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	4a24      	ldr	r2, [pc, #144]	; (800a148 <TIM_CCxChannelCmd+0xc8>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d00c      	beq.n	800a0d6 <TIM_CCxChannelCmd+0x56>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4a23      	ldr	r2, [pc, #140]	; (800a14c <TIM_CCxChannelCmd+0xcc>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d008      	beq.n	800a0d6 <TIM_CCxChannelCmd+0x56>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	4a22      	ldr	r2, [pc, #136]	; (800a150 <TIM_CCxChannelCmd+0xd0>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d004      	beq.n	800a0d6 <TIM_CCxChannelCmd+0x56>
 800a0cc:	f641 5194 	movw	r1, #7572	; 0x1d94
 800a0d0:	4820      	ldr	r0, [pc, #128]	; (800a154 <TIM_CCxChannelCmd+0xd4>)
 800a0d2:	f7f8 ff10 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d010      	beq.n	800a0fe <TIM_CCxChannelCmd+0x7e>
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d00d      	beq.n	800a0fe <TIM_CCxChannelCmd+0x7e>
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	2b08      	cmp	r3, #8
 800a0e6:	d00a      	beq.n	800a0fe <TIM_CCxChannelCmd+0x7e>
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	2b0c      	cmp	r3, #12
 800a0ec:	d007      	beq.n	800a0fe <TIM_CCxChannelCmd+0x7e>
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2b3c      	cmp	r3, #60	; 0x3c
 800a0f2:	d004      	beq.n	800a0fe <TIM_CCxChannelCmd+0x7e>
 800a0f4:	f641 5195 	movw	r1, #7573	; 0x1d95
 800a0f8:	4816      	ldr	r0, [pc, #88]	; (800a154 <TIM_CCxChannelCmd+0xd4>)
 800a0fa:	f7f8 fefc 	bl	8002ef6 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	f003 031f 	and.w	r3, r3, #31
 800a104:	2201      	movs	r2, #1
 800a106:	fa02 f303 	lsl.w	r3, r2, r3
 800a10a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6a1a      	ldr	r2, [r3, #32]
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	43db      	mvns	r3, r3
 800a114:	401a      	ands	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6a1a      	ldr	r2, [r3, #32]
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	f003 031f 	and.w	r3, r3, #31
 800a124:	6879      	ldr	r1, [r7, #4]
 800a126:	fa01 f303 	lsl.w	r3, r1, r3
 800a12a:	431a      	orrs	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	621a      	str	r2, [r3, #32]
}
 800a130:	bf00      	nop
 800a132:	3718      	adds	r7, #24
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	40010000 	.word	0x40010000
 800a13c:	40000400 	.word	0x40000400
 800a140:	40000800 	.word	0x40000800
 800a144:	40000c00 	.word	0x40000c00
 800a148:	40014000 	.word	0x40014000
 800a14c:	40014400 	.word	0x40014400
 800a150:	40014800 	.word	0x40014800
 800a154:	08011100 	.word	0x08011100

0800a158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a55      	ldr	r2, [pc, #340]	; (800a2bc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d018      	beq.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a174:	d013      	beq.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a51      	ldr	r2, [pc, #324]	; (800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d00e      	beq.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a4f      	ldr	r2, [pc, #316]	; (800a2c4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d009      	beq.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a4e      	ldr	r2, [pc, #312]	; (800a2c8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d004      	beq.n	800a19e <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800a194:	f240 71b1 	movw	r1, #1969	; 0x7b1
 800a198:	484c      	ldr	r0, [pc, #304]	; (800a2cc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a19a:	f7f8 feac 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d020      	beq.n	800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b10      	cmp	r3, #16
 800a1ac:	d01c      	beq.n	800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b20      	cmp	r3, #32
 800a1b4:	d018      	beq.n	800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b30      	cmp	r3, #48	; 0x30
 800a1bc:	d014      	beq.n	800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b40      	cmp	r3, #64	; 0x40
 800a1c4:	d010      	beq.n	800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b50      	cmp	r3, #80	; 0x50
 800a1cc:	d00c      	beq.n	800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b60      	cmp	r3, #96	; 0x60
 800a1d4:	d008      	beq.n	800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b70      	cmp	r3, #112	; 0x70
 800a1dc:	d004      	beq.n	800a1e8 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800a1de:	f240 71b2 	movw	r1, #1970	; 0x7b2
 800a1e2:	483a      	ldr	r0, [pc, #232]	; (800a2cc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a1e4:	f7f8 fe87 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	2b80      	cmp	r3, #128	; 0x80
 800a1ee:	d008      	beq.n	800a202 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d004      	beq.n	800a202 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 800a1f8:	f240 71b3 	movw	r1, #1971	; 0x7b3
 800a1fc:	4833      	ldr	r0, [pc, #204]	; (800a2cc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a1fe:	f7f8 fe7a 	bl	8002ef6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d101      	bne.n	800a210 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a20c:	2302      	movs	r3, #2
 800a20e:	e050      	b.n	800a2b2 <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	4313      	orrs	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a1b      	ldr	r2, [pc, #108]	; (800a2bc <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d018      	beq.n	800a286 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a25c:	d013      	beq.n	800a286 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a17      	ldr	r2, [pc, #92]	; (800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d00e      	beq.n	800a286 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a15      	ldr	r2, [pc, #84]	; (800a2c4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d009      	beq.n	800a286 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a14      	ldr	r2, [pc, #80]	; (800a2c8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d004      	beq.n	800a286 <HAL_TIMEx_MasterConfigSynchronization+0x12e>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a13      	ldr	r2, [pc, #76]	; (800a2d0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d10c      	bne.n	800a2a0 <HAL_TIMEx_MasterConfigSynchronization+0x148>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a28c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	4313      	orrs	r3, r2
 800a296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	40010000 	.word	0x40010000
 800a2c0:	40000400 	.word	0x40000400
 800a2c4:	40000800 	.word	0x40000800
 800a2c8:	40000c00 	.word	0x40000c00
 800a2cc:	08011138 	.word	0x08011138
 800a2d0:	40014000 	.word	0x40014000

0800a2d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a5c      	ldr	r2, [pc, #368]	; (800a458 <HAL_TIMEx_ConfigBreakDeadTime+0x184>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d004      	beq.n	800a2f6 <HAL_TIMEx_ConfigBreakDeadTime+0x22>
 800a2ec:	f240 71ee 	movw	r1, #2030	; 0x7ee
 800a2f0:	485a      	ldr	r0, [pc, #360]	; (800a45c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800a2f2:	f7f8 fe00 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2fe:	d008      	beq.n	800a312 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d004      	beq.n	800a312 <HAL_TIMEx_ConfigBreakDeadTime+0x3e>
 800a308:	f240 71ef 	movw	r1, #2031	; 0x7ef
 800a30c:	4853      	ldr	r0, [pc, #332]	; (800a45c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800a30e:	f7f8 fdf2 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a31a:	d008      	beq.n	800a32e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
 800a324:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800a328:	484c      	ldr	r0, [pc, #304]	; (800a45c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800a32a:	f7f8 fde4 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d013      	beq.n	800a35e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a33e:	d00e      	beq.n	800a35e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a348:	d009      	beq.n	800a35e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a352:	d004      	beq.n	800a35e <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
 800a354:	f240 71f1 	movw	r1, #2033	; 0x7f1
 800a358:	4840      	ldr	r0, [pc, #256]	; (800a45c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800a35a:	f7f8 fdcc 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	2bff      	cmp	r3, #255	; 0xff
 800a364:	d904      	bls.n	800a370 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>
 800a366:	f240 71f2 	movw	r1, #2034	; 0x7f2
 800a36a:	483c      	ldr	r0, [pc, #240]	; (800a45c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800a36c:	f7f8 fdc3 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a378:	d008      	beq.n	800a38c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d004      	beq.n	800a38c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a382:	f240 71f3 	movw	r1, #2035	; 0x7f3
 800a386:	4835      	ldr	r0, [pc, #212]	; (800a45c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800a388:	f7f8 fdb5 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d009      	beq.n	800a3a8 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a39c:	d004      	beq.n	800a3a8 <HAL_TIMEx_ConfigBreakDeadTime+0xd4>
 800a39e:	f240 71f4 	movw	r1, #2036	; 0x7f4
 800a3a2:	482e      	ldr	r0, [pc, #184]	; (800a45c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800a3a4:	f7f8 fda7 	bl	8002ef6 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	69db      	ldr	r3, [r3, #28]
 800a3ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3b0:	d008      	beq.n	800a3c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	69db      	ldr	r3, [r3, #28]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d004      	beq.n	800a3c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf0>
 800a3ba:	f240 71f5 	movw	r1, #2037	; 0x7f5
 800a3be:	4827      	ldr	r0, [pc, #156]	; (800a45c <HAL_TIMEx_ConfigBreakDeadTime+0x188>)
 800a3c0:	f7f8 fd99 	bl	8002ef6 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d101      	bne.n	800a3d2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
 800a3ce:	2302      	movs	r3, #2
 800a3d0:	e03d      	b.n	800a44e <HAL_TIMEx_ConfigBreakDeadTime+0x17a>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	4313      	orrs	r3, r2
 800a402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4313      	orrs	r3, r2
 800a410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	69db      	ldr	r3, [r3, #28]
 800a438:	4313      	orrs	r3, r2
 800a43a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	40010000 	.word	0x40010000
 800a45c:	08011138 	.word	0x08011138

0800a460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	e0a0      	b.n	800a5dc <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d02c      	beq.n	800a4fc <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a4f      	ldr	r2, [pc, #316]	; (800a5e4 <HAL_UART_Init+0x15c>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d00e      	beq.n	800a4ca <HAL_UART_Init+0x42>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a4d      	ldr	r2, [pc, #308]	; (800a5e8 <HAL_UART_Init+0x160>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d009      	beq.n	800a4ca <HAL_UART_Init+0x42>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a4c      	ldr	r2, [pc, #304]	; (800a5ec <HAL_UART_Init+0x164>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d004      	beq.n	800a4ca <HAL_UART_Init+0x42>
 800a4c0:	f240 1173 	movw	r1, #371	; 0x173
 800a4c4:	484a      	ldr	r0, [pc, #296]	; (800a5f0 <HAL_UART_Init+0x168>)
 800a4c6:	f7f8 fd16 	bl	8002ef6 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d028      	beq.n	800a524 <HAL_UART_Init+0x9c>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4da:	d023      	beq.n	800a524 <HAL_UART_Init+0x9c>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4e4:	d01e      	beq.n	800a524 <HAL_UART_Init+0x9c>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4ee:	d019      	beq.n	800a524 <HAL_UART_Init+0x9c>
 800a4f0:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800a4f4:	483e      	ldr	r0, [pc, #248]	; (800a5f0 <HAL_UART_Init+0x168>)
 800a4f6:	f7f8 fcfe 	bl	8002ef6 <assert_failed>
 800a4fa:	e013      	b.n	800a524 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a38      	ldr	r2, [pc, #224]	; (800a5e4 <HAL_UART_Init+0x15c>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d00e      	beq.n	800a524 <HAL_UART_Init+0x9c>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a37      	ldr	r2, [pc, #220]	; (800a5e8 <HAL_UART_Init+0x160>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d009      	beq.n	800a524 <HAL_UART_Init+0x9c>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a35      	ldr	r2, [pc, #212]	; (800a5ec <HAL_UART_Init+0x164>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d004      	beq.n	800a524 <HAL_UART_Init+0x9c>
 800a51a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800a51e:	4834      	ldr	r0, [pc, #208]	; (800a5f0 <HAL_UART_Init+0x168>)
 800a520:	f7f8 fce9 	bl	8002ef6 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d009      	beq.n	800a540 <HAL_UART_Init+0xb8>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a534:	d004      	beq.n	800a540 <HAL_UART_Init+0xb8>
 800a536:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800a53a:	482d      	ldr	r0, [pc, #180]	; (800a5f0 <HAL_UART_Init+0x168>)
 800a53c:	f7f8 fcdb 	bl	8002ef6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d009      	beq.n	800a55c <HAL_UART_Init+0xd4>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	69db      	ldr	r3, [r3, #28]
 800a54c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a550:	d004      	beq.n	800a55c <HAL_UART_Init+0xd4>
 800a552:	f240 117b 	movw	r1, #379	; 0x17b
 800a556:	4826      	ldr	r0, [pc, #152]	; (800a5f0 <HAL_UART_Init+0x168>)
 800a558:	f7f8 fccd 	bl	8002ef6 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b00      	cmp	r3, #0
 800a566:	d106      	bne.n	800a576 <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f7f9 f86f 	bl	8003654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2224      	movs	r2, #36	; 0x24
 800a57a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a58c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fe1a 	bl	800b1c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	691a      	ldr	r2, [r3, #16]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	695a      	ldr	r2, [r3, #20]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68da      	ldr	r2, [r3, #12]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2220      	movs	r2, #32
 800a5ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2220      	movs	r2, #32
 800a5d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	40011000 	.word	0x40011000
 800a5e8:	40004400 	.word	0x40004400
 800a5ec:	40011400 	.word	0x40011400
 800a5f0:	08011174 	.word	0x08011174

0800a5f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b08a      	sub	sp, #40	; 0x28
 800a5f8:	af02      	add	r7, sp, #8
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	603b      	str	r3, [r7, #0]
 800a600:	4613      	mov	r3, r2
 800a602:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a604:	2300      	movs	r3, #0
 800a606:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b20      	cmp	r3, #32
 800a612:	d17c      	bne.n	800a70e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <HAL_UART_Transmit+0x2c>
 800a61a:	88fb      	ldrh	r3, [r7, #6]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	e075      	b.n	800a710 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d101      	bne.n	800a632 <HAL_UART_Transmit+0x3e>
 800a62e:	2302      	movs	r3, #2
 800a630:	e06e      	b.n	800a710 <HAL_UART_Transmit+0x11c>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2221      	movs	r2, #33	; 0x21
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a648:	f7fa fb7a 	bl	8004d40 <HAL_GetTick>
 800a64c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	88fa      	ldrh	r2, [r7, #6]
 800a652:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	88fa      	ldrh	r2, [r7, #6]
 800a658:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a662:	d108      	bne.n	800a676 <HAL_UART_Transmit+0x82>
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d104      	bne.n	800a676 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a66c:	2300      	movs	r3, #0
 800a66e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	61bb      	str	r3, [r7, #24]
 800a674:	e003      	b.n	800a67e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a67a:	2300      	movs	r3, #0
 800a67c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a686:	e02a      	b.n	800a6de <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	2200      	movs	r2, #0
 800a690:	2180      	movs	r1, #128	; 0x80
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f000 fb52 	bl	800ad3c <UART_WaitOnFlagUntilTimeout>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e036      	b.n	800a710 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10b      	bne.n	800a6c0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	881b      	ldrh	r3, [r3, #0]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6b6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	3302      	adds	r3, #2
 800a6bc:	61bb      	str	r3, [r7, #24]
 800a6be:	e007      	b.n	800a6d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	781a      	ldrb	r2, [r3, #0]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	b29a      	uxth	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1cf      	bne.n	800a688 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2140      	movs	r1, #64	; 0x40
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 fb22 	bl	800ad3c <UART_WaitOnFlagUntilTimeout>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e006      	b.n	800a710 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2220      	movs	r2, #32
 800a706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	e000      	b.n	800a710 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a70e:	2302      	movs	r3, #2
  }
}
 800a710:	4618      	mov	r0, r3
 800a712:	3720      	adds	r7, #32
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b08c      	sub	sp, #48	; 0x30
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	4613      	mov	r3, r2
 800a724:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b20      	cmp	r3, #32
 800a730:	d152      	bne.n	800a7d8 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d002      	beq.n	800a73e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800a738:	88fb      	ldrh	r3, [r7, #6]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e04b      	b.n	800a7da <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d101      	bne.n	800a750 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800a74c:	2302      	movs	r3, #2
 800a74e:	e044      	b.n	800a7da <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2201      	movs	r2, #1
 800a75c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800a75e:	88fb      	ldrh	r3, [r7, #6]
 800a760:	461a      	mov	r2, r3
 800a762:	68b9      	ldr	r1, [r7, #8]
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f000 fb57 	bl	800ae18 <UART_Start_Receive_IT>
 800a76a:	4603      	mov	r3, r0
 800a76c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a774:	2b00      	cmp	r3, #0
 800a776:	d12c      	bne.n	800a7d2 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d125      	bne.n	800a7cc <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a780:	2300      	movs	r3, #0
 800a782:	613b      	str	r3, [r7, #16]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	613b      	str	r3, [r7, #16]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	613b      	str	r3, [r7, #16]
 800a794:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	330c      	adds	r3, #12
 800a79c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	e853 3f00 	ldrex	r3, [r3]
 800a7a4:	617b      	str	r3, [r7, #20]
   return(result);
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	f043 0310 	orr.w	r3, r3, #16
 800a7ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	330c      	adds	r3, #12
 800a7b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7b6:	627a      	str	r2, [r7, #36]	; 0x24
 800a7b8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ba:	6a39      	ldr	r1, [r7, #32]
 800a7bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7be:	e841 2300 	strex	r3, r2, [r1]
 800a7c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1e5      	bne.n	800a796 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800a7ca:	e002      	b.n	800a7d2 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a7d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7d6:	e000      	b.n	800a7da <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a7d8:	2302      	movs	r3, #2
  }
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3730      	adds	r7, #48	; 0x30
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
	...

0800a7e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b0ba      	sub	sp, #232	; 0xe8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a80a:	2300      	movs	r3, #0
 800a80c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a810:	2300      	movs	r3, #0
 800a812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a81a:	f003 030f 	and.w	r3, r3, #15
 800a81e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10f      	bne.n	800a84a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a82a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a82e:	f003 0320 	and.w	r3, r3, #32
 800a832:	2b00      	cmp	r3, #0
 800a834:	d009      	beq.n	800a84a <HAL_UART_IRQHandler+0x66>
 800a836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a83a:	f003 0320 	and.w	r3, r3, #32
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d003      	beq.n	800a84a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fc05 	bl	800b052 <UART_Receive_IT>
      return;
 800a848:	e256      	b.n	800acf8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a84a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 80de 	beq.w	800aa10 <HAL_UART_IRQHandler+0x22c>
 800a854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a858:	f003 0301 	and.w	r3, r3, #1
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d106      	bne.n	800a86e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a864:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f000 80d1 	beq.w	800aa10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00b      	beq.n	800a892 <HAL_UART_IRQHandler+0xae>
 800a87a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a87e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	f043 0201 	orr.w	r2, r3, #1
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a896:	f003 0304 	and.w	r3, r3, #4
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d00b      	beq.n	800a8b6 <HAL_UART_IRQHandler+0xd2>
 800a89e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8a2:	f003 0301 	and.w	r3, r3, #1
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d005      	beq.n	800a8b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	f043 0202 	orr.w	r2, r3, #2
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a8b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ba:	f003 0302 	and.w	r3, r3, #2
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00b      	beq.n	800a8da <HAL_UART_IRQHandler+0xf6>
 800a8c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d005      	beq.n	800a8da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d2:	f043 0204 	orr.w	r2, r3, #4
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a8da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8de:	f003 0308 	and.w	r3, r3, #8
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d011      	beq.n	800a90a <HAL_UART_IRQHandler+0x126>
 800a8e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8ea:	f003 0320 	and.w	r3, r3, #32
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d105      	bne.n	800a8fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a8f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8f6:	f003 0301 	and.w	r3, r3, #1
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d005      	beq.n	800a90a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a902:	f043 0208 	orr.w	r2, r3, #8
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 81ed 	beq.w	800acee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a918:	f003 0320 	and.w	r3, r3, #32
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d008      	beq.n	800a932 <HAL_UART_IRQHandler+0x14e>
 800a920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a924:	f003 0320 	and.w	r3, r3, #32
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d002      	beq.n	800a932 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 fb90 	bl	800b052 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	695b      	ldr	r3, [r3, #20]
 800a938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a93c:	2b40      	cmp	r3, #64	; 0x40
 800a93e:	bf0c      	ite	eq
 800a940:	2301      	moveq	r3, #1
 800a942:	2300      	movne	r3, #0
 800a944:	b2db      	uxtb	r3, r3
 800a946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94e:	f003 0308 	and.w	r3, r3, #8
 800a952:	2b00      	cmp	r3, #0
 800a954:	d103      	bne.n	800a95e <HAL_UART_IRQHandler+0x17a>
 800a956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d04f      	beq.n	800a9fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fa98 	bl	800ae94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	695b      	ldr	r3, [r3, #20]
 800a96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a96e:	2b40      	cmp	r3, #64	; 0x40
 800a970:	d141      	bne.n	800a9f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	3314      	adds	r3, #20
 800a978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a980:	e853 3f00 	ldrex	r3, [r3]
 800a984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a988:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a98c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	3314      	adds	r3, #20
 800a99a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a99e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a9a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a9aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a9ae:	e841 2300 	strex	r3, r2, [r1]
 800a9b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a9b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1d9      	bne.n	800a972 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d013      	beq.n	800a9ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ca:	4a7d      	ldr	r2, [pc, #500]	; (800abc0 <HAL_UART_IRQHandler+0x3dc>)
 800a9cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fb f894 	bl	8005b00 <HAL_DMA_Abort_IT>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d016      	beq.n	800aa0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9ec:	e00e      	b.n	800aa0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f99a 	bl	800ad28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9f4:	e00a      	b.n	800aa0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f996 	bl	800ad28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9fc:	e006      	b.n	800aa0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f992 	bl	800ad28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aa0a:	e170      	b.n	800acee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa0c:	bf00      	nop
    return;
 800aa0e:	e16e      	b.n	800acee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	f040 814a 	bne.w	800acae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aa1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa1e:	f003 0310 	and.w	r3, r3, #16
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f000 8143 	beq.w	800acae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aa28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa2c:	f003 0310 	and.w	r3, r3, #16
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 813c 	beq.w	800acae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa36:	2300      	movs	r3, #0
 800aa38:	60bb      	str	r3, [r7, #8]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	60bb      	str	r3, [r7, #8]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	60bb      	str	r3, [r7, #8]
 800aa4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa56:	2b40      	cmp	r3, #64	; 0x40
 800aa58:	f040 80b4 	bne.w	800abc4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f000 8140 	beq.w	800acf2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	f080 8139 	bcs.w	800acf2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8c:	69db      	ldr	r3, [r3, #28]
 800aa8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa92:	f000 8088 	beq.w	800aba6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	330c      	adds	r3, #12
 800aa9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aaa4:	e853 3f00 	ldrex	r3, [r3]
 800aaa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aaac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	330c      	adds	r3, #12
 800aabe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aac2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aace:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aad2:	e841 2300 	strex	r3, r2, [r1]
 800aad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1d9      	bne.n	800aa96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3314      	adds	r3, #20
 800aae8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaec:	e853 3f00 	ldrex	r3, [r3]
 800aaf0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aaf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aaf4:	f023 0301 	bic.w	r3, r3, #1
 800aaf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	3314      	adds	r3, #20
 800ab02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ab06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ab0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ab0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ab12:	e841 2300 	strex	r3, r2, [r1]
 800ab16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ab18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1e1      	bne.n	800aae2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	3314      	adds	r3, #20
 800ab24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab28:	e853 3f00 	ldrex	r3, [r3]
 800ab2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ab2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3314      	adds	r3, #20
 800ab3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ab42:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ab44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1e3      	bne.n	800ab1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2220      	movs	r2, #32
 800ab5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	330c      	adds	r3, #12
 800ab6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab6e:	e853 3f00 	ldrex	r3, [r3]
 800ab72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab76:	f023 0310 	bic.w	r3, r3, #16
 800ab7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	330c      	adds	r3, #12
 800ab84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab88:	65ba      	str	r2, [r7, #88]	; 0x58
 800ab8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab90:	e841 2300 	strex	r3, r2, [r1]
 800ab94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1e3      	bne.n	800ab64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fa ff3d 	bl	8005a20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abae:	b29b      	uxth	r3, r3
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	4619      	mov	r1, r3
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7f7 fd70 	bl	800269c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800abbc:	e099      	b.n	800acf2 <HAL_UART_IRQHandler+0x50e>
 800abbe:	bf00      	nop
 800abc0:	0800af5b 	.word	0x0800af5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abcc:	b29b      	uxth	r3, r3
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abd8:	b29b      	uxth	r3, r3
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 808b 	beq.w	800acf6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800abe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 8086 	beq.w	800acf6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	330c      	adds	r3, #12
 800abf0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abf4:	e853 3f00 	ldrex	r3, [r3]
 800abf8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	330c      	adds	r3, #12
 800ac0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ac0e:	647a      	str	r2, [r7, #68]	; 0x44
 800ac10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac16:	e841 2300 	strex	r3, r2, [r1]
 800ac1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1e3      	bne.n	800abea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3314      	adds	r3, #20
 800ac28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	623b      	str	r3, [r7, #32]
   return(result);
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	f023 0301 	bic.w	r3, r3, #1
 800ac38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	3314      	adds	r3, #20
 800ac42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ac46:	633a      	str	r2, [r7, #48]	; 0x30
 800ac48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac4e:	e841 2300 	strex	r3, r2, [r1]
 800ac52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1e3      	bne.n	800ac22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2220      	movs	r2, #32
 800ac5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	330c      	adds	r3, #12
 800ac6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	e853 3f00 	ldrex	r3, [r3]
 800ac76:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f023 0310 	bic.w	r3, r3, #16
 800ac7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	330c      	adds	r3, #12
 800ac88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ac8c:	61fa      	str	r2, [r7, #28]
 800ac8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac90:	69b9      	ldr	r1, [r7, #24]
 800ac92:	69fa      	ldr	r2, [r7, #28]
 800ac94:	e841 2300 	strex	r3, r2, [r1]
 800ac98:	617b      	str	r3, [r7, #20]
   return(result);
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1e3      	bne.n	800ac68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aca0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aca4:	4619      	mov	r1, r3
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7f7 fcf8 	bl	800269c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800acac:	e023      	b.n	800acf6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800acae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d009      	beq.n	800acce <HAL_UART_IRQHandler+0x4ea>
 800acba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d003      	beq.n	800acce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f95b 	bl	800af82 <UART_Transmit_IT>
    return;
 800accc:	e014      	b.n	800acf8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800acce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00e      	beq.n	800acf8 <HAL_UART_IRQHandler+0x514>
 800acda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d008      	beq.n	800acf8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 f99b 	bl	800b022 <UART_EndTransmit_IT>
    return;
 800acec:	e004      	b.n	800acf8 <HAL_UART_IRQHandler+0x514>
    return;
 800acee:	bf00      	nop
 800acf0:	e002      	b.n	800acf8 <HAL_UART_IRQHandler+0x514>
      return;
 800acf2:	bf00      	nop
 800acf4:	e000      	b.n	800acf8 <HAL_UART_IRQHandler+0x514>
      return;
 800acf6:	bf00      	nop
  }
}
 800acf8:	37e8      	adds	r7, #232	; 0xe8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop

0800ad00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b090      	sub	sp, #64	; 0x40
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	603b      	str	r3, [r7, #0]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad4c:	e050      	b.n	800adf0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad54:	d04c      	beq.n	800adf0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ad56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d007      	beq.n	800ad6c <UART_WaitOnFlagUntilTimeout+0x30>
 800ad5c:	f7f9 fff0 	bl	8004d40 <HAL_GetTick>
 800ad60:	4602      	mov	r2, r0
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	1ad3      	subs	r3, r2, r3
 800ad66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d241      	bcs.n	800adf0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	330c      	adds	r3, #12
 800ad72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad76:	e853 3f00 	ldrex	r3, [r3]
 800ad7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	330c      	adds	r3, #12
 800ad8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ad8c:	637a      	str	r2, [r7, #52]	; 0x34
 800ad8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad94:	e841 2300 	strex	r3, r2, [r1]
 800ad98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1e5      	bne.n	800ad6c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	3314      	adds	r3, #20
 800ada6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	e853 3f00 	ldrex	r3, [r3]
 800adae:	613b      	str	r3, [r7, #16]
   return(result);
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	f023 0301 	bic.w	r3, r3, #1
 800adb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	3314      	adds	r3, #20
 800adbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adc0:	623a      	str	r2, [r7, #32]
 800adc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc4:	69f9      	ldr	r1, [r7, #28]
 800adc6:	6a3a      	ldr	r2, [r7, #32]
 800adc8:	e841 2300 	strex	r3, r2, [r1]
 800adcc:	61bb      	str	r3, [r7, #24]
   return(result);
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1e5      	bne.n	800ada0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2220      	movs	r2, #32
 800add8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2220      	movs	r2, #32
 800ade0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800adec:	2303      	movs	r3, #3
 800adee:	e00f      	b.n	800ae10 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	4013      	ands	r3, r2
 800adfa:	68ba      	ldr	r2, [r7, #8]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	bf0c      	ite	eq
 800ae00:	2301      	moveq	r3, #1
 800ae02:	2300      	movne	r3, #0
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	461a      	mov	r2, r3
 800ae08:	79fb      	ldrb	r3, [r7, #7]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d09f      	beq.n	800ad4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3740      	adds	r7, #64	; 0x40
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	4613      	mov	r3, r2
 800ae24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	68ba      	ldr	r2, [r7, #8]
 800ae2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	88fa      	ldrh	r2, [r7, #6]
 800ae30:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	88fa      	ldrh	r2, [r7, #6]
 800ae36:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2222      	movs	r2, #34	; 0x22
 800ae42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d007      	beq.n	800ae66 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68da      	ldr	r2, [r3, #12]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae64:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	695a      	ldr	r2, [r3, #20]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f042 0201 	orr.w	r2, r2, #1
 800ae74:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68da      	ldr	r2, [r3, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f042 0220 	orr.w	r2, r2, #32
 800ae84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3714      	adds	r7, #20
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b095      	sub	sp, #84	; 0x54
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	330c      	adds	r3, #12
 800aea2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea6:	e853 3f00 	ldrex	r3, [r3]
 800aeaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aeb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	330c      	adds	r3, #12
 800aeba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aebc:	643a      	str	r2, [r7, #64]	; 0x40
 800aebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aec4:	e841 2300 	strex	r3, r2, [r1]
 800aec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aeca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1e5      	bne.n	800ae9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3314      	adds	r3, #20
 800aed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed8:	6a3b      	ldr	r3, [r7, #32]
 800aeda:	e853 3f00 	ldrex	r3, [r3]
 800aede:	61fb      	str	r3, [r7, #28]
   return(result);
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	f023 0301 	bic.w	r3, r3, #1
 800aee6:	64bb      	str	r3, [r7, #72]	; 0x48
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3314      	adds	r3, #20
 800aeee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aef0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aef8:	e841 2300 	strex	r3, r2, [r1]
 800aefc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1e5      	bne.n	800aed0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d119      	bne.n	800af40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	330c      	adds	r3, #12
 800af12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	e853 3f00 	ldrex	r3, [r3]
 800af1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	f023 0310 	bic.w	r3, r3, #16
 800af22:	647b      	str	r3, [r7, #68]	; 0x44
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	330c      	adds	r3, #12
 800af2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af2c:	61ba      	str	r2, [r7, #24]
 800af2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af30:	6979      	ldr	r1, [r7, #20]
 800af32:	69ba      	ldr	r2, [r7, #24]
 800af34:	e841 2300 	strex	r3, r2, [r1]
 800af38:	613b      	str	r3, [r7, #16]
   return(result);
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1e5      	bne.n	800af0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2220      	movs	r2, #32
 800af44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800af4e:	bf00      	nop
 800af50:	3754      	adds	r7, #84	; 0x54
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b084      	sub	sp, #16
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f7ff fed7 	bl	800ad28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af7a:	bf00      	nop
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af82:	b480      	push	{r7}
 800af84:	b085      	sub	sp, #20
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af90:	b2db      	uxtb	r3, r3
 800af92:	2b21      	cmp	r3, #33	; 0x21
 800af94:	d13e      	bne.n	800b014 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af9e:	d114      	bne.n	800afca <UART_Transmit_IT+0x48>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d110      	bne.n	800afca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	881b      	ldrh	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	1c9a      	adds	r2, r3, #2
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	621a      	str	r2, [r3, #32]
 800afc8:	e008      	b.n	800afdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a1b      	ldr	r3, [r3, #32]
 800afce:	1c59      	adds	r1, r3, #1
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	6211      	str	r1, [r2, #32]
 800afd4:	781a      	ldrb	r2, [r3, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	3b01      	subs	r3, #1
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	4619      	mov	r1, r3
 800afea:	84d1      	strh	r1, [r2, #38]	; 0x26
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10f      	bne.n	800b010 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68da      	ldr	r2, [r3, #12]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800affe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68da      	ldr	r2, [r3, #12]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b00e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b010:	2300      	movs	r3, #0
 800b012:	e000      	b.n	800b016 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b014:	2302      	movs	r3, #2
  }
}
 800b016:	4618      	mov	r0, r3
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b082      	sub	sp, #8
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68da      	ldr	r2, [r3, #12]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b038:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2220      	movs	r2, #32
 800b03e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7ff fe5c 	bl	800ad00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b08c      	sub	sp, #48	; 0x30
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b22      	cmp	r3, #34	; 0x22
 800b064:	f040 80ab 	bne.w	800b1be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b070:	d117      	bne.n	800b0a2 <UART_Receive_IT+0x50>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d113      	bne.n	800b0a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b07a:	2300      	movs	r3, #0
 800b07c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b082:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b090:	b29a      	uxth	r2, r3
 800b092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b094:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09a:	1c9a      	adds	r2, r3, #2
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	629a      	str	r2, [r3, #40]	; 0x28
 800b0a0:	e026      	b.n	800b0f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0b4:	d007      	beq.n	800b0c6 <UART_Receive_IT+0x74>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d10a      	bne.n	800b0d4 <UART_Receive_IT+0x82>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d106      	bne.n	800b0d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d0:	701a      	strb	r2, [r3, #0]
 800b0d2:	e008      	b.n	800b0e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	b2db      	uxtb	r3, r3
 800b0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0e0:	b2da      	uxtb	r2, r3
 800b0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ea:	1c5a      	adds	r2, r3, #1
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b100:	2b00      	cmp	r3, #0
 800b102:	d15a      	bne.n	800b1ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68da      	ldr	r2, [r3, #12]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f022 0220 	bic.w	r2, r2, #32
 800b112:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68da      	ldr	r2, [r3, #12]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	695a      	ldr	r2, [r3, #20]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f022 0201 	bic.w	r2, r2, #1
 800b132:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2220      	movs	r2, #32
 800b138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b140:	2b01      	cmp	r3, #1
 800b142:	d135      	bne.n	800b1b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	330c      	adds	r3, #12
 800b150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	e853 3f00 	ldrex	r3, [r3]
 800b158:	613b      	str	r3, [r7, #16]
   return(result);
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f023 0310 	bic.w	r3, r3, #16
 800b160:	627b      	str	r3, [r7, #36]	; 0x24
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	330c      	adds	r3, #12
 800b168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b16a:	623a      	str	r2, [r7, #32]
 800b16c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16e:	69f9      	ldr	r1, [r7, #28]
 800b170:	6a3a      	ldr	r2, [r7, #32]
 800b172:	e841 2300 	strex	r3, r2, [r1]
 800b176:	61bb      	str	r3, [r7, #24]
   return(result);
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1e5      	bne.n	800b14a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 0310 	and.w	r3, r3, #16
 800b188:	2b10      	cmp	r3, #16
 800b18a:	d10a      	bne.n	800b1a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b18c:	2300      	movs	r3, #0
 800b18e:	60fb      	str	r3, [r7, #12]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	60fb      	str	r3, [r7, #12]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f7f7 fa77 	bl	800269c <HAL_UARTEx_RxEventCallback>
 800b1ae:	e002      	b.n	800b1b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f7ff fdaf 	bl	800ad14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	e002      	b.n	800b1c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	e000      	b.n	800b1c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b1be:	2302      	movs	r3, #2
  }
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3730      	adds	r7, #48	; 0x30
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1cc:	b0c0      	sub	sp, #256	; 0x100
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800b1d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1d8:	685a      	ldr	r2, [r3, #4]
 800b1da:	4bcf      	ldr	r3, [pc, #828]	; (800b518 <UART_SetConfig+0x350>)
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d904      	bls.n	800b1ea <UART_SetConfig+0x22>
 800b1e0:	f640 6161 	movw	r1, #3681	; 0xe61
 800b1e4:	48cd      	ldr	r0, [pc, #820]	; (800b51c <UART_SetConfig+0x354>)
 800b1e6:	f7f7 fe86 	bl	8002ef6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800b1ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00a      	beq.n	800b20a <UART_SetConfig+0x42>
 800b1f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1f8:	68db      	ldr	r3, [r3, #12]
 800b1fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1fe:	d004      	beq.n	800b20a <UART_SetConfig+0x42>
 800b200:	f640 6162 	movw	r1, #3682	; 0xe62
 800b204:	48c5      	ldr	r0, [pc, #788]	; (800b51c <UART_SetConfig+0x354>)
 800b206:	f7f7 fe76 	bl	8002ef6 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800b20a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d010      	beq.n	800b236 <UART_SetConfig+0x6e>
 800b214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b21e:	d00a      	beq.n	800b236 <UART_SetConfig+0x6e>
 800b220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b22a:	d004      	beq.n	800b236 <UART_SetConfig+0x6e>
 800b22c:	f640 6163 	movw	r1, #3683	; 0xe63
 800b230:	48ba      	ldr	r0, [pc, #744]	; (800b51c <UART_SetConfig+0x354>)
 800b232:	f7f7 fe60 	bl	8002ef6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800b236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b23a:	695a      	ldr	r2, [r3, #20]
 800b23c:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800b240:	4013      	ands	r3, r2
 800b242:	2b00      	cmp	r3, #0
 800b244:	d104      	bne.n	800b250 <UART_SetConfig+0x88>
 800b246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b24a:	695b      	ldr	r3, [r3, #20]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d104      	bne.n	800b25a <UART_SetConfig+0x92>
 800b250:	f640 6164 	movw	r1, #3684	; 0xe64
 800b254:	48b1      	ldr	r0, [pc, #708]	; (800b51c <UART_SetConfig+0x354>)
 800b256:	f7f7 fe4e 	bl	8002ef6 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b25a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b26a:	68d9      	ldr	r1, [r3, #12]
 800b26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	ea40 0301 	orr.w	r3, r0, r1
 800b276:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b27c:	689a      	ldr	r2, [r3, #8]
 800b27e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	431a      	orrs	r2, r3
 800b286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b28a:	695b      	ldr	r3, [r3, #20]
 800b28c:	431a      	orrs	r2, r3
 800b28e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b292:	69db      	ldr	r3, [r3, #28]
 800b294:	4313      	orrs	r3, r2
 800b296:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b29a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b2a6:	f021 010c 	bic.w	r1, r1, #12
 800b2aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b2b4:	430b      	orrs	r3, r1
 800b2b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	695b      	ldr	r3, [r3, #20]
 800b2c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2c8:	6999      	ldr	r1, [r3, #24]
 800b2ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	ea40 0301 	orr.w	r3, r0, r1
 800b2d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b2d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	4b90      	ldr	r3, [pc, #576]	; (800b520 <UART_SetConfig+0x358>)
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d005      	beq.n	800b2ee <UART_SetConfig+0x126>
 800b2e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	4b8e      	ldr	r3, [pc, #568]	; (800b524 <UART_SetConfig+0x35c>)
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d104      	bne.n	800b2f8 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b2ee:	f7fd fa49 	bl	8008784 <HAL_RCC_GetPCLK2Freq>
 800b2f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b2f6:	e003      	b.n	800b300 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b2f8:	f7fd fa30 	bl	800875c <HAL_RCC_GetPCLK1Freq>
 800b2fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b30a:	f040 810f 	bne.w	800b52c <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b30e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b312:	2200      	movs	r2, #0
 800b314:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b318:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b31c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b320:	4622      	mov	r2, r4
 800b322:	462b      	mov	r3, r5
 800b324:	1891      	adds	r1, r2, r2
 800b326:	65b9      	str	r1, [r7, #88]	; 0x58
 800b328:	415b      	adcs	r3, r3
 800b32a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b32c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b330:	4621      	mov	r1, r4
 800b332:	eb12 0801 	adds.w	r8, r2, r1
 800b336:	4629      	mov	r1, r5
 800b338:	eb43 0901 	adc.w	r9, r3, r1
 800b33c:	f04f 0200 	mov.w	r2, #0
 800b340:	f04f 0300 	mov.w	r3, #0
 800b344:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b348:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b34c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b350:	4690      	mov	r8, r2
 800b352:	4699      	mov	r9, r3
 800b354:	4623      	mov	r3, r4
 800b356:	eb18 0303 	adds.w	r3, r8, r3
 800b35a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b35e:	462b      	mov	r3, r5
 800b360:	eb49 0303 	adc.w	r3, r9, r3
 800b364:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b374:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b378:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b37c:	460b      	mov	r3, r1
 800b37e:	18db      	adds	r3, r3, r3
 800b380:	653b      	str	r3, [r7, #80]	; 0x50
 800b382:	4613      	mov	r3, r2
 800b384:	eb42 0303 	adc.w	r3, r2, r3
 800b388:	657b      	str	r3, [r7, #84]	; 0x54
 800b38a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b38e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b392:	f7f5 fce1 	bl	8000d58 <__aeabi_uldivmod>
 800b396:	4602      	mov	r2, r0
 800b398:	460b      	mov	r3, r1
 800b39a:	4b63      	ldr	r3, [pc, #396]	; (800b528 <UART_SetConfig+0x360>)
 800b39c:	fba3 2302 	umull	r2, r3, r3, r2
 800b3a0:	095b      	lsrs	r3, r3, #5
 800b3a2:	011c      	lsls	r4, r3, #4
 800b3a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b3ae:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b3b2:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b3b6:	4642      	mov	r2, r8
 800b3b8:	464b      	mov	r3, r9
 800b3ba:	1891      	adds	r1, r2, r2
 800b3bc:	64b9      	str	r1, [r7, #72]	; 0x48
 800b3be:	415b      	adcs	r3, r3
 800b3c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b3c6:	4641      	mov	r1, r8
 800b3c8:	eb12 0a01 	adds.w	sl, r2, r1
 800b3cc:	4649      	mov	r1, r9
 800b3ce:	eb43 0b01 	adc.w	fp, r3, r1
 800b3d2:	f04f 0200 	mov.w	r2, #0
 800b3d6:	f04f 0300 	mov.w	r3, #0
 800b3da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b3de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b3e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3e6:	4692      	mov	sl, r2
 800b3e8:	469b      	mov	fp, r3
 800b3ea:	4643      	mov	r3, r8
 800b3ec:	eb1a 0303 	adds.w	r3, sl, r3
 800b3f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3f4:	464b      	mov	r3, r9
 800b3f6:	eb4b 0303 	adc.w	r3, fp, r3
 800b3fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b3fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b40a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b40e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b412:	460b      	mov	r3, r1
 800b414:	18db      	adds	r3, r3, r3
 800b416:	643b      	str	r3, [r7, #64]	; 0x40
 800b418:	4613      	mov	r3, r2
 800b41a:	eb42 0303 	adc.w	r3, r2, r3
 800b41e:	647b      	str	r3, [r7, #68]	; 0x44
 800b420:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b424:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b428:	f7f5 fc96 	bl	8000d58 <__aeabi_uldivmod>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4611      	mov	r1, r2
 800b432:	4b3d      	ldr	r3, [pc, #244]	; (800b528 <UART_SetConfig+0x360>)
 800b434:	fba3 2301 	umull	r2, r3, r3, r1
 800b438:	095b      	lsrs	r3, r3, #5
 800b43a:	2264      	movs	r2, #100	; 0x64
 800b43c:	fb02 f303 	mul.w	r3, r2, r3
 800b440:	1acb      	subs	r3, r1, r3
 800b442:	00db      	lsls	r3, r3, #3
 800b444:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b448:	4b37      	ldr	r3, [pc, #220]	; (800b528 <UART_SetConfig+0x360>)
 800b44a:	fba3 2302 	umull	r2, r3, r3, r2
 800b44e:	095b      	lsrs	r3, r3, #5
 800b450:	005b      	lsls	r3, r3, #1
 800b452:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b456:	441c      	add	r4, r3
 800b458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b45c:	2200      	movs	r2, #0
 800b45e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b462:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b466:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b46a:	4642      	mov	r2, r8
 800b46c:	464b      	mov	r3, r9
 800b46e:	1891      	adds	r1, r2, r2
 800b470:	63b9      	str	r1, [r7, #56]	; 0x38
 800b472:	415b      	adcs	r3, r3
 800b474:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b476:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b47a:	4641      	mov	r1, r8
 800b47c:	1851      	adds	r1, r2, r1
 800b47e:	6339      	str	r1, [r7, #48]	; 0x30
 800b480:	4649      	mov	r1, r9
 800b482:	414b      	adcs	r3, r1
 800b484:	637b      	str	r3, [r7, #52]	; 0x34
 800b486:	f04f 0200 	mov.w	r2, #0
 800b48a:	f04f 0300 	mov.w	r3, #0
 800b48e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b492:	4659      	mov	r1, fp
 800b494:	00cb      	lsls	r3, r1, #3
 800b496:	4651      	mov	r1, sl
 800b498:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b49c:	4651      	mov	r1, sl
 800b49e:	00ca      	lsls	r2, r1, #3
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	4642      	mov	r2, r8
 800b4a8:	189b      	adds	r3, r3, r2
 800b4aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4ae:	464b      	mov	r3, r9
 800b4b0:	460a      	mov	r2, r1
 800b4b2:	eb42 0303 	adc.w	r3, r2, r3
 800b4b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b4c6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b4ca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	18db      	adds	r3, r3, r3
 800b4d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	eb42 0303 	adc.w	r3, r2, r3
 800b4da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b4e0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b4e4:	f7f5 fc38 	bl	8000d58 <__aeabi_uldivmod>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4b0e      	ldr	r3, [pc, #56]	; (800b528 <UART_SetConfig+0x360>)
 800b4ee:	fba3 1302 	umull	r1, r3, r3, r2
 800b4f2:	095b      	lsrs	r3, r3, #5
 800b4f4:	2164      	movs	r1, #100	; 0x64
 800b4f6:	fb01 f303 	mul.w	r3, r1, r3
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	00db      	lsls	r3, r3, #3
 800b4fe:	3332      	adds	r3, #50	; 0x32
 800b500:	4a09      	ldr	r2, [pc, #36]	; (800b528 <UART_SetConfig+0x360>)
 800b502:	fba2 2303 	umull	r2, r3, r2, r3
 800b506:	095b      	lsrs	r3, r3, #5
 800b508:	f003 0207 	and.w	r2, r3, #7
 800b50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4422      	add	r2, r4
 800b514:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b516:	e108      	b.n	800b72a <UART_SetConfig+0x562>
 800b518:	00a037a0 	.word	0x00a037a0
 800b51c:	08011174 	.word	0x08011174
 800b520:	40011000 	.word	0x40011000
 800b524:	40011400 	.word	0x40011400
 800b528:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b52c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b530:	2200      	movs	r2, #0
 800b532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b536:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b53a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b53e:	4642      	mov	r2, r8
 800b540:	464b      	mov	r3, r9
 800b542:	1891      	adds	r1, r2, r2
 800b544:	6239      	str	r1, [r7, #32]
 800b546:	415b      	adcs	r3, r3
 800b548:	627b      	str	r3, [r7, #36]	; 0x24
 800b54a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b54e:	4641      	mov	r1, r8
 800b550:	1854      	adds	r4, r2, r1
 800b552:	4649      	mov	r1, r9
 800b554:	eb43 0501 	adc.w	r5, r3, r1
 800b558:	f04f 0200 	mov.w	r2, #0
 800b55c:	f04f 0300 	mov.w	r3, #0
 800b560:	00eb      	lsls	r3, r5, #3
 800b562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b566:	00e2      	lsls	r2, r4, #3
 800b568:	4614      	mov	r4, r2
 800b56a:	461d      	mov	r5, r3
 800b56c:	4643      	mov	r3, r8
 800b56e:	18e3      	adds	r3, r4, r3
 800b570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b574:	464b      	mov	r3, r9
 800b576:	eb45 0303 	adc.w	r3, r5, r3
 800b57a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b57e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b58a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b58e:	f04f 0200 	mov.w	r2, #0
 800b592:	f04f 0300 	mov.w	r3, #0
 800b596:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b59a:	4629      	mov	r1, r5
 800b59c:	008b      	lsls	r3, r1, #2
 800b59e:	4621      	mov	r1, r4
 800b5a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	008a      	lsls	r2, r1, #2
 800b5a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b5ac:	f7f5 fbd4 	bl	8000d58 <__aeabi_uldivmod>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	4b60      	ldr	r3, [pc, #384]	; (800b738 <UART_SetConfig+0x570>)
 800b5b6:	fba3 2302 	umull	r2, r3, r3, r2
 800b5ba:	095b      	lsrs	r3, r3, #5
 800b5bc:	011c      	lsls	r4, r3, #4
 800b5be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b5cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b5d0:	4642      	mov	r2, r8
 800b5d2:	464b      	mov	r3, r9
 800b5d4:	1891      	adds	r1, r2, r2
 800b5d6:	61b9      	str	r1, [r7, #24]
 800b5d8:	415b      	adcs	r3, r3
 800b5da:	61fb      	str	r3, [r7, #28]
 800b5dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5e0:	4641      	mov	r1, r8
 800b5e2:	1851      	adds	r1, r2, r1
 800b5e4:	6139      	str	r1, [r7, #16]
 800b5e6:	4649      	mov	r1, r9
 800b5e8:	414b      	adcs	r3, r1
 800b5ea:	617b      	str	r3, [r7, #20]
 800b5ec:	f04f 0200 	mov.w	r2, #0
 800b5f0:	f04f 0300 	mov.w	r3, #0
 800b5f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b5f8:	4659      	mov	r1, fp
 800b5fa:	00cb      	lsls	r3, r1, #3
 800b5fc:	4651      	mov	r1, sl
 800b5fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b602:	4651      	mov	r1, sl
 800b604:	00ca      	lsls	r2, r1, #3
 800b606:	4610      	mov	r0, r2
 800b608:	4619      	mov	r1, r3
 800b60a:	4603      	mov	r3, r0
 800b60c:	4642      	mov	r2, r8
 800b60e:	189b      	adds	r3, r3, r2
 800b610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b614:	464b      	mov	r3, r9
 800b616:	460a      	mov	r2, r1
 800b618:	eb42 0303 	adc.w	r3, r2, r3
 800b61c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	67bb      	str	r3, [r7, #120]	; 0x78
 800b62a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b62c:	f04f 0200 	mov.w	r2, #0
 800b630:	f04f 0300 	mov.w	r3, #0
 800b634:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b638:	4649      	mov	r1, r9
 800b63a:	008b      	lsls	r3, r1, #2
 800b63c:	4641      	mov	r1, r8
 800b63e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b642:	4641      	mov	r1, r8
 800b644:	008a      	lsls	r2, r1, #2
 800b646:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b64a:	f7f5 fb85 	bl	8000d58 <__aeabi_uldivmod>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	4b39      	ldr	r3, [pc, #228]	; (800b738 <UART_SetConfig+0x570>)
 800b654:	fba3 1302 	umull	r1, r3, r3, r2
 800b658:	095b      	lsrs	r3, r3, #5
 800b65a:	2164      	movs	r1, #100	; 0x64
 800b65c:	fb01 f303 	mul.w	r3, r1, r3
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	011b      	lsls	r3, r3, #4
 800b664:	3332      	adds	r3, #50	; 0x32
 800b666:	4a34      	ldr	r2, [pc, #208]	; (800b738 <UART_SetConfig+0x570>)
 800b668:	fba2 2303 	umull	r2, r3, r2, r3
 800b66c:	095b      	lsrs	r3, r3, #5
 800b66e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b672:	441c      	add	r4, r3
 800b674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b678:	2200      	movs	r2, #0
 800b67a:	673b      	str	r3, [r7, #112]	; 0x70
 800b67c:	677a      	str	r2, [r7, #116]	; 0x74
 800b67e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b682:	4642      	mov	r2, r8
 800b684:	464b      	mov	r3, r9
 800b686:	1891      	adds	r1, r2, r2
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	415b      	adcs	r3, r3
 800b68c:	60fb      	str	r3, [r7, #12]
 800b68e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b692:	4641      	mov	r1, r8
 800b694:	1851      	adds	r1, r2, r1
 800b696:	6039      	str	r1, [r7, #0]
 800b698:	4649      	mov	r1, r9
 800b69a:	414b      	adcs	r3, r1
 800b69c:	607b      	str	r3, [r7, #4]
 800b69e:	f04f 0200 	mov.w	r2, #0
 800b6a2:	f04f 0300 	mov.w	r3, #0
 800b6a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b6aa:	4659      	mov	r1, fp
 800b6ac:	00cb      	lsls	r3, r1, #3
 800b6ae:	4651      	mov	r1, sl
 800b6b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6b4:	4651      	mov	r1, sl
 800b6b6:	00ca      	lsls	r2, r1, #3
 800b6b8:	4610      	mov	r0, r2
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	4603      	mov	r3, r0
 800b6be:	4642      	mov	r2, r8
 800b6c0:	189b      	adds	r3, r3, r2
 800b6c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6c4:	464b      	mov	r3, r9
 800b6c6:	460a      	mov	r2, r1
 800b6c8:	eb42 0303 	adc.w	r3, r2, r3
 800b6cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	663b      	str	r3, [r7, #96]	; 0x60
 800b6d8:	667a      	str	r2, [r7, #100]	; 0x64
 800b6da:	f04f 0200 	mov.w	r2, #0
 800b6de:	f04f 0300 	mov.w	r3, #0
 800b6e2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	008b      	lsls	r3, r1, #2
 800b6ea:	4641      	mov	r1, r8
 800b6ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6f0:	4641      	mov	r1, r8
 800b6f2:	008a      	lsls	r2, r1, #2
 800b6f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b6f8:	f7f5 fb2e 	bl	8000d58 <__aeabi_uldivmod>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	460b      	mov	r3, r1
 800b700:	4b0d      	ldr	r3, [pc, #52]	; (800b738 <UART_SetConfig+0x570>)
 800b702:	fba3 1302 	umull	r1, r3, r3, r2
 800b706:	095b      	lsrs	r3, r3, #5
 800b708:	2164      	movs	r1, #100	; 0x64
 800b70a:	fb01 f303 	mul.w	r3, r1, r3
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	011b      	lsls	r3, r3, #4
 800b712:	3332      	adds	r3, #50	; 0x32
 800b714:	4a08      	ldr	r2, [pc, #32]	; (800b738 <UART_SetConfig+0x570>)
 800b716:	fba2 2303 	umull	r2, r3, r2, r3
 800b71a:	095b      	lsrs	r3, r3, #5
 800b71c:	f003 020f 	and.w	r2, r3, #15
 800b720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4422      	add	r2, r4
 800b728:	609a      	str	r2, [r3, #8]
}
 800b72a:	bf00      	nop
 800b72c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b730:	46bd      	mov	sp, r7
 800b732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b736:	bf00      	nop
 800b738:	51eb851f 	.word	0x51eb851f

0800b73c <atof>:
 800b73c:	2100      	movs	r1, #0
 800b73e:	f001 bd43 	b.w	800d1c8 <strtod>
	...

0800b744 <__errno>:
 800b744:	4b01      	ldr	r3, [pc, #4]	; (800b74c <__errno+0x8>)
 800b746:	6818      	ldr	r0, [r3, #0]
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	20000020 	.word	0x20000020

0800b750 <__libc_init_array>:
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	4d0d      	ldr	r5, [pc, #52]	; (800b788 <__libc_init_array+0x38>)
 800b754:	4c0d      	ldr	r4, [pc, #52]	; (800b78c <__libc_init_array+0x3c>)
 800b756:	1b64      	subs	r4, r4, r5
 800b758:	10a4      	asrs	r4, r4, #2
 800b75a:	2600      	movs	r6, #0
 800b75c:	42a6      	cmp	r6, r4
 800b75e:	d109      	bne.n	800b774 <__libc_init_array+0x24>
 800b760:	4d0b      	ldr	r5, [pc, #44]	; (800b790 <__libc_init_array+0x40>)
 800b762:	4c0c      	ldr	r4, [pc, #48]	; (800b794 <__libc_init_array+0x44>)
 800b764:	f005 fae6 	bl	8010d34 <_init>
 800b768:	1b64      	subs	r4, r4, r5
 800b76a:	10a4      	asrs	r4, r4, #2
 800b76c:	2600      	movs	r6, #0
 800b76e:	42a6      	cmp	r6, r4
 800b770:	d105      	bne.n	800b77e <__libc_init_array+0x2e>
 800b772:	bd70      	pop	{r4, r5, r6, pc}
 800b774:	f855 3b04 	ldr.w	r3, [r5], #4
 800b778:	4798      	blx	r3
 800b77a:	3601      	adds	r6, #1
 800b77c:	e7ee      	b.n	800b75c <__libc_init_array+0xc>
 800b77e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b782:	4798      	blx	r3
 800b784:	3601      	adds	r6, #1
 800b786:	e7f2      	b.n	800b76e <__libc_init_array+0x1e>
 800b788:	08011740 	.word	0x08011740
 800b78c:	08011740 	.word	0x08011740
 800b790:	08011740 	.word	0x08011740
 800b794:	08011744 	.word	0x08011744

0800b798 <memset>:
 800b798:	4402      	add	r2, r0
 800b79a:	4603      	mov	r3, r0
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d100      	bne.n	800b7a2 <memset+0xa>
 800b7a0:	4770      	bx	lr
 800b7a2:	f803 1b01 	strb.w	r1, [r3], #1
 800b7a6:	e7f9      	b.n	800b79c <memset+0x4>

0800b7a8 <__cvt>:
 800b7a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7ac:	ec55 4b10 	vmov	r4, r5, d0
 800b7b0:	2d00      	cmp	r5, #0
 800b7b2:	460e      	mov	r6, r1
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	462b      	mov	r3, r5
 800b7b8:	bfbb      	ittet	lt
 800b7ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b7be:	461d      	movlt	r5, r3
 800b7c0:	2300      	movge	r3, #0
 800b7c2:	232d      	movlt	r3, #45	; 0x2d
 800b7c4:	700b      	strb	r3, [r1, #0]
 800b7c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b7cc:	4691      	mov	r9, r2
 800b7ce:	f023 0820 	bic.w	r8, r3, #32
 800b7d2:	bfbc      	itt	lt
 800b7d4:	4622      	movlt	r2, r4
 800b7d6:	4614      	movlt	r4, r2
 800b7d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b7dc:	d005      	beq.n	800b7ea <__cvt+0x42>
 800b7de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b7e2:	d100      	bne.n	800b7e6 <__cvt+0x3e>
 800b7e4:	3601      	adds	r6, #1
 800b7e6:	2102      	movs	r1, #2
 800b7e8:	e000      	b.n	800b7ec <__cvt+0x44>
 800b7ea:	2103      	movs	r1, #3
 800b7ec:	ab03      	add	r3, sp, #12
 800b7ee:	9301      	str	r3, [sp, #4]
 800b7f0:	ab02      	add	r3, sp, #8
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	ec45 4b10 	vmov	d0, r4, r5
 800b7f8:	4653      	mov	r3, sl
 800b7fa:	4632      	mov	r2, r6
 800b7fc:	f001 fe7c 	bl	800d4f8 <_dtoa_r>
 800b800:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b804:	4607      	mov	r7, r0
 800b806:	d102      	bne.n	800b80e <__cvt+0x66>
 800b808:	f019 0f01 	tst.w	r9, #1
 800b80c:	d022      	beq.n	800b854 <__cvt+0xac>
 800b80e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b812:	eb07 0906 	add.w	r9, r7, r6
 800b816:	d110      	bne.n	800b83a <__cvt+0x92>
 800b818:	783b      	ldrb	r3, [r7, #0]
 800b81a:	2b30      	cmp	r3, #48	; 0x30
 800b81c:	d10a      	bne.n	800b834 <__cvt+0x8c>
 800b81e:	2200      	movs	r2, #0
 800b820:	2300      	movs	r3, #0
 800b822:	4620      	mov	r0, r4
 800b824:	4629      	mov	r1, r5
 800b826:	f7f5 f967 	bl	8000af8 <__aeabi_dcmpeq>
 800b82a:	b918      	cbnz	r0, 800b834 <__cvt+0x8c>
 800b82c:	f1c6 0601 	rsb	r6, r6, #1
 800b830:	f8ca 6000 	str.w	r6, [sl]
 800b834:	f8da 3000 	ldr.w	r3, [sl]
 800b838:	4499      	add	r9, r3
 800b83a:	2200      	movs	r2, #0
 800b83c:	2300      	movs	r3, #0
 800b83e:	4620      	mov	r0, r4
 800b840:	4629      	mov	r1, r5
 800b842:	f7f5 f959 	bl	8000af8 <__aeabi_dcmpeq>
 800b846:	b108      	cbz	r0, 800b84c <__cvt+0xa4>
 800b848:	f8cd 900c 	str.w	r9, [sp, #12]
 800b84c:	2230      	movs	r2, #48	; 0x30
 800b84e:	9b03      	ldr	r3, [sp, #12]
 800b850:	454b      	cmp	r3, r9
 800b852:	d307      	bcc.n	800b864 <__cvt+0xbc>
 800b854:	9b03      	ldr	r3, [sp, #12]
 800b856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b858:	1bdb      	subs	r3, r3, r7
 800b85a:	4638      	mov	r0, r7
 800b85c:	6013      	str	r3, [r2, #0]
 800b85e:	b004      	add	sp, #16
 800b860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b864:	1c59      	adds	r1, r3, #1
 800b866:	9103      	str	r1, [sp, #12]
 800b868:	701a      	strb	r2, [r3, #0]
 800b86a:	e7f0      	b.n	800b84e <__cvt+0xa6>

0800b86c <__exponent>:
 800b86c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b86e:	4603      	mov	r3, r0
 800b870:	2900      	cmp	r1, #0
 800b872:	bfb8      	it	lt
 800b874:	4249      	neglt	r1, r1
 800b876:	f803 2b02 	strb.w	r2, [r3], #2
 800b87a:	bfb4      	ite	lt
 800b87c:	222d      	movlt	r2, #45	; 0x2d
 800b87e:	222b      	movge	r2, #43	; 0x2b
 800b880:	2909      	cmp	r1, #9
 800b882:	7042      	strb	r2, [r0, #1]
 800b884:	dd2a      	ble.n	800b8dc <__exponent+0x70>
 800b886:	f10d 0407 	add.w	r4, sp, #7
 800b88a:	46a4      	mov	ip, r4
 800b88c:	270a      	movs	r7, #10
 800b88e:	46a6      	mov	lr, r4
 800b890:	460a      	mov	r2, r1
 800b892:	fb91 f6f7 	sdiv	r6, r1, r7
 800b896:	fb07 1516 	mls	r5, r7, r6, r1
 800b89a:	3530      	adds	r5, #48	; 0x30
 800b89c:	2a63      	cmp	r2, #99	; 0x63
 800b89e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b8a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b8a6:	4631      	mov	r1, r6
 800b8a8:	dcf1      	bgt.n	800b88e <__exponent+0x22>
 800b8aa:	3130      	adds	r1, #48	; 0x30
 800b8ac:	f1ae 0502 	sub.w	r5, lr, #2
 800b8b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b8b4:	1c44      	adds	r4, r0, #1
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	4561      	cmp	r1, ip
 800b8ba:	d30a      	bcc.n	800b8d2 <__exponent+0x66>
 800b8bc:	f10d 0209 	add.w	r2, sp, #9
 800b8c0:	eba2 020e 	sub.w	r2, r2, lr
 800b8c4:	4565      	cmp	r5, ip
 800b8c6:	bf88      	it	hi
 800b8c8:	2200      	movhi	r2, #0
 800b8ca:	4413      	add	r3, r2
 800b8cc:	1a18      	subs	r0, r3, r0
 800b8ce:	b003      	add	sp, #12
 800b8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b8da:	e7ed      	b.n	800b8b8 <__exponent+0x4c>
 800b8dc:	2330      	movs	r3, #48	; 0x30
 800b8de:	3130      	adds	r1, #48	; 0x30
 800b8e0:	7083      	strb	r3, [r0, #2]
 800b8e2:	70c1      	strb	r1, [r0, #3]
 800b8e4:	1d03      	adds	r3, r0, #4
 800b8e6:	e7f1      	b.n	800b8cc <__exponent+0x60>

0800b8e8 <_printf_float>:
 800b8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ec:	ed2d 8b02 	vpush	{d8}
 800b8f0:	b08d      	sub	sp, #52	; 0x34
 800b8f2:	460c      	mov	r4, r1
 800b8f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b8f8:	4616      	mov	r6, r2
 800b8fa:	461f      	mov	r7, r3
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	f002 ff6b 	bl	800e7d8 <_localeconv_r>
 800b902:	f8d0 a000 	ldr.w	sl, [r0]
 800b906:	4650      	mov	r0, sl
 800b908:	f7f4 fc74 	bl	80001f4 <strlen>
 800b90c:	2300      	movs	r3, #0
 800b90e:	930a      	str	r3, [sp, #40]	; 0x28
 800b910:	6823      	ldr	r3, [r4, #0]
 800b912:	9305      	str	r3, [sp, #20]
 800b914:	f8d8 3000 	ldr.w	r3, [r8]
 800b918:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b91c:	3307      	adds	r3, #7
 800b91e:	f023 0307 	bic.w	r3, r3, #7
 800b922:	f103 0208 	add.w	r2, r3, #8
 800b926:	f8c8 2000 	str.w	r2, [r8]
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b932:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b936:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b93a:	9307      	str	r3, [sp, #28]
 800b93c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b940:	ee08 0a10 	vmov	s16, r0
 800b944:	4b9f      	ldr	r3, [pc, #636]	; (800bbc4 <_printf_float+0x2dc>)
 800b946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b94a:	f04f 32ff 	mov.w	r2, #4294967295
 800b94e:	f7f5 f905 	bl	8000b5c <__aeabi_dcmpun>
 800b952:	bb88      	cbnz	r0, 800b9b8 <_printf_float+0xd0>
 800b954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b958:	4b9a      	ldr	r3, [pc, #616]	; (800bbc4 <_printf_float+0x2dc>)
 800b95a:	f04f 32ff 	mov.w	r2, #4294967295
 800b95e:	f7f5 f8df 	bl	8000b20 <__aeabi_dcmple>
 800b962:	bb48      	cbnz	r0, 800b9b8 <_printf_float+0xd0>
 800b964:	2200      	movs	r2, #0
 800b966:	2300      	movs	r3, #0
 800b968:	4640      	mov	r0, r8
 800b96a:	4649      	mov	r1, r9
 800b96c:	f7f5 f8ce 	bl	8000b0c <__aeabi_dcmplt>
 800b970:	b110      	cbz	r0, 800b978 <_printf_float+0x90>
 800b972:	232d      	movs	r3, #45	; 0x2d
 800b974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b978:	4b93      	ldr	r3, [pc, #588]	; (800bbc8 <_printf_float+0x2e0>)
 800b97a:	4894      	ldr	r0, [pc, #592]	; (800bbcc <_printf_float+0x2e4>)
 800b97c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b980:	bf94      	ite	ls
 800b982:	4698      	movls	r8, r3
 800b984:	4680      	movhi	r8, r0
 800b986:	2303      	movs	r3, #3
 800b988:	6123      	str	r3, [r4, #16]
 800b98a:	9b05      	ldr	r3, [sp, #20]
 800b98c:	f023 0204 	bic.w	r2, r3, #4
 800b990:	6022      	str	r2, [r4, #0]
 800b992:	f04f 0900 	mov.w	r9, #0
 800b996:	9700      	str	r7, [sp, #0]
 800b998:	4633      	mov	r3, r6
 800b99a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b99c:	4621      	mov	r1, r4
 800b99e:	4628      	mov	r0, r5
 800b9a0:	f000 f9d8 	bl	800bd54 <_printf_common>
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	f040 8090 	bne.w	800baca <_printf_float+0x1e2>
 800b9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ae:	b00d      	add	sp, #52	; 0x34
 800b9b0:	ecbd 8b02 	vpop	{d8}
 800b9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b8:	4642      	mov	r2, r8
 800b9ba:	464b      	mov	r3, r9
 800b9bc:	4640      	mov	r0, r8
 800b9be:	4649      	mov	r1, r9
 800b9c0:	f7f5 f8cc 	bl	8000b5c <__aeabi_dcmpun>
 800b9c4:	b140      	cbz	r0, 800b9d8 <_printf_float+0xf0>
 800b9c6:	464b      	mov	r3, r9
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	bfbc      	itt	lt
 800b9cc:	232d      	movlt	r3, #45	; 0x2d
 800b9ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b9d2:	487f      	ldr	r0, [pc, #508]	; (800bbd0 <_printf_float+0x2e8>)
 800b9d4:	4b7f      	ldr	r3, [pc, #508]	; (800bbd4 <_printf_float+0x2ec>)
 800b9d6:	e7d1      	b.n	800b97c <_printf_float+0x94>
 800b9d8:	6863      	ldr	r3, [r4, #4]
 800b9da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b9de:	9206      	str	r2, [sp, #24]
 800b9e0:	1c5a      	adds	r2, r3, #1
 800b9e2:	d13f      	bne.n	800ba64 <_printf_float+0x17c>
 800b9e4:	2306      	movs	r3, #6
 800b9e6:	6063      	str	r3, [r4, #4]
 800b9e8:	9b05      	ldr	r3, [sp, #20]
 800b9ea:	6861      	ldr	r1, [r4, #4]
 800b9ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	9303      	str	r3, [sp, #12]
 800b9f4:	ab0a      	add	r3, sp, #40	; 0x28
 800b9f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b9fa:	ab09      	add	r3, sp, #36	; 0x24
 800b9fc:	ec49 8b10 	vmov	d0, r8, r9
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	6022      	str	r2, [r4, #0]
 800ba04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba08:	4628      	mov	r0, r5
 800ba0a:	f7ff fecd 	bl	800b7a8 <__cvt>
 800ba0e:	9b06      	ldr	r3, [sp, #24]
 800ba10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba12:	2b47      	cmp	r3, #71	; 0x47
 800ba14:	4680      	mov	r8, r0
 800ba16:	d108      	bne.n	800ba2a <_printf_float+0x142>
 800ba18:	1cc8      	adds	r0, r1, #3
 800ba1a:	db02      	blt.n	800ba22 <_printf_float+0x13a>
 800ba1c:	6863      	ldr	r3, [r4, #4]
 800ba1e:	4299      	cmp	r1, r3
 800ba20:	dd41      	ble.n	800baa6 <_printf_float+0x1be>
 800ba22:	f1ab 0b02 	sub.w	fp, fp, #2
 800ba26:	fa5f fb8b 	uxtb.w	fp, fp
 800ba2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba2e:	d820      	bhi.n	800ba72 <_printf_float+0x18a>
 800ba30:	3901      	subs	r1, #1
 800ba32:	465a      	mov	r2, fp
 800ba34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba38:	9109      	str	r1, [sp, #36]	; 0x24
 800ba3a:	f7ff ff17 	bl	800b86c <__exponent>
 800ba3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba40:	1813      	adds	r3, r2, r0
 800ba42:	2a01      	cmp	r2, #1
 800ba44:	4681      	mov	r9, r0
 800ba46:	6123      	str	r3, [r4, #16]
 800ba48:	dc02      	bgt.n	800ba50 <_printf_float+0x168>
 800ba4a:	6822      	ldr	r2, [r4, #0]
 800ba4c:	07d2      	lsls	r2, r2, #31
 800ba4e:	d501      	bpl.n	800ba54 <_printf_float+0x16c>
 800ba50:	3301      	adds	r3, #1
 800ba52:	6123      	str	r3, [r4, #16]
 800ba54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d09c      	beq.n	800b996 <_printf_float+0xae>
 800ba5c:	232d      	movs	r3, #45	; 0x2d
 800ba5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba62:	e798      	b.n	800b996 <_printf_float+0xae>
 800ba64:	9a06      	ldr	r2, [sp, #24]
 800ba66:	2a47      	cmp	r2, #71	; 0x47
 800ba68:	d1be      	bne.n	800b9e8 <_printf_float+0x100>
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1bc      	bne.n	800b9e8 <_printf_float+0x100>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e7b9      	b.n	800b9e6 <_printf_float+0xfe>
 800ba72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ba76:	d118      	bne.n	800baaa <_printf_float+0x1c2>
 800ba78:	2900      	cmp	r1, #0
 800ba7a:	6863      	ldr	r3, [r4, #4]
 800ba7c:	dd0b      	ble.n	800ba96 <_printf_float+0x1ae>
 800ba7e:	6121      	str	r1, [r4, #16]
 800ba80:	b913      	cbnz	r3, 800ba88 <_printf_float+0x1a0>
 800ba82:	6822      	ldr	r2, [r4, #0]
 800ba84:	07d0      	lsls	r0, r2, #31
 800ba86:	d502      	bpl.n	800ba8e <_printf_float+0x1a6>
 800ba88:	3301      	adds	r3, #1
 800ba8a:	440b      	add	r3, r1
 800ba8c:	6123      	str	r3, [r4, #16]
 800ba8e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba90:	f04f 0900 	mov.w	r9, #0
 800ba94:	e7de      	b.n	800ba54 <_printf_float+0x16c>
 800ba96:	b913      	cbnz	r3, 800ba9e <_printf_float+0x1b6>
 800ba98:	6822      	ldr	r2, [r4, #0]
 800ba9a:	07d2      	lsls	r2, r2, #31
 800ba9c:	d501      	bpl.n	800baa2 <_printf_float+0x1ba>
 800ba9e:	3302      	adds	r3, #2
 800baa0:	e7f4      	b.n	800ba8c <_printf_float+0x1a4>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e7f2      	b.n	800ba8c <_printf_float+0x1a4>
 800baa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800baaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baac:	4299      	cmp	r1, r3
 800baae:	db05      	blt.n	800babc <_printf_float+0x1d4>
 800bab0:	6823      	ldr	r3, [r4, #0]
 800bab2:	6121      	str	r1, [r4, #16]
 800bab4:	07d8      	lsls	r0, r3, #31
 800bab6:	d5ea      	bpl.n	800ba8e <_printf_float+0x1a6>
 800bab8:	1c4b      	adds	r3, r1, #1
 800baba:	e7e7      	b.n	800ba8c <_printf_float+0x1a4>
 800babc:	2900      	cmp	r1, #0
 800babe:	bfd4      	ite	le
 800bac0:	f1c1 0202 	rsble	r2, r1, #2
 800bac4:	2201      	movgt	r2, #1
 800bac6:	4413      	add	r3, r2
 800bac8:	e7e0      	b.n	800ba8c <_printf_float+0x1a4>
 800baca:	6823      	ldr	r3, [r4, #0]
 800bacc:	055a      	lsls	r2, r3, #21
 800bace:	d407      	bmi.n	800bae0 <_printf_float+0x1f8>
 800bad0:	6923      	ldr	r3, [r4, #16]
 800bad2:	4642      	mov	r2, r8
 800bad4:	4631      	mov	r1, r6
 800bad6:	4628      	mov	r0, r5
 800bad8:	47b8      	blx	r7
 800bada:	3001      	adds	r0, #1
 800badc:	d12c      	bne.n	800bb38 <_printf_float+0x250>
 800bade:	e764      	b.n	800b9aa <_printf_float+0xc2>
 800bae0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bae4:	f240 80e0 	bls.w	800bca8 <_printf_float+0x3c0>
 800bae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800baec:	2200      	movs	r2, #0
 800baee:	2300      	movs	r3, #0
 800baf0:	f7f5 f802 	bl	8000af8 <__aeabi_dcmpeq>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d034      	beq.n	800bb62 <_printf_float+0x27a>
 800baf8:	4a37      	ldr	r2, [pc, #220]	; (800bbd8 <_printf_float+0x2f0>)
 800bafa:	2301      	movs	r3, #1
 800bafc:	4631      	mov	r1, r6
 800bafe:	4628      	mov	r0, r5
 800bb00:	47b8      	blx	r7
 800bb02:	3001      	adds	r0, #1
 800bb04:	f43f af51 	beq.w	800b9aa <_printf_float+0xc2>
 800bb08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	db02      	blt.n	800bb16 <_printf_float+0x22e>
 800bb10:	6823      	ldr	r3, [r4, #0]
 800bb12:	07d8      	lsls	r0, r3, #31
 800bb14:	d510      	bpl.n	800bb38 <_printf_float+0x250>
 800bb16:	ee18 3a10 	vmov	r3, s16
 800bb1a:	4652      	mov	r2, sl
 800bb1c:	4631      	mov	r1, r6
 800bb1e:	4628      	mov	r0, r5
 800bb20:	47b8      	blx	r7
 800bb22:	3001      	adds	r0, #1
 800bb24:	f43f af41 	beq.w	800b9aa <_printf_float+0xc2>
 800bb28:	f04f 0800 	mov.w	r8, #0
 800bb2c:	f104 091a 	add.w	r9, r4, #26
 800bb30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb32:	3b01      	subs	r3, #1
 800bb34:	4543      	cmp	r3, r8
 800bb36:	dc09      	bgt.n	800bb4c <_printf_float+0x264>
 800bb38:	6823      	ldr	r3, [r4, #0]
 800bb3a:	079b      	lsls	r3, r3, #30
 800bb3c:	f100 8105 	bmi.w	800bd4a <_printf_float+0x462>
 800bb40:	68e0      	ldr	r0, [r4, #12]
 800bb42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb44:	4298      	cmp	r0, r3
 800bb46:	bfb8      	it	lt
 800bb48:	4618      	movlt	r0, r3
 800bb4a:	e730      	b.n	800b9ae <_printf_float+0xc6>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	464a      	mov	r2, r9
 800bb50:	4631      	mov	r1, r6
 800bb52:	4628      	mov	r0, r5
 800bb54:	47b8      	blx	r7
 800bb56:	3001      	adds	r0, #1
 800bb58:	f43f af27 	beq.w	800b9aa <_printf_float+0xc2>
 800bb5c:	f108 0801 	add.w	r8, r8, #1
 800bb60:	e7e6      	b.n	800bb30 <_printf_float+0x248>
 800bb62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	dc39      	bgt.n	800bbdc <_printf_float+0x2f4>
 800bb68:	4a1b      	ldr	r2, [pc, #108]	; (800bbd8 <_printf_float+0x2f0>)
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	4631      	mov	r1, r6
 800bb6e:	4628      	mov	r0, r5
 800bb70:	47b8      	blx	r7
 800bb72:	3001      	adds	r0, #1
 800bb74:	f43f af19 	beq.w	800b9aa <_printf_float+0xc2>
 800bb78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	d102      	bne.n	800bb86 <_printf_float+0x29e>
 800bb80:	6823      	ldr	r3, [r4, #0]
 800bb82:	07d9      	lsls	r1, r3, #31
 800bb84:	d5d8      	bpl.n	800bb38 <_printf_float+0x250>
 800bb86:	ee18 3a10 	vmov	r3, s16
 800bb8a:	4652      	mov	r2, sl
 800bb8c:	4631      	mov	r1, r6
 800bb8e:	4628      	mov	r0, r5
 800bb90:	47b8      	blx	r7
 800bb92:	3001      	adds	r0, #1
 800bb94:	f43f af09 	beq.w	800b9aa <_printf_float+0xc2>
 800bb98:	f04f 0900 	mov.w	r9, #0
 800bb9c:	f104 0a1a 	add.w	sl, r4, #26
 800bba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba2:	425b      	negs	r3, r3
 800bba4:	454b      	cmp	r3, r9
 800bba6:	dc01      	bgt.n	800bbac <_printf_float+0x2c4>
 800bba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbaa:	e792      	b.n	800bad2 <_printf_float+0x1ea>
 800bbac:	2301      	movs	r3, #1
 800bbae:	4652      	mov	r2, sl
 800bbb0:	4631      	mov	r1, r6
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	47b8      	blx	r7
 800bbb6:	3001      	adds	r0, #1
 800bbb8:	f43f aef7 	beq.w	800b9aa <_printf_float+0xc2>
 800bbbc:	f109 0901 	add.w	r9, r9, #1
 800bbc0:	e7ee      	b.n	800bba0 <_printf_float+0x2b8>
 800bbc2:	bf00      	nop
 800bbc4:	7fefffff 	.word	0x7fefffff
 800bbc8:	080111cc 	.word	0x080111cc
 800bbcc:	080111d0 	.word	0x080111d0
 800bbd0:	080111d8 	.word	0x080111d8
 800bbd4:	080111d4 	.word	0x080111d4
 800bbd8:	080111dc 	.word	0x080111dc
 800bbdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	bfa8      	it	ge
 800bbe4:	461a      	movge	r2, r3
 800bbe6:	2a00      	cmp	r2, #0
 800bbe8:	4691      	mov	r9, r2
 800bbea:	dc37      	bgt.n	800bc5c <_printf_float+0x374>
 800bbec:	f04f 0b00 	mov.w	fp, #0
 800bbf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbf4:	f104 021a 	add.w	r2, r4, #26
 800bbf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbfa:	9305      	str	r3, [sp, #20]
 800bbfc:	eba3 0309 	sub.w	r3, r3, r9
 800bc00:	455b      	cmp	r3, fp
 800bc02:	dc33      	bgt.n	800bc6c <_printf_float+0x384>
 800bc04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	db3b      	blt.n	800bc84 <_printf_float+0x39c>
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	07da      	lsls	r2, r3, #31
 800bc10:	d438      	bmi.n	800bc84 <_printf_float+0x39c>
 800bc12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc14:	9a05      	ldr	r2, [sp, #20]
 800bc16:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc18:	1a9a      	subs	r2, r3, r2
 800bc1a:	eba3 0901 	sub.w	r9, r3, r1
 800bc1e:	4591      	cmp	r9, r2
 800bc20:	bfa8      	it	ge
 800bc22:	4691      	movge	r9, r2
 800bc24:	f1b9 0f00 	cmp.w	r9, #0
 800bc28:	dc35      	bgt.n	800bc96 <_printf_float+0x3ae>
 800bc2a:	f04f 0800 	mov.w	r8, #0
 800bc2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc32:	f104 0a1a 	add.w	sl, r4, #26
 800bc36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc3a:	1a9b      	subs	r3, r3, r2
 800bc3c:	eba3 0309 	sub.w	r3, r3, r9
 800bc40:	4543      	cmp	r3, r8
 800bc42:	f77f af79 	ble.w	800bb38 <_printf_float+0x250>
 800bc46:	2301      	movs	r3, #1
 800bc48:	4652      	mov	r2, sl
 800bc4a:	4631      	mov	r1, r6
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	47b8      	blx	r7
 800bc50:	3001      	adds	r0, #1
 800bc52:	f43f aeaa 	beq.w	800b9aa <_printf_float+0xc2>
 800bc56:	f108 0801 	add.w	r8, r8, #1
 800bc5a:	e7ec      	b.n	800bc36 <_printf_float+0x34e>
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	4631      	mov	r1, r6
 800bc60:	4642      	mov	r2, r8
 800bc62:	4628      	mov	r0, r5
 800bc64:	47b8      	blx	r7
 800bc66:	3001      	adds	r0, #1
 800bc68:	d1c0      	bne.n	800bbec <_printf_float+0x304>
 800bc6a:	e69e      	b.n	800b9aa <_printf_float+0xc2>
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	4631      	mov	r1, r6
 800bc70:	4628      	mov	r0, r5
 800bc72:	9205      	str	r2, [sp, #20]
 800bc74:	47b8      	blx	r7
 800bc76:	3001      	adds	r0, #1
 800bc78:	f43f ae97 	beq.w	800b9aa <_printf_float+0xc2>
 800bc7c:	9a05      	ldr	r2, [sp, #20]
 800bc7e:	f10b 0b01 	add.w	fp, fp, #1
 800bc82:	e7b9      	b.n	800bbf8 <_printf_float+0x310>
 800bc84:	ee18 3a10 	vmov	r3, s16
 800bc88:	4652      	mov	r2, sl
 800bc8a:	4631      	mov	r1, r6
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	47b8      	blx	r7
 800bc90:	3001      	adds	r0, #1
 800bc92:	d1be      	bne.n	800bc12 <_printf_float+0x32a>
 800bc94:	e689      	b.n	800b9aa <_printf_float+0xc2>
 800bc96:	9a05      	ldr	r2, [sp, #20]
 800bc98:	464b      	mov	r3, r9
 800bc9a:	4442      	add	r2, r8
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	4628      	mov	r0, r5
 800bca0:	47b8      	blx	r7
 800bca2:	3001      	adds	r0, #1
 800bca4:	d1c1      	bne.n	800bc2a <_printf_float+0x342>
 800bca6:	e680      	b.n	800b9aa <_printf_float+0xc2>
 800bca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcaa:	2a01      	cmp	r2, #1
 800bcac:	dc01      	bgt.n	800bcb2 <_printf_float+0x3ca>
 800bcae:	07db      	lsls	r3, r3, #31
 800bcb0:	d538      	bpl.n	800bd24 <_printf_float+0x43c>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	4642      	mov	r2, r8
 800bcb6:	4631      	mov	r1, r6
 800bcb8:	4628      	mov	r0, r5
 800bcba:	47b8      	blx	r7
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	f43f ae74 	beq.w	800b9aa <_printf_float+0xc2>
 800bcc2:	ee18 3a10 	vmov	r3, s16
 800bcc6:	4652      	mov	r2, sl
 800bcc8:	4631      	mov	r1, r6
 800bcca:	4628      	mov	r0, r5
 800bccc:	47b8      	blx	r7
 800bcce:	3001      	adds	r0, #1
 800bcd0:	f43f ae6b 	beq.w	800b9aa <_printf_float+0xc2>
 800bcd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bcd8:	2200      	movs	r2, #0
 800bcda:	2300      	movs	r3, #0
 800bcdc:	f7f4 ff0c 	bl	8000af8 <__aeabi_dcmpeq>
 800bce0:	b9d8      	cbnz	r0, 800bd1a <_printf_float+0x432>
 800bce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bce4:	f108 0201 	add.w	r2, r8, #1
 800bce8:	3b01      	subs	r3, #1
 800bcea:	4631      	mov	r1, r6
 800bcec:	4628      	mov	r0, r5
 800bcee:	47b8      	blx	r7
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	d10e      	bne.n	800bd12 <_printf_float+0x42a>
 800bcf4:	e659      	b.n	800b9aa <_printf_float+0xc2>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	4652      	mov	r2, sl
 800bcfa:	4631      	mov	r1, r6
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	47b8      	blx	r7
 800bd00:	3001      	adds	r0, #1
 800bd02:	f43f ae52 	beq.w	800b9aa <_printf_float+0xc2>
 800bd06:	f108 0801 	add.w	r8, r8, #1
 800bd0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	4543      	cmp	r3, r8
 800bd10:	dcf1      	bgt.n	800bcf6 <_printf_float+0x40e>
 800bd12:	464b      	mov	r3, r9
 800bd14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd18:	e6dc      	b.n	800bad4 <_printf_float+0x1ec>
 800bd1a:	f04f 0800 	mov.w	r8, #0
 800bd1e:	f104 0a1a 	add.w	sl, r4, #26
 800bd22:	e7f2      	b.n	800bd0a <_printf_float+0x422>
 800bd24:	2301      	movs	r3, #1
 800bd26:	4642      	mov	r2, r8
 800bd28:	e7df      	b.n	800bcea <_printf_float+0x402>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	464a      	mov	r2, r9
 800bd2e:	4631      	mov	r1, r6
 800bd30:	4628      	mov	r0, r5
 800bd32:	47b8      	blx	r7
 800bd34:	3001      	adds	r0, #1
 800bd36:	f43f ae38 	beq.w	800b9aa <_printf_float+0xc2>
 800bd3a:	f108 0801 	add.w	r8, r8, #1
 800bd3e:	68e3      	ldr	r3, [r4, #12]
 800bd40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd42:	1a5b      	subs	r3, r3, r1
 800bd44:	4543      	cmp	r3, r8
 800bd46:	dcf0      	bgt.n	800bd2a <_printf_float+0x442>
 800bd48:	e6fa      	b.n	800bb40 <_printf_float+0x258>
 800bd4a:	f04f 0800 	mov.w	r8, #0
 800bd4e:	f104 0919 	add.w	r9, r4, #25
 800bd52:	e7f4      	b.n	800bd3e <_printf_float+0x456>

0800bd54 <_printf_common>:
 800bd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd58:	4616      	mov	r6, r2
 800bd5a:	4699      	mov	r9, r3
 800bd5c:	688a      	ldr	r2, [r1, #8]
 800bd5e:	690b      	ldr	r3, [r1, #16]
 800bd60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd64:	4293      	cmp	r3, r2
 800bd66:	bfb8      	it	lt
 800bd68:	4613      	movlt	r3, r2
 800bd6a:	6033      	str	r3, [r6, #0]
 800bd6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd70:	4607      	mov	r7, r0
 800bd72:	460c      	mov	r4, r1
 800bd74:	b10a      	cbz	r2, 800bd7a <_printf_common+0x26>
 800bd76:	3301      	adds	r3, #1
 800bd78:	6033      	str	r3, [r6, #0]
 800bd7a:	6823      	ldr	r3, [r4, #0]
 800bd7c:	0699      	lsls	r1, r3, #26
 800bd7e:	bf42      	ittt	mi
 800bd80:	6833      	ldrmi	r3, [r6, #0]
 800bd82:	3302      	addmi	r3, #2
 800bd84:	6033      	strmi	r3, [r6, #0]
 800bd86:	6825      	ldr	r5, [r4, #0]
 800bd88:	f015 0506 	ands.w	r5, r5, #6
 800bd8c:	d106      	bne.n	800bd9c <_printf_common+0x48>
 800bd8e:	f104 0a19 	add.w	sl, r4, #25
 800bd92:	68e3      	ldr	r3, [r4, #12]
 800bd94:	6832      	ldr	r2, [r6, #0]
 800bd96:	1a9b      	subs	r3, r3, r2
 800bd98:	42ab      	cmp	r3, r5
 800bd9a:	dc26      	bgt.n	800bdea <_printf_common+0x96>
 800bd9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bda0:	1e13      	subs	r3, r2, #0
 800bda2:	6822      	ldr	r2, [r4, #0]
 800bda4:	bf18      	it	ne
 800bda6:	2301      	movne	r3, #1
 800bda8:	0692      	lsls	r2, r2, #26
 800bdaa:	d42b      	bmi.n	800be04 <_printf_common+0xb0>
 800bdac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdb0:	4649      	mov	r1, r9
 800bdb2:	4638      	mov	r0, r7
 800bdb4:	47c0      	blx	r8
 800bdb6:	3001      	adds	r0, #1
 800bdb8:	d01e      	beq.n	800bdf8 <_printf_common+0xa4>
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	68e5      	ldr	r5, [r4, #12]
 800bdbe:	6832      	ldr	r2, [r6, #0]
 800bdc0:	f003 0306 	and.w	r3, r3, #6
 800bdc4:	2b04      	cmp	r3, #4
 800bdc6:	bf08      	it	eq
 800bdc8:	1aad      	subeq	r5, r5, r2
 800bdca:	68a3      	ldr	r3, [r4, #8]
 800bdcc:	6922      	ldr	r2, [r4, #16]
 800bdce:	bf0c      	ite	eq
 800bdd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdd4:	2500      	movne	r5, #0
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	bfc4      	itt	gt
 800bdda:	1a9b      	subgt	r3, r3, r2
 800bddc:	18ed      	addgt	r5, r5, r3
 800bdde:	2600      	movs	r6, #0
 800bde0:	341a      	adds	r4, #26
 800bde2:	42b5      	cmp	r5, r6
 800bde4:	d11a      	bne.n	800be1c <_printf_common+0xc8>
 800bde6:	2000      	movs	r0, #0
 800bde8:	e008      	b.n	800bdfc <_printf_common+0xa8>
 800bdea:	2301      	movs	r3, #1
 800bdec:	4652      	mov	r2, sl
 800bdee:	4649      	mov	r1, r9
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	47c0      	blx	r8
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	d103      	bne.n	800be00 <_printf_common+0xac>
 800bdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be00:	3501      	adds	r5, #1
 800be02:	e7c6      	b.n	800bd92 <_printf_common+0x3e>
 800be04:	18e1      	adds	r1, r4, r3
 800be06:	1c5a      	adds	r2, r3, #1
 800be08:	2030      	movs	r0, #48	; 0x30
 800be0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be0e:	4422      	add	r2, r4
 800be10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be18:	3302      	adds	r3, #2
 800be1a:	e7c7      	b.n	800bdac <_printf_common+0x58>
 800be1c:	2301      	movs	r3, #1
 800be1e:	4622      	mov	r2, r4
 800be20:	4649      	mov	r1, r9
 800be22:	4638      	mov	r0, r7
 800be24:	47c0      	blx	r8
 800be26:	3001      	adds	r0, #1
 800be28:	d0e6      	beq.n	800bdf8 <_printf_common+0xa4>
 800be2a:	3601      	adds	r6, #1
 800be2c:	e7d9      	b.n	800bde2 <_printf_common+0x8e>
	...

0800be30 <_printf_i>:
 800be30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be34:	7e0f      	ldrb	r7, [r1, #24]
 800be36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be38:	2f78      	cmp	r7, #120	; 0x78
 800be3a:	4691      	mov	r9, r2
 800be3c:	4680      	mov	r8, r0
 800be3e:	460c      	mov	r4, r1
 800be40:	469a      	mov	sl, r3
 800be42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be46:	d807      	bhi.n	800be58 <_printf_i+0x28>
 800be48:	2f62      	cmp	r7, #98	; 0x62
 800be4a:	d80a      	bhi.n	800be62 <_printf_i+0x32>
 800be4c:	2f00      	cmp	r7, #0
 800be4e:	f000 80d8 	beq.w	800c002 <_printf_i+0x1d2>
 800be52:	2f58      	cmp	r7, #88	; 0x58
 800be54:	f000 80a3 	beq.w	800bf9e <_printf_i+0x16e>
 800be58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be60:	e03a      	b.n	800bed8 <_printf_i+0xa8>
 800be62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be66:	2b15      	cmp	r3, #21
 800be68:	d8f6      	bhi.n	800be58 <_printf_i+0x28>
 800be6a:	a101      	add	r1, pc, #4	; (adr r1, 800be70 <_printf_i+0x40>)
 800be6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be70:	0800bec9 	.word	0x0800bec9
 800be74:	0800bedd 	.word	0x0800bedd
 800be78:	0800be59 	.word	0x0800be59
 800be7c:	0800be59 	.word	0x0800be59
 800be80:	0800be59 	.word	0x0800be59
 800be84:	0800be59 	.word	0x0800be59
 800be88:	0800bedd 	.word	0x0800bedd
 800be8c:	0800be59 	.word	0x0800be59
 800be90:	0800be59 	.word	0x0800be59
 800be94:	0800be59 	.word	0x0800be59
 800be98:	0800be59 	.word	0x0800be59
 800be9c:	0800bfe9 	.word	0x0800bfe9
 800bea0:	0800bf0d 	.word	0x0800bf0d
 800bea4:	0800bfcb 	.word	0x0800bfcb
 800bea8:	0800be59 	.word	0x0800be59
 800beac:	0800be59 	.word	0x0800be59
 800beb0:	0800c00b 	.word	0x0800c00b
 800beb4:	0800be59 	.word	0x0800be59
 800beb8:	0800bf0d 	.word	0x0800bf0d
 800bebc:	0800be59 	.word	0x0800be59
 800bec0:	0800be59 	.word	0x0800be59
 800bec4:	0800bfd3 	.word	0x0800bfd3
 800bec8:	682b      	ldr	r3, [r5, #0]
 800beca:	1d1a      	adds	r2, r3, #4
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	602a      	str	r2, [r5, #0]
 800bed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bed8:	2301      	movs	r3, #1
 800beda:	e0a3      	b.n	800c024 <_printf_i+0x1f4>
 800bedc:	6820      	ldr	r0, [r4, #0]
 800bede:	6829      	ldr	r1, [r5, #0]
 800bee0:	0606      	lsls	r6, r0, #24
 800bee2:	f101 0304 	add.w	r3, r1, #4
 800bee6:	d50a      	bpl.n	800befe <_printf_i+0xce>
 800bee8:	680e      	ldr	r6, [r1, #0]
 800beea:	602b      	str	r3, [r5, #0]
 800beec:	2e00      	cmp	r6, #0
 800beee:	da03      	bge.n	800bef8 <_printf_i+0xc8>
 800bef0:	232d      	movs	r3, #45	; 0x2d
 800bef2:	4276      	negs	r6, r6
 800bef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bef8:	485e      	ldr	r0, [pc, #376]	; (800c074 <_printf_i+0x244>)
 800befa:	230a      	movs	r3, #10
 800befc:	e019      	b.n	800bf32 <_printf_i+0x102>
 800befe:	680e      	ldr	r6, [r1, #0]
 800bf00:	602b      	str	r3, [r5, #0]
 800bf02:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf06:	bf18      	it	ne
 800bf08:	b236      	sxthne	r6, r6
 800bf0a:	e7ef      	b.n	800beec <_printf_i+0xbc>
 800bf0c:	682b      	ldr	r3, [r5, #0]
 800bf0e:	6820      	ldr	r0, [r4, #0]
 800bf10:	1d19      	adds	r1, r3, #4
 800bf12:	6029      	str	r1, [r5, #0]
 800bf14:	0601      	lsls	r1, r0, #24
 800bf16:	d501      	bpl.n	800bf1c <_printf_i+0xec>
 800bf18:	681e      	ldr	r6, [r3, #0]
 800bf1a:	e002      	b.n	800bf22 <_printf_i+0xf2>
 800bf1c:	0646      	lsls	r6, r0, #25
 800bf1e:	d5fb      	bpl.n	800bf18 <_printf_i+0xe8>
 800bf20:	881e      	ldrh	r6, [r3, #0]
 800bf22:	4854      	ldr	r0, [pc, #336]	; (800c074 <_printf_i+0x244>)
 800bf24:	2f6f      	cmp	r7, #111	; 0x6f
 800bf26:	bf0c      	ite	eq
 800bf28:	2308      	moveq	r3, #8
 800bf2a:	230a      	movne	r3, #10
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf32:	6865      	ldr	r5, [r4, #4]
 800bf34:	60a5      	str	r5, [r4, #8]
 800bf36:	2d00      	cmp	r5, #0
 800bf38:	bfa2      	ittt	ge
 800bf3a:	6821      	ldrge	r1, [r4, #0]
 800bf3c:	f021 0104 	bicge.w	r1, r1, #4
 800bf40:	6021      	strge	r1, [r4, #0]
 800bf42:	b90e      	cbnz	r6, 800bf48 <_printf_i+0x118>
 800bf44:	2d00      	cmp	r5, #0
 800bf46:	d04d      	beq.n	800bfe4 <_printf_i+0x1b4>
 800bf48:	4615      	mov	r5, r2
 800bf4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf4e:	fb03 6711 	mls	r7, r3, r1, r6
 800bf52:	5dc7      	ldrb	r7, [r0, r7]
 800bf54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf58:	4637      	mov	r7, r6
 800bf5a:	42bb      	cmp	r3, r7
 800bf5c:	460e      	mov	r6, r1
 800bf5e:	d9f4      	bls.n	800bf4a <_printf_i+0x11a>
 800bf60:	2b08      	cmp	r3, #8
 800bf62:	d10b      	bne.n	800bf7c <_printf_i+0x14c>
 800bf64:	6823      	ldr	r3, [r4, #0]
 800bf66:	07de      	lsls	r6, r3, #31
 800bf68:	d508      	bpl.n	800bf7c <_printf_i+0x14c>
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	6861      	ldr	r1, [r4, #4]
 800bf6e:	4299      	cmp	r1, r3
 800bf70:	bfde      	ittt	le
 800bf72:	2330      	movle	r3, #48	; 0x30
 800bf74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf7c:	1b52      	subs	r2, r2, r5
 800bf7e:	6122      	str	r2, [r4, #16]
 800bf80:	f8cd a000 	str.w	sl, [sp]
 800bf84:	464b      	mov	r3, r9
 800bf86:	aa03      	add	r2, sp, #12
 800bf88:	4621      	mov	r1, r4
 800bf8a:	4640      	mov	r0, r8
 800bf8c:	f7ff fee2 	bl	800bd54 <_printf_common>
 800bf90:	3001      	adds	r0, #1
 800bf92:	d14c      	bne.n	800c02e <_printf_i+0x1fe>
 800bf94:	f04f 30ff 	mov.w	r0, #4294967295
 800bf98:	b004      	add	sp, #16
 800bf9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf9e:	4835      	ldr	r0, [pc, #212]	; (800c074 <_printf_i+0x244>)
 800bfa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bfa4:	6829      	ldr	r1, [r5, #0]
 800bfa6:	6823      	ldr	r3, [r4, #0]
 800bfa8:	f851 6b04 	ldr.w	r6, [r1], #4
 800bfac:	6029      	str	r1, [r5, #0]
 800bfae:	061d      	lsls	r5, r3, #24
 800bfb0:	d514      	bpl.n	800bfdc <_printf_i+0x1ac>
 800bfb2:	07df      	lsls	r7, r3, #31
 800bfb4:	bf44      	itt	mi
 800bfb6:	f043 0320 	orrmi.w	r3, r3, #32
 800bfba:	6023      	strmi	r3, [r4, #0]
 800bfbc:	b91e      	cbnz	r6, 800bfc6 <_printf_i+0x196>
 800bfbe:	6823      	ldr	r3, [r4, #0]
 800bfc0:	f023 0320 	bic.w	r3, r3, #32
 800bfc4:	6023      	str	r3, [r4, #0]
 800bfc6:	2310      	movs	r3, #16
 800bfc8:	e7b0      	b.n	800bf2c <_printf_i+0xfc>
 800bfca:	6823      	ldr	r3, [r4, #0]
 800bfcc:	f043 0320 	orr.w	r3, r3, #32
 800bfd0:	6023      	str	r3, [r4, #0]
 800bfd2:	2378      	movs	r3, #120	; 0x78
 800bfd4:	4828      	ldr	r0, [pc, #160]	; (800c078 <_printf_i+0x248>)
 800bfd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bfda:	e7e3      	b.n	800bfa4 <_printf_i+0x174>
 800bfdc:	0659      	lsls	r1, r3, #25
 800bfde:	bf48      	it	mi
 800bfe0:	b2b6      	uxthmi	r6, r6
 800bfe2:	e7e6      	b.n	800bfb2 <_printf_i+0x182>
 800bfe4:	4615      	mov	r5, r2
 800bfe6:	e7bb      	b.n	800bf60 <_printf_i+0x130>
 800bfe8:	682b      	ldr	r3, [r5, #0]
 800bfea:	6826      	ldr	r6, [r4, #0]
 800bfec:	6961      	ldr	r1, [r4, #20]
 800bfee:	1d18      	adds	r0, r3, #4
 800bff0:	6028      	str	r0, [r5, #0]
 800bff2:	0635      	lsls	r5, r6, #24
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	d501      	bpl.n	800bffc <_printf_i+0x1cc>
 800bff8:	6019      	str	r1, [r3, #0]
 800bffa:	e002      	b.n	800c002 <_printf_i+0x1d2>
 800bffc:	0670      	lsls	r0, r6, #25
 800bffe:	d5fb      	bpl.n	800bff8 <_printf_i+0x1c8>
 800c000:	8019      	strh	r1, [r3, #0]
 800c002:	2300      	movs	r3, #0
 800c004:	6123      	str	r3, [r4, #16]
 800c006:	4615      	mov	r5, r2
 800c008:	e7ba      	b.n	800bf80 <_printf_i+0x150>
 800c00a:	682b      	ldr	r3, [r5, #0]
 800c00c:	1d1a      	adds	r2, r3, #4
 800c00e:	602a      	str	r2, [r5, #0]
 800c010:	681d      	ldr	r5, [r3, #0]
 800c012:	6862      	ldr	r2, [r4, #4]
 800c014:	2100      	movs	r1, #0
 800c016:	4628      	mov	r0, r5
 800c018:	f7f4 f8fa 	bl	8000210 <memchr>
 800c01c:	b108      	cbz	r0, 800c022 <_printf_i+0x1f2>
 800c01e:	1b40      	subs	r0, r0, r5
 800c020:	6060      	str	r0, [r4, #4]
 800c022:	6863      	ldr	r3, [r4, #4]
 800c024:	6123      	str	r3, [r4, #16]
 800c026:	2300      	movs	r3, #0
 800c028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c02c:	e7a8      	b.n	800bf80 <_printf_i+0x150>
 800c02e:	6923      	ldr	r3, [r4, #16]
 800c030:	462a      	mov	r2, r5
 800c032:	4649      	mov	r1, r9
 800c034:	4640      	mov	r0, r8
 800c036:	47d0      	blx	sl
 800c038:	3001      	adds	r0, #1
 800c03a:	d0ab      	beq.n	800bf94 <_printf_i+0x164>
 800c03c:	6823      	ldr	r3, [r4, #0]
 800c03e:	079b      	lsls	r3, r3, #30
 800c040:	d413      	bmi.n	800c06a <_printf_i+0x23a>
 800c042:	68e0      	ldr	r0, [r4, #12]
 800c044:	9b03      	ldr	r3, [sp, #12]
 800c046:	4298      	cmp	r0, r3
 800c048:	bfb8      	it	lt
 800c04a:	4618      	movlt	r0, r3
 800c04c:	e7a4      	b.n	800bf98 <_printf_i+0x168>
 800c04e:	2301      	movs	r3, #1
 800c050:	4632      	mov	r2, r6
 800c052:	4649      	mov	r1, r9
 800c054:	4640      	mov	r0, r8
 800c056:	47d0      	blx	sl
 800c058:	3001      	adds	r0, #1
 800c05a:	d09b      	beq.n	800bf94 <_printf_i+0x164>
 800c05c:	3501      	adds	r5, #1
 800c05e:	68e3      	ldr	r3, [r4, #12]
 800c060:	9903      	ldr	r1, [sp, #12]
 800c062:	1a5b      	subs	r3, r3, r1
 800c064:	42ab      	cmp	r3, r5
 800c066:	dcf2      	bgt.n	800c04e <_printf_i+0x21e>
 800c068:	e7eb      	b.n	800c042 <_printf_i+0x212>
 800c06a:	2500      	movs	r5, #0
 800c06c:	f104 0619 	add.w	r6, r4, #25
 800c070:	e7f5      	b.n	800c05e <_printf_i+0x22e>
 800c072:	bf00      	nop
 800c074:	080111de 	.word	0x080111de
 800c078:	080111ef 	.word	0x080111ef

0800c07c <_scanf_float>:
 800c07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c080:	b087      	sub	sp, #28
 800c082:	4617      	mov	r7, r2
 800c084:	9303      	str	r3, [sp, #12]
 800c086:	688b      	ldr	r3, [r1, #8]
 800c088:	1e5a      	subs	r2, r3, #1
 800c08a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c08e:	bf83      	ittte	hi
 800c090:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c094:	195b      	addhi	r3, r3, r5
 800c096:	9302      	strhi	r3, [sp, #8]
 800c098:	2300      	movls	r3, #0
 800c09a:	bf86      	itte	hi
 800c09c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c0a0:	608b      	strhi	r3, [r1, #8]
 800c0a2:	9302      	strls	r3, [sp, #8]
 800c0a4:	680b      	ldr	r3, [r1, #0]
 800c0a6:	468b      	mov	fp, r1
 800c0a8:	2500      	movs	r5, #0
 800c0aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c0ae:	f84b 3b1c 	str.w	r3, [fp], #28
 800c0b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c0b6:	4680      	mov	r8, r0
 800c0b8:	460c      	mov	r4, r1
 800c0ba:	465e      	mov	r6, fp
 800c0bc:	46aa      	mov	sl, r5
 800c0be:	46a9      	mov	r9, r5
 800c0c0:	9501      	str	r5, [sp, #4]
 800c0c2:	68a2      	ldr	r2, [r4, #8]
 800c0c4:	b152      	cbz	r2, 800c0dc <_scanf_float+0x60>
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	2b4e      	cmp	r3, #78	; 0x4e
 800c0cc:	d864      	bhi.n	800c198 <_scanf_float+0x11c>
 800c0ce:	2b40      	cmp	r3, #64	; 0x40
 800c0d0:	d83c      	bhi.n	800c14c <_scanf_float+0xd0>
 800c0d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c0d6:	b2c8      	uxtb	r0, r1
 800c0d8:	280e      	cmp	r0, #14
 800c0da:	d93a      	bls.n	800c152 <_scanf_float+0xd6>
 800c0dc:	f1b9 0f00 	cmp.w	r9, #0
 800c0e0:	d003      	beq.n	800c0ea <_scanf_float+0x6e>
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0ee:	f1ba 0f01 	cmp.w	sl, #1
 800c0f2:	f200 8113 	bhi.w	800c31c <_scanf_float+0x2a0>
 800c0f6:	455e      	cmp	r6, fp
 800c0f8:	f200 8105 	bhi.w	800c306 <_scanf_float+0x28a>
 800c0fc:	2501      	movs	r5, #1
 800c0fe:	4628      	mov	r0, r5
 800c100:	b007      	add	sp, #28
 800c102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c106:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c10a:	2a0d      	cmp	r2, #13
 800c10c:	d8e6      	bhi.n	800c0dc <_scanf_float+0x60>
 800c10e:	a101      	add	r1, pc, #4	; (adr r1, 800c114 <_scanf_float+0x98>)
 800c110:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c114:	0800c253 	.word	0x0800c253
 800c118:	0800c0dd 	.word	0x0800c0dd
 800c11c:	0800c0dd 	.word	0x0800c0dd
 800c120:	0800c0dd 	.word	0x0800c0dd
 800c124:	0800c2b3 	.word	0x0800c2b3
 800c128:	0800c28b 	.word	0x0800c28b
 800c12c:	0800c0dd 	.word	0x0800c0dd
 800c130:	0800c0dd 	.word	0x0800c0dd
 800c134:	0800c261 	.word	0x0800c261
 800c138:	0800c0dd 	.word	0x0800c0dd
 800c13c:	0800c0dd 	.word	0x0800c0dd
 800c140:	0800c0dd 	.word	0x0800c0dd
 800c144:	0800c0dd 	.word	0x0800c0dd
 800c148:	0800c219 	.word	0x0800c219
 800c14c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c150:	e7db      	b.n	800c10a <_scanf_float+0x8e>
 800c152:	290e      	cmp	r1, #14
 800c154:	d8c2      	bhi.n	800c0dc <_scanf_float+0x60>
 800c156:	a001      	add	r0, pc, #4	; (adr r0, 800c15c <_scanf_float+0xe0>)
 800c158:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c15c:	0800c20b 	.word	0x0800c20b
 800c160:	0800c0dd 	.word	0x0800c0dd
 800c164:	0800c20b 	.word	0x0800c20b
 800c168:	0800c29f 	.word	0x0800c29f
 800c16c:	0800c0dd 	.word	0x0800c0dd
 800c170:	0800c1b9 	.word	0x0800c1b9
 800c174:	0800c1f5 	.word	0x0800c1f5
 800c178:	0800c1f5 	.word	0x0800c1f5
 800c17c:	0800c1f5 	.word	0x0800c1f5
 800c180:	0800c1f5 	.word	0x0800c1f5
 800c184:	0800c1f5 	.word	0x0800c1f5
 800c188:	0800c1f5 	.word	0x0800c1f5
 800c18c:	0800c1f5 	.word	0x0800c1f5
 800c190:	0800c1f5 	.word	0x0800c1f5
 800c194:	0800c1f5 	.word	0x0800c1f5
 800c198:	2b6e      	cmp	r3, #110	; 0x6e
 800c19a:	d809      	bhi.n	800c1b0 <_scanf_float+0x134>
 800c19c:	2b60      	cmp	r3, #96	; 0x60
 800c19e:	d8b2      	bhi.n	800c106 <_scanf_float+0x8a>
 800c1a0:	2b54      	cmp	r3, #84	; 0x54
 800c1a2:	d077      	beq.n	800c294 <_scanf_float+0x218>
 800c1a4:	2b59      	cmp	r3, #89	; 0x59
 800c1a6:	d199      	bne.n	800c0dc <_scanf_float+0x60>
 800c1a8:	2d07      	cmp	r5, #7
 800c1aa:	d197      	bne.n	800c0dc <_scanf_float+0x60>
 800c1ac:	2508      	movs	r5, #8
 800c1ae:	e029      	b.n	800c204 <_scanf_float+0x188>
 800c1b0:	2b74      	cmp	r3, #116	; 0x74
 800c1b2:	d06f      	beq.n	800c294 <_scanf_float+0x218>
 800c1b4:	2b79      	cmp	r3, #121	; 0x79
 800c1b6:	e7f6      	b.n	800c1a6 <_scanf_float+0x12a>
 800c1b8:	6821      	ldr	r1, [r4, #0]
 800c1ba:	05c8      	lsls	r0, r1, #23
 800c1bc:	d51a      	bpl.n	800c1f4 <_scanf_float+0x178>
 800c1be:	9b02      	ldr	r3, [sp, #8]
 800c1c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c1c4:	6021      	str	r1, [r4, #0]
 800c1c6:	f109 0901 	add.w	r9, r9, #1
 800c1ca:	b11b      	cbz	r3, 800c1d4 <_scanf_float+0x158>
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	3201      	adds	r2, #1
 800c1d0:	9302      	str	r3, [sp, #8]
 800c1d2:	60a2      	str	r2, [r4, #8]
 800c1d4:	68a3      	ldr	r3, [r4, #8]
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	60a3      	str	r3, [r4, #8]
 800c1da:	6923      	ldr	r3, [r4, #16]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	6123      	str	r3, [r4, #16]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	607b      	str	r3, [r7, #4]
 800c1e8:	f340 8084 	ble.w	800c2f4 <_scanf_float+0x278>
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	3301      	adds	r3, #1
 800c1f0:	603b      	str	r3, [r7, #0]
 800c1f2:	e766      	b.n	800c0c2 <_scanf_float+0x46>
 800c1f4:	eb1a 0f05 	cmn.w	sl, r5
 800c1f8:	f47f af70 	bne.w	800c0dc <_scanf_float+0x60>
 800c1fc:	6822      	ldr	r2, [r4, #0]
 800c1fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c202:	6022      	str	r2, [r4, #0]
 800c204:	f806 3b01 	strb.w	r3, [r6], #1
 800c208:	e7e4      	b.n	800c1d4 <_scanf_float+0x158>
 800c20a:	6822      	ldr	r2, [r4, #0]
 800c20c:	0610      	lsls	r0, r2, #24
 800c20e:	f57f af65 	bpl.w	800c0dc <_scanf_float+0x60>
 800c212:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c216:	e7f4      	b.n	800c202 <_scanf_float+0x186>
 800c218:	f1ba 0f00 	cmp.w	sl, #0
 800c21c:	d10e      	bne.n	800c23c <_scanf_float+0x1c0>
 800c21e:	f1b9 0f00 	cmp.w	r9, #0
 800c222:	d10e      	bne.n	800c242 <_scanf_float+0x1c6>
 800c224:	6822      	ldr	r2, [r4, #0]
 800c226:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c22a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c22e:	d108      	bne.n	800c242 <_scanf_float+0x1c6>
 800c230:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c234:	6022      	str	r2, [r4, #0]
 800c236:	f04f 0a01 	mov.w	sl, #1
 800c23a:	e7e3      	b.n	800c204 <_scanf_float+0x188>
 800c23c:	f1ba 0f02 	cmp.w	sl, #2
 800c240:	d055      	beq.n	800c2ee <_scanf_float+0x272>
 800c242:	2d01      	cmp	r5, #1
 800c244:	d002      	beq.n	800c24c <_scanf_float+0x1d0>
 800c246:	2d04      	cmp	r5, #4
 800c248:	f47f af48 	bne.w	800c0dc <_scanf_float+0x60>
 800c24c:	3501      	adds	r5, #1
 800c24e:	b2ed      	uxtb	r5, r5
 800c250:	e7d8      	b.n	800c204 <_scanf_float+0x188>
 800c252:	f1ba 0f01 	cmp.w	sl, #1
 800c256:	f47f af41 	bne.w	800c0dc <_scanf_float+0x60>
 800c25a:	f04f 0a02 	mov.w	sl, #2
 800c25e:	e7d1      	b.n	800c204 <_scanf_float+0x188>
 800c260:	b97d      	cbnz	r5, 800c282 <_scanf_float+0x206>
 800c262:	f1b9 0f00 	cmp.w	r9, #0
 800c266:	f47f af3c 	bne.w	800c0e2 <_scanf_float+0x66>
 800c26a:	6822      	ldr	r2, [r4, #0]
 800c26c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c270:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c274:	f47f af39 	bne.w	800c0ea <_scanf_float+0x6e>
 800c278:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c27c:	6022      	str	r2, [r4, #0]
 800c27e:	2501      	movs	r5, #1
 800c280:	e7c0      	b.n	800c204 <_scanf_float+0x188>
 800c282:	2d03      	cmp	r5, #3
 800c284:	d0e2      	beq.n	800c24c <_scanf_float+0x1d0>
 800c286:	2d05      	cmp	r5, #5
 800c288:	e7de      	b.n	800c248 <_scanf_float+0x1cc>
 800c28a:	2d02      	cmp	r5, #2
 800c28c:	f47f af26 	bne.w	800c0dc <_scanf_float+0x60>
 800c290:	2503      	movs	r5, #3
 800c292:	e7b7      	b.n	800c204 <_scanf_float+0x188>
 800c294:	2d06      	cmp	r5, #6
 800c296:	f47f af21 	bne.w	800c0dc <_scanf_float+0x60>
 800c29a:	2507      	movs	r5, #7
 800c29c:	e7b2      	b.n	800c204 <_scanf_float+0x188>
 800c29e:	6822      	ldr	r2, [r4, #0]
 800c2a0:	0591      	lsls	r1, r2, #22
 800c2a2:	f57f af1b 	bpl.w	800c0dc <_scanf_float+0x60>
 800c2a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c2aa:	6022      	str	r2, [r4, #0]
 800c2ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800c2b0:	e7a8      	b.n	800c204 <_scanf_float+0x188>
 800c2b2:	6822      	ldr	r2, [r4, #0]
 800c2b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c2b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c2bc:	d006      	beq.n	800c2cc <_scanf_float+0x250>
 800c2be:	0550      	lsls	r0, r2, #21
 800c2c0:	f57f af0c 	bpl.w	800c0dc <_scanf_float+0x60>
 800c2c4:	f1b9 0f00 	cmp.w	r9, #0
 800c2c8:	f43f af0f 	beq.w	800c0ea <_scanf_float+0x6e>
 800c2cc:	0591      	lsls	r1, r2, #22
 800c2ce:	bf58      	it	pl
 800c2d0:	9901      	ldrpl	r1, [sp, #4]
 800c2d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c2d6:	bf58      	it	pl
 800c2d8:	eba9 0101 	subpl.w	r1, r9, r1
 800c2dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c2e0:	bf58      	it	pl
 800c2e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c2e6:	6022      	str	r2, [r4, #0]
 800c2e8:	f04f 0900 	mov.w	r9, #0
 800c2ec:	e78a      	b.n	800c204 <_scanf_float+0x188>
 800c2ee:	f04f 0a03 	mov.w	sl, #3
 800c2f2:	e787      	b.n	800c204 <_scanf_float+0x188>
 800c2f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2f8:	4639      	mov	r1, r7
 800c2fa:	4640      	mov	r0, r8
 800c2fc:	4798      	blx	r3
 800c2fe:	2800      	cmp	r0, #0
 800c300:	f43f aedf 	beq.w	800c0c2 <_scanf_float+0x46>
 800c304:	e6ea      	b.n	800c0dc <_scanf_float+0x60>
 800c306:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c30a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c30e:	463a      	mov	r2, r7
 800c310:	4640      	mov	r0, r8
 800c312:	4798      	blx	r3
 800c314:	6923      	ldr	r3, [r4, #16]
 800c316:	3b01      	subs	r3, #1
 800c318:	6123      	str	r3, [r4, #16]
 800c31a:	e6ec      	b.n	800c0f6 <_scanf_float+0x7a>
 800c31c:	1e6b      	subs	r3, r5, #1
 800c31e:	2b06      	cmp	r3, #6
 800c320:	d825      	bhi.n	800c36e <_scanf_float+0x2f2>
 800c322:	2d02      	cmp	r5, #2
 800c324:	d836      	bhi.n	800c394 <_scanf_float+0x318>
 800c326:	455e      	cmp	r6, fp
 800c328:	f67f aee8 	bls.w	800c0fc <_scanf_float+0x80>
 800c32c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c330:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c334:	463a      	mov	r2, r7
 800c336:	4640      	mov	r0, r8
 800c338:	4798      	blx	r3
 800c33a:	6923      	ldr	r3, [r4, #16]
 800c33c:	3b01      	subs	r3, #1
 800c33e:	6123      	str	r3, [r4, #16]
 800c340:	e7f1      	b.n	800c326 <_scanf_float+0x2aa>
 800c342:	9802      	ldr	r0, [sp, #8]
 800c344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c348:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c34c:	9002      	str	r0, [sp, #8]
 800c34e:	463a      	mov	r2, r7
 800c350:	4640      	mov	r0, r8
 800c352:	4798      	blx	r3
 800c354:	6923      	ldr	r3, [r4, #16]
 800c356:	3b01      	subs	r3, #1
 800c358:	6123      	str	r3, [r4, #16]
 800c35a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c35e:	fa5f fa8a 	uxtb.w	sl, sl
 800c362:	f1ba 0f02 	cmp.w	sl, #2
 800c366:	d1ec      	bne.n	800c342 <_scanf_float+0x2c6>
 800c368:	3d03      	subs	r5, #3
 800c36a:	b2ed      	uxtb	r5, r5
 800c36c:	1b76      	subs	r6, r6, r5
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	05da      	lsls	r2, r3, #23
 800c372:	d52f      	bpl.n	800c3d4 <_scanf_float+0x358>
 800c374:	055b      	lsls	r3, r3, #21
 800c376:	d510      	bpl.n	800c39a <_scanf_float+0x31e>
 800c378:	455e      	cmp	r6, fp
 800c37a:	f67f aebf 	bls.w	800c0fc <_scanf_float+0x80>
 800c37e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c386:	463a      	mov	r2, r7
 800c388:	4640      	mov	r0, r8
 800c38a:	4798      	blx	r3
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	3b01      	subs	r3, #1
 800c390:	6123      	str	r3, [r4, #16]
 800c392:	e7f1      	b.n	800c378 <_scanf_float+0x2fc>
 800c394:	46aa      	mov	sl, r5
 800c396:	9602      	str	r6, [sp, #8]
 800c398:	e7df      	b.n	800c35a <_scanf_float+0x2de>
 800c39a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c39e:	6923      	ldr	r3, [r4, #16]
 800c3a0:	2965      	cmp	r1, #101	; 0x65
 800c3a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c3a6:	f106 35ff 	add.w	r5, r6, #4294967295
 800c3aa:	6123      	str	r3, [r4, #16]
 800c3ac:	d00c      	beq.n	800c3c8 <_scanf_float+0x34c>
 800c3ae:	2945      	cmp	r1, #69	; 0x45
 800c3b0:	d00a      	beq.n	800c3c8 <_scanf_float+0x34c>
 800c3b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3b6:	463a      	mov	r2, r7
 800c3b8:	4640      	mov	r0, r8
 800c3ba:	4798      	blx	r3
 800c3bc:	6923      	ldr	r3, [r4, #16]
 800c3be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	1eb5      	subs	r5, r6, #2
 800c3c6:	6123      	str	r3, [r4, #16]
 800c3c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3cc:	463a      	mov	r2, r7
 800c3ce:	4640      	mov	r0, r8
 800c3d0:	4798      	blx	r3
 800c3d2:	462e      	mov	r6, r5
 800c3d4:	6825      	ldr	r5, [r4, #0]
 800c3d6:	f015 0510 	ands.w	r5, r5, #16
 800c3da:	d159      	bne.n	800c490 <_scanf_float+0x414>
 800c3dc:	7035      	strb	r5, [r6, #0]
 800c3de:	6823      	ldr	r3, [r4, #0]
 800c3e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c3e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3e8:	d11b      	bne.n	800c422 <_scanf_float+0x3a6>
 800c3ea:	9b01      	ldr	r3, [sp, #4]
 800c3ec:	454b      	cmp	r3, r9
 800c3ee:	eba3 0209 	sub.w	r2, r3, r9
 800c3f2:	d123      	bne.n	800c43c <_scanf_float+0x3c0>
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	4659      	mov	r1, fp
 800c3f8:	4640      	mov	r0, r8
 800c3fa:	f000 fedf 	bl	800d1bc <_strtod_r>
 800c3fe:	6822      	ldr	r2, [r4, #0]
 800c400:	9b03      	ldr	r3, [sp, #12]
 800c402:	f012 0f02 	tst.w	r2, #2
 800c406:	ec57 6b10 	vmov	r6, r7, d0
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	d021      	beq.n	800c452 <_scanf_float+0x3d6>
 800c40e:	9903      	ldr	r1, [sp, #12]
 800c410:	1d1a      	adds	r2, r3, #4
 800c412:	600a      	str	r2, [r1, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	e9c3 6700 	strd	r6, r7, [r3]
 800c41a:	68e3      	ldr	r3, [r4, #12]
 800c41c:	3301      	adds	r3, #1
 800c41e:	60e3      	str	r3, [r4, #12]
 800c420:	e66d      	b.n	800c0fe <_scanf_float+0x82>
 800c422:	9b04      	ldr	r3, [sp, #16]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d0e5      	beq.n	800c3f4 <_scanf_float+0x378>
 800c428:	9905      	ldr	r1, [sp, #20]
 800c42a:	230a      	movs	r3, #10
 800c42c:	462a      	mov	r2, r5
 800c42e:	3101      	adds	r1, #1
 800c430:	4640      	mov	r0, r8
 800c432:	f000 ffb3 	bl	800d39c <_strtol_r>
 800c436:	9b04      	ldr	r3, [sp, #16]
 800c438:	9e05      	ldr	r6, [sp, #20]
 800c43a:	1ac2      	subs	r2, r0, r3
 800c43c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c440:	429e      	cmp	r6, r3
 800c442:	bf28      	it	cs
 800c444:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c448:	4912      	ldr	r1, [pc, #72]	; (800c494 <_scanf_float+0x418>)
 800c44a:	4630      	mov	r0, r6
 800c44c:	f000 f860 	bl	800c510 <siprintf>
 800c450:	e7d0      	b.n	800c3f4 <_scanf_float+0x378>
 800c452:	9903      	ldr	r1, [sp, #12]
 800c454:	f012 0f04 	tst.w	r2, #4
 800c458:	f103 0204 	add.w	r2, r3, #4
 800c45c:	600a      	str	r2, [r1, #0]
 800c45e:	d1d9      	bne.n	800c414 <_scanf_float+0x398>
 800c460:	f8d3 8000 	ldr.w	r8, [r3]
 800c464:	ee10 2a10 	vmov	r2, s0
 800c468:	ee10 0a10 	vmov	r0, s0
 800c46c:	463b      	mov	r3, r7
 800c46e:	4639      	mov	r1, r7
 800c470:	f7f4 fb74 	bl	8000b5c <__aeabi_dcmpun>
 800c474:	b128      	cbz	r0, 800c482 <_scanf_float+0x406>
 800c476:	4808      	ldr	r0, [pc, #32]	; (800c498 <_scanf_float+0x41c>)
 800c478:	f000 f810 	bl	800c49c <nanf>
 800c47c:	ed88 0a00 	vstr	s0, [r8]
 800c480:	e7cb      	b.n	800c41a <_scanf_float+0x39e>
 800c482:	4630      	mov	r0, r6
 800c484:	4639      	mov	r1, r7
 800c486:	f7f4 fbc7 	bl	8000c18 <__aeabi_d2f>
 800c48a:	f8c8 0000 	str.w	r0, [r8]
 800c48e:	e7c4      	b.n	800c41a <_scanf_float+0x39e>
 800c490:	2500      	movs	r5, #0
 800c492:	e634      	b.n	800c0fe <_scanf_float+0x82>
 800c494:	08011200 	.word	0x08011200
 800c498:	08011307 	.word	0x08011307

0800c49c <nanf>:
 800c49c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c4a4 <nanf+0x8>
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	7fc00000 	.word	0x7fc00000

0800c4a8 <sniprintf>:
 800c4a8:	b40c      	push	{r2, r3}
 800c4aa:	b530      	push	{r4, r5, lr}
 800c4ac:	4b17      	ldr	r3, [pc, #92]	; (800c50c <sniprintf+0x64>)
 800c4ae:	1e0c      	subs	r4, r1, #0
 800c4b0:	681d      	ldr	r5, [r3, #0]
 800c4b2:	b09d      	sub	sp, #116	; 0x74
 800c4b4:	da08      	bge.n	800c4c8 <sniprintf+0x20>
 800c4b6:	238b      	movs	r3, #139	; 0x8b
 800c4b8:	602b      	str	r3, [r5, #0]
 800c4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c4be:	b01d      	add	sp, #116	; 0x74
 800c4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4c4:	b002      	add	sp, #8
 800c4c6:	4770      	bx	lr
 800c4c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c4cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c4d0:	bf14      	ite	ne
 800c4d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c4d6:	4623      	moveq	r3, r4
 800c4d8:	9304      	str	r3, [sp, #16]
 800c4da:	9307      	str	r3, [sp, #28]
 800c4dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4e0:	9002      	str	r0, [sp, #8]
 800c4e2:	9006      	str	r0, [sp, #24]
 800c4e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c4e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c4ea:	ab21      	add	r3, sp, #132	; 0x84
 800c4ec:	a902      	add	r1, sp, #8
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	9301      	str	r3, [sp, #4]
 800c4f2:	f002 ffb1 	bl	800f458 <_svfiprintf_r>
 800c4f6:	1c43      	adds	r3, r0, #1
 800c4f8:	bfbc      	itt	lt
 800c4fa:	238b      	movlt	r3, #139	; 0x8b
 800c4fc:	602b      	strlt	r3, [r5, #0]
 800c4fe:	2c00      	cmp	r4, #0
 800c500:	d0dd      	beq.n	800c4be <sniprintf+0x16>
 800c502:	9b02      	ldr	r3, [sp, #8]
 800c504:	2200      	movs	r2, #0
 800c506:	701a      	strb	r2, [r3, #0]
 800c508:	e7d9      	b.n	800c4be <sniprintf+0x16>
 800c50a:	bf00      	nop
 800c50c:	20000020 	.word	0x20000020

0800c510 <siprintf>:
 800c510:	b40e      	push	{r1, r2, r3}
 800c512:	b500      	push	{lr}
 800c514:	b09c      	sub	sp, #112	; 0x70
 800c516:	ab1d      	add	r3, sp, #116	; 0x74
 800c518:	9002      	str	r0, [sp, #8]
 800c51a:	9006      	str	r0, [sp, #24]
 800c51c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c520:	4809      	ldr	r0, [pc, #36]	; (800c548 <siprintf+0x38>)
 800c522:	9107      	str	r1, [sp, #28]
 800c524:	9104      	str	r1, [sp, #16]
 800c526:	4909      	ldr	r1, [pc, #36]	; (800c54c <siprintf+0x3c>)
 800c528:	f853 2b04 	ldr.w	r2, [r3], #4
 800c52c:	9105      	str	r1, [sp, #20]
 800c52e:	6800      	ldr	r0, [r0, #0]
 800c530:	9301      	str	r3, [sp, #4]
 800c532:	a902      	add	r1, sp, #8
 800c534:	f002 ff90 	bl	800f458 <_svfiprintf_r>
 800c538:	9b02      	ldr	r3, [sp, #8]
 800c53a:	2200      	movs	r2, #0
 800c53c:	701a      	strb	r2, [r3, #0]
 800c53e:	b01c      	add	sp, #112	; 0x70
 800c540:	f85d eb04 	ldr.w	lr, [sp], #4
 800c544:	b003      	add	sp, #12
 800c546:	4770      	bx	lr
 800c548:	20000020 	.word	0x20000020
 800c54c:	ffff0208 	.word	0xffff0208

0800c550 <strncpy>:
 800c550:	b510      	push	{r4, lr}
 800c552:	3901      	subs	r1, #1
 800c554:	4603      	mov	r3, r0
 800c556:	b132      	cbz	r2, 800c566 <strncpy+0x16>
 800c558:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c55c:	f803 4b01 	strb.w	r4, [r3], #1
 800c560:	3a01      	subs	r2, #1
 800c562:	2c00      	cmp	r4, #0
 800c564:	d1f7      	bne.n	800c556 <strncpy+0x6>
 800c566:	441a      	add	r2, r3
 800c568:	2100      	movs	r1, #0
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d100      	bne.n	800c570 <strncpy+0x20>
 800c56e:	bd10      	pop	{r4, pc}
 800c570:	f803 1b01 	strb.w	r1, [r3], #1
 800c574:	e7f9      	b.n	800c56a <strncpy+0x1a>

0800c576 <sulp>:
 800c576:	b570      	push	{r4, r5, r6, lr}
 800c578:	4604      	mov	r4, r0
 800c57a:	460d      	mov	r5, r1
 800c57c:	ec45 4b10 	vmov	d0, r4, r5
 800c580:	4616      	mov	r6, r2
 800c582:	f002 fcc7 	bl	800ef14 <__ulp>
 800c586:	ec51 0b10 	vmov	r0, r1, d0
 800c58a:	b17e      	cbz	r6, 800c5ac <sulp+0x36>
 800c58c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c590:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c594:	2b00      	cmp	r3, #0
 800c596:	dd09      	ble.n	800c5ac <sulp+0x36>
 800c598:	051b      	lsls	r3, r3, #20
 800c59a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c59e:	2400      	movs	r4, #0
 800c5a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c5a4:	4622      	mov	r2, r4
 800c5a6:	462b      	mov	r3, r5
 800c5a8:	f7f4 f83e 	bl	8000628 <__aeabi_dmul>
 800c5ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c5b0 <_strtod_l>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	ed2d 8b02 	vpush	{d8}
 800c5b8:	b09d      	sub	sp, #116	; 0x74
 800c5ba:	461f      	mov	r7, r3
 800c5bc:	2300      	movs	r3, #0
 800c5be:	9318      	str	r3, [sp, #96]	; 0x60
 800c5c0:	4ba2      	ldr	r3, [pc, #648]	; (800c84c <_strtod_l+0x29c>)
 800c5c2:	9213      	str	r2, [sp, #76]	; 0x4c
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	9305      	str	r3, [sp, #20]
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	4688      	mov	r8, r1
 800c5ce:	f7f3 fe11 	bl	80001f4 <strlen>
 800c5d2:	f04f 0a00 	mov.w	sl, #0
 800c5d6:	4605      	mov	r5, r0
 800c5d8:	f04f 0b00 	mov.w	fp, #0
 800c5dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c5e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5e2:	781a      	ldrb	r2, [r3, #0]
 800c5e4:	2a2b      	cmp	r2, #43	; 0x2b
 800c5e6:	d04e      	beq.n	800c686 <_strtod_l+0xd6>
 800c5e8:	d83b      	bhi.n	800c662 <_strtod_l+0xb2>
 800c5ea:	2a0d      	cmp	r2, #13
 800c5ec:	d834      	bhi.n	800c658 <_strtod_l+0xa8>
 800c5ee:	2a08      	cmp	r2, #8
 800c5f0:	d834      	bhi.n	800c65c <_strtod_l+0xac>
 800c5f2:	2a00      	cmp	r2, #0
 800c5f4:	d03e      	beq.n	800c674 <_strtod_l+0xc4>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	930a      	str	r3, [sp, #40]	; 0x28
 800c5fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c5fc:	7833      	ldrb	r3, [r6, #0]
 800c5fe:	2b30      	cmp	r3, #48	; 0x30
 800c600:	f040 80b0 	bne.w	800c764 <_strtod_l+0x1b4>
 800c604:	7873      	ldrb	r3, [r6, #1]
 800c606:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c60a:	2b58      	cmp	r3, #88	; 0x58
 800c60c:	d168      	bne.n	800c6e0 <_strtod_l+0x130>
 800c60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c610:	9301      	str	r3, [sp, #4]
 800c612:	ab18      	add	r3, sp, #96	; 0x60
 800c614:	9702      	str	r7, [sp, #8]
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	4a8d      	ldr	r2, [pc, #564]	; (800c850 <_strtod_l+0x2a0>)
 800c61a:	ab19      	add	r3, sp, #100	; 0x64
 800c61c:	a917      	add	r1, sp, #92	; 0x5c
 800c61e:	4620      	mov	r0, r4
 800c620:	f001 fdd2 	bl	800e1c8 <__gethex>
 800c624:	f010 0707 	ands.w	r7, r0, #7
 800c628:	4605      	mov	r5, r0
 800c62a:	d005      	beq.n	800c638 <_strtod_l+0x88>
 800c62c:	2f06      	cmp	r7, #6
 800c62e:	d12c      	bne.n	800c68a <_strtod_l+0xda>
 800c630:	3601      	adds	r6, #1
 800c632:	2300      	movs	r3, #0
 800c634:	9617      	str	r6, [sp, #92]	; 0x5c
 800c636:	930a      	str	r3, [sp, #40]	; 0x28
 800c638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f040 8590 	bne.w	800d160 <_strtod_l+0xbb0>
 800c640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c642:	b1eb      	cbz	r3, 800c680 <_strtod_l+0xd0>
 800c644:	4652      	mov	r2, sl
 800c646:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c64a:	ec43 2b10 	vmov	d0, r2, r3
 800c64e:	b01d      	add	sp, #116	; 0x74
 800c650:	ecbd 8b02 	vpop	{d8}
 800c654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c658:	2a20      	cmp	r2, #32
 800c65a:	d1cc      	bne.n	800c5f6 <_strtod_l+0x46>
 800c65c:	3301      	adds	r3, #1
 800c65e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c660:	e7be      	b.n	800c5e0 <_strtod_l+0x30>
 800c662:	2a2d      	cmp	r2, #45	; 0x2d
 800c664:	d1c7      	bne.n	800c5f6 <_strtod_l+0x46>
 800c666:	2201      	movs	r2, #1
 800c668:	920a      	str	r2, [sp, #40]	; 0x28
 800c66a:	1c5a      	adds	r2, r3, #1
 800c66c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c66e:	785b      	ldrb	r3, [r3, #1]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1c2      	bne.n	800c5fa <_strtod_l+0x4a>
 800c674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c676:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f040 856e 	bne.w	800d15c <_strtod_l+0xbac>
 800c680:	4652      	mov	r2, sl
 800c682:	465b      	mov	r3, fp
 800c684:	e7e1      	b.n	800c64a <_strtod_l+0x9a>
 800c686:	2200      	movs	r2, #0
 800c688:	e7ee      	b.n	800c668 <_strtod_l+0xb8>
 800c68a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c68c:	b13a      	cbz	r2, 800c69e <_strtod_l+0xee>
 800c68e:	2135      	movs	r1, #53	; 0x35
 800c690:	a81a      	add	r0, sp, #104	; 0x68
 800c692:	f002 fd4a 	bl	800f12a <__copybits>
 800c696:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c698:	4620      	mov	r0, r4
 800c69a:	f002 f909 	bl	800e8b0 <_Bfree>
 800c69e:	3f01      	subs	r7, #1
 800c6a0:	2f04      	cmp	r7, #4
 800c6a2:	d806      	bhi.n	800c6b2 <_strtod_l+0x102>
 800c6a4:	e8df f007 	tbb	[pc, r7]
 800c6a8:	1714030a 	.word	0x1714030a
 800c6ac:	0a          	.byte	0x0a
 800c6ad:	00          	.byte	0x00
 800c6ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c6b2:	0728      	lsls	r0, r5, #28
 800c6b4:	d5c0      	bpl.n	800c638 <_strtod_l+0x88>
 800c6b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c6ba:	e7bd      	b.n	800c638 <_strtod_l+0x88>
 800c6bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c6c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c6c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c6c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c6ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c6ce:	e7f0      	b.n	800c6b2 <_strtod_l+0x102>
 800c6d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c854 <_strtod_l+0x2a4>
 800c6d4:	e7ed      	b.n	800c6b2 <_strtod_l+0x102>
 800c6d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c6da:	f04f 3aff 	mov.w	sl, #4294967295
 800c6de:	e7e8      	b.n	800c6b2 <_strtod_l+0x102>
 800c6e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6e2:	1c5a      	adds	r2, r3, #1
 800c6e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c6e6:	785b      	ldrb	r3, [r3, #1]
 800c6e8:	2b30      	cmp	r3, #48	; 0x30
 800c6ea:	d0f9      	beq.n	800c6e0 <_strtod_l+0x130>
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d0a3      	beq.n	800c638 <_strtod_l+0x88>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	f04f 0900 	mov.w	r9, #0
 800c6f6:	9304      	str	r3, [sp, #16]
 800c6f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6fa:	9308      	str	r3, [sp, #32]
 800c6fc:	f8cd 901c 	str.w	r9, [sp, #28]
 800c700:	464f      	mov	r7, r9
 800c702:	220a      	movs	r2, #10
 800c704:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c706:	7806      	ldrb	r6, [r0, #0]
 800c708:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c70c:	b2d9      	uxtb	r1, r3
 800c70e:	2909      	cmp	r1, #9
 800c710:	d92a      	bls.n	800c768 <_strtod_l+0x1b8>
 800c712:	9905      	ldr	r1, [sp, #20]
 800c714:	462a      	mov	r2, r5
 800c716:	f003 f913 	bl	800f940 <strncmp>
 800c71a:	b398      	cbz	r0, 800c784 <_strtod_l+0x1d4>
 800c71c:	2000      	movs	r0, #0
 800c71e:	4632      	mov	r2, r6
 800c720:	463d      	mov	r5, r7
 800c722:	9005      	str	r0, [sp, #20]
 800c724:	4603      	mov	r3, r0
 800c726:	2a65      	cmp	r2, #101	; 0x65
 800c728:	d001      	beq.n	800c72e <_strtod_l+0x17e>
 800c72a:	2a45      	cmp	r2, #69	; 0x45
 800c72c:	d118      	bne.n	800c760 <_strtod_l+0x1b0>
 800c72e:	b91d      	cbnz	r5, 800c738 <_strtod_l+0x188>
 800c730:	9a04      	ldr	r2, [sp, #16]
 800c732:	4302      	orrs	r2, r0
 800c734:	d09e      	beq.n	800c674 <_strtod_l+0xc4>
 800c736:	2500      	movs	r5, #0
 800c738:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c73c:	f108 0201 	add.w	r2, r8, #1
 800c740:	9217      	str	r2, [sp, #92]	; 0x5c
 800c742:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c746:	2a2b      	cmp	r2, #43	; 0x2b
 800c748:	d075      	beq.n	800c836 <_strtod_l+0x286>
 800c74a:	2a2d      	cmp	r2, #45	; 0x2d
 800c74c:	d07b      	beq.n	800c846 <_strtod_l+0x296>
 800c74e:	f04f 0c00 	mov.w	ip, #0
 800c752:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c756:	2909      	cmp	r1, #9
 800c758:	f240 8082 	bls.w	800c860 <_strtod_l+0x2b0>
 800c75c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c760:	2600      	movs	r6, #0
 800c762:	e09d      	b.n	800c8a0 <_strtod_l+0x2f0>
 800c764:	2300      	movs	r3, #0
 800c766:	e7c4      	b.n	800c6f2 <_strtod_l+0x142>
 800c768:	2f08      	cmp	r7, #8
 800c76a:	bfd8      	it	le
 800c76c:	9907      	ldrle	r1, [sp, #28]
 800c76e:	f100 0001 	add.w	r0, r0, #1
 800c772:	bfda      	itte	le
 800c774:	fb02 3301 	mlale	r3, r2, r1, r3
 800c778:	9307      	strle	r3, [sp, #28]
 800c77a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c77e:	3701      	adds	r7, #1
 800c780:	9017      	str	r0, [sp, #92]	; 0x5c
 800c782:	e7bf      	b.n	800c704 <_strtod_l+0x154>
 800c784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c786:	195a      	adds	r2, r3, r5
 800c788:	9217      	str	r2, [sp, #92]	; 0x5c
 800c78a:	5d5a      	ldrb	r2, [r3, r5]
 800c78c:	2f00      	cmp	r7, #0
 800c78e:	d037      	beq.n	800c800 <_strtod_l+0x250>
 800c790:	9005      	str	r0, [sp, #20]
 800c792:	463d      	mov	r5, r7
 800c794:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c798:	2b09      	cmp	r3, #9
 800c79a:	d912      	bls.n	800c7c2 <_strtod_l+0x212>
 800c79c:	2301      	movs	r3, #1
 800c79e:	e7c2      	b.n	800c726 <_strtod_l+0x176>
 800c7a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7a2:	1c5a      	adds	r2, r3, #1
 800c7a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c7a6:	785a      	ldrb	r2, [r3, #1]
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	2a30      	cmp	r2, #48	; 0x30
 800c7ac:	d0f8      	beq.n	800c7a0 <_strtod_l+0x1f0>
 800c7ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c7b2:	2b08      	cmp	r3, #8
 800c7b4:	f200 84d9 	bhi.w	800d16a <_strtod_l+0xbba>
 800c7b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7ba:	9005      	str	r0, [sp, #20]
 800c7bc:	2000      	movs	r0, #0
 800c7be:	9308      	str	r3, [sp, #32]
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	3a30      	subs	r2, #48	; 0x30
 800c7c4:	f100 0301 	add.w	r3, r0, #1
 800c7c8:	d014      	beq.n	800c7f4 <_strtod_l+0x244>
 800c7ca:	9905      	ldr	r1, [sp, #20]
 800c7cc:	4419      	add	r1, r3
 800c7ce:	9105      	str	r1, [sp, #20]
 800c7d0:	462b      	mov	r3, r5
 800c7d2:	eb00 0e05 	add.w	lr, r0, r5
 800c7d6:	210a      	movs	r1, #10
 800c7d8:	4573      	cmp	r3, lr
 800c7da:	d113      	bne.n	800c804 <_strtod_l+0x254>
 800c7dc:	182b      	adds	r3, r5, r0
 800c7de:	2b08      	cmp	r3, #8
 800c7e0:	f105 0501 	add.w	r5, r5, #1
 800c7e4:	4405      	add	r5, r0
 800c7e6:	dc1c      	bgt.n	800c822 <_strtod_l+0x272>
 800c7e8:	9907      	ldr	r1, [sp, #28]
 800c7ea:	230a      	movs	r3, #10
 800c7ec:	fb03 2301 	mla	r3, r3, r1, r2
 800c7f0:	9307      	str	r3, [sp, #28]
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c7f6:	1c51      	adds	r1, r2, #1
 800c7f8:	9117      	str	r1, [sp, #92]	; 0x5c
 800c7fa:	7852      	ldrb	r2, [r2, #1]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	e7c9      	b.n	800c794 <_strtod_l+0x1e4>
 800c800:	4638      	mov	r0, r7
 800c802:	e7d2      	b.n	800c7aa <_strtod_l+0x1fa>
 800c804:	2b08      	cmp	r3, #8
 800c806:	dc04      	bgt.n	800c812 <_strtod_l+0x262>
 800c808:	9e07      	ldr	r6, [sp, #28]
 800c80a:	434e      	muls	r6, r1
 800c80c:	9607      	str	r6, [sp, #28]
 800c80e:	3301      	adds	r3, #1
 800c810:	e7e2      	b.n	800c7d8 <_strtod_l+0x228>
 800c812:	f103 0c01 	add.w	ip, r3, #1
 800c816:	f1bc 0f10 	cmp.w	ip, #16
 800c81a:	bfd8      	it	le
 800c81c:	fb01 f909 	mulle.w	r9, r1, r9
 800c820:	e7f5      	b.n	800c80e <_strtod_l+0x25e>
 800c822:	2d10      	cmp	r5, #16
 800c824:	bfdc      	itt	le
 800c826:	230a      	movle	r3, #10
 800c828:	fb03 2909 	mlale	r9, r3, r9, r2
 800c82c:	e7e1      	b.n	800c7f2 <_strtod_l+0x242>
 800c82e:	2300      	movs	r3, #0
 800c830:	9305      	str	r3, [sp, #20]
 800c832:	2301      	movs	r3, #1
 800c834:	e77c      	b.n	800c730 <_strtod_l+0x180>
 800c836:	f04f 0c00 	mov.w	ip, #0
 800c83a:	f108 0202 	add.w	r2, r8, #2
 800c83e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c840:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c844:	e785      	b.n	800c752 <_strtod_l+0x1a2>
 800c846:	f04f 0c01 	mov.w	ip, #1
 800c84a:	e7f6      	b.n	800c83a <_strtod_l+0x28a>
 800c84c:	080114e8 	.word	0x080114e8
 800c850:	08011208 	.word	0x08011208
 800c854:	7ff00000 	.word	0x7ff00000
 800c858:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c85a:	1c51      	adds	r1, r2, #1
 800c85c:	9117      	str	r1, [sp, #92]	; 0x5c
 800c85e:	7852      	ldrb	r2, [r2, #1]
 800c860:	2a30      	cmp	r2, #48	; 0x30
 800c862:	d0f9      	beq.n	800c858 <_strtod_l+0x2a8>
 800c864:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c868:	2908      	cmp	r1, #8
 800c86a:	f63f af79 	bhi.w	800c760 <_strtod_l+0x1b0>
 800c86e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c872:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c874:	9206      	str	r2, [sp, #24]
 800c876:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c878:	1c51      	adds	r1, r2, #1
 800c87a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c87c:	7852      	ldrb	r2, [r2, #1]
 800c87e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c882:	2e09      	cmp	r6, #9
 800c884:	d937      	bls.n	800c8f6 <_strtod_l+0x346>
 800c886:	9e06      	ldr	r6, [sp, #24]
 800c888:	1b89      	subs	r1, r1, r6
 800c88a:	2908      	cmp	r1, #8
 800c88c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c890:	dc02      	bgt.n	800c898 <_strtod_l+0x2e8>
 800c892:	4576      	cmp	r6, lr
 800c894:	bfa8      	it	ge
 800c896:	4676      	movge	r6, lr
 800c898:	f1bc 0f00 	cmp.w	ip, #0
 800c89c:	d000      	beq.n	800c8a0 <_strtod_l+0x2f0>
 800c89e:	4276      	negs	r6, r6
 800c8a0:	2d00      	cmp	r5, #0
 800c8a2:	d14d      	bne.n	800c940 <_strtod_l+0x390>
 800c8a4:	9904      	ldr	r1, [sp, #16]
 800c8a6:	4301      	orrs	r1, r0
 800c8a8:	f47f aec6 	bne.w	800c638 <_strtod_l+0x88>
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f47f aee1 	bne.w	800c674 <_strtod_l+0xc4>
 800c8b2:	2a69      	cmp	r2, #105	; 0x69
 800c8b4:	d027      	beq.n	800c906 <_strtod_l+0x356>
 800c8b6:	dc24      	bgt.n	800c902 <_strtod_l+0x352>
 800c8b8:	2a49      	cmp	r2, #73	; 0x49
 800c8ba:	d024      	beq.n	800c906 <_strtod_l+0x356>
 800c8bc:	2a4e      	cmp	r2, #78	; 0x4e
 800c8be:	f47f aed9 	bne.w	800c674 <_strtod_l+0xc4>
 800c8c2:	499f      	ldr	r1, [pc, #636]	; (800cb40 <_strtod_l+0x590>)
 800c8c4:	a817      	add	r0, sp, #92	; 0x5c
 800c8c6:	f001 fed7 	bl	800e678 <__match>
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	f43f aed2 	beq.w	800c674 <_strtod_l+0xc4>
 800c8d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	2b28      	cmp	r3, #40	; 0x28
 800c8d6:	d12d      	bne.n	800c934 <_strtod_l+0x384>
 800c8d8:	499a      	ldr	r1, [pc, #616]	; (800cb44 <_strtod_l+0x594>)
 800c8da:	aa1a      	add	r2, sp, #104	; 0x68
 800c8dc:	a817      	add	r0, sp, #92	; 0x5c
 800c8de:	f001 fedf 	bl	800e6a0 <__hexnan>
 800c8e2:	2805      	cmp	r0, #5
 800c8e4:	d126      	bne.n	800c934 <_strtod_l+0x384>
 800c8e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c8e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c8ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c8f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c8f4:	e6a0      	b.n	800c638 <_strtod_l+0x88>
 800c8f6:	210a      	movs	r1, #10
 800c8f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c8fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c900:	e7b9      	b.n	800c876 <_strtod_l+0x2c6>
 800c902:	2a6e      	cmp	r2, #110	; 0x6e
 800c904:	e7db      	b.n	800c8be <_strtod_l+0x30e>
 800c906:	4990      	ldr	r1, [pc, #576]	; (800cb48 <_strtod_l+0x598>)
 800c908:	a817      	add	r0, sp, #92	; 0x5c
 800c90a:	f001 feb5 	bl	800e678 <__match>
 800c90e:	2800      	cmp	r0, #0
 800c910:	f43f aeb0 	beq.w	800c674 <_strtod_l+0xc4>
 800c914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c916:	498d      	ldr	r1, [pc, #564]	; (800cb4c <_strtod_l+0x59c>)
 800c918:	3b01      	subs	r3, #1
 800c91a:	a817      	add	r0, sp, #92	; 0x5c
 800c91c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c91e:	f001 feab 	bl	800e678 <__match>
 800c922:	b910      	cbnz	r0, 800c92a <_strtod_l+0x37a>
 800c924:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c926:	3301      	adds	r3, #1
 800c928:	9317      	str	r3, [sp, #92]	; 0x5c
 800c92a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800cb5c <_strtod_l+0x5ac>
 800c92e:	f04f 0a00 	mov.w	sl, #0
 800c932:	e681      	b.n	800c638 <_strtod_l+0x88>
 800c934:	4886      	ldr	r0, [pc, #536]	; (800cb50 <_strtod_l+0x5a0>)
 800c936:	f002 ffeb 	bl	800f910 <nan>
 800c93a:	ec5b ab10 	vmov	sl, fp, d0
 800c93e:	e67b      	b.n	800c638 <_strtod_l+0x88>
 800c940:	9b05      	ldr	r3, [sp, #20]
 800c942:	9807      	ldr	r0, [sp, #28]
 800c944:	1af3      	subs	r3, r6, r3
 800c946:	2f00      	cmp	r7, #0
 800c948:	bf08      	it	eq
 800c94a:	462f      	moveq	r7, r5
 800c94c:	2d10      	cmp	r5, #16
 800c94e:	9306      	str	r3, [sp, #24]
 800c950:	46a8      	mov	r8, r5
 800c952:	bfa8      	it	ge
 800c954:	f04f 0810 	movge.w	r8, #16
 800c958:	f7f3 fdec 	bl	8000534 <__aeabi_ui2d>
 800c95c:	2d09      	cmp	r5, #9
 800c95e:	4682      	mov	sl, r0
 800c960:	468b      	mov	fp, r1
 800c962:	dd13      	ble.n	800c98c <_strtod_l+0x3dc>
 800c964:	4b7b      	ldr	r3, [pc, #492]	; (800cb54 <_strtod_l+0x5a4>)
 800c966:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c96a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c96e:	f7f3 fe5b 	bl	8000628 <__aeabi_dmul>
 800c972:	4682      	mov	sl, r0
 800c974:	4648      	mov	r0, r9
 800c976:	468b      	mov	fp, r1
 800c978:	f7f3 fddc 	bl	8000534 <__aeabi_ui2d>
 800c97c:	4602      	mov	r2, r0
 800c97e:	460b      	mov	r3, r1
 800c980:	4650      	mov	r0, sl
 800c982:	4659      	mov	r1, fp
 800c984:	f7f3 fc9a 	bl	80002bc <__adddf3>
 800c988:	4682      	mov	sl, r0
 800c98a:	468b      	mov	fp, r1
 800c98c:	2d0f      	cmp	r5, #15
 800c98e:	dc38      	bgt.n	800ca02 <_strtod_l+0x452>
 800c990:	9b06      	ldr	r3, [sp, #24]
 800c992:	2b00      	cmp	r3, #0
 800c994:	f43f ae50 	beq.w	800c638 <_strtod_l+0x88>
 800c998:	dd24      	ble.n	800c9e4 <_strtod_l+0x434>
 800c99a:	2b16      	cmp	r3, #22
 800c99c:	dc0b      	bgt.n	800c9b6 <_strtod_l+0x406>
 800c99e:	496d      	ldr	r1, [pc, #436]	; (800cb54 <_strtod_l+0x5a4>)
 800c9a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c9a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9a8:	4652      	mov	r2, sl
 800c9aa:	465b      	mov	r3, fp
 800c9ac:	f7f3 fe3c 	bl	8000628 <__aeabi_dmul>
 800c9b0:	4682      	mov	sl, r0
 800c9b2:	468b      	mov	fp, r1
 800c9b4:	e640      	b.n	800c638 <_strtod_l+0x88>
 800c9b6:	9a06      	ldr	r2, [sp, #24]
 800c9b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	db20      	blt.n	800ca02 <_strtod_l+0x452>
 800c9c0:	4c64      	ldr	r4, [pc, #400]	; (800cb54 <_strtod_l+0x5a4>)
 800c9c2:	f1c5 050f 	rsb	r5, r5, #15
 800c9c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c9ca:	4652      	mov	r2, sl
 800c9cc:	465b      	mov	r3, fp
 800c9ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9d2:	f7f3 fe29 	bl	8000628 <__aeabi_dmul>
 800c9d6:	9b06      	ldr	r3, [sp, #24]
 800c9d8:	1b5d      	subs	r5, r3, r5
 800c9da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c9de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c9e2:	e7e3      	b.n	800c9ac <_strtod_l+0x3fc>
 800c9e4:	9b06      	ldr	r3, [sp, #24]
 800c9e6:	3316      	adds	r3, #22
 800c9e8:	db0b      	blt.n	800ca02 <_strtod_l+0x452>
 800c9ea:	9b05      	ldr	r3, [sp, #20]
 800c9ec:	1b9e      	subs	r6, r3, r6
 800c9ee:	4b59      	ldr	r3, [pc, #356]	; (800cb54 <_strtod_l+0x5a4>)
 800c9f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c9f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c9f8:	4650      	mov	r0, sl
 800c9fa:	4659      	mov	r1, fp
 800c9fc:	f7f3 ff3e 	bl	800087c <__aeabi_ddiv>
 800ca00:	e7d6      	b.n	800c9b0 <_strtod_l+0x400>
 800ca02:	9b06      	ldr	r3, [sp, #24]
 800ca04:	eba5 0808 	sub.w	r8, r5, r8
 800ca08:	4498      	add	r8, r3
 800ca0a:	f1b8 0f00 	cmp.w	r8, #0
 800ca0e:	dd74      	ble.n	800cafa <_strtod_l+0x54a>
 800ca10:	f018 030f 	ands.w	r3, r8, #15
 800ca14:	d00a      	beq.n	800ca2c <_strtod_l+0x47c>
 800ca16:	494f      	ldr	r1, [pc, #316]	; (800cb54 <_strtod_l+0x5a4>)
 800ca18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca1c:	4652      	mov	r2, sl
 800ca1e:	465b      	mov	r3, fp
 800ca20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca24:	f7f3 fe00 	bl	8000628 <__aeabi_dmul>
 800ca28:	4682      	mov	sl, r0
 800ca2a:	468b      	mov	fp, r1
 800ca2c:	f038 080f 	bics.w	r8, r8, #15
 800ca30:	d04f      	beq.n	800cad2 <_strtod_l+0x522>
 800ca32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ca36:	dd22      	ble.n	800ca7e <_strtod_l+0x4ce>
 800ca38:	2500      	movs	r5, #0
 800ca3a:	462e      	mov	r6, r5
 800ca3c:	9507      	str	r5, [sp, #28]
 800ca3e:	9505      	str	r5, [sp, #20]
 800ca40:	2322      	movs	r3, #34	; 0x22
 800ca42:	f8df b118 	ldr.w	fp, [pc, #280]	; 800cb5c <_strtod_l+0x5ac>
 800ca46:	6023      	str	r3, [r4, #0]
 800ca48:	f04f 0a00 	mov.w	sl, #0
 800ca4c:	9b07      	ldr	r3, [sp, #28]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f43f adf2 	beq.w	800c638 <_strtod_l+0x88>
 800ca54:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ca56:	4620      	mov	r0, r4
 800ca58:	f001 ff2a 	bl	800e8b0 <_Bfree>
 800ca5c:	9905      	ldr	r1, [sp, #20]
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f001 ff26 	bl	800e8b0 <_Bfree>
 800ca64:	4631      	mov	r1, r6
 800ca66:	4620      	mov	r0, r4
 800ca68:	f001 ff22 	bl	800e8b0 <_Bfree>
 800ca6c:	9907      	ldr	r1, [sp, #28]
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f001 ff1e 	bl	800e8b0 <_Bfree>
 800ca74:	4629      	mov	r1, r5
 800ca76:	4620      	mov	r0, r4
 800ca78:	f001 ff1a 	bl	800e8b0 <_Bfree>
 800ca7c:	e5dc      	b.n	800c638 <_strtod_l+0x88>
 800ca7e:	4b36      	ldr	r3, [pc, #216]	; (800cb58 <_strtod_l+0x5a8>)
 800ca80:	9304      	str	r3, [sp, #16]
 800ca82:	2300      	movs	r3, #0
 800ca84:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ca88:	4650      	mov	r0, sl
 800ca8a:	4659      	mov	r1, fp
 800ca8c:	4699      	mov	r9, r3
 800ca8e:	f1b8 0f01 	cmp.w	r8, #1
 800ca92:	dc21      	bgt.n	800cad8 <_strtod_l+0x528>
 800ca94:	b10b      	cbz	r3, 800ca9a <_strtod_l+0x4ea>
 800ca96:	4682      	mov	sl, r0
 800ca98:	468b      	mov	fp, r1
 800ca9a:	4b2f      	ldr	r3, [pc, #188]	; (800cb58 <_strtod_l+0x5a8>)
 800ca9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800caa0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800caa4:	4652      	mov	r2, sl
 800caa6:	465b      	mov	r3, fp
 800caa8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800caac:	f7f3 fdbc 	bl	8000628 <__aeabi_dmul>
 800cab0:	4b2a      	ldr	r3, [pc, #168]	; (800cb5c <_strtod_l+0x5ac>)
 800cab2:	460a      	mov	r2, r1
 800cab4:	400b      	ands	r3, r1
 800cab6:	492a      	ldr	r1, [pc, #168]	; (800cb60 <_strtod_l+0x5b0>)
 800cab8:	428b      	cmp	r3, r1
 800caba:	4682      	mov	sl, r0
 800cabc:	d8bc      	bhi.n	800ca38 <_strtod_l+0x488>
 800cabe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cac2:	428b      	cmp	r3, r1
 800cac4:	bf86      	itte	hi
 800cac6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800cb64 <_strtod_l+0x5b4>
 800caca:	f04f 3aff 	movhi.w	sl, #4294967295
 800cace:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cad2:	2300      	movs	r3, #0
 800cad4:	9304      	str	r3, [sp, #16]
 800cad6:	e084      	b.n	800cbe2 <_strtod_l+0x632>
 800cad8:	f018 0f01 	tst.w	r8, #1
 800cadc:	d005      	beq.n	800caea <_strtod_l+0x53a>
 800cade:	9b04      	ldr	r3, [sp, #16]
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	f7f3 fda0 	bl	8000628 <__aeabi_dmul>
 800cae8:	2301      	movs	r3, #1
 800caea:	9a04      	ldr	r2, [sp, #16]
 800caec:	3208      	adds	r2, #8
 800caee:	f109 0901 	add.w	r9, r9, #1
 800caf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800caf6:	9204      	str	r2, [sp, #16]
 800caf8:	e7c9      	b.n	800ca8e <_strtod_l+0x4de>
 800cafa:	d0ea      	beq.n	800cad2 <_strtod_l+0x522>
 800cafc:	f1c8 0800 	rsb	r8, r8, #0
 800cb00:	f018 020f 	ands.w	r2, r8, #15
 800cb04:	d00a      	beq.n	800cb1c <_strtod_l+0x56c>
 800cb06:	4b13      	ldr	r3, [pc, #76]	; (800cb54 <_strtod_l+0x5a4>)
 800cb08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb0c:	4650      	mov	r0, sl
 800cb0e:	4659      	mov	r1, fp
 800cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb14:	f7f3 feb2 	bl	800087c <__aeabi_ddiv>
 800cb18:	4682      	mov	sl, r0
 800cb1a:	468b      	mov	fp, r1
 800cb1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cb20:	d0d7      	beq.n	800cad2 <_strtod_l+0x522>
 800cb22:	f1b8 0f1f 	cmp.w	r8, #31
 800cb26:	dd1f      	ble.n	800cb68 <_strtod_l+0x5b8>
 800cb28:	2500      	movs	r5, #0
 800cb2a:	462e      	mov	r6, r5
 800cb2c:	9507      	str	r5, [sp, #28]
 800cb2e:	9505      	str	r5, [sp, #20]
 800cb30:	2322      	movs	r3, #34	; 0x22
 800cb32:	f04f 0a00 	mov.w	sl, #0
 800cb36:	f04f 0b00 	mov.w	fp, #0
 800cb3a:	6023      	str	r3, [r4, #0]
 800cb3c:	e786      	b.n	800ca4c <_strtod_l+0x49c>
 800cb3e:	bf00      	nop
 800cb40:	080111d9 	.word	0x080111d9
 800cb44:	0801121c 	.word	0x0801121c
 800cb48:	080111d1 	.word	0x080111d1
 800cb4c:	0801140c 	.word	0x0801140c
 800cb50:	08011307 	.word	0x08011307
 800cb54:	08011580 	.word	0x08011580
 800cb58:	08011558 	.word	0x08011558
 800cb5c:	7ff00000 	.word	0x7ff00000
 800cb60:	7ca00000 	.word	0x7ca00000
 800cb64:	7fefffff 	.word	0x7fefffff
 800cb68:	f018 0310 	ands.w	r3, r8, #16
 800cb6c:	bf18      	it	ne
 800cb6e:	236a      	movne	r3, #106	; 0x6a
 800cb70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cf20 <_strtod_l+0x970>
 800cb74:	9304      	str	r3, [sp, #16]
 800cb76:	4650      	mov	r0, sl
 800cb78:	4659      	mov	r1, fp
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f018 0f01 	tst.w	r8, #1
 800cb80:	d004      	beq.n	800cb8c <_strtod_l+0x5dc>
 800cb82:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cb86:	f7f3 fd4f 	bl	8000628 <__aeabi_dmul>
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cb90:	f109 0908 	add.w	r9, r9, #8
 800cb94:	d1f2      	bne.n	800cb7c <_strtod_l+0x5cc>
 800cb96:	b10b      	cbz	r3, 800cb9c <_strtod_l+0x5ec>
 800cb98:	4682      	mov	sl, r0
 800cb9a:	468b      	mov	fp, r1
 800cb9c:	9b04      	ldr	r3, [sp, #16]
 800cb9e:	b1c3      	cbz	r3, 800cbd2 <_strtod_l+0x622>
 800cba0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cba4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	4659      	mov	r1, fp
 800cbac:	dd11      	ble.n	800cbd2 <_strtod_l+0x622>
 800cbae:	2b1f      	cmp	r3, #31
 800cbb0:	f340 8124 	ble.w	800cdfc <_strtod_l+0x84c>
 800cbb4:	2b34      	cmp	r3, #52	; 0x34
 800cbb6:	bfde      	ittt	le
 800cbb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cbbc:	f04f 33ff 	movle.w	r3, #4294967295
 800cbc0:	fa03 f202 	lslle.w	r2, r3, r2
 800cbc4:	f04f 0a00 	mov.w	sl, #0
 800cbc8:	bfcc      	ite	gt
 800cbca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cbce:	ea02 0b01 	andle.w	fp, r2, r1
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	4650      	mov	r0, sl
 800cbd8:	4659      	mov	r1, fp
 800cbda:	f7f3 ff8d 	bl	8000af8 <__aeabi_dcmpeq>
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	d1a2      	bne.n	800cb28 <_strtod_l+0x578>
 800cbe2:	9b07      	ldr	r3, [sp, #28]
 800cbe4:	9300      	str	r3, [sp, #0]
 800cbe6:	9908      	ldr	r1, [sp, #32]
 800cbe8:	462b      	mov	r3, r5
 800cbea:	463a      	mov	r2, r7
 800cbec:	4620      	mov	r0, r4
 800cbee:	f001 fec7 	bl	800e980 <__s2b>
 800cbf2:	9007      	str	r0, [sp, #28]
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	f43f af1f 	beq.w	800ca38 <_strtod_l+0x488>
 800cbfa:	9b05      	ldr	r3, [sp, #20]
 800cbfc:	1b9e      	subs	r6, r3, r6
 800cbfe:	9b06      	ldr	r3, [sp, #24]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	bfb4      	ite	lt
 800cc04:	4633      	movlt	r3, r6
 800cc06:	2300      	movge	r3, #0
 800cc08:	930c      	str	r3, [sp, #48]	; 0x30
 800cc0a:	9b06      	ldr	r3, [sp, #24]
 800cc0c:	2500      	movs	r5, #0
 800cc0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cc12:	9312      	str	r3, [sp, #72]	; 0x48
 800cc14:	462e      	mov	r6, r5
 800cc16:	9b07      	ldr	r3, [sp, #28]
 800cc18:	4620      	mov	r0, r4
 800cc1a:	6859      	ldr	r1, [r3, #4]
 800cc1c:	f001 fe08 	bl	800e830 <_Balloc>
 800cc20:	9005      	str	r0, [sp, #20]
 800cc22:	2800      	cmp	r0, #0
 800cc24:	f43f af0c 	beq.w	800ca40 <_strtod_l+0x490>
 800cc28:	9b07      	ldr	r3, [sp, #28]
 800cc2a:	691a      	ldr	r2, [r3, #16]
 800cc2c:	3202      	adds	r2, #2
 800cc2e:	f103 010c 	add.w	r1, r3, #12
 800cc32:	0092      	lsls	r2, r2, #2
 800cc34:	300c      	adds	r0, #12
 800cc36:	f001 fded 	bl	800e814 <memcpy>
 800cc3a:	ec4b ab10 	vmov	d0, sl, fp
 800cc3e:	aa1a      	add	r2, sp, #104	; 0x68
 800cc40:	a919      	add	r1, sp, #100	; 0x64
 800cc42:	4620      	mov	r0, r4
 800cc44:	f002 f9e2 	bl	800f00c <__d2b>
 800cc48:	ec4b ab18 	vmov	d8, sl, fp
 800cc4c:	9018      	str	r0, [sp, #96]	; 0x60
 800cc4e:	2800      	cmp	r0, #0
 800cc50:	f43f aef6 	beq.w	800ca40 <_strtod_l+0x490>
 800cc54:	2101      	movs	r1, #1
 800cc56:	4620      	mov	r0, r4
 800cc58:	f001 ff2c 	bl	800eab4 <__i2b>
 800cc5c:	4606      	mov	r6, r0
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	f43f aeee 	beq.w	800ca40 <_strtod_l+0x490>
 800cc64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cc66:	9904      	ldr	r1, [sp, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	bfab      	itete	ge
 800cc6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800cc6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cc70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cc72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cc76:	bfac      	ite	ge
 800cc78:	eb03 0902 	addge.w	r9, r3, r2
 800cc7c:	1ad7      	sublt	r7, r2, r3
 800cc7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cc80:	eba3 0801 	sub.w	r8, r3, r1
 800cc84:	4490      	add	r8, r2
 800cc86:	4ba1      	ldr	r3, [pc, #644]	; (800cf0c <_strtod_l+0x95c>)
 800cc88:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc8c:	4598      	cmp	r8, r3
 800cc8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cc92:	f280 80c7 	bge.w	800ce24 <_strtod_l+0x874>
 800cc96:	eba3 0308 	sub.w	r3, r3, r8
 800cc9a:	2b1f      	cmp	r3, #31
 800cc9c:	eba2 0203 	sub.w	r2, r2, r3
 800cca0:	f04f 0101 	mov.w	r1, #1
 800cca4:	f300 80b1 	bgt.w	800ce0a <_strtod_l+0x85a>
 800cca8:	fa01 f303 	lsl.w	r3, r1, r3
 800ccac:	930d      	str	r3, [sp, #52]	; 0x34
 800ccae:	2300      	movs	r3, #0
 800ccb0:	9308      	str	r3, [sp, #32]
 800ccb2:	eb09 0802 	add.w	r8, r9, r2
 800ccb6:	9b04      	ldr	r3, [sp, #16]
 800ccb8:	45c1      	cmp	r9, r8
 800ccba:	4417      	add	r7, r2
 800ccbc:	441f      	add	r7, r3
 800ccbe:	464b      	mov	r3, r9
 800ccc0:	bfa8      	it	ge
 800ccc2:	4643      	movge	r3, r8
 800ccc4:	42bb      	cmp	r3, r7
 800ccc6:	bfa8      	it	ge
 800ccc8:	463b      	movge	r3, r7
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	bfc2      	ittt	gt
 800ccce:	eba8 0803 	subgt.w	r8, r8, r3
 800ccd2:	1aff      	subgt	r7, r7, r3
 800ccd4:	eba9 0903 	subgt.w	r9, r9, r3
 800ccd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	dd17      	ble.n	800cd0e <_strtod_l+0x75e>
 800ccde:	4631      	mov	r1, r6
 800cce0:	461a      	mov	r2, r3
 800cce2:	4620      	mov	r0, r4
 800cce4:	f001 ffa6 	bl	800ec34 <__pow5mult>
 800cce8:	4606      	mov	r6, r0
 800ccea:	2800      	cmp	r0, #0
 800ccec:	f43f aea8 	beq.w	800ca40 <_strtod_l+0x490>
 800ccf0:	4601      	mov	r1, r0
 800ccf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f001 fef3 	bl	800eae0 <__multiply>
 800ccfa:	900b      	str	r0, [sp, #44]	; 0x2c
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	f43f ae9f 	beq.w	800ca40 <_strtod_l+0x490>
 800cd02:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd04:	4620      	mov	r0, r4
 800cd06:	f001 fdd3 	bl	800e8b0 <_Bfree>
 800cd0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd0c:	9318      	str	r3, [sp, #96]	; 0x60
 800cd0e:	f1b8 0f00 	cmp.w	r8, #0
 800cd12:	f300 808c 	bgt.w	800ce2e <_strtod_l+0x87e>
 800cd16:	9b06      	ldr	r3, [sp, #24]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	dd08      	ble.n	800cd2e <_strtod_l+0x77e>
 800cd1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd1e:	9905      	ldr	r1, [sp, #20]
 800cd20:	4620      	mov	r0, r4
 800cd22:	f001 ff87 	bl	800ec34 <__pow5mult>
 800cd26:	9005      	str	r0, [sp, #20]
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	f43f ae89 	beq.w	800ca40 <_strtod_l+0x490>
 800cd2e:	2f00      	cmp	r7, #0
 800cd30:	dd08      	ble.n	800cd44 <_strtod_l+0x794>
 800cd32:	9905      	ldr	r1, [sp, #20]
 800cd34:	463a      	mov	r2, r7
 800cd36:	4620      	mov	r0, r4
 800cd38:	f001 ffd6 	bl	800ece8 <__lshift>
 800cd3c:	9005      	str	r0, [sp, #20]
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	f43f ae7e 	beq.w	800ca40 <_strtod_l+0x490>
 800cd44:	f1b9 0f00 	cmp.w	r9, #0
 800cd48:	dd08      	ble.n	800cd5c <_strtod_l+0x7ac>
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	464a      	mov	r2, r9
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f001 ffca 	bl	800ece8 <__lshift>
 800cd54:	4606      	mov	r6, r0
 800cd56:	2800      	cmp	r0, #0
 800cd58:	f43f ae72 	beq.w	800ca40 <_strtod_l+0x490>
 800cd5c:	9a05      	ldr	r2, [sp, #20]
 800cd5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd60:	4620      	mov	r0, r4
 800cd62:	f002 f84d 	bl	800ee00 <__mdiff>
 800cd66:	4605      	mov	r5, r0
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	f43f ae69 	beq.w	800ca40 <_strtod_l+0x490>
 800cd6e:	68c3      	ldr	r3, [r0, #12]
 800cd70:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd72:	2300      	movs	r3, #0
 800cd74:	60c3      	str	r3, [r0, #12]
 800cd76:	4631      	mov	r1, r6
 800cd78:	f002 f826 	bl	800edc8 <__mcmp>
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	da60      	bge.n	800ce42 <_strtod_l+0x892>
 800cd80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd82:	ea53 030a 	orrs.w	r3, r3, sl
 800cd86:	f040 8082 	bne.w	800ce8e <_strtod_l+0x8de>
 800cd8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d17d      	bne.n	800ce8e <_strtod_l+0x8de>
 800cd92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd96:	0d1b      	lsrs	r3, r3, #20
 800cd98:	051b      	lsls	r3, r3, #20
 800cd9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cd9e:	d976      	bls.n	800ce8e <_strtod_l+0x8de>
 800cda0:	696b      	ldr	r3, [r5, #20]
 800cda2:	b913      	cbnz	r3, 800cdaa <_strtod_l+0x7fa>
 800cda4:	692b      	ldr	r3, [r5, #16]
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	dd71      	ble.n	800ce8e <_strtod_l+0x8de>
 800cdaa:	4629      	mov	r1, r5
 800cdac:	2201      	movs	r2, #1
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f001 ff9a 	bl	800ece8 <__lshift>
 800cdb4:	4631      	mov	r1, r6
 800cdb6:	4605      	mov	r5, r0
 800cdb8:	f002 f806 	bl	800edc8 <__mcmp>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	dd66      	ble.n	800ce8e <_strtod_l+0x8de>
 800cdc0:	9904      	ldr	r1, [sp, #16]
 800cdc2:	4a53      	ldr	r2, [pc, #332]	; (800cf10 <_strtod_l+0x960>)
 800cdc4:	465b      	mov	r3, fp
 800cdc6:	2900      	cmp	r1, #0
 800cdc8:	f000 8081 	beq.w	800cece <_strtod_l+0x91e>
 800cdcc:	ea02 010b 	and.w	r1, r2, fp
 800cdd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cdd4:	dc7b      	bgt.n	800cece <_strtod_l+0x91e>
 800cdd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cdda:	f77f aea9 	ble.w	800cb30 <_strtod_l+0x580>
 800cdde:	4b4d      	ldr	r3, [pc, #308]	; (800cf14 <_strtod_l+0x964>)
 800cde0:	4650      	mov	r0, sl
 800cde2:	4659      	mov	r1, fp
 800cde4:	2200      	movs	r2, #0
 800cde6:	f7f3 fc1f 	bl	8000628 <__aeabi_dmul>
 800cdea:	460b      	mov	r3, r1
 800cdec:	4303      	orrs	r3, r0
 800cdee:	bf08      	it	eq
 800cdf0:	2322      	moveq	r3, #34	; 0x22
 800cdf2:	4682      	mov	sl, r0
 800cdf4:	468b      	mov	fp, r1
 800cdf6:	bf08      	it	eq
 800cdf8:	6023      	streq	r3, [r4, #0]
 800cdfa:	e62b      	b.n	800ca54 <_strtod_l+0x4a4>
 800cdfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ce00:	fa02 f303 	lsl.w	r3, r2, r3
 800ce04:	ea03 0a0a 	and.w	sl, r3, sl
 800ce08:	e6e3      	b.n	800cbd2 <_strtod_l+0x622>
 800ce0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ce0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ce12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ce16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ce1a:	fa01 f308 	lsl.w	r3, r1, r8
 800ce1e:	9308      	str	r3, [sp, #32]
 800ce20:	910d      	str	r1, [sp, #52]	; 0x34
 800ce22:	e746      	b.n	800ccb2 <_strtod_l+0x702>
 800ce24:	2300      	movs	r3, #0
 800ce26:	9308      	str	r3, [sp, #32]
 800ce28:	2301      	movs	r3, #1
 800ce2a:	930d      	str	r3, [sp, #52]	; 0x34
 800ce2c:	e741      	b.n	800ccb2 <_strtod_l+0x702>
 800ce2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce30:	4642      	mov	r2, r8
 800ce32:	4620      	mov	r0, r4
 800ce34:	f001 ff58 	bl	800ece8 <__lshift>
 800ce38:	9018      	str	r0, [sp, #96]	; 0x60
 800ce3a:	2800      	cmp	r0, #0
 800ce3c:	f47f af6b 	bne.w	800cd16 <_strtod_l+0x766>
 800ce40:	e5fe      	b.n	800ca40 <_strtod_l+0x490>
 800ce42:	465f      	mov	r7, fp
 800ce44:	d16e      	bne.n	800cf24 <_strtod_l+0x974>
 800ce46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce4c:	b342      	cbz	r2, 800cea0 <_strtod_l+0x8f0>
 800ce4e:	4a32      	ldr	r2, [pc, #200]	; (800cf18 <_strtod_l+0x968>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d128      	bne.n	800cea6 <_strtod_l+0x8f6>
 800ce54:	9b04      	ldr	r3, [sp, #16]
 800ce56:	4651      	mov	r1, sl
 800ce58:	b1eb      	cbz	r3, 800ce96 <_strtod_l+0x8e6>
 800ce5a:	4b2d      	ldr	r3, [pc, #180]	; (800cf10 <_strtod_l+0x960>)
 800ce5c:	403b      	ands	r3, r7
 800ce5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ce62:	f04f 32ff 	mov.w	r2, #4294967295
 800ce66:	d819      	bhi.n	800ce9c <_strtod_l+0x8ec>
 800ce68:	0d1b      	lsrs	r3, r3, #20
 800ce6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ce6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce72:	4299      	cmp	r1, r3
 800ce74:	d117      	bne.n	800cea6 <_strtod_l+0x8f6>
 800ce76:	4b29      	ldr	r3, [pc, #164]	; (800cf1c <_strtod_l+0x96c>)
 800ce78:	429f      	cmp	r7, r3
 800ce7a:	d102      	bne.n	800ce82 <_strtod_l+0x8d2>
 800ce7c:	3101      	adds	r1, #1
 800ce7e:	f43f addf 	beq.w	800ca40 <_strtod_l+0x490>
 800ce82:	4b23      	ldr	r3, [pc, #140]	; (800cf10 <_strtod_l+0x960>)
 800ce84:	403b      	ands	r3, r7
 800ce86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ce8a:	f04f 0a00 	mov.w	sl, #0
 800ce8e:	9b04      	ldr	r3, [sp, #16]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1a4      	bne.n	800cdde <_strtod_l+0x82e>
 800ce94:	e5de      	b.n	800ca54 <_strtod_l+0x4a4>
 800ce96:	f04f 33ff 	mov.w	r3, #4294967295
 800ce9a:	e7ea      	b.n	800ce72 <_strtod_l+0x8c2>
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	e7e8      	b.n	800ce72 <_strtod_l+0x8c2>
 800cea0:	ea53 030a 	orrs.w	r3, r3, sl
 800cea4:	d08c      	beq.n	800cdc0 <_strtod_l+0x810>
 800cea6:	9b08      	ldr	r3, [sp, #32]
 800cea8:	b1db      	cbz	r3, 800cee2 <_strtod_l+0x932>
 800ceaa:	423b      	tst	r3, r7
 800ceac:	d0ef      	beq.n	800ce8e <_strtod_l+0x8de>
 800ceae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceb0:	9a04      	ldr	r2, [sp, #16]
 800ceb2:	4650      	mov	r0, sl
 800ceb4:	4659      	mov	r1, fp
 800ceb6:	b1c3      	cbz	r3, 800ceea <_strtod_l+0x93a>
 800ceb8:	f7ff fb5d 	bl	800c576 <sulp>
 800cebc:	4602      	mov	r2, r0
 800cebe:	460b      	mov	r3, r1
 800cec0:	ec51 0b18 	vmov	r0, r1, d8
 800cec4:	f7f3 f9fa 	bl	80002bc <__adddf3>
 800cec8:	4682      	mov	sl, r0
 800ceca:	468b      	mov	fp, r1
 800cecc:	e7df      	b.n	800ce8e <_strtod_l+0x8de>
 800cece:	4013      	ands	r3, r2
 800ced0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ced4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ced8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cedc:	f04f 3aff 	mov.w	sl, #4294967295
 800cee0:	e7d5      	b.n	800ce8e <_strtod_l+0x8de>
 800cee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cee4:	ea13 0f0a 	tst.w	r3, sl
 800cee8:	e7e0      	b.n	800ceac <_strtod_l+0x8fc>
 800ceea:	f7ff fb44 	bl	800c576 <sulp>
 800ceee:	4602      	mov	r2, r0
 800cef0:	460b      	mov	r3, r1
 800cef2:	ec51 0b18 	vmov	r0, r1, d8
 800cef6:	f7f3 f9df 	bl	80002b8 <__aeabi_dsub>
 800cefa:	2200      	movs	r2, #0
 800cefc:	2300      	movs	r3, #0
 800cefe:	4682      	mov	sl, r0
 800cf00:	468b      	mov	fp, r1
 800cf02:	f7f3 fdf9 	bl	8000af8 <__aeabi_dcmpeq>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	d0c1      	beq.n	800ce8e <_strtod_l+0x8de>
 800cf0a:	e611      	b.n	800cb30 <_strtod_l+0x580>
 800cf0c:	fffffc02 	.word	0xfffffc02
 800cf10:	7ff00000 	.word	0x7ff00000
 800cf14:	39500000 	.word	0x39500000
 800cf18:	000fffff 	.word	0x000fffff
 800cf1c:	7fefffff 	.word	0x7fefffff
 800cf20:	08011230 	.word	0x08011230
 800cf24:	4631      	mov	r1, r6
 800cf26:	4628      	mov	r0, r5
 800cf28:	f002 f8cc 	bl	800f0c4 <__ratio>
 800cf2c:	ec59 8b10 	vmov	r8, r9, d0
 800cf30:	ee10 0a10 	vmov	r0, s0
 800cf34:	2200      	movs	r2, #0
 800cf36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf3a:	4649      	mov	r1, r9
 800cf3c:	f7f3 fdf0 	bl	8000b20 <__aeabi_dcmple>
 800cf40:	2800      	cmp	r0, #0
 800cf42:	d07a      	beq.n	800d03a <_strtod_l+0xa8a>
 800cf44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d04a      	beq.n	800cfe0 <_strtod_l+0xa30>
 800cf4a:	4b95      	ldr	r3, [pc, #596]	; (800d1a0 <_strtod_l+0xbf0>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cf52:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d1a0 <_strtod_l+0xbf0>
 800cf56:	f04f 0800 	mov.w	r8, #0
 800cf5a:	4b92      	ldr	r3, [pc, #584]	; (800d1a4 <_strtod_l+0xbf4>)
 800cf5c:	403b      	ands	r3, r7
 800cf5e:	930d      	str	r3, [sp, #52]	; 0x34
 800cf60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cf62:	4b91      	ldr	r3, [pc, #580]	; (800d1a8 <_strtod_l+0xbf8>)
 800cf64:	429a      	cmp	r2, r3
 800cf66:	f040 80b0 	bne.w	800d0ca <_strtod_l+0xb1a>
 800cf6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cf6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cf72:	ec4b ab10 	vmov	d0, sl, fp
 800cf76:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cf7a:	f001 ffcb 	bl	800ef14 <__ulp>
 800cf7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cf82:	ec53 2b10 	vmov	r2, r3, d0
 800cf86:	f7f3 fb4f 	bl	8000628 <__aeabi_dmul>
 800cf8a:	4652      	mov	r2, sl
 800cf8c:	465b      	mov	r3, fp
 800cf8e:	f7f3 f995 	bl	80002bc <__adddf3>
 800cf92:	460b      	mov	r3, r1
 800cf94:	4983      	ldr	r1, [pc, #524]	; (800d1a4 <_strtod_l+0xbf4>)
 800cf96:	4a85      	ldr	r2, [pc, #532]	; (800d1ac <_strtod_l+0xbfc>)
 800cf98:	4019      	ands	r1, r3
 800cf9a:	4291      	cmp	r1, r2
 800cf9c:	4682      	mov	sl, r0
 800cf9e:	d960      	bls.n	800d062 <_strtod_l+0xab2>
 800cfa0:	ee18 3a90 	vmov	r3, s17
 800cfa4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d104      	bne.n	800cfb6 <_strtod_l+0xa06>
 800cfac:	ee18 3a10 	vmov	r3, s16
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	f43f ad45 	beq.w	800ca40 <_strtod_l+0x490>
 800cfb6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d1b8 <_strtod_l+0xc08>
 800cfba:	f04f 3aff 	mov.w	sl, #4294967295
 800cfbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f001 fc75 	bl	800e8b0 <_Bfree>
 800cfc6:	9905      	ldr	r1, [sp, #20]
 800cfc8:	4620      	mov	r0, r4
 800cfca:	f001 fc71 	bl	800e8b0 <_Bfree>
 800cfce:	4631      	mov	r1, r6
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f001 fc6d 	bl	800e8b0 <_Bfree>
 800cfd6:	4629      	mov	r1, r5
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f001 fc69 	bl	800e8b0 <_Bfree>
 800cfde:	e61a      	b.n	800cc16 <_strtod_l+0x666>
 800cfe0:	f1ba 0f00 	cmp.w	sl, #0
 800cfe4:	d11b      	bne.n	800d01e <_strtod_l+0xa6e>
 800cfe6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfea:	b9f3      	cbnz	r3, 800d02a <_strtod_l+0xa7a>
 800cfec:	4b6c      	ldr	r3, [pc, #432]	; (800d1a0 <_strtod_l+0xbf0>)
 800cfee:	2200      	movs	r2, #0
 800cff0:	4640      	mov	r0, r8
 800cff2:	4649      	mov	r1, r9
 800cff4:	f7f3 fd8a 	bl	8000b0c <__aeabi_dcmplt>
 800cff8:	b9d0      	cbnz	r0, 800d030 <_strtod_l+0xa80>
 800cffa:	4640      	mov	r0, r8
 800cffc:	4649      	mov	r1, r9
 800cffe:	4b6c      	ldr	r3, [pc, #432]	; (800d1b0 <_strtod_l+0xc00>)
 800d000:	2200      	movs	r2, #0
 800d002:	f7f3 fb11 	bl	8000628 <__aeabi_dmul>
 800d006:	4680      	mov	r8, r0
 800d008:	4689      	mov	r9, r1
 800d00a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d00e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d012:	9315      	str	r3, [sp, #84]	; 0x54
 800d014:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d018:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d01c:	e79d      	b.n	800cf5a <_strtod_l+0x9aa>
 800d01e:	f1ba 0f01 	cmp.w	sl, #1
 800d022:	d102      	bne.n	800d02a <_strtod_l+0xa7a>
 800d024:	2f00      	cmp	r7, #0
 800d026:	f43f ad83 	beq.w	800cb30 <_strtod_l+0x580>
 800d02a:	4b62      	ldr	r3, [pc, #392]	; (800d1b4 <_strtod_l+0xc04>)
 800d02c:	2200      	movs	r2, #0
 800d02e:	e78e      	b.n	800cf4e <_strtod_l+0x99e>
 800d030:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d1b0 <_strtod_l+0xc00>
 800d034:	f04f 0800 	mov.w	r8, #0
 800d038:	e7e7      	b.n	800d00a <_strtod_l+0xa5a>
 800d03a:	4b5d      	ldr	r3, [pc, #372]	; (800d1b0 <_strtod_l+0xc00>)
 800d03c:	4640      	mov	r0, r8
 800d03e:	4649      	mov	r1, r9
 800d040:	2200      	movs	r2, #0
 800d042:	f7f3 faf1 	bl	8000628 <__aeabi_dmul>
 800d046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d048:	4680      	mov	r8, r0
 800d04a:	4689      	mov	r9, r1
 800d04c:	b933      	cbnz	r3, 800d05c <_strtod_l+0xaac>
 800d04e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d052:	900e      	str	r0, [sp, #56]	; 0x38
 800d054:	930f      	str	r3, [sp, #60]	; 0x3c
 800d056:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d05a:	e7dd      	b.n	800d018 <_strtod_l+0xa68>
 800d05c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d060:	e7f9      	b.n	800d056 <_strtod_l+0xaa6>
 800d062:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d066:	9b04      	ldr	r3, [sp, #16]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1a8      	bne.n	800cfbe <_strtod_l+0xa0e>
 800d06c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d070:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d072:	0d1b      	lsrs	r3, r3, #20
 800d074:	051b      	lsls	r3, r3, #20
 800d076:	429a      	cmp	r2, r3
 800d078:	d1a1      	bne.n	800cfbe <_strtod_l+0xa0e>
 800d07a:	4640      	mov	r0, r8
 800d07c:	4649      	mov	r1, r9
 800d07e:	f7f3 fe83 	bl	8000d88 <__aeabi_d2lz>
 800d082:	f7f3 faa3 	bl	80005cc <__aeabi_l2d>
 800d086:	4602      	mov	r2, r0
 800d088:	460b      	mov	r3, r1
 800d08a:	4640      	mov	r0, r8
 800d08c:	4649      	mov	r1, r9
 800d08e:	f7f3 f913 	bl	80002b8 <__aeabi_dsub>
 800d092:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d094:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d098:	ea43 030a 	orr.w	r3, r3, sl
 800d09c:	4313      	orrs	r3, r2
 800d09e:	4680      	mov	r8, r0
 800d0a0:	4689      	mov	r9, r1
 800d0a2:	d055      	beq.n	800d150 <_strtod_l+0xba0>
 800d0a4:	a336      	add	r3, pc, #216	; (adr r3, 800d180 <_strtod_l+0xbd0>)
 800d0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0aa:	f7f3 fd2f 	bl	8000b0c <__aeabi_dcmplt>
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	f47f acd0 	bne.w	800ca54 <_strtod_l+0x4a4>
 800d0b4:	a334      	add	r3, pc, #208	; (adr r3, 800d188 <_strtod_l+0xbd8>)
 800d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ba:	4640      	mov	r0, r8
 800d0bc:	4649      	mov	r1, r9
 800d0be:	f7f3 fd43 	bl	8000b48 <__aeabi_dcmpgt>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	f43f af7b 	beq.w	800cfbe <_strtod_l+0xa0e>
 800d0c8:	e4c4      	b.n	800ca54 <_strtod_l+0x4a4>
 800d0ca:	9b04      	ldr	r3, [sp, #16]
 800d0cc:	b333      	cbz	r3, 800d11c <_strtod_l+0xb6c>
 800d0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d0d4:	d822      	bhi.n	800d11c <_strtod_l+0xb6c>
 800d0d6:	a32e      	add	r3, pc, #184	; (adr r3, 800d190 <_strtod_l+0xbe0>)
 800d0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0dc:	4640      	mov	r0, r8
 800d0de:	4649      	mov	r1, r9
 800d0e0:	f7f3 fd1e 	bl	8000b20 <__aeabi_dcmple>
 800d0e4:	b1a0      	cbz	r0, 800d110 <_strtod_l+0xb60>
 800d0e6:	4649      	mov	r1, r9
 800d0e8:	4640      	mov	r0, r8
 800d0ea:	f7f3 fd75 	bl	8000bd8 <__aeabi_d2uiz>
 800d0ee:	2801      	cmp	r0, #1
 800d0f0:	bf38      	it	cc
 800d0f2:	2001      	movcc	r0, #1
 800d0f4:	f7f3 fa1e 	bl	8000534 <__aeabi_ui2d>
 800d0f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0fa:	4680      	mov	r8, r0
 800d0fc:	4689      	mov	r9, r1
 800d0fe:	bb23      	cbnz	r3, 800d14a <_strtod_l+0xb9a>
 800d100:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d104:	9010      	str	r0, [sp, #64]	; 0x40
 800d106:	9311      	str	r3, [sp, #68]	; 0x44
 800d108:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d10c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d112:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d114:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d118:	1a9b      	subs	r3, r3, r2
 800d11a:	9309      	str	r3, [sp, #36]	; 0x24
 800d11c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d120:	eeb0 0a48 	vmov.f32	s0, s16
 800d124:	eef0 0a68 	vmov.f32	s1, s17
 800d128:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d12c:	f001 fef2 	bl	800ef14 <__ulp>
 800d130:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d134:	ec53 2b10 	vmov	r2, r3, d0
 800d138:	f7f3 fa76 	bl	8000628 <__aeabi_dmul>
 800d13c:	ec53 2b18 	vmov	r2, r3, d8
 800d140:	f7f3 f8bc 	bl	80002bc <__adddf3>
 800d144:	4682      	mov	sl, r0
 800d146:	468b      	mov	fp, r1
 800d148:	e78d      	b.n	800d066 <_strtod_l+0xab6>
 800d14a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d14e:	e7db      	b.n	800d108 <_strtod_l+0xb58>
 800d150:	a311      	add	r3, pc, #68	; (adr r3, 800d198 <_strtod_l+0xbe8>)
 800d152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d156:	f7f3 fcd9 	bl	8000b0c <__aeabi_dcmplt>
 800d15a:	e7b2      	b.n	800d0c2 <_strtod_l+0xb12>
 800d15c:	2300      	movs	r3, #0
 800d15e:	930a      	str	r3, [sp, #40]	; 0x28
 800d160:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d162:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d164:	6013      	str	r3, [r2, #0]
 800d166:	f7ff ba6b 	b.w	800c640 <_strtod_l+0x90>
 800d16a:	2a65      	cmp	r2, #101	; 0x65
 800d16c:	f43f ab5f 	beq.w	800c82e <_strtod_l+0x27e>
 800d170:	2a45      	cmp	r2, #69	; 0x45
 800d172:	f43f ab5c 	beq.w	800c82e <_strtod_l+0x27e>
 800d176:	2301      	movs	r3, #1
 800d178:	f7ff bb94 	b.w	800c8a4 <_strtod_l+0x2f4>
 800d17c:	f3af 8000 	nop.w
 800d180:	94a03595 	.word	0x94a03595
 800d184:	3fdfffff 	.word	0x3fdfffff
 800d188:	35afe535 	.word	0x35afe535
 800d18c:	3fe00000 	.word	0x3fe00000
 800d190:	ffc00000 	.word	0xffc00000
 800d194:	41dfffff 	.word	0x41dfffff
 800d198:	94a03595 	.word	0x94a03595
 800d19c:	3fcfffff 	.word	0x3fcfffff
 800d1a0:	3ff00000 	.word	0x3ff00000
 800d1a4:	7ff00000 	.word	0x7ff00000
 800d1a8:	7fe00000 	.word	0x7fe00000
 800d1ac:	7c9fffff 	.word	0x7c9fffff
 800d1b0:	3fe00000 	.word	0x3fe00000
 800d1b4:	bff00000 	.word	0xbff00000
 800d1b8:	7fefffff 	.word	0x7fefffff

0800d1bc <_strtod_r>:
 800d1bc:	4b01      	ldr	r3, [pc, #4]	; (800d1c4 <_strtod_r+0x8>)
 800d1be:	f7ff b9f7 	b.w	800c5b0 <_strtod_l>
 800d1c2:	bf00      	nop
 800d1c4:	20000088 	.word	0x20000088

0800d1c8 <strtod>:
 800d1c8:	460a      	mov	r2, r1
 800d1ca:	4601      	mov	r1, r0
 800d1cc:	4802      	ldr	r0, [pc, #8]	; (800d1d8 <strtod+0x10>)
 800d1ce:	4b03      	ldr	r3, [pc, #12]	; (800d1dc <strtod+0x14>)
 800d1d0:	6800      	ldr	r0, [r0, #0]
 800d1d2:	f7ff b9ed 	b.w	800c5b0 <_strtod_l>
 800d1d6:	bf00      	nop
 800d1d8:	20000020 	.word	0x20000020
 800d1dc:	20000088 	.word	0x20000088

0800d1e0 <strtok>:
 800d1e0:	4b16      	ldr	r3, [pc, #88]	; (800d23c <strtok+0x5c>)
 800d1e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1e4:	681e      	ldr	r6, [r3, #0]
 800d1e6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800d1e8:	4605      	mov	r5, r0
 800d1ea:	b9fc      	cbnz	r4, 800d22c <strtok+0x4c>
 800d1ec:	2050      	movs	r0, #80	; 0x50
 800d1ee:	9101      	str	r1, [sp, #4]
 800d1f0:	f001 faf6 	bl	800e7e0 <malloc>
 800d1f4:	9901      	ldr	r1, [sp, #4]
 800d1f6:	65b0      	str	r0, [r6, #88]	; 0x58
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	b920      	cbnz	r0, 800d206 <strtok+0x26>
 800d1fc:	4b10      	ldr	r3, [pc, #64]	; (800d240 <strtok+0x60>)
 800d1fe:	4811      	ldr	r0, [pc, #68]	; (800d244 <strtok+0x64>)
 800d200:	2157      	movs	r1, #87	; 0x57
 800d202:	f000 f8cd 	bl	800d3a0 <__assert_func>
 800d206:	e9c0 4400 	strd	r4, r4, [r0]
 800d20a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d20e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d212:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d216:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d21a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d21e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d222:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d226:	6184      	str	r4, [r0, #24]
 800d228:	7704      	strb	r4, [r0, #28]
 800d22a:	6244      	str	r4, [r0, #36]	; 0x24
 800d22c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800d22e:	2301      	movs	r3, #1
 800d230:	4628      	mov	r0, r5
 800d232:	b002      	add	sp, #8
 800d234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d238:	f000 b806 	b.w	800d248 <__strtok_r>
 800d23c:	20000020 	.word	0x20000020
 800d240:	08011258 	.word	0x08011258
 800d244:	0801126f 	.word	0x0801126f

0800d248 <__strtok_r>:
 800d248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d24a:	b908      	cbnz	r0, 800d250 <__strtok_r+0x8>
 800d24c:	6810      	ldr	r0, [r2, #0]
 800d24e:	b188      	cbz	r0, 800d274 <__strtok_r+0x2c>
 800d250:	4604      	mov	r4, r0
 800d252:	4620      	mov	r0, r4
 800d254:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d258:	460f      	mov	r7, r1
 800d25a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d25e:	b91e      	cbnz	r6, 800d268 <__strtok_r+0x20>
 800d260:	b965      	cbnz	r5, 800d27c <__strtok_r+0x34>
 800d262:	6015      	str	r5, [r2, #0]
 800d264:	4628      	mov	r0, r5
 800d266:	e005      	b.n	800d274 <__strtok_r+0x2c>
 800d268:	42b5      	cmp	r5, r6
 800d26a:	d1f6      	bne.n	800d25a <__strtok_r+0x12>
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d1f0      	bne.n	800d252 <__strtok_r+0xa>
 800d270:	6014      	str	r4, [r2, #0]
 800d272:	7003      	strb	r3, [r0, #0]
 800d274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d276:	461c      	mov	r4, r3
 800d278:	e00c      	b.n	800d294 <__strtok_r+0x4c>
 800d27a:	b915      	cbnz	r5, 800d282 <__strtok_r+0x3a>
 800d27c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d280:	460e      	mov	r6, r1
 800d282:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d286:	42ab      	cmp	r3, r5
 800d288:	d1f7      	bne.n	800d27a <__strtok_r+0x32>
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d0f3      	beq.n	800d276 <__strtok_r+0x2e>
 800d28e:	2300      	movs	r3, #0
 800d290:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d294:	6014      	str	r4, [r2, #0]
 800d296:	e7ed      	b.n	800d274 <__strtok_r+0x2c>

0800d298 <_strtol_l.constprop.0>:
 800d298:	2b01      	cmp	r3, #1
 800d29a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d29e:	d001      	beq.n	800d2a4 <_strtol_l.constprop.0+0xc>
 800d2a0:	2b24      	cmp	r3, #36	; 0x24
 800d2a2:	d906      	bls.n	800d2b2 <_strtol_l.constprop.0+0x1a>
 800d2a4:	f7fe fa4e 	bl	800b744 <__errno>
 800d2a8:	2316      	movs	r3, #22
 800d2aa:	6003      	str	r3, [r0, #0]
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d398 <_strtol_l.constprop.0+0x100>
 800d2b6:	460d      	mov	r5, r1
 800d2b8:	462e      	mov	r6, r5
 800d2ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2be:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d2c2:	f017 0708 	ands.w	r7, r7, #8
 800d2c6:	d1f7      	bne.n	800d2b8 <_strtol_l.constprop.0+0x20>
 800d2c8:	2c2d      	cmp	r4, #45	; 0x2d
 800d2ca:	d132      	bne.n	800d332 <_strtol_l.constprop.0+0x9a>
 800d2cc:	782c      	ldrb	r4, [r5, #0]
 800d2ce:	2701      	movs	r7, #1
 800d2d0:	1cb5      	adds	r5, r6, #2
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d05b      	beq.n	800d38e <_strtol_l.constprop.0+0xf6>
 800d2d6:	2b10      	cmp	r3, #16
 800d2d8:	d109      	bne.n	800d2ee <_strtol_l.constprop.0+0x56>
 800d2da:	2c30      	cmp	r4, #48	; 0x30
 800d2dc:	d107      	bne.n	800d2ee <_strtol_l.constprop.0+0x56>
 800d2de:	782c      	ldrb	r4, [r5, #0]
 800d2e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d2e4:	2c58      	cmp	r4, #88	; 0x58
 800d2e6:	d14d      	bne.n	800d384 <_strtol_l.constprop.0+0xec>
 800d2e8:	786c      	ldrb	r4, [r5, #1]
 800d2ea:	2310      	movs	r3, #16
 800d2ec:	3502      	adds	r5, #2
 800d2ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d2f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800d2f6:	f04f 0c00 	mov.w	ip, #0
 800d2fa:	fbb8 f9f3 	udiv	r9, r8, r3
 800d2fe:	4666      	mov	r6, ip
 800d300:	fb03 8a19 	mls	sl, r3, r9, r8
 800d304:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d308:	f1be 0f09 	cmp.w	lr, #9
 800d30c:	d816      	bhi.n	800d33c <_strtol_l.constprop.0+0xa4>
 800d30e:	4674      	mov	r4, lr
 800d310:	42a3      	cmp	r3, r4
 800d312:	dd24      	ble.n	800d35e <_strtol_l.constprop.0+0xc6>
 800d314:	f1bc 0f00 	cmp.w	ip, #0
 800d318:	db1e      	blt.n	800d358 <_strtol_l.constprop.0+0xc0>
 800d31a:	45b1      	cmp	r9, r6
 800d31c:	d31c      	bcc.n	800d358 <_strtol_l.constprop.0+0xc0>
 800d31e:	d101      	bne.n	800d324 <_strtol_l.constprop.0+0x8c>
 800d320:	45a2      	cmp	sl, r4
 800d322:	db19      	blt.n	800d358 <_strtol_l.constprop.0+0xc0>
 800d324:	fb06 4603 	mla	r6, r6, r3, r4
 800d328:	f04f 0c01 	mov.w	ip, #1
 800d32c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d330:	e7e8      	b.n	800d304 <_strtol_l.constprop.0+0x6c>
 800d332:	2c2b      	cmp	r4, #43	; 0x2b
 800d334:	bf04      	itt	eq
 800d336:	782c      	ldrbeq	r4, [r5, #0]
 800d338:	1cb5      	addeq	r5, r6, #2
 800d33a:	e7ca      	b.n	800d2d2 <_strtol_l.constprop.0+0x3a>
 800d33c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d340:	f1be 0f19 	cmp.w	lr, #25
 800d344:	d801      	bhi.n	800d34a <_strtol_l.constprop.0+0xb2>
 800d346:	3c37      	subs	r4, #55	; 0x37
 800d348:	e7e2      	b.n	800d310 <_strtol_l.constprop.0+0x78>
 800d34a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d34e:	f1be 0f19 	cmp.w	lr, #25
 800d352:	d804      	bhi.n	800d35e <_strtol_l.constprop.0+0xc6>
 800d354:	3c57      	subs	r4, #87	; 0x57
 800d356:	e7db      	b.n	800d310 <_strtol_l.constprop.0+0x78>
 800d358:	f04f 3cff 	mov.w	ip, #4294967295
 800d35c:	e7e6      	b.n	800d32c <_strtol_l.constprop.0+0x94>
 800d35e:	f1bc 0f00 	cmp.w	ip, #0
 800d362:	da05      	bge.n	800d370 <_strtol_l.constprop.0+0xd8>
 800d364:	2322      	movs	r3, #34	; 0x22
 800d366:	6003      	str	r3, [r0, #0]
 800d368:	4646      	mov	r6, r8
 800d36a:	b942      	cbnz	r2, 800d37e <_strtol_l.constprop.0+0xe6>
 800d36c:	4630      	mov	r0, r6
 800d36e:	e79e      	b.n	800d2ae <_strtol_l.constprop.0+0x16>
 800d370:	b107      	cbz	r7, 800d374 <_strtol_l.constprop.0+0xdc>
 800d372:	4276      	negs	r6, r6
 800d374:	2a00      	cmp	r2, #0
 800d376:	d0f9      	beq.n	800d36c <_strtol_l.constprop.0+0xd4>
 800d378:	f1bc 0f00 	cmp.w	ip, #0
 800d37c:	d000      	beq.n	800d380 <_strtol_l.constprop.0+0xe8>
 800d37e:	1e69      	subs	r1, r5, #1
 800d380:	6011      	str	r1, [r2, #0]
 800d382:	e7f3      	b.n	800d36c <_strtol_l.constprop.0+0xd4>
 800d384:	2430      	movs	r4, #48	; 0x30
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1b1      	bne.n	800d2ee <_strtol_l.constprop.0+0x56>
 800d38a:	2308      	movs	r3, #8
 800d38c:	e7af      	b.n	800d2ee <_strtol_l.constprop.0+0x56>
 800d38e:	2c30      	cmp	r4, #48	; 0x30
 800d390:	d0a5      	beq.n	800d2de <_strtol_l.constprop.0+0x46>
 800d392:	230a      	movs	r3, #10
 800d394:	e7ab      	b.n	800d2ee <_strtol_l.constprop.0+0x56>
 800d396:	bf00      	nop
 800d398:	08011309 	.word	0x08011309

0800d39c <_strtol_r>:
 800d39c:	f7ff bf7c 	b.w	800d298 <_strtol_l.constprop.0>

0800d3a0 <__assert_func>:
 800d3a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3a2:	4614      	mov	r4, r2
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	4b09      	ldr	r3, [pc, #36]	; (800d3cc <__assert_func+0x2c>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4605      	mov	r5, r0
 800d3ac:	68d8      	ldr	r0, [r3, #12]
 800d3ae:	b14c      	cbz	r4, 800d3c4 <__assert_func+0x24>
 800d3b0:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <__assert_func+0x30>)
 800d3b2:	9100      	str	r1, [sp, #0]
 800d3b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3b8:	4906      	ldr	r1, [pc, #24]	; (800d3d4 <__assert_func+0x34>)
 800d3ba:	462b      	mov	r3, r5
 800d3bc:	f000 fe8a 	bl	800e0d4 <fiprintf>
 800d3c0:	f002 fba0 	bl	800fb04 <abort>
 800d3c4:	4b04      	ldr	r3, [pc, #16]	; (800d3d8 <__assert_func+0x38>)
 800d3c6:	461c      	mov	r4, r3
 800d3c8:	e7f3      	b.n	800d3b2 <__assert_func+0x12>
 800d3ca:	bf00      	nop
 800d3cc:	20000020 	.word	0x20000020
 800d3d0:	080112cc 	.word	0x080112cc
 800d3d4:	080112d9 	.word	0x080112d9
 800d3d8:	08011307 	.word	0x08011307

0800d3dc <quorem>:
 800d3dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e0:	6903      	ldr	r3, [r0, #16]
 800d3e2:	690c      	ldr	r4, [r1, #16]
 800d3e4:	42a3      	cmp	r3, r4
 800d3e6:	4607      	mov	r7, r0
 800d3e8:	f2c0 8081 	blt.w	800d4ee <quorem+0x112>
 800d3ec:	3c01      	subs	r4, #1
 800d3ee:	f101 0814 	add.w	r8, r1, #20
 800d3f2:	f100 0514 	add.w	r5, r0, #20
 800d3f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3fa:	9301      	str	r3, [sp, #4]
 800d3fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d400:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d404:	3301      	adds	r3, #1
 800d406:	429a      	cmp	r2, r3
 800d408:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d40c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d410:	fbb2 f6f3 	udiv	r6, r2, r3
 800d414:	d331      	bcc.n	800d47a <quorem+0x9e>
 800d416:	f04f 0e00 	mov.w	lr, #0
 800d41a:	4640      	mov	r0, r8
 800d41c:	46ac      	mov	ip, r5
 800d41e:	46f2      	mov	sl, lr
 800d420:	f850 2b04 	ldr.w	r2, [r0], #4
 800d424:	b293      	uxth	r3, r2
 800d426:	fb06 e303 	mla	r3, r6, r3, lr
 800d42a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d42e:	b29b      	uxth	r3, r3
 800d430:	ebaa 0303 	sub.w	r3, sl, r3
 800d434:	f8dc a000 	ldr.w	sl, [ip]
 800d438:	0c12      	lsrs	r2, r2, #16
 800d43a:	fa13 f38a 	uxtah	r3, r3, sl
 800d43e:	fb06 e202 	mla	r2, r6, r2, lr
 800d442:	9300      	str	r3, [sp, #0]
 800d444:	9b00      	ldr	r3, [sp, #0]
 800d446:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d44a:	b292      	uxth	r2, r2
 800d44c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d454:	f8bd 3000 	ldrh.w	r3, [sp]
 800d458:	4581      	cmp	r9, r0
 800d45a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d45e:	f84c 3b04 	str.w	r3, [ip], #4
 800d462:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d466:	d2db      	bcs.n	800d420 <quorem+0x44>
 800d468:	f855 300b 	ldr.w	r3, [r5, fp]
 800d46c:	b92b      	cbnz	r3, 800d47a <quorem+0x9e>
 800d46e:	9b01      	ldr	r3, [sp, #4]
 800d470:	3b04      	subs	r3, #4
 800d472:	429d      	cmp	r5, r3
 800d474:	461a      	mov	r2, r3
 800d476:	d32e      	bcc.n	800d4d6 <quorem+0xfa>
 800d478:	613c      	str	r4, [r7, #16]
 800d47a:	4638      	mov	r0, r7
 800d47c:	f001 fca4 	bl	800edc8 <__mcmp>
 800d480:	2800      	cmp	r0, #0
 800d482:	db24      	blt.n	800d4ce <quorem+0xf2>
 800d484:	3601      	adds	r6, #1
 800d486:	4628      	mov	r0, r5
 800d488:	f04f 0c00 	mov.w	ip, #0
 800d48c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d490:	f8d0 e000 	ldr.w	lr, [r0]
 800d494:	b293      	uxth	r3, r2
 800d496:	ebac 0303 	sub.w	r3, ip, r3
 800d49a:	0c12      	lsrs	r2, r2, #16
 800d49c:	fa13 f38e 	uxtah	r3, r3, lr
 800d4a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d4a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4ae:	45c1      	cmp	r9, r8
 800d4b0:	f840 3b04 	str.w	r3, [r0], #4
 800d4b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d4b8:	d2e8      	bcs.n	800d48c <quorem+0xb0>
 800d4ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4c2:	b922      	cbnz	r2, 800d4ce <quorem+0xf2>
 800d4c4:	3b04      	subs	r3, #4
 800d4c6:	429d      	cmp	r5, r3
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	d30a      	bcc.n	800d4e2 <quorem+0x106>
 800d4cc:	613c      	str	r4, [r7, #16]
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	b003      	add	sp, #12
 800d4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4d6:	6812      	ldr	r2, [r2, #0]
 800d4d8:	3b04      	subs	r3, #4
 800d4da:	2a00      	cmp	r2, #0
 800d4dc:	d1cc      	bne.n	800d478 <quorem+0x9c>
 800d4de:	3c01      	subs	r4, #1
 800d4e0:	e7c7      	b.n	800d472 <quorem+0x96>
 800d4e2:	6812      	ldr	r2, [r2, #0]
 800d4e4:	3b04      	subs	r3, #4
 800d4e6:	2a00      	cmp	r2, #0
 800d4e8:	d1f0      	bne.n	800d4cc <quorem+0xf0>
 800d4ea:	3c01      	subs	r4, #1
 800d4ec:	e7eb      	b.n	800d4c6 <quorem+0xea>
 800d4ee:	2000      	movs	r0, #0
 800d4f0:	e7ee      	b.n	800d4d0 <quorem+0xf4>
 800d4f2:	0000      	movs	r0, r0
 800d4f4:	0000      	movs	r0, r0
	...

0800d4f8 <_dtoa_r>:
 800d4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4fc:	ed2d 8b04 	vpush	{d8-d9}
 800d500:	ec57 6b10 	vmov	r6, r7, d0
 800d504:	b093      	sub	sp, #76	; 0x4c
 800d506:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d508:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d50c:	9106      	str	r1, [sp, #24]
 800d50e:	ee10 aa10 	vmov	sl, s0
 800d512:	4604      	mov	r4, r0
 800d514:	9209      	str	r2, [sp, #36]	; 0x24
 800d516:	930c      	str	r3, [sp, #48]	; 0x30
 800d518:	46bb      	mov	fp, r7
 800d51a:	b975      	cbnz	r5, 800d53a <_dtoa_r+0x42>
 800d51c:	2010      	movs	r0, #16
 800d51e:	f001 f95f 	bl	800e7e0 <malloc>
 800d522:	4602      	mov	r2, r0
 800d524:	6260      	str	r0, [r4, #36]	; 0x24
 800d526:	b920      	cbnz	r0, 800d532 <_dtoa_r+0x3a>
 800d528:	4ba7      	ldr	r3, [pc, #668]	; (800d7c8 <_dtoa_r+0x2d0>)
 800d52a:	21ea      	movs	r1, #234	; 0xea
 800d52c:	48a7      	ldr	r0, [pc, #668]	; (800d7cc <_dtoa_r+0x2d4>)
 800d52e:	f7ff ff37 	bl	800d3a0 <__assert_func>
 800d532:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d536:	6005      	str	r5, [r0, #0]
 800d538:	60c5      	str	r5, [r0, #12]
 800d53a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d53c:	6819      	ldr	r1, [r3, #0]
 800d53e:	b151      	cbz	r1, 800d556 <_dtoa_r+0x5e>
 800d540:	685a      	ldr	r2, [r3, #4]
 800d542:	604a      	str	r2, [r1, #4]
 800d544:	2301      	movs	r3, #1
 800d546:	4093      	lsls	r3, r2
 800d548:	608b      	str	r3, [r1, #8]
 800d54a:	4620      	mov	r0, r4
 800d54c:	f001 f9b0 	bl	800e8b0 <_Bfree>
 800d550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d552:	2200      	movs	r2, #0
 800d554:	601a      	str	r2, [r3, #0]
 800d556:	1e3b      	subs	r3, r7, #0
 800d558:	bfaa      	itet	ge
 800d55a:	2300      	movge	r3, #0
 800d55c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d560:	f8c8 3000 	strge.w	r3, [r8]
 800d564:	4b9a      	ldr	r3, [pc, #616]	; (800d7d0 <_dtoa_r+0x2d8>)
 800d566:	bfbc      	itt	lt
 800d568:	2201      	movlt	r2, #1
 800d56a:	f8c8 2000 	strlt.w	r2, [r8]
 800d56e:	ea33 030b 	bics.w	r3, r3, fp
 800d572:	d11b      	bne.n	800d5ac <_dtoa_r+0xb4>
 800d574:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d576:	f242 730f 	movw	r3, #9999	; 0x270f
 800d57a:	6013      	str	r3, [r2, #0]
 800d57c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d580:	4333      	orrs	r3, r6
 800d582:	f000 8592 	beq.w	800e0aa <_dtoa_r+0xbb2>
 800d586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d588:	b963      	cbnz	r3, 800d5a4 <_dtoa_r+0xac>
 800d58a:	4b92      	ldr	r3, [pc, #584]	; (800d7d4 <_dtoa_r+0x2dc>)
 800d58c:	e022      	b.n	800d5d4 <_dtoa_r+0xdc>
 800d58e:	4b92      	ldr	r3, [pc, #584]	; (800d7d8 <_dtoa_r+0x2e0>)
 800d590:	9301      	str	r3, [sp, #4]
 800d592:	3308      	adds	r3, #8
 800d594:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d596:	6013      	str	r3, [r2, #0]
 800d598:	9801      	ldr	r0, [sp, #4]
 800d59a:	b013      	add	sp, #76	; 0x4c
 800d59c:	ecbd 8b04 	vpop	{d8-d9}
 800d5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a4:	4b8b      	ldr	r3, [pc, #556]	; (800d7d4 <_dtoa_r+0x2dc>)
 800d5a6:	9301      	str	r3, [sp, #4]
 800d5a8:	3303      	adds	r3, #3
 800d5aa:	e7f3      	b.n	800d594 <_dtoa_r+0x9c>
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	4650      	mov	r0, sl
 800d5b2:	4659      	mov	r1, fp
 800d5b4:	f7f3 faa0 	bl	8000af8 <__aeabi_dcmpeq>
 800d5b8:	ec4b ab19 	vmov	d9, sl, fp
 800d5bc:	4680      	mov	r8, r0
 800d5be:	b158      	cbz	r0, 800d5d8 <_dtoa_r+0xe0>
 800d5c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	6013      	str	r3, [r2, #0]
 800d5c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	f000 856b 	beq.w	800e0a4 <_dtoa_r+0xbac>
 800d5ce:	4883      	ldr	r0, [pc, #524]	; (800d7dc <_dtoa_r+0x2e4>)
 800d5d0:	6018      	str	r0, [r3, #0]
 800d5d2:	1e43      	subs	r3, r0, #1
 800d5d4:	9301      	str	r3, [sp, #4]
 800d5d6:	e7df      	b.n	800d598 <_dtoa_r+0xa0>
 800d5d8:	ec4b ab10 	vmov	d0, sl, fp
 800d5dc:	aa10      	add	r2, sp, #64	; 0x40
 800d5de:	a911      	add	r1, sp, #68	; 0x44
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f001 fd13 	bl	800f00c <__d2b>
 800d5e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d5ea:	ee08 0a10 	vmov	s16, r0
 800d5ee:	2d00      	cmp	r5, #0
 800d5f0:	f000 8084 	beq.w	800d6fc <_dtoa_r+0x204>
 800d5f4:	ee19 3a90 	vmov	r3, s19
 800d5f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d600:	4656      	mov	r6, sl
 800d602:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d606:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d60a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d60e:	4b74      	ldr	r3, [pc, #464]	; (800d7e0 <_dtoa_r+0x2e8>)
 800d610:	2200      	movs	r2, #0
 800d612:	4630      	mov	r0, r6
 800d614:	4639      	mov	r1, r7
 800d616:	f7f2 fe4f 	bl	80002b8 <__aeabi_dsub>
 800d61a:	a365      	add	r3, pc, #404	; (adr r3, 800d7b0 <_dtoa_r+0x2b8>)
 800d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d620:	f7f3 f802 	bl	8000628 <__aeabi_dmul>
 800d624:	a364      	add	r3, pc, #400	; (adr r3, 800d7b8 <_dtoa_r+0x2c0>)
 800d626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d62a:	f7f2 fe47 	bl	80002bc <__adddf3>
 800d62e:	4606      	mov	r6, r0
 800d630:	4628      	mov	r0, r5
 800d632:	460f      	mov	r7, r1
 800d634:	f7f2 ff8e 	bl	8000554 <__aeabi_i2d>
 800d638:	a361      	add	r3, pc, #388	; (adr r3, 800d7c0 <_dtoa_r+0x2c8>)
 800d63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63e:	f7f2 fff3 	bl	8000628 <__aeabi_dmul>
 800d642:	4602      	mov	r2, r0
 800d644:	460b      	mov	r3, r1
 800d646:	4630      	mov	r0, r6
 800d648:	4639      	mov	r1, r7
 800d64a:	f7f2 fe37 	bl	80002bc <__adddf3>
 800d64e:	4606      	mov	r6, r0
 800d650:	460f      	mov	r7, r1
 800d652:	f7f3 fa99 	bl	8000b88 <__aeabi_d2iz>
 800d656:	2200      	movs	r2, #0
 800d658:	9000      	str	r0, [sp, #0]
 800d65a:	2300      	movs	r3, #0
 800d65c:	4630      	mov	r0, r6
 800d65e:	4639      	mov	r1, r7
 800d660:	f7f3 fa54 	bl	8000b0c <__aeabi_dcmplt>
 800d664:	b150      	cbz	r0, 800d67c <_dtoa_r+0x184>
 800d666:	9800      	ldr	r0, [sp, #0]
 800d668:	f7f2 ff74 	bl	8000554 <__aeabi_i2d>
 800d66c:	4632      	mov	r2, r6
 800d66e:	463b      	mov	r3, r7
 800d670:	f7f3 fa42 	bl	8000af8 <__aeabi_dcmpeq>
 800d674:	b910      	cbnz	r0, 800d67c <_dtoa_r+0x184>
 800d676:	9b00      	ldr	r3, [sp, #0]
 800d678:	3b01      	subs	r3, #1
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	9b00      	ldr	r3, [sp, #0]
 800d67e:	2b16      	cmp	r3, #22
 800d680:	d85a      	bhi.n	800d738 <_dtoa_r+0x240>
 800d682:	9a00      	ldr	r2, [sp, #0]
 800d684:	4b57      	ldr	r3, [pc, #348]	; (800d7e4 <_dtoa_r+0x2ec>)
 800d686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68e:	ec51 0b19 	vmov	r0, r1, d9
 800d692:	f7f3 fa3b 	bl	8000b0c <__aeabi_dcmplt>
 800d696:	2800      	cmp	r0, #0
 800d698:	d050      	beq.n	800d73c <_dtoa_r+0x244>
 800d69a:	9b00      	ldr	r3, [sp, #0]
 800d69c:	3b01      	subs	r3, #1
 800d69e:	9300      	str	r3, [sp, #0]
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6a6:	1b5d      	subs	r5, r3, r5
 800d6a8:	1e6b      	subs	r3, r5, #1
 800d6aa:	9305      	str	r3, [sp, #20]
 800d6ac:	bf45      	ittet	mi
 800d6ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800d6b2:	9304      	strmi	r3, [sp, #16]
 800d6b4:	2300      	movpl	r3, #0
 800d6b6:	2300      	movmi	r3, #0
 800d6b8:	bf4c      	ite	mi
 800d6ba:	9305      	strmi	r3, [sp, #20]
 800d6bc:	9304      	strpl	r3, [sp, #16]
 800d6be:	9b00      	ldr	r3, [sp, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	db3d      	blt.n	800d740 <_dtoa_r+0x248>
 800d6c4:	9b05      	ldr	r3, [sp, #20]
 800d6c6:	9a00      	ldr	r2, [sp, #0]
 800d6c8:	920a      	str	r2, [sp, #40]	; 0x28
 800d6ca:	4413      	add	r3, r2
 800d6cc:	9305      	str	r3, [sp, #20]
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	9307      	str	r3, [sp, #28]
 800d6d2:	9b06      	ldr	r3, [sp, #24]
 800d6d4:	2b09      	cmp	r3, #9
 800d6d6:	f200 8089 	bhi.w	800d7ec <_dtoa_r+0x2f4>
 800d6da:	2b05      	cmp	r3, #5
 800d6dc:	bfc4      	itt	gt
 800d6de:	3b04      	subgt	r3, #4
 800d6e0:	9306      	strgt	r3, [sp, #24]
 800d6e2:	9b06      	ldr	r3, [sp, #24]
 800d6e4:	f1a3 0302 	sub.w	r3, r3, #2
 800d6e8:	bfcc      	ite	gt
 800d6ea:	2500      	movgt	r5, #0
 800d6ec:	2501      	movle	r5, #1
 800d6ee:	2b03      	cmp	r3, #3
 800d6f0:	f200 8087 	bhi.w	800d802 <_dtoa_r+0x30a>
 800d6f4:	e8df f003 	tbb	[pc, r3]
 800d6f8:	59383a2d 	.word	0x59383a2d
 800d6fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d700:	441d      	add	r5, r3
 800d702:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d706:	2b20      	cmp	r3, #32
 800d708:	bfc1      	itttt	gt
 800d70a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d70e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d712:	fa0b f303 	lslgt.w	r3, fp, r3
 800d716:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d71a:	bfda      	itte	le
 800d71c:	f1c3 0320 	rsble	r3, r3, #32
 800d720:	fa06 f003 	lslle.w	r0, r6, r3
 800d724:	4318      	orrgt	r0, r3
 800d726:	f7f2 ff05 	bl	8000534 <__aeabi_ui2d>
 800d72a:	2301      	movs	r3, #1
 800d72c:	4606      	mov	r6, r0
 800d72e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d732:	3d01      	subs	r5, #1
 800d734:	930e      	str	r3, [sp, #56]	; 0x38
 800d736:	e76a      	b.n	800d60e <_dtoa_r+0x116>
 800d738:	2301      	movs	r3, #1
 800d73a:	e7b2      	b.n	800d6a2 <_dtoa_r+0x1aa>
 800d73c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d73e:	e7b1      	b.n	800d6a4 <_dtoa_r+0x1ac>
 800d740:	9b04      	ldr	r3, [sp, #16]
 800d742:	9a00      	ldr	r2, [sp, #0]
 800d744:	1a9b      	subs	r3, r3, r2
 800d746:	9304      	str	r3, [sp, #16]
 800d748:	4253      	negs	r3, r2
 800d74a:	9307      	str	r3, [sp, #28]
 800d74c:	2300      	movs	r3, #0
 800d74e:	930a      	str	r3, [sp, #40]	; 0x28
 800d750:	e7bf      	b.n	800d6d2 <_dtoa_r+0x1da>
 800d752:	2300      	movs	r3, #0
 800d754:	9308      	str	r3, [sp, #32]
 800d756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d758:	2b00      	cmp	r3, #0
 800d75a:	dc55      	bgt.n	800d808 <_dtoa_r+0x310>
 800d75c:	2301      	movs	r3, #1
 800d75e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d762:	461a      	mov	r2, r3
 800d764:	9209      	str	r2, [sp, #36]	; 0x24
 800d766:	e00c      	b.n	800d782 <_dtoa_r+0x28a>
 800d768:	2301      	movs	r3, #1
 800d76a:	e7f3      	b.n	800d754 <_dtoa_r+0x25c>
 800d76c:	2300      	movs	r3, #0
 800d76e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d770:	9308      	str	r3, [sp, #32]
 800d772:	9b00      	ldr	r3, [sp, #0]
 800d774:	4413      	add	r3, r2
 800d776:	9302      	str	r3, [sp, #8]
 800d778:	3301      	adds	r3, #1
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	9303      	str	r3, [sp, #12]
 800d77e:	bfb8      	it	lt
 800d780:	2301      	movlt	r3, #1
 800d782:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d784:	2200      	movs	r2, #0
 800d786:	6042      	str	r2, [r0, #4]
 800d788:	2204      	movs	r2, #4
 800d78a:	f102 0614 	add.w	r6, r2, #20
 800d78e:	429e      	cmp	r6, r3
 800d790:	6841      	ldr	r1, [r0, #4]
 800d792:	d93d      	bls.n	800d810 <_dtoa_r+0x318>
 800d794:	4620      	mov	r0, r4
 800d796:	f001 f84b 	bl	800e830 <_Balloc>
 800d79a:	9001      	str	r0, [sp, #4]
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d13b      	bne.n	800d818 <_dtoa_r+0x320>
 800d7a0:	4b11      	ldr	r3, [pc, #68]	; (800d7e8 <_dtoa_r+0x2f0>)
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d7a8:	e6c0      	b.n	800d52c <_dtoa_r+0x34>
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	e7df      	b.n	800d76e <_dtoa_r+0x276>
 800d7ae:	bf00      	nop
 800d7b0:	636f4361 	.word	0x636f4361
 800d7b4:	3fd287a7 	.word	0x3fd287a7
 800d7b8:	8b60c8b3 	.word	0x8b60c8b3
 800d7bc:	3fc68a28 	.word	0x3fc68a28
 800d7c0:	509f79fb 	.word	0x509f79fb
 800d7c4:	3fd34413 	.word	0x3fd34413
 800d7c8:	08011258 	.word	0x08011258
 800d7cc:	08011416 	.word	0x08011416
 800d7d0:	7ff00000 	.word	0x7ff00000
 800d7d4:	08011412 	.word	0x08011412
 800d7d8:	08011409 	.word	0x08011409
 800d7dc:	080111dd 	.word	0x080111dd
 800d7e0:	3ff80000 	.word	0x3ff80000
 800d7e4:	08011580 	.word	0x08011580
 800d7e8:	08011471 	.word	0x08011471
 800d7ec:	2501      	movs	r5, #1
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	9306      	str	r3, [sp, #24]
 800d7f2:	9508      	str	r5, [sp, #32]
 800d7f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	2312      	movs	r3, #18
 800d800:	e7b0      	b.n	800d764 <_dtoa_r+0x26c>
 800d802:	2301      	movs	r3, #1
 800d804:	9308      	str	r3, [sp, #32]
 800d806:	e7f5      	b.n	800d7f4 <_dtoa_r+0x2fc>
 800d808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d80a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d80e:	e7b8      	b.n	800d782 <_dtoa_r+0x28a>
 800d810:	3101      	adds	r1, #1
 800d812:	6041      	str	r1, [r0, #4]
 800d814:	0052      	lsls	r2, r2, #1
 800d816:	e7b8      	b.n	800d78a <_dtoa_r+0x292>
 800d818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d81a:	9a01      	ldr	r2, [sp, #4]
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	9b03      	ldr	r3, [sp, #12]
 800d820:	2b0e      	cmp	r3, #14
 800d822:	f200 809d 	bhi.w	800d960 <_dtoa_r+0x468>
 800d826:	2d00      	cmp	r5, #0
 800d828:	f000 809a 	beq.w	800d960 <_dtoa_r+0x468>
 800d82c:	9b00      	ldr	r3, [sp, #0]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	dd32      	ble.n	800d898 <_dtoa_r+0x3a0>
 800d832:	4ab7      	ldr	r2, [pc, #732]	; (800db10 <_dtoa_r+0x618>)
 800d834:	f003 030f 	and.w	r3, r3, #15
 800d838:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d83c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d840:	9b00      	ldr	r3, [sp, #0]
 800d842:	05d8      	lsls	r0, r3, #23
 800d844:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d848:	d516      	bpl.n	800d878 <_dtoa_r+0x380>
 800d84a:	4bb2      	ldr	r3, [pc, #712]	; (800db14 <_dtoa_r+0x61c>)
 800d84c:	ec51 0b19 	vmov	r0, r1, d9
 800d850:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d854:	f7f3 f812 	bl	800087c <__aeabi_ddiv>
 800d858:	f007 070f 	and.w	r7, r7, #15
 800d85c:	4682      	mov	sl, r0
 800d85e:	468b      	mov	fp, r1
 800d860:	2503      	movs	r5, #3
 800d862:	4eac      	ldr	r6, [pc, #688]	; (800db14 <_dtoa_r+0x61c>)
 800d864:	b957      	cbnz	r7, 800d87c <_dtoa_r+0x384>
 800d866:	4642      	mov	r2, r8
 800d868:	464b      	mov	r3, r9
 800d86a:	4650      	mov	r0, sl
 800d86c:	4659      	mov	r1, fp
 800d86e:	f7f3 f805 	bl	800087c <__aeabi_ddiv>
 800d872:	4682      	mov	sl, r0
 800d874:	468b      	mov	fp, r1
 800d876:	e028      	b.n	800d8ca <_dtoa_r+0x3d2>
 800d878:	2502      	movs	r5, #2
 800d87a:	e7f2      	b.n	800d862 <_dtoa_r+0x36a>
 800d87c:	07f9      	lsls	r1, r7, #31
 800d87e:	d508      	bpl.n	800d892 <_dtoa_r+0x39a>
 800d880:	4640      	mov	r0, r8
 800d882:	4649      	mov	r1, r9
 800d884:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d888:	f7f2 fece 	bl	8000628 <__aeabi_dmul>
 800d88c:	3501      	adds	r5, #1
 800d88e:	4680      	mov	r8, r0
 800d890:	4689      	mov	r9, r1
 800d892:	107f      	asrs	r7, r7, #1
 800d894:	3608      	adds	r6, #8
 800d896:	e7e5      	b.n	800d864 <_dtoa_r+0x36c>
 800d898:	f000 809b 	beq.w	800d9d2 <_dtoa_r+0x4da>
 800d89c:	9b00      	ldr	r3, [sp, #0]
 800d89e:	4f9d      	ldr	r7, [pc, #628]	; (800db14 <_dtoa_r+0x61c>)
 800d8a0:	425e      	negs	r6, r3
 800d8a2:	4b9b      	ldr	r3, [pc, #620]	; (800db10 <_dtoa_r+0x618>)
 800d8a4:	f006 020f 	and.w	r2, r6, #15
 800d8a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b0:	ec51 0b19 	vmov	r0, r1, d9
 800d8b4:	f7f2 feb8 	bl	8000628 <__aeabi_dmul>
 800d8b8:	1136      	asrs	r6, r6, #4
 800d8ba:	4682      	mov	sl, r0
 800d8bc:	468b      	mov	fp, r1
 800d8be:	2300      	movs	r3, #0
 800d8c0:	2502      	movs	r5, #2
 800d8c2:	2e00      	cmp	r6, #0
 800d8c4:	d17a      	bne.n	800d9bc <_dtoa_r+0x4c4>
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1d3      	bne.n	800d872 <_dtoa_r+0x37a>
 800d8ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f000 8082 	beq.w	800d9d6 <_dtoa_r+0x4de>
 800d8d2:	4b91      	ldr	r3, [pc, #580]	; (800db18 <_dtoa_r+0x620>)
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	4650      	mov	r0, sl
 800d8d8:	4659      	mov	r1, fp
 800d8da:	f7f3 f917 	bl	8000b0c <__aeabi_dcmplt>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d079      	beq.n	800d9d6 <_dtoa_r+0x4de>
 800d8e2:	9b03      	ldr	r3, [sp, #12]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d076      	beq.n	800d9d6 <_dtoa_r+0x4de>
 800d8e8:	9b02      	ldr	r3, [sp, #8]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	dd36      	ble.n	800d95c <_dtoa_r+0x464>
 800d8ee:	9b00      	ldr	r3, [sp, #0]
 800d8f0:	4650      	mov	r0, sl
 800d8f2:	4659      	mov	r1, fp
 800d8f4:	1e5f      	subs	r7, r3, #1
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	4b88      	ldr	r3, [pc, #544]	; (800db1c <_dtoa_r+0x624>)
 800d8fa:	f7f2 fe95 	bl	8000628 <__aeabi_dmul>
 800d8fe:	9e02      	ldr	r6, [sp, #8]
 800d900:	4682      	mov	sl, r0
 800d902:	468b      	mov	fp, r1
 800d904:	3501      	adds	r5, #1
 800d906:	4628      	mov	r0, r5
 800d908:	f7f2 fe24 	bl	8000554 <__aeabi_i2d>
 800d90c:	4652      	mov	r2, sl
 800d90e:	465b      	mov	r3, fp
 800d910:	f7f2 fe8a 	bl	8000628 <__aeabi_dmul>
 800d914:	4b82      	ldr	r3, [pc, #520]	; (800db20 <_dtoa_r+0x628>)
 800d916:	2200      	movs	r2, #0
 800d918:	f7f2 fcd0 	bl	80002bc <__adddf3>
 800d91c:	46d0      	mov	r8, sl
 800d91e:	46d9      	mov	r9, fp
 800d920:	4682      	mov	sl, r0
 800d922:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d926:	2e00      	cmp	r6, #0
 800d928:	d158      	bne.n	800d9dc <_dtoa_r+0x4e4>
 800d92a:	4b7e      	ldr	r3, [pc, #504]	; (800db24 <_dtoa_r+0x62c>)
 800d92c:	2200      	movs	r2, #0
 800d92e:	4640      	mov	r0, r8
 800d930:	4649      	mov	r1, r9
 800d932:	f7f2 fcc1 	bl	80002b8 <__aeabi_dsub>
 800d936:	4652      	mov	r2, sl
 800d938:	465b      	mov	r3, fp
 800d93a:	4680      	mov	r8, r0
 800d93c:	4689      	mov	r9, r1
 800d93e:	f7f3 f903 	bl	8000b48 <__aeabi_dcmpgt>
 800d942:	2800      	cmp	r0, #0
 800d944:	f040 8295 	bne.w	800de72 <_dtoa_r+0x97a>
 800d948:	4652      	mov	r2, sl
 800d94a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d94e:	4640      	mov	r0, r8
 800d950:	4649      	mov	r1, r9
 800d952:	f7f3 f8db 	bl	8000b0c <__aeabi_dcmplt>
 800d956:	2800      	cmp	r0, #0
 800d958:	f040 8289 	bne.w	800de6e <_dtoa_r+0x976>
 800d95c:	ec5b ab19 	vmov	sl, fp, d9
 800d960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d962:	2b00      	cmp	r3, #0
 800d964:	f2c0 8148 	blt.w	800dbf8 <_dtoa_r+0x700>
 800d968:	9a00      	ldr	r2, [sp, #0]
 800d96a:	2a0e      	cmp	r2, #14
 800d96c:	f300 8144 	bgt.w	800dbf8 <_dtoa_r+0x700>
 800d970:	4b67      	ldr	r3, [pc, #412]	; (800db10 <_dtoa_r+0x618>)
 800d972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d976:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d97a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	f280 80d5 	bge.w	800db2c <_dtoa_r+0x634>
 800d982:	9b03      	ldr	r3, [sp, #12]
 800d984:	2b00      	cmp	r3, #0
 800d986:	f300 80d1 	bgt.w	800db2c <_dtoa_r+0x634>
 800d98a:	f040 826f 	bne.w	800de6c <_dtoa_r+0x974>
 800d98e:	4b65      	ldr	r3, [pc, #404]	; (800db24 <_dtoa_r+0x62c>)
 800d990:	2200      	movs	r2, #0
 800d992:	4640      	mov	r0, r8
 800d994:	4649      	mov	r1, r9
 800d996:	f7f2 fe47 	bl	8000628 <__aeabi_dmul>
 800d99a:	4652      	mov	r2, sl
 800d99c:	465b      	mov	r3, fp
 800d99e:	f7f3 f8c9 	bl	8000b34 <__aeabi_dcmpge>
 800d9a2:	9e03      	ldr	r6, [sp, #12]
 800d9a4:	4637      	mov	r7, r6
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	f040 8245 	bne.w	800de36 <_dtoa_r+0x93e>
 800d9ac:	9d01      	ldr	r5, [sp, #4]
 800d9ae:	2331      	movs	r3, #49	; 0x31
 800d9b0:	f805 3b01 	strb.w	r3, [r5], #1
 800d9b4:	9b00      	ldr	r3, [sp, #0]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	9300      	str	r3, [sp, #0]
 800d9ba:	e240      	b.n	800de3e <_dtoa_r+0x946>
 800d9bc:	07f2      	lsls	r2, r6, #31
 800d9be:	d505      	bpl.n	800d9cc <_dtoa_r+0x4d4>
 800d9c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9c4:	f7f2 fe30 	bl	8000628 <__aeabi_dmul>
 800d9c8:	3501      	adds	r5, #1
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	1076      	asrs	r6, r6, #1
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	e777      	b.n	800d8c2 <_dtoa_r+0x3ca>
 800d9d2:	2502      	movs	r5, #2
 800d9d4:	e779      	b.n	800d8ca <_dtoa_r+0x3d2>
 800d9d6:	9f00      	ldr	r7, [sp, #0]
 800d9d8:	9e03      	ldr	r6, [sp, #12]
 800d9da:	e794      	b.n	800d906 <_dtoa_r+0x40e>
 800d9dc:	9901      	ldr	r1, [sp, #4]
 800d9de:	4b4c      	ldr	r3, [pc, #304]	; (800db10 <_dtoa_r+0x618>)
 800d9e0:	4431      	add	r1, r6
 800d9e2:	910d      	str	r1, [sp, #52]	; 0x34
 800d9e4:	9908      	ldr	r1, [sp, #32]
 800d9e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d9ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9ee:	2900      	cmp	r1, #0
 800d9f0:	d043      	beq.n	800da7a <_dtoa_r+0x582>
 800d9f2:	494d      	ldr	r1, [pc, #308]	; (800db28 <_dtoa_r+0x630>)
 800d9f4:	2000      	movs	r0, #0
 800d9f6:	f7f2 ff41 	bl	800087c <__aeabi_ddiv>
 800d9fa:	4652      	mov	r2, sl
 800d9fc:	465b      	mov	r3, fp
 800d9fe:	f7f2 fc5b 	bl	80002b8 <__aeabi_dsub>
 800da02:	9d01      	ldr	r5, [sp, #4]
 800da04:	4682      	mov	sl, r0
 800da06:	468b      	mov	fp, r1
 800da08:	4649      	mov	r1, r9
 800da0a:	4640      	mov	r0, r8
 800da0c:	f7f3 f8bc 	bl	8000b88 <__aeabi_d2iz>
 800da10:	4606      	mov	r6, r0
 800da12:	f7f2 fd9f 	bl	8000554 <__aeabi_i2d>
 800da16:	4602      	mov	r2, r0
 800da18:	460b      	mov	r3, r1
 800da1a:	4640      	mov	r0, r8
 800da1c:	4649      	mov	r1, r9
 800da1e:	f7f2 fc4b 	bl	80002b8 <__aeabi_dsub>
 800da22:	3630      	adds	r6, #48	; 0x30
 800da24:	f805 6b01 	strb.w	r6, [r5], #1
 800da28:	4652      	mov	r2, sl
 800da2a:	465b      	mov	r3, fp
 800da2c:	4680      	mov	r8, r0
 800da2e:	4689      	mov	r9, r1
 800da30:	f7f3 f86c 	bl	8000b0c <__aeabi_dcmplt>
 800da34:	2800      	cmp	r0, #0
 800da36:	d163      	bne.n	800db00 <_dtoa_r+0x608>
 800da38:	4642      	mov	r2, r8
 800da3a:	464b      	mov	r3, r9
 800da3c:	4936      	ldr	r1, [pc, #216]	; (800db18 <_dtoa_r+0x620>)
 800da3e:	2000      	movs	r0, #0
 800da40:	f7f2 fc3a 	bl	80002b8 <__aeabi_dsub>
 800da44:	4652      	mov	r2, sl
 800da46:	465b      	mov	r3, fp
 800da48:	f7f3 f860 	bl	8000b0c <__aeabi_dcmplt>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	f040 80b5 	bne.w	800dbbc <_dtoa_r+0x6c4>
 800da52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da54:	429d      	cmp	r5, r3
 800da56:	d081      	beq.n	800d95c <_dtoa_r+0x464>
 800da58:	4b30      	ldr	r3, [pc, #192]	; (800db1c <_dtoa_r+0x624>)
 800da5a:	2200      	movs	r2, #0
 800da5c:	4650      	mov	r0, sl
 800da5e:	4659      	mov	r1, fp
 800da60:	f7f2 fde2 	bl	8000628 <__aeabi_dmul>
 800da64:	4b2d      	ldr	r3, [pc, #180]	; (800db1c <_dtoa_r+0x624>)
 800da66:	4682      	mov	sl, r0
 800da68:	468b      	mov	fp, r1
 800da6a:	4640      	mov	r0, r8
 800da6c:	4649      	mov	r1, r9
 800da6e:	2200      	movs	r2, #0
 800da70:	f7f2 fdda 	bl	8000628 <__aeabi_dmul>
 800da74:	4680      	mov	r8, r0
 800da76:	4689      	mov	r9, r1
 800da78:	e7c6      	b.n	800da08 <_dtoa_r+0x510>
 800da7a:	4650      	mov	r0, sl
 800da7c:	4659      	mov	r1, fp
 800da7e:	f7f2 fdd3 	bl	8000628 <__aeabi_dmul>
 800da82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da84:	9d01      	ldr	r5, [sp, #4]
 800da86:	930f      	str	r3, [sp, #60]	; 0x3c
 800da88:	4682      	mov	sl, r0
 800da8a:	468b      	mov	fp, r1
 800da8c:	4649      	mov	r1, r9
 800da8e:	4640      	mov	r0, r8
 800da90:	f7f3 f87a 	bl	8000b88 <__aeabi_d2iz>
 800da94:	4606      	mov	r6, r0
 800da96:	f7f2 fd5d 	bl	8000554 <__aeabi_i2d>
 800da9a:	3630      	adds	r6, #48	; 0x30
 800da9c:	4602      	mov	r2, r0
 800da9e:	460b      	mov	r3, r1
 800daa0:	4640      	mov	r0, r8
 800daa2:	4649      	mov	r1, r9
 800daa4:	f7f2 fc08 	bl	80002b8 <__aeabi_dsub>
 800daa8:	f805 6b01 	strb.w	r6, [r5], #1
 800daac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800daae:	429d      	cmp	r5, r3
 800dab0:	4680      	mov	r8, r0
 800dab2:	4689      	mov	r9, r1
 800dab4:	f04f 0200 	mov.w	r2, #0
 800dab8:	d124      	bne.n	800db04 <_dtoa_r+0x60c>
 800daba:	4b1b      	ldr	r3, [pc, #108]	; (800db28 <_dtoa_r+0x630>)
 800dabc:	4650      	mov	r0, sl
 800dabe:	4659      	mov	r1, fp
 800dac0:	f7f2 fbfc 	bl	80002bc <__adddf3>
 800dac4:	4602      	mov	r2, r0
 800dac6:	460b      	mov	r3, r1
 800dac8:	4640      	mov	r0, r8
 800daca:	4649      	mov	r1, r9
 800dacc:	f7f3 f83c 	bl	8000b48 <__aeabi_dcmpgt>
 800dad0:	2800      	cmp	r0, #0
 800dad2:	d173      	bne.n	800dbbc <_dtoa_r+0x6c4>
 800dad4:	4652      	mov	r2, sl
 800dad6:	465b      	mov	r3, fp
 800dad8:	4913      	ldr	r1, [pc, #76]	; (800db28 <_dtoa_r+0x630>)
 800dada:	2000      	movs	r0, #0
 800dadc:	f7f2 fbec 	bl	80002b8 <__aeabi_dsub>
 800dae0:	4602      	mov	r2, r0
 800dae2:	460b      	mov	r3, r1
 800dae4:	4640      	mov	r0, r8
 800dae6:	4649      	mov	r1, r9
 800dae8:	f7f3 f810 	bl	8000b0c <__aeabi_dcmplt>
 800daec:	2800      	cmp	r0, #0
 800daee:	f43f af35 	beq.w	800d95c <_dtoa_r+0x464>
 800daf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800daf4:	1e6b      	subs	r3, r5, #1
 800daf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800daf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dafc:	2b30      	cmp	r3, #48	; 0x30
 800dafe:	d0f8      	beq.n	800daf2 <_dtoa_r+0x5fa>
 800db00:	9700      	str	r7, [sp, #0]
 800db02:	e049      	b.n	800db98 <_dtoa_r+0x6a0>
 800db04:	4b05      	ldr	r3, [pc, #20]	; (800db1c <_dtoa_r+0x624>)
 800db06:	f7f2 fd8f 	bl	8000628 <__aeabi_dmul>
 800db0a:	4680      	mov	r8, r0
 800db0c:	4689      	mov	r9, r1
 800db0e:	e7bd      	b.n	800da8c <_dtoa_r+0x594>
 800db10:	08011580 	.word	0x08011580
 800db14:	08011558 	.word	0x08011558
 800db18:	3ff00000 	.word	0x3ff00000
 800db1c:	40240000 	.word	0x40240000
 800db20:	401c0000 	.word	0x401c0000
 800db24:	40140000 	.word	0x40140000
 800db28:	3fe00000 	.word	0x3fe00000
 800db2c:	9d01      	ldr	r5, [sp, #4]
 800db2e:	4656      	mov	r6, sl
 800db30:	465f      	mov	r7, fp
 800db32:	4642      	mov	r2, r8
 800db34:	464b      	mov	r3, r9
 800db36:	4630      	mov	r0, r6
 800db38:	4639      	mov	r1, r7
 800db3a:	f7f2 fe9f 	bl	800087c <__aeabi_ddiv>
 800db3e:	f7f3 f823 	bl	8000b88 <__aeabi_d2iz>
 800db42:	4682      	mov	sl, r0
 800db44:	f7f2 fd06 	bl	8000554 <__aeabi_i2d>
 800db48:	4642      	mov	r2, r8
 800db4a:	464b      	mov	r3, r9
 800db4c:	f7f2 fd6c 	bl	8000628 <__aeabi_dmul>
 800db50:	4602      	mov	r2, r0
 800db52:	460b      	mov	r3, r1
 800db54:	4630      	mov	r0, r6
 800db56:	4639      	mov	r1, r7
 800db58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800db5c:	f7f2 fbac 	bl	80002b8 <__aeabi_dsub>
 800db60:	f805 6b01 	strb.w	r6, [r5], #1
 800db64:	9e01      	ldr	r6, [sp, #4]
 800db66:	9f03      	ldr	r7, [sp, #12]
 800db68:	1bae      	subs	r6, r5, r6
 800db6a:	42b7      	cmp	r7, r6
 800db6c:	4602      	mov	r2, r0
 800db6e:	460b      	mov	r3, r1
 800db70:	d135      	bne.n	800dbde <_dtoa_r+0x6e6>
 800db72:	f7f2 fba3 	bl	80002bc <__adddf3>
 800db76:	4642      	mov	r2, r8
 800db78:	464b      	mov	r3, r9
 800db7a:	4606      	mov	r6, r0
 800db7c:	460f      	mov	r7, r1
 800db7e:	f7f2 ffe3 	bl	8000b48 <__aeabi_dcmpgt>
 800db82:	b9d0      	cbnz	r0, 800dbba <_dtoa_r+0x6c2>
 800db84:	4642      	mov	r2, r8
 800db86:	464b      	mov	r3, r9
 800db88:	4630      	mov	r0, r6
 800db8a:	4639      	mov	r1, r7
 800db8c:	f7f2 ffb4 	bl	8000af8 <__aeabi_dcmpeq>
 800db90:	b110      	cbz	r0, 800db98 <_dtoa_r+0x6a0>
 800db92:	f01a 0f01 	tst.w	sl, #1
 800db96:	d110      	bne.n	800dbba <_dtoa_r+0x6c2>
 800db98:	4620      	mov	r0, r4
 800db9a:	ee18 1a10 	vmov	r1, s16
 800db9e:	f000 fe87 	bl	800e8b0 <_Bfree>
 800dba2:	2300      	movs	r3, #0
 800dba4:	9800      	ldr	r0, [sp, #0]
 800dba6:	702b      	strb	r3, [r5, #0]
 800dba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbaa:	3001      	adds	r0, #1
 800dbac:	6018      	str	r0, [r3, #0]
 800dbae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	f43f acf1 	beq.w	800d598 <_dtoa_r+0xa0>
 800dbb6:	601d      	str	r5, [r3, #0]
 800dbb8:	e4ee      	b.n	800d598 <_dtoa_r+0xa0>
 800dbba:	9f00      	ldr	r7, [sp, #0]
 800dbbc:	462b      	mov	r3, r5
 800dbbe:	461d      	mov	r5, r3
 800dbc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbc4:	2a39      	cmp	r2, #57	; 0x39
 800dbc6:	d106      	bne.n	800dbd6 <_dtoa_r+0x6de>
 800dbc8:	9a01      	ldr	r2, [sp, #4]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d1f7      	bne.n	800dbbe <_dtoa_r+0x6c6>
 800dbce:	9901      	ldr	r1, [sp, #4]
 800dbd0:	2230      	movs	r2, #48	; 0x30
 800dbd2:	3701      	adds	r7, #1
 800dbd4:	700a      	strb	r2, [r1, #0]
 800dbd6:	781a      	ldrb	r2, [r3, #0]
 800dbd8:	3201      	adds	r2, #1
 800dbda:	701a      	strb	r2, [r3, #0]
 800dbdc:	e790      	b.n	800db00 <_dtoa_r+0x608>
 800dbde:	4ba6      	ldr	r3, [pc, #664]	; (800de78 <_dtoa_r+0x980>)
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f7f2 fd21 	bl	8000628 <__aeabi_dmul>
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	2300      	movs	r3, #0
 800dbea:	4606      	mov	r6, r0
 800dbec:	460f      	mov	r7, r1
 800dbee:	f7f2 ff83 	bl	8000af8 <__aeabi_dcmpeq>
 800dbf2:	2800      	cmp	r0, #0
 800dbf4:	d09d      	beq.n	800db32 <_dtoa_r+0x63a>
 800dbf6:	e7cf      	b.n	800db98 <_dtoa_r+0x6a0>
 800dbf8:	9a08      	ldr	r2, [sp, #32]
 800dbfa:	2a00      	cmp	r2, #0
 800dbfc:	f000 80d7 	beq.w	800ddae <_dtoa_r+0x8b6>
 800dc00:	9a06      	ldr	r2, [sp, #24]
 800dc02:	2a01      	cmp	r2, #1
 800dc04:	f300 80ba 	bgt.w	800dd7c <_dtoa_r+0x884>
 800dc08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc0a:	2a00      	cmp	r2, #0
 800dc0c:	f000 80b2 	beq.w	800dd74 <_dtoa_r+0x87c>
 800dc10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dc14:	9e07      	ldr	r6, [sp, #28]
 800dc16:	9d04      	ldr	r5, [sp, #16]
 800dc18:	9a04      	ldr	r2, [sp, #16]
 800dc1a:	441a      	add	r2, r3
 800dc1c:	9204      	str	r2, [sp, #16]
 800dc1e:	9a05      	ldr	r2, [sp, #20]
 800dc20:	2101      	movs	r1, #1
 800dc22:	441a      	add	r2, r3
 800dc24:	4620      	mov	r0, r4
 800dc26:	9205      	str	r2, [sp, #20]
 800dc28:	f000 ff44 	bl	800eab4 <__i2b>
 800dc2c:	4607      	mov	r7, r0
 800dc2e:	2d00      	cmp	r5, #0
 800dc30:	dd0c      	ble.n	800dc4c <_dtoa_r+0x754>
 800dc32:	9b05      	ldr	r3, [sp, #20]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	dd09      	ble.n	800dc4c <_dtoa_r+0x754>
 800dc38:	42ab      	cmp	r3, r5
 800dc3a:	9a04      	ldr	r2, [sp, #16]
 800dc3c:	bfa8      	it	ge
 800dc3e:	462b      	movge	r3, r5
 800dc40:	1ad2      	subs	r2, r2, r3
 800dc42:	9204      	str	r2, [sp, #16]
 800dc44:	9a05      	ldr	r2, [sp, #20]
 800dc46:	1aed      	subs	r5, r5, r3
 800dc48:	1ad3      	subs	r3, r2, r3
 800dc4a:	9305      	str	r3, [sp, #20]
 800dc4c:	9b07      	ldr	r3, [sp, #28]
 800dc4e:	b31b      	cbz	r3, 800dc98 <_dtoa_r+0x7a0>
 800dc50:	9b08      	ldr	r3, [sp, #32]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f000 80af 	beq.w	800ddb6 <_dtoa_r+0x8be>
 800dc58:	2e00      	cmp	r6, #0
 800dc5a:	dd13      	ble.n	800dc84 <_dtoa_r+0x78c>
 800dc5c:	4639      	mov	r1, r7
 800dc5e:	4632      	mov	r2, r6
 800dc60:	4620      	mov	r0, r4
 800dc62:	f000 ffe7 	bl	800ec34 <__pow5mult>
 800dc66:	ee18 2a10 	vmov	r2, s16
 800dc6a:	4601      	mov	r1, r0
 800dc6c:	4607      	mov	r7, r0
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f000 ff36 	bl	800eae0 <__multiply>
 800dc74:	ee18 1a10 	vmov	r1, s16
 800dc78:	4680      	mov	r8, r0
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	f000 fe18 	bl	800e8b0 <_Bfree>
 800dc80:	ee08 8a10 	vmov	s16, r8
 800dc84:	9b07      	ldr	r3, [sp, #28]
 800dc86:	1b9a      	subs	r2, r3, r6
 800dc88:	d006      	beq.n	800dc98 <_dtoa_r+0x7a0>
 800dc8a:	ee18 1a10 	vmov	r1, s16
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f000 ffd0 	bl	800ec34 <__pow5mult>
 800dc94:	ee08 0a10 	vmov	s16, r0
 800dc98:	2101      	movs	r1, #1
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f000 ff0a 	bl	800eab4 <__i2b>
 800dca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	4606      	mov	r6, r0
 800dca6:	f340 8088 	ble.w	800ddba <_dtoa_r+0x8c2>
 800dcaa:	461a      	mov	r2, r3
 800dcac:	4601      	mov	r1, r0
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f000 ffc0 	bl	800ec34 <__pow5mult>
 800dcb4:	9b06      	ldr	r3, [sp, #24]
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	4606      	mov	r6, r0
 800dcba:	f340 8081 	ble.w	800ddc0 <_dtoa_r+0x8c8>
 800dcbe:	f04f 0800 	mov.w	r8, #0
 800dcc2:	6933      	ldr	r3, [r6, #16]
 800dcc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dcc8:	6918      	ldr	r0, [r3, #16]
 800dcca:	f000 fea3 	bl	800ea14 <__hi0bits>
 800dcce:	f1c0 0020 	rsb	r0, r0, #32
 800dcd2:	9b05      	ldr	r3, [sp, #20]
 800dcd4:	4418      	add	r0, r3
 800dcd6:	f010 001f 	ands.w	r0, r0, #31
 800dcda:	f000 8092 	beq.w	800de02 <_dtoa_r+0x90a>
 800dcde:	f1c0 0320 	rsb	r3, r0, #32
 800dce2:	2b04      	cmp	r3, #4
 800dce4:	f340 808a 	ble.w	800ddfc <_dtoa_r+0x904>
 800dce8:	f1c0 001c 	rsb	r0, r0, #28
 800dcec:	9b04      	ldr	r3, [sp, #16]
 800dcee:	4403      	add	r3, r0
 800dcf0:	9304      	str	r3, [sp, #16]
 800dcf2:	9b05      	ldr	r3, [sp, #20]
 800dcf4:	4403      	add	r3, r0
 800dcf6:	4405      	add	r5, r0
 800dcf8:	9305      	str	r3, [sp, #20]
 800dcfa:	9b04      	ldr	r3, [sp, #16]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	dd07      	ble.n	800dd10 <_dtoa_r+0x818>
 800dd00:	ee18 1a10 	vmov	r1, s16
 800dd04:	461a      	mov	r2, r3
 800dd06:	4620      	mov	r0, r4
 800dd08:	f000 ffee 	bl	800ece8 <__lshift>
 800dd0c:	ee08 0a10 	vmov	s16, r0
 800dd10:	9b05      	ldr	r3, [sp, #20]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	dd05      	ble.n	800dd22 <_dtoa_r+0x82a>
 800dd16:	4631      	mov	r1, r6
 800dd18:	461a      	mov	r2, r3
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f000 ffe4 	bl	800ece8 <__lshift>
 800dd20:	4606      	mov	r6, r0
 800dd22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d06e      	beq.n	800de06 <_dtoa_r+0x90e>
 800dd28:	ee18 0a10 	vmov	r0, s16
 800dd2c:	4631      	mov	r1, r6
 800dd2e:	f001 f84b 	bl	800edc8 <__mcmp>
 800dd32:	2800      	cmp	r0, #0
 800dd34:	da67      	bge.n	800de06 <_dtoa_r+0x90e>
 800dd36:	9b00      	ldr	r3, [sp, #0]
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	ee18 1a10 	vmov	r1, s16
 800dd3e:	9300      	str	r3, [sp, #0]
 800dd40:	220a      	movs	r2, #10
 800dd42:	2300      	movs	r3, #0
 800dd44:	4620      	mov	r0, r4
 800dd46:	f000 fdd5 	bl	800e8f4 <__multadd>
 800dd4a:	9b08      	ldr	r3, [sp, #32]
 800dd4c:	ee08 0a10 	vmov	s16, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f000 81b1 	beq.w	800e0b8 <_dtoa_r+0xbc0>
 800dd56:	2300      	movs	r3, #0
 800dd58:	4639      	mov	r1, r7
 800dd5a:	220a      	movs	r2, #10
 800dd5c:	4620      	mov	r0, r4
 800dd5e:	f000 fdc9 	bl	800e8f4 <__multadd>
 800dd62:	9b02      	ldr	r3, [sp, #8]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	4607      	mov	r7, r0
 800dd68:	f300 808e 	bgt.w	800de88 <_dtoa_r+0x990>
 800dd6c:	9b06      	ldr	r3, [sp, #24]
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	dc51      	bgt.n	800de16 <_dtoa_r+0x91e>
 800dd72:	e089      	b.n	800de88 <_dtoa_r+0x990>
 800dd74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dd7a:	e74b      	b.n	800dc14 <_dtoa_r+0x71c>
 800dd7c:	9b03      	ldr	r3, [sp, #12]
 800dd7e:	1e5e      	subs	r6, r3, #1
 800dd80:	9b07      	ldr	r3, [sp, #28]
 800dd82:	42b3      	cmp	r3, r6
 800dd84:	bfbf      	itttt	lt
 800dd86:	9b07      	ldrlt	r3, [sp, #28]
 800dd88:	9607      	strlt	r6, [sp, #28]
 800dd8a:	1af2      	sublt	r2, r6, r3
 800dd8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dd8e:	bfb6      	itet	lt
 800dd90:	189b      	addlt	r3, r3, r2
 800dd92:	1b9e      	subge	r6, r3, r6
 800dd94:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dd96:	9b03      	ldr	r3, [sp, #12]
 800dd98:	bfb8      	it	lt
 800dd9a:	2600      	movlt	r6, #0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	bfb7      	itett	lt
 800dda0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dda4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dda8:	1a9d      	sublt	r5, r3, r2
 800ddaa:	2300      	movlt	r3, #0
 800ddac:	e734      	b.n	800dc18 <_dtoa_r+0x720>
 800ddae:	9e07      	ldr	r6, [sp, #28]
 800ddb0:	9d04      	ldr	r5, [sp, #16]
 800ddb2:	9f08      	ldr	r7, [sp, #32]
 800ddb4:	e73b      	b.n	800dc2e <_dtoa_r+0x736>
 800ddb6:	9a07      	ldr	r2, [sp, #28]
 800ddb8:	e767      	b.n	800dc8a <_dtoa_r+0x792>
 800ddba:	9b06      	ldr	r3, [sp, #24]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	dc18      	bgt.n	800ddf2 <_dtoa_r+0x8fa>
 800ddc0:	f1ba 0f00 	cmp.w	sl, #0
 800ddc4:	d115      	bne.n	800ddf2 <_dtoa_r+0x8fa>
 800ddc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddca:	b993      	cbnz	r3, 800ddf2 <_dtoa_r+0x8fa>
 800ddcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ddd0:	0d1b      	lsrs	r3, r3, #20
 800ddd2:	051b      	lsls	r3, r3, #20
 800ddd4:	b183      	cbz	r3, 800ddf8 <_dtoa_r+0x900>
 800ddd6:	9b04      	ldr	r3, [sp, #16]
 800ddd8:	3301      	adds	r3, #1
 800ddda:	9304      	str	r3, [sp, #16]
 800dddc:	9b05      	ldr	r3, [sp, #20]
 800ddde:	3301      	adds	r3, #1
 800dde0:	9305      	str	r3, [sp, #20]
 800dde2:	f04f 0801 	mov.w	r8, #1
 800dde6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f47f af6a 	bne.w	800dcc2 <_dtoa_r+0x7ca>
 800ddee:	2001      	movs	r0, #1
 800ddf0:	e76f      	b.n	800dcd2 <_dtoa_r+0x7da>
 800ddf2:	f04f 0800 	mov.w	r8, #0
 800ddf6:	e7f6      	b.n	800dde6 <_dtoa_r+0x8ee>
 800ddf8:	4698      	mov	r8, r3
 800ddfa:	e7f4      	b.n	800dde6 <_dtoa_r+0x8ee>
 800ddfc:	f43f af7d 	beq.w	800dcfa <_dtoa_r+0x802>
 800de00:	4618      	mov	r0, r3
 800de02:	301c      	adds	r0, #28
 800de04:	e772      	b.n	800dcec <_dtoa_r+0x7f4>
 800de06:	9b03      	ldr	r3, [sp, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	dc37      	bgt.n	800de7c <_dtoa_r+0x984>
 800de0c:	9b06      	ldr	r3, [sp, #24]
 800de0e:	2b02      	cmp	r3, #2
 800de10:	dd34      	ble.n	800de7c <_dtoa_r+0x984>
 800de12:	9b03      	ldr	r3, [sp, #12]
 800de14:	9302      	str	r3, [sp, #8]
 800de16:	9b02      	ldr	r3, [sp, #8]
 800de18:	b96b      	cbnz	r3, 800de36 <_dtoa_r+0x93e>
 800de1a:	4631      	mov	r1, r6
 800de1c:	2205      	movs	r2, #5
 800de1e:	4620      	mov	r0, r4
 800de20:	f000 fd68 	bl	800e8f4 <__multadd>
 800de24:	4601      	mov	r1, r0
 800de26:	4606      	mov	r6, r0
 800de28:	ee18 0a10 	vmov	r0, s16
 800de2c:	f000 ffcc 	bl	800edc8 <__mcmp>
 800de30:	2800      	cmp	r0, #0
 800de32:	f73f adbb 	bgt.w	800d9ac <_dtoa_r+0x4b4>
 800de36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de38:	9d01      	ldr	r5, [sp, #4]
 800de3a:	43db      	mvns	r3, r3
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	f04f 0800 	mov.w	r8, #0
 800de42:	4631      	mov	r1, r6
 800de44:	4620      	mov	r0, r4
 800de46:	f000 fd33 	bl	800e8b0 <_Bfree>
 800de4a:	2f00      	cmp	r7, #0
 800de4c:	f43f aea4 	beq.w	800db98 <_dtoa_r+0x6a0>
 800de50:	f1b8 0f00 	cmp.w	r8, #0
 800de54:	d005      	beq.n	800de62 <_dtoa_r+0x96a>
 800de56:	45b8      	cmp	r8, r7
 800de58:	d003      	beq.n	800de62 <_dtoa_r+0x96a>
 800de5a:	4641      	mov	r1, r8
 800de5c:	4620      	mov	r0, r4
 800de5e:	f000 fd27 	bl	800e8b0 <_Bfree>
 800de62:	4639      	mov	r1, r7
 800de64:	4620      	mov	r0, r4
 800de66:	f000 fd23 	bl	800e8b0 <_Bfree>
 800de6a:	e695      	b.n	800db98 <_dtoa_r+0x6a0>
 800de6c:	2600      	movs	r6, #0
 800de6e:	4637      	mov	r7, r6
 800de70:	e7e1      	b.n	800de36 <_dtoa_r+0x93e>
 800de72:	9700      	str	r7, [sp, #0]
 800de74:	4637      	mov	r7, r6
 800de76:	e599      	b.n	800d9ac <_dtoa_r+0x4b4>
 800de78:	40240000 	.word	0x40240000
 800de7c:	9b08      	ldr	r3, [sp, #32]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 80ca 	beq.w	800e018 <_dtoa_r+0xb20>
 800de84:	9b03      	ldr	r3, [sp, #12]
 800de86:	9302      	str	r3, [sp, #8]
 800de88:	2d00      	cmp	r5, #0
 800de8a:	dd05      	ble.n	800de98 <_dtoa_r+0x9a0>
 800de8c:	4639      	mov	r1, r7
 800de8e:	462a      	mov	r2, r5
 800de90:	4620      	mov	r0, r4
 800de92:	f000 ff29 	bl	800ece8 <__lshift>
 800de96:	4607      	mov	r7, r0
 800de98:	f1b8 0f00 	cmp.w	r8, #0
 800de9c:	d05b      	beq.n	800df56 <_dtoa_r+0xa5e>
 800de9e:	6879      	ldr	r1, [r7, #4]
 800dea0:	4620      	mov	r0, r4
 800dea2:	f000 fcc5 	bl	800e830 <_Balloc>
 800dea6:	4605      	mov	r5, r0
 800dea8:	b928      	cbnz	r0, 800deb6 <_dtoa_r+0x9be>
 800deaa:	4b87      	ldr	r3, [pc, #540]	; (800e0c8 <_dtoa_r+0xbd0>)
 800deac:	4602      	mov	r2, r0
 800deae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800deb2:	f7ff bb3b 	b.w	800d52c <_dtoa_r+0x34>
 800deb6:	693a      	ldr	r2, [r7, #16]
 800deb8:	3202      	adds	r2, #2
 800deba:	0092      	lsls	r2, r2, #2
 800debc:	f107 010c 	add.w	r1, r7, #12
 800dec0:	300c      	adds	r0, #12
 800dec2:	f000 fca7 	bl	800e814 <memcpy>
 800dec6:	2201      	movs	r2, #1
 800dec8:	4629      	mov	r1, r5
 800deca:	4620      	mov	r0, r4
 800decc:	f000 ff0c 	bl	800ece8 <__lshift>
 800ded0:	9b01      	ldr	r3, [sp, #4]
 800ded2:	f103 0901 	add.w	r9, r3, #1
 800ded6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800deda:	4413      	add	r3, r2
 800dedc:	9305      	str	r3, [sp, #20]
 800dede:	f00a 0301 	and.w	r3, sl, #1
 800dee2:	46b8      	mov	r8, r7
 800dee4:	9304      	str	r3, [sp, #16]
 800dee6:	4607      	mov	r7, r0
 800dee8:	4631      	mov	r1, r6
 800deea:	ee18 0a10 	vmov	r0, s16
 800deee:	f7ff fa75 	bl	800d3dc <quorem>
 800def2:	4641      	mov	r1, r8
 800def4:	9002      	str	r0, [sp, #8]
 800def6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800defa:	ee18 0a10 	vmov	r0, s16
 800defe:	f000 ff63 	bl	800edc8 <__mcmp>
 800df02:	463a      	mov	r2, r7
 800df04:	9003      	str	r0, [sp, #12]
 800df06:	4631      	mov	r1, r6
 800df08:	4620      	mov	r0, r4
 800df0a:	f000 ff79 	bl	800ee00 <__mdiff>
 800df0e:	68c2      	ldr	r2, [r0, #12]
 800df10:	f109 3bff 	add.w	fp, r9, #4294967295
 800df14:	4605      	mov	r5, r0
 800df16:	bb02      	cbnz	r2, 800df5a <_dtoa_r+0xa62>
 800df18:	4601      	mov	r1, r0
 800df1a:	ee18 0a10 	vmov	r0, s16
 800df1e:	f000 ff53 	bl	800edc8 <__mcmp>
 800df22:	4602      	mov	r2, r0
 800df24:	4629      	mov	r1, r5
 800df26:	4620      	mov	r0, r4
 800df28:	9207      	str	r2, [sp, #28]
 800df2a:	f000 fcc1 	bl	800e8b0 <_Bfree>
 800df2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800df32:	ea43 0102 	orr.w	r1, r3, r2
 800df36:	9b04      	ldr	r3, [sp, #16]
 800df38:	430b      	orrs	r3, r1
 800df3a:	464d      	mov	r5, r9
 800df3c:	d10f      	bne.n	800df5e <_dtoa_r+0xa66>
 800df3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df42:	d02a      	beq.n	800df9a <_dtoa_r+0xaa2>
 800df44:	9b03      	ldr	r3, [sp, #12]
 800df46:	2b00      	cmp	r3, #0
 800df48:	dd02      	ble.n	800df50 <_dtoa_r+0xa58>
 800df4a:	9b02      	ldr	r3, [sp, #8]
 800df4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800df50:	f88b a000 	strb.w	sl, [fp]
 800df54:	e775      	b.n	800de42 <_dtoa_r+0x94a>
 800df56:	4638      	mov	r0, r7
 800df58:	e7ba      	b.n	800ded0 <_dtoa_r+0x9d8>
 800df5a:	2201      	movs	r2, #1
 800df5c:	e7e2      	b.n	800df24 <_dtoa_r+0xa2c>
 800df5e:	9b03      	ldr	r3, [sp, #12]
 800df60:	2b00      	cmp	r3, #0
 800df62:	db04      	blt.n	800df6e <_dtoa_r+0xa76>
 800df64:	9906      	ldr	r1, [sp, #24]
 800df66:	430b      	orrs	r3, r1
 800df68:	9904      	ldr	r1, [sp, #16]
 800df6a:	430b      	orrs	r3, r1
 800df6c:	d122      	bne.n	800dfb4 <_dtoa_r+0xabc>
 800df6e:	2a00      	cmp	r2, #0
 800df70:	ddee      	ble.n	800df50 <_dtoa_r+0xa58>
 800df72:	ee18 1a10 	vmov	r1, s16
 800df76:	2201      	movs	r2, #1
 800df78:	4620      	mov	r0, r4
 800df7a:	f000 feb5 	bl	800ece8 <__lshift>
 800df7e:	4631      	mov	r1, r6
 800df80:	ee08 0a10 	vmov	s16, r0
 800df84:	f000 ff20 	bl	800edc8 <__mcmp>
 800df88:	2800      	cmp	r0, #0
 800df8a:	dc03      	bgt.n	800df94 <_dtoa_r+0xa9c>
 800df8c:	d1e0      	bne.n	800df50 <_dtoa_r+0xa58>
 800df8e:	f01a 0f01 	tst.w	sl, #1
 800df92:	d0dd      	beq.n	800df50 <_dtoa_r+0xa58>
 800df94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800df98:	d1d7      	bne.n	800df4a <_dtoa_r+0xa52>
 800df9a:	2339      	movs	r3, #57	; 0x39
 800df9c:	f88b 3000 	strb.w	r3, [fp]
 800dfa0:	462b      	mov	r3, r5
 800dfa2:	461d      	mov	r5, r3
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dfaa:	2a39      	cmp	r2, #57	; 0x39
 800dfac:	d071      	beq.n	800e092 <_dtoa_r+0xb9a>
 800dfae:	3201      	adds	r2, #1
 800dfb0:	701a      	strb	r2, [r3, #0]
 800dfb2:	e746      	b.n	800de42 <_dtoa_r+0x94a>
 800dfb4:	2a00      	cmp	r2, #0
 800dfb6:	dd07      	ble.n	800dfc8 <_dtoa_r+0xad0>
 800dfb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dfbc:	d0ed      	beq.n	800df9a <_dtoa_r+0xaa2>
 800dfbe:	f10a 0301 	add.w	r3, sl, #1
 800dfc2:	f88b 3000 	strb.w	r3, [fp]
 800dfc6:	e73c      	b.n	800de42 <_dtoa_r+0x94a>
 800dfc8:	9b05      	ldr	r3, [sp, #20]
 800dfca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dfce:	4599      	cmp	r9, r3
 800dfd0:	d047      	beq.n	800e062 <_dtoa_r+0xb6a>
 800dfd2:	ee18 1a10 	vmov	r1, s16
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	220a      	movs	r2, #10
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f000 fc8a 	bl	800e8f4 <__multadd>
 800dfe0:	45b8      	cmp	r8, r7
 800dfe2:	ee08 0a10 	vmov	s16, r0
 800dfe6:	f04f 0300 	mov.w	r3, #0
 800dfea:	f04f 020a 	mov.w	r2, #10
 800dfee:	4641      	mov	r1, r8
 800dff0:	4620      	mov	r0, r4
 800dff2:	d106      	bne.n	800e002 <_dtoa_r+0xb0a>
 800dff4:	f000 fc7e 	bl	800e8f4 <__multadd>
 800dff8:	4680      	mov	r8, r0
 800dffa:	4607      	mov	r7, r0
 800dffc:	f109 0901 	add.w	r9, r9, #1
 800e000:	e772      	b.n	800dee8 <_dtoa_r+0x9f0>
 800e002:	f000 fc77 	bl	800e8f4 <__multadd>
 800e006:	4639      	mov	r1, r7
 800e008:	4680      	mov	r8, r0
 800e00a:	2300      	movs	r3, #0
 800e00c:	220a      	movs	r2, #10
 800e00e:	4620      	mov	r0, r4
 800e010:	f000 fc70 	bl	800e8f4 <__multadd>
 800e014:	4607      	mov	r7, r0
 800e016:	e7f1      	b.n	800dffc <_dtoa_r+0xb04>
 800e018:	9b03      	ldr	r3, [sp, #12]
 800e01a:	9302      	str	r3, [sp, #8]
 800e01c:	9d01      	ldr	r5, [sp, #4]
 800e01e:	ee18 0a10 	vmov	r0, s16
 800e022:	4631      	mov	r1, r6
 800e024:	f7ff f9da 	bl	800d3dc <quorem>
 800e028:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e02c:	9b01      	ldr	r3, [sp, #4]
 800e02e:	f805 ab01 	strb.w	sl, [r5], #1
 800e032:	1aea      	subs	r2, r5, r3
 800e034:	9b02      	ldr	r3, [sp, #8]
 800e036:	4293      	cmp	r3, r2
 800e038:	dd09      	ble.n	800e04e <_dtoa_r+0xb56>
 800e03a:	ee18 1a10 	vmov	r1, s16
 800e03e:	2300      	movs	r3, #0
 800e040:	220a      	movs	r2, #10
 800e042:	4620      	mov	r0, r4
 800e044:	f000 fc56 	bl	800e8f4 <__multadd>
 800e048:	ee08 0a10 	vmov	s16, r0
 800e04c:	e7e7      	b.n	800e01e <_dtoa_r+0xb26>
 800e04e:	9b02      	ldr	r3, [sp, #8]
 800e050:	2b00      	cmp	r3, #0
 800e052:	bfc8      	it	gt
 800e054:	461d      	movgt	r5, r3
 800e056:	9b01      	ldr	r3, [sp, #4]
 800e058:	bfd8      	it	le
 800e05a:	2501      	movle	r5, #1
 800e05c:	441d      	add	r5, r3
 800e05e:	f04f 0800 	mov.w	r8, #0
 800e062:	ee18 1a10 	vmov	r1, s16
 800e066:	2201      	movs	r2, #1
 800e068:	4620      	mov	r0, r4
 800e06a:	f000 fe3d 	bl	800ece8 <__lshift>
 800e06e:	4631      	mov	r1, r6
 800e070:	ee08 0a10 	vmov	s16, r0
 800e074:	f000 fea8 	bl	800edc8 <__mcmp>
 800e078:	2800      	cmp	r0, #0
 800e07a:	dc91      	bgt.n	800dfa0 <_dtoa_r+0xaa8>
 800e07c:	d102      	bne.n	800e084 <_dtoa_r+0xb8c>
 800e07e:	f01a 0f01 	tst.w	sl, #1
 800e082:	d18d      	bne.n	800dfa0 <_dtoa_r+0xaa8>
 800e084:	462b      	mov	r3, r5
 800e086:	461d      	mov	r5, r3
 800e088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e08c:	2a30      	cmp	r2, #48	; 0x30
 800e08e:	d0fa      	beq.n	800e086 <_dtoa_r+0xb8e>
 800e090:	e6d7      	b.n	800de42 <_dtoa_r+0x94a>
 800e092:	9a01      	ldr	r2, [sp, #4]
 800e094:	429a      	cmp	r2, r3
 800e096:	d184      	bne.n	800dfa2 <_dtoa_r+0xaaa>
 800e098:	9b00      	ldr	r3, [sp, #0]
 800e09a:	3301      	adds	r3, #1
 800e09c:	9300      	str	r3, [sp, #0]
 800e09e:	2331      	movs	r3, #49	; 0x31
 800e0a0:	7013      	strb	r3, [r2, #0]
 800e0a2:	e6ce      	b.n	800de42 <_dtoa_r+0x94a>
 800e0a4:	4b09      	ldr	r3, [pc, #36]	; (800e0cc <_dtoa_r+0xbd4>)
 800e0a6:	f7ff ba95 	b.w	800d5d4 <_dtoa_r+0xdc>
 800e0aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f47f aa6e 	bne.w	800d58e <_dtoa_r+0x96>
 800e0b2:	4b07      	ldr	r3, [pc, #28]	; (800e0d0 <_dtoa_r+0xbd8>)
 800e0b4:	f7ff ba8e 	b.w	800d5d4 <_dtoa_r+0xdc>
 800e0b8:	9b02      	ldr	r3, [sp, #8]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	dcae      	bgt.n	800e01c <_dtoa_r+0xb24>
 800e0be:	9b06      	ldr	r3, [sp, #24]
 800e0c0:	2b02      	cmp	r3, #2
 800e0c2:	f73f aea8 	bgt.w	800de16 <_dtoa_r+0x91e>
 800e0c6:	e7a9      	b.n	800e01c <_dtoa_r+0xb24>
 800e0c8:	08011471 	.word	0x08011471
 800e0cc:	080111dc 	.word	0x080111dc
 800e0d0:	08011409 	.word	0x08011409

0800e0d4 <fiprintf>:
 800e0d4:	b40e      	push	{r1, r2, r3}
 800e0d6:	b503      	push	{r0, r1, lr}
 800e0d8:	4601      	mov	r1, r0
 800e0da:	ab03      	add	r3, sp, #12
 800e0dc:	4805      	ldr	r0, [pc, #20]	; (800e0f4 <fiprintf+0x20>)
 800e0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0e2:	6800      	ldr	r0, [r0, #0]
 800e0e4:	9301      	str	r3, [sp, #4]
 800e0e6:	f001 fae1 	bl	800f6ac <_vfiprintf_r>
 800e0ea:	b002      	add	sp, #8
 800e0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0f0:	b003      	add	sp, #12
 800e0f2:	4770      	bx	lr
 800e0f4:	20000020 	.word	0x20000020

0800e0f8 <rshift>:
 800e0f8:	6903      	ldr	r3, [r0, #16]
 800e0fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e0fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e102:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e106:	f100 0414 	add.w	r4, r0, #20
 800e10a:	dd45      	ble.n	800e198 <rshift+0xa0>
 800e10c:	f011 011f 	ands.w	r1, r1, #31
 800e110:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e114:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e118:	d10c      	bne.n	800e134 <rshift+0x3c>
 800e11a:	f100 0710 	add.w	r7, r0, #16
 800e11e:	4629      	mov	r1, r5
 800e120:	42b1      	cmp	r1, r6
 800e122:	d334      	bcc.n	800e18e <rshift+0x96>
 800e124:	1a9b      	subs	r3, r3, r2
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	1eea      	subs	r2, r5, #3
 800e12a:	4296      	cmp	r6, r2
 800e12c:	bf38      	it	cc
 800e12e:	2300      	movcc	r3, #0
 800e130:	4423      	add	r3, r4
 800e132:	e015      	b.n	800e160 <rshift+0x68>
 800e134:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e138:	f1c1 0820 	rsb	r8, r1, #32
 800e13c:	40cf      	lsrs	r7, r1
 800e13e:	f105 0e04 	add.w	lr, r5, #4
 800e142:	46a1      	mov	r9, r4
 800e144:	4576      	cmp	r6, lr
 800e146:	46f4      	mov	ip, lr
 800e148:	d815      	bhi.n	800e176 <rshift+0x7e>
 800e14a:	1a9a      	subs	r2, r3, r2
 800e14c:	0092      	lsls	r2, r2, #2
 800e14e:	3a04      	subs	r2, #4
 800e150:	3501      	adds	r5, #1
 800e152:	42ae      	cmp	r6, r5
 800e154:	bf38      	it	cc
 800e156:	2200      	movcc	r2, #0
 800e158:	18a3      	adds	r3, r4, r2
 800e15a:	50a7      	str	r7, [r4, r2]
 800e15c:	b107      	cbz	r7, 800e160 <rshift+0x68>
 800e15e:	3304      	adds	r3, #4
 800e160:	1b1a      	subs	r2, r3, r4
 800e162:	42a3      	cmp	r3, r4
 800e164:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e168:	bf08      	it	eq
 800e16a:	2300      	moveq	r3, #0
 800e16c:	6102      	str	r2, [r0, #16]
 800e16e:	bf08      	it	eq
 800e170:	6143      	streq	r3, [r0, #20]
 800e172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e176:	f8dc c000 	ldr.w	ip, [ip]
 800e17a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e17e:	ea4c 0707 	orr.w	r7, ip, r7
 800e182:	f849 7b04 	str.w	r7, [r9], #4
 800e186:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e18a:	40cf      	lsrs	r7, r1
 800e18c:	e7da      	b.n	800e144 <rshift+0x4c>
 800e18e:	f851 cb04 	ldr.w	ip, [r1], #4
 800e192:	f847 cf04 	str.w	ip, [r7, #4]!
 800e196:	e7c3      	b.n	800e120 <rshift+0x28>
 800e198:	4623      	mov	r3, r4
 800e19a:	e7e1      	b.n	800e160 <rshift+0x68>

0800e19c <__hexdig_fun>:
 800e19c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e1a0:	2b09      	cmp	r3, #9
 800e1a2:	d802      	bhi.n	800e1aa <__hexdig_fun+0xe>
 800e1a4:	3820      	subs	r0, #32
 800e1a6:	b2c0      	uxtb	r0, r0
 800e1a8:	4770      	bx	lr
 800e1aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e1ae:	2b05      	cmp	r3, #5
 800e1b0:	d801      	bhi.n	800e1b6 <__hexdig_fun+0x1a>
 800e1b2:	3847      	subs	r0, #71	; 0x47
 800e1b4:	e7f7      	b.n	800e1a6 <__hexdig_fun+0xa>
 800e1b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e1ba:	2b05      	cmp	r3, #5
 800e1bc:	d801      	bhi.n	800e1c2 <__hexdig_fun+0x26>
 800e1be:	3827      	subs	r0, #39	; 0x27
 800e1c0:	e7f1      	b.n	800e1a6 <__hexdig_fun+0xa>
 800e1c2:	2000      	movs	r0, #0
 800e1c4:	4770      	bx	lr
	...

0800e1c8 <__gethex>:
 800e1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1cc:	ed2d 8b02 	vpush	{d8}
 800e1d0:	b089      	sub	sp, #36	; 0x24
 800e1d2:	ee08 0a10 	vmov	s16, r0
 800e1d6:	9304      	str	r3, [sp, #16]
 800e1d8:	4bb4      	ldr	r3, [pc, #720]	; (800e4ac <__gethex+0x2e4>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	9301      	str	r3, [sp, #4]
 800e1de:	4618      	mov	r0, r3
 800e1e0:	468b      	mov	fp, r1
 800e1e2:	4690      	mov	r8, r2
 800e1e4:	f7f2 f806 	bl	80001f4 <strlen>
 800e1e8:	9b01      	ldr	r3, [sp, #4]
 800e1ea:	f8db 2000 	ldr.w	r2, [fp]
 800e1ee:	4403      	add	r3, r0
 800e1f0:	4682      	mov	sl, r0
 800e1f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e1f6:	9305      	str	r3, [sp, #20]
 800e1f8:	1c93      	adds	r3, r2, #2
 800e1fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e1fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e202:	32fe      	adds	r2, #254	; 0xfe
 800e204:	18d1      	adds	r1, r2, r3
 800e206:	461f      	mov	r7, r3
 800e208:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e20c:	9100      	str	r1, [sp, #0]
 800e20e:	2830      	cmp	r0, #48	; 0x30
 800e210:	d0f8      	beq.n	800e204 <__gethex+0x3c>
 800e212:	f7ff ffc3 	bl	800e19c <__hexdig_fun>
 800e216:	4604      	mov	r4, r0
 800e218:	2800      	cmp	r0, #0
 800e21a:	d13a      	bne.n	800e292 <__gethex+0xca>
 800e21c:	9901      	ldr	r1, [sp, #4]
 800e21e:	4652      	mov	r2, sl
 800e220:	4638      	mov	r0, r7
 800e222:	f001 fb8d 	bl	800f940 <strncmp>
 800e226:	4605      	mov	r5, r0
 800e228:	2800      	cmp	r0, #0
 800e22a:	d168      	bne.n	800e2fe <__gethex+0x136>
 800e22c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e230:	eb07 060a 	add.w	r6, r7, sl
 800e234:	f7ff ffb2 	bl	800e19c <__hexdig_fun>
 800e238:	2800      	cmp	r0, #0
 800e23a:	d062      	beq.n	800e302 <__gethex+0x13a>
 800e23c:	4633      	mov	r3, r6
 800e23e:	7818      	ldrb	r0, [r3, #0]
 800e240:	2830      	cmp	r0, #48	; 0x30
 800e242:	461f      	mov	r7, r3
 800e244:	f103 0301 	add.w	r3, r3, #1
 800e248:	d0f9      	beq.n	800e23e <__gethex+0x76>
 800e24a:	f7ff ffa7 	bl	800e19c <__hexdig_fun>
 800e24e:	2301      	movs	r3, #1
 800e250:	fab0 f480 	clz	r4, r0
 800e254:	0964      	lsrs	r4, r4, #5
 800e256:	4635      	mov	r5, r6
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	463a      	mov	r2, r7
 800e25c:	4616      	mov	r6, r2
 800e25e:	3201      	adds	r2, #1
 800e260:	7830      	ldrb	r0, [r6, #0]
 800e262:	f7ff ff9b 	bl	800e19c <__hexdig_fun>
 800e266:	2800      	cmp	r0, #0
 800e268:	d1f8      	bne.n	800e25c <__gethex+0x94>
 800e26a:	9901      	ldr	r1, [sp, #4]
 800e26c:	4652      	mov	r2, sl
 800e26e:	4630      	mov	r0, r6
 800e270:	f001 fb66 	bl	800f940 <strncmp>
 800e274:	b980      	cbnz	r0, 800e298 <__gethex+0xd0>
 800e276:	b94d      	cbnz	r5, 800e28c <__gethex+0xc4>
 800e278:	eb06 050a 	add.w	r5, r6, sl
 800e27c:	462a      	mov	r2, r5
 800e27e:	4616      	mov	r6, r2
 800e280:	3201      	adds	r2, #1
 800e282:	7830      	ldrb	r0, [r6, #0]
 800e284:	f7ff ff8a 	bl	800e19c <__hexdig_fun>
 800e288:	2800      	cmp	r0, #0
 800e28a:	d1f8      	bne.n	800e27e <__gethex+0xb6>
 800e28c:	1bad      	subs	r5, r5, r6
 800e28e:	00ad      	lsls	r5, r5, #2
 800e290:	e004      	b.n	800e29c <__gethex+0xd4>
 800e292:	2400      	movs	r4, #0
 800e294:	4625      	mov	r5, r4
 800e296:	e7e0      	b.n	800e25a <__gethex+0x92>
 800e298:	2d00      	cmp	r5, #0
 800e29a:	d1f7      	bne.n	800e28c <__gethex+0xc4>
 800e29c:	7833      	ldrb	r3, [r6, #0]
 800e29e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e2a2:	2b50      	cmp	r3, #80	; 0x50
 800e2a4:	d13b      	bne.n	800e31e <__gethex+0x156>
 800e2a6:	7873      	ldrb	r3, [r6, #1]
 800e2a8:	2b2b      	cmp	r3, #43	; 0x2b
 800e2aa:	d02c      	beq.n	800e306 <__gethex+0x13e>
 800e2ac:	2b2d      	cmp	r3, #45	; 0x2d
 800e2ae:	d02e      	beq.n	800e30e <__gethex+0x146>
 800e2b0:	1c71      	adds	r1, r6, #1
 800e2b2:	f04f 0900 	mov.w	r9, #0
 800e2b6:	7808      	ldrb	r0, [r1, #0]
 800e2b8:	f7ff ff70 	bl	800e19c <__hexdig_fun>
 800e2bc:	1e43      	subs	r3, r0, #1
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	2b18      	cmp	r3, #24
 800e2c2:	d82c      	bhi.n	800e31e <__gethex+0x156>
 800e2c4:	f1a0 0210 	sub.w	r2, r0, #16
 800e2c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e2cc:	f7ff ff66 	bl	800e19c <__hexdig_fun>
 800e2d0:	1e43      	subs	r3, r0, #1
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	2b18      	cmp	r3, #24
 800e2d6:	d91d      	bls.n	800e314 <__gethex+0x14c>
 800e2d8:	f1b9 0f00 	cmp.w	r9, #0
 800e2dc:	d000      	beq.n	800e2e0 <__gethex+0x118>
 800e2de:	4252      	negs	r2, r2
 800e2e0:	4415      	add	r5, r2
 800e2e2:	f8cb 1000 	str.w	r1, [fp]
 800e2e6:	b1e4      	cbz	r4, 800e322 <__gethex+0x15a>
 800e2e8:	9b00      	ldr	r3, [sp, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	bf14      	ite	ne
 800e2ee:	2700      	movne	r7, #0
 800e2f0:	2706      	moveq	r7, #6
 800e2f2:	4638      	mov	r0, r7
 800e2f4:	b009      	add	sp, #36	; 0x24
 800e2f6:	ecbd 8b02 	vpop	{d8}
 800e2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2fe:	463e      	mov	r6, r7
 800e300:	4625      	mov	r5, r4
 800e302:	2401      	movs	r4, #1
 800e304:	e7ca      	b.n	800e29c <__gethex+0xd4>
 800e306:	f04f 0900 	mov.w	r9, #0
 800e30a:	1cb1      	adds	r1, r6, #2
 800e30c:	e7d3      	b.n	800e2b6 <__gethex+0xee>
 800e30e:	f04f 0901 	mov.w	r9, #1
 800e312:	e7fa      	b.n	800e30a <__gethex+0x142>
 800e314:	230a      	movs	r3, #10
 800e316:	fb03 0202 	mla	r2, r3, r2, r0
 800e31a:	3a10      	subs	r2, #16
 800e31c:	e7d4      	b.n	800e2c8 <__gethex+0x100>
 800e31e:	4631      	mov	r1, r6
 800e320:	e7df      	b.n	800e2e2 <__gethex+0x11a>
 800e322:	1bf3      	subs	r3, r6, r7
 800e324:	3b01      	subs	r3, #1
 800e326:	4621      	mov	r1, r4
 800e328:	2b07      	cmp	r3, #7
 800e32a:	dc0b      	bgt.n	800e344 <__gethex+0x17c>
 800e32c:	ee18 0a10 	vmov	r0, s16
 800e330:	f000 fa7e 	bl	800e830 <_Balloc>
 800e334:	4604      	mov	r4, r0
 800e336:	b940      	cbnz	r0, 800e34a <__gethex+0x182>
 800e338:	4b5d      	ldr	r3, [pc, #372]	; (800e4b0 <__gethex+0x2e8>)
 800e33a:	4602      	mov	r2, r0
 800e33c:	21de      	movs	r1, #222	; 0xde
 800e33e:	485d      	ldr	r0, [pc, #372]	; (800e4b4 <__gethex+0x2ec>)
 800e340:	f7ff f82e 	bl	800d3a0 <__assert_func>
 800e344:	3101      	adds	r1, #1
 800e346:	105b      	asrs	r3, r3, #1
 800e348:	e7ee      	b.n	800e328 <__gethex+0x160>
 800e34a:	f100 0914 	add.w	r9, r0, #20
 800e34e:	f04f 0b00 	mov.w	fp, #0
 800e352:	f1ca 0301 	rsb	r3, sl, #1
 800e356:	f8cd 9008 	str.w	r9, [sp, #8]
 800e35a:	f8cd b000 	str.w	fp, [sp]
 800e35e:	9306      	str	r3, [sp, #24]
 800e360:	42b7      	cmp	r7, r6
 800e362:	d340      	bcc.n	800e3e6 <__gethex+0x21e>
 800e364:	9802      	ldr	r0, [sp, #8]
 800e366:	9b00      	ldr	r3, [sp, #0]
 800e368:	f840 3b04 	str.w	r3, [r0], #4
 800e36c:	eba0 0009 	sub.w	r0, r0, r9
 800e370:	1080      	asrs	r0, r0, #2
 800e372:	0146      	lsls	r6, r0, #5
 800e374:	6120      	str	r0, [r4, #16]
 800e376:	4618      	mov	r0, r3
 800e378:	f000 fb4c 	bl	800ea14 <__hi0bits>
 800e37c:	1a30      	subs	r0, r6, r0
 800e37e:	f8d8 6000 	ldr.w	r6, [r8]
 800e382:	42b0      	cmp	r0, r6
 800e384:	dd63      	ble.n	800e44e <__gethex+0x286>
 800e386:	1b87      	subs	r7, r0, r6
 800e388:	4639      	mov	r1, r7
 800e38a:	4620      	mov	r0, r4
 800e38c:	f000 fef0 	bl	800f170 <__any_on>
 800e390:	4682      	mov	sl, r0
 800e392:	b1a8      	cbz	r0, 800e3c0 <__gethex+0x1f8>
 800e394:	1e7b      	subs	r3, r7, #1
 800e396:	1159      	asrs	r1, r3, #5
 800e398:	f003 021f 	and.w	r2, r3, #31
 800e39c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e3a0:	f04f 0a01 	mov.w	sl, #1
 800e3a4:	fa0a f202 	lsl.w	r2, sl, r2
 800e3a8:	420a      	tst	r2, r1
 800e3aa:	d009      	beq.n	800e3c0 <__gethex+0x1f8>
 800e3ac:	4553      	cmp	r3, sl
 800e3ae:	dd05      	ble.n	800e3bc <__gethex+0x1f4>
 800e3b0:	1eb9      	subs	r1, r7, #2
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f000 fedc 	bl	800f170 <__any_on>
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	d145      	bne.n	800e448 <__gethex+0x280>
 800e3bc:	f04f 0a02 	mov.w	sl, #2
 800e3c0:	4639      	mov	r1, r7
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f7ff fe98 	bl	800e0f8 <rshift>
 800e3c8:	443d      	add	r5, r7
 800e3ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e3ce:	42ab      	cmp	r3, r5
 800e3d0:	da4c      	bge.n	800e46c <__gethex+0x2a4>
 800e3d2:	ee18 0a10 	vmov	r0, s16
 800e3d6:	4621      	mov	r1, r4
 800e3d8:	f000 fa6a 	bl	800e8b0 <_Bfree>
 800e3dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e3de:	2300      	movs	r3, #0
 800e3e0:	6013      	str	r3, [r2, #0]
 800e3e2:	27a3      	movs	r7, #163	; 0xa3
 800e3e4:	e785      	b.n	800e2f2 <__gethex+0x12a>
 800e3e6:	1e73      	subs	r3, r6, #1
 800e3e8:	9a05      	ldr	r2, [sp, #20]
 800e3ea:	9303      	str	r3, [sp, #12]
 800e3ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d019      	beq.n	800e428 <__gethex+0x260>
 800e3f4:	f1bb 0f20 	cmp.w	fp, #32
 800e3f8:	d107      	bne.n	800e40a <__gethex+0x242>
 800e3fa:	9b02      	ldr	r3, [sp, #8]
 800e3fc:	9a00      	ldr	r2, [sp, #0]
 800e3fe:	f843 2b04 	str.w	r2, [r3], #4
 800e402:	9302      	str	r3, [sp, #8]
 800e404:	2300      	movs	r3, #0
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	469b      	mov	fp, r3
 800e40a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e40e:	f7ff fec5 	bl	800e19c <__hexdig_fun>
 800e412:	9b00      	ldr	r3, [sp, #0]
 800e414:	f000 000f 	and.w	r0, r0, #15
 800e418:	fa00 f00b 	lsl.w	r0, r0, fp
 800e41c:	4303      	orrs	r3, r0
 800e41e:	9300      	str	r3, [sp, #0]
 800e420:	f10b 0b04 	add.w	fp, fp, #4
 800e424:	9b03      	ldr	r3, [sp, #12]
 800e426:	e00d      	b.n	800e444 <__gethex+0x27c>
 800e428:	9b03      	ldr	r3, [sp, #12]
 800e42a:	9a06      	ldr	r2, [sp, #24]
 800e42c:	4413      	add	r3, r2
 800e42e:	42bb      	cmp	r3, r7
 800e430:	d3e0      	bcc.n	800e3f4 <__gethex+0x22c>
 800e432:	4618      	mov	r0, r3
 800e434:	9901      	ldr	r1, [sp, #4]
 800e436:	9307      	str	r3, [sp, #28]
 800e438:	4652      	mov	r2, sl
 800e43a:	f001 fa81 	bl	800f940 <strncmp>
 800e43e:	9b07      	ldr	r3, [sp, #28]
 800e440:	2800      	cmp	r0, #0
 800e442:	d1d7      	bne.n	800e3f4 <__gethex+0x22c>
 800e444:	461e      	mov	r6, r3
 800e446:	e78b      	b.n	800e360 <__gethex+0x198>
 800e448:	f04f 0a03 	mov.w	sl, #3
 800e44c:	e7b8      	b.n	800e3c0 <__gethex+0x1f8>
 800e44e:	da0a      	bge.n	800e466 <__gethex+0x29e>
 800e450:	1a37      	subs	r7, r6, r0
 800e452:	4621      	mov	r1, r4
 800e454:	ee18 0a10 	vmov	r0, s16
 800e458:	463a      	mov	r2, r7
 800e45a:	f000 fc45 	bl	800ece8 <__lshift>
 800e45e:	1bed      	subs	r5, r5, r7
 800e460:	4604      	mov	r4, r0
 800e462:	f100 0914 	add.w	r9, r0, #20
 800e466:	f04f 0a00 	mov.w	sl, #0
 800e46a:	e7ae      	b.n	800e3ca <__gethex+0x202>
 800e46c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e470:	42a8      	cmp	r0, r5
 800e472:	dd72      	ble.n	800e55a <__gethex+0x392>
 800e474:	1b45      	subs	r5, r0, r5
 800e476:	42ae      	cmp	r6, r5
 800e478:	dc36      	bgt.n	800e4e8 <__gethex+0x320>
 800e47a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e47e:	2b02      	cmp	r3, #2
 800e480:	d02a      	beq.n	800e4d8 <__gethex+0x310>
 800e482:	2b03      	cmp	r3, #3
 800e484:	d02c      	beq.n	800e4e0 <__gethex+0x318>
 800e486:	2b01      	cmp	r3, #1
 800e488:	d11c      	bne.n	800e4c4 <__gethex+0x2fc>
 800e48a:	42ae      	cmp	r6, r5
 800e48c:	d11a      	bne.n	800e4c4 <__gethex+0x2fc>
 800e48e:	2e01      	cmp	r6, #1
 800e490:	d112      	bne.n	800e4b8 <__gethex+0x2f0>
 800e492:	9a04      	ldr	r2, [sp, #16]
 800e494:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e498:	6013      	str	r3, [r2, #0]
 800e49a:	2301      	movs	r3, #1
 800e49c:	6123      	str	r3, [r4, #16]
 800e49e:	f8c9 3000 	str.w	r3, [r9]
 800e4a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e4a4:	2762      	movs	r7, #98	; 0x62
 800e4a6:	601c      	str	r4, [r3, #0]
 800e4a8:	e723      	b.n	800e2f2 <__gethex+0x12a>
 800e4aa:	bf00      	nop
 800e4ac:	080114e8 	.word	0x080114e8
 800e4b0:	08011471 	.word	0x08011471
 800e4b4:	08011482 	.word	0x08011482
 800e4b8:	1e71      	subs	r1, r6, #1
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	f000 fe58 	bl	800f170 <__any_on>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	d1e6      	bne.n	800e492 <__gethex+0x2ca>
 800e4c4:	ee18 0a10 	vmov	r0, s16
 800e4c8:	4621      	mov	r1, r4
 800e4ca:	f000 f9f1 	bl	800e8b0 <_Bfree>
 800e4ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	6013      	str	r3, [r2, #0]
 800e4d4:	2750      	movs	r7, #80	; 0x50
 800e4d6:	e70c      	b.n	800e2f2 <__gethex+0x12a>
 800e4d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d1f2      	bne.n	800e4c4 <__gethex+0x2fc>
 800e4de:	e7d8      	b.n	800e492 <__gethex+0x2ca>
 800e4e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1d5      	bne.n	800e492 <__gethex+0x2ca>
 800e4e6:	e7ed      	b.n	800e4c4 <__gethex+0x2fc>
 800e4e8:	1e6f      	subs	r7, r5, #1
 800e4ea:	f1ba 0f00 	cmp.w	sl, #0
 800e4ee:	d131      	bne.n	800e554 <__gethex+0x38c>
 800e4f0:	b127      	cbz	r7, 800e4fc <__gethex+0x334>
 800e4f2:	4639      	mov	r1, r7
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	f000 fe3b 	bl	800f170 <__any_on>
 800e4fa:	4682      	mov	sl, r0
 800e4fc:	117b      	asrs	r3, r7, #5
 800e4fe:	2101      	movs	r1, #1
 800e500:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e504:	f007 071f 	and.w	r7, r7, #31
 800e508:	fa01 f707 	lsl.w	r7, r1, r7
 800e50c:	421f      	tst	r7, r3
 800e50e:	4629      	mov	r1, r5
 800e510:	4620      	mov	r0, r4
 800e512:	bf18      	it	ne
 800e514:	f04a 0a02 	orrne.w	sl, sl, #2
 800e518:	1b76      	subs	r6, r6, r5
 800e51a:	f7ff fded 	bl	800e0f8 <rshift>
 800e51e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e522:	2702      	movs	r7, #2
 800e524:	f1ba 0f00 	cmp.w	sl, #0
 800e528:	d048      	beq.n	800e5bc <__gethex+0x3f4>
 800e52a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e52e:	2b02      	cmp	r3, #2
 800e530:	d015      	beq.n	800e55e <__gethex+0x396>
 800e532:	2b03      	cmp	r3, #3
 800e534:	d017      	beq.n	800e566 <__gethex+0x39e>
 800e536:	2b01      	cmp	r3, #1
 800e538:	d109      	bne.n	800e54e <__gethex+0x386>
 800e53a:	f01a 0f02 	tst.w	sl, #2
 800e53e:	d006      	beq.n	800e54e <__gethex+0x386>
 800e540:	f8d9 0000 	ldr.w	r0, [r9]
 800e544:	ea4a 0a00 	orr.w	sl, sl, r0
 800e548:	f01a 0f01 	tst.w	sl, #1
 800e54c:	d10e      	bne.n	800e56c <__gethex+0x3a4>
 800e54e:	f047 0710 	orr.w	r7, r7, #16
 800e552:	e033      	b.n	800e5bc <__gethex+0x3f4>
 800e554:	f04f 0a01 	mov.w	sl, #1
 800e558:	e7d0      	b.n	800e4fc <__gethex+0x334>
 800e55a:	2701      	movs	r7, #1
 800e55c:	e7e2      	b.n	800e524 <__gethex+0x35c>
 800e55e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e560:	f1c3 0301 	rsb	r3, r3, #1
 800e564:	9315      	str	r3, [sp, #84]	; 0x54
 800e566:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d0f0      	beq.n	800e54e <__gethex+0x386>
 800e56c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e570:	f104 0314 	add.w	r3, r4, #20
 800e574:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e578:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e57c:	f04f 0c00 	mov.w	ip, #0
 800e580:	4618      	mov	r0, r3
 800e582:	f853 2b04 	ldr.w	r2, [r3], #4
 800e586:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e58a:	d01c      	beq.n	800e5c6 <__gethex+0x3fe>
 800e58c:	3201      	adds	r2, #1
 800e58e:	6002      	str	r2, [r0, #0]
 800e590:	2f02      	cmp	r7, #2
 800e592:	f104 0314 	add.w	r3, r4, #20
 800e596:	d13f      	bne.n	800e618 <__gethex+0x450>
 800e598:	f8d8 2000 	ldr.w	r2, [r8]
 800e59c:	3a01      	subs	r2, #1
 800e59e:	42b2      	cmp	r2, r6
 800e5a0:	d10a      	bne.n	800e5b8 <__gethex+0x3f0>
 800e5a2:	1171      	asrs	r1, r6, #5
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5aa:	f006 061f 	and.w	r6, r6, #31
 800e5ae:	fa02 f606 	lsl.w	r6, r2, r6
 800e5b2:	421e      	tst	r6, r3
 800e5b4:	bf18      	it	ne
 800e5b6:	4617      	movne	r7, r2
 800e5b8:	f047 0720 	orr.w	r7, r7, #32
 800e5bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e5be:	601c      	str	r4, [r3, #0]
 800e5c0:	9b04      	ldr	r3, [sp, #16]
 800e5c2:	601d      	str	r5, [r3, #0]
 800e5c4:	e695      	b.n	800e2f2 <__gethex+0x12a>
 800e5c6:	4299      	cmp	r1, r3
 800e5c8:	f843 cc04 	str.w	ip, [r3, #-4]
 800e5cc:	d8d8      	bhi.n	800e580 <__gethex+0x3b8>
 800e5ce:	68a3      	ldr	r3, [r4, #8]
 800e5d0:	459b      	cmp	fp, r3
 800e5d2:	db19      	blt.n	800e608 <__gethex+0x440>
 800e5d4:	6861      	ldr	r1, [r4, #4]
 800e5d6:	ee18 0a10 	vmov	r0, s16
 800e5da:	3101      	adds	r1, #1
 800e5dc:	f000 f928 	bl	800e830 <_Balloc>
 800e5e0:	4681      	mov	r9, r0
 800e5e2:	b918      	cbnz	r0, 800e5ec <__gethex+0x424>
 800e5e4:	4b1a      	ldr	r3, [pc, #104]	; (800e650 <__gethex+0x488>)
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	2184      	movs	r1, #132	; 0x84
 800e5ea:	e6a8      	b.n	800e33e <__gethex+0x176>
 800e5ec:	6922      	ldr	r2, [r4, #16]
 800e5ee:	3202      	adds	r2, #2
 800e5f0:	f104 010c 	add.w	r1, r4, #12
 800e5f4:	0092      	lsls	r2, r2, #2
 800e5f6:	300c      	adds	r0, #12
 800e5f8:	f000 f90c 	bl	800e814 <memcpy>
 800e5fc:	4621      	mov	r1, r4
 800e5fe:	ee18 0a10 	vmov	r0, s16
 800e602:	f000 f955 	bl	800e8b0 <_Bfree>
 800e606:	464c      	mov	r4, r9
 800e608:	6923      	ldr	r3, [r4, #16]
 800e60a:	1c5a      	adds	r2, r3, #1
 800e60c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e610:	6122      	str	r2, [r4, #16]
 800e612:	2201      	movs	r2, #1
 800e614:	615a      	str	r2, [r3, #20]
 800e616:	e7bb      	b.n	800e590 <__gethex+0x3c8>
 800e618:	6922      	ldr	r2, [r4, #16]
 800e61a:	455a      	cmp	r2, fp
 800e61c:	dd0b      	ble.n	800e636 <__gethex+0x46e>
 800e61e:	2101      	movs	r1, #1
 800e620:	4620      	mov	r0, r4
 800e622:	f7ff fd69 	bl	800e0f8 <rshift>
 800e626:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e62a:	3501      	adds	r5, #1
 800e62c:	42ab      	cmp	r3, r5
 800e62e:	f6ff aed0 	blt.w	800e3d2 <__gethex+0x20a>
 800e632:	2701      	movs	r7, #1
 800e634:	e7c0      	b.n	800e5b8 <__gethex+0x3f0>
 800e636:	f016 061f 	ands.w	r6, r6, #31
 800e63a:	d0fa      	beq.n	800e632 <__gethex+0x46a>
 800e63c:	4453      	add	r3, sl
 800e63e:	f1c6 0620 	rsb	r6, r6, #32
 800e642:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e646:	f000 f9e5 	bl	800ea14 <__hi0bits>
 800e64a:	42b0      	cmp	r0, r6
 800e64c:	dbe7      	blt.n	800e61e <__gethex+0x456>
 800e64e:	e7f0      	b.n	800e632 <__gethex+0x46a>
 800e650:	08011471 	.word	0x08011471

0800e654 <L_shift>:
 800e654:	f1c2 0208 	rsb	r2, r2, #8
 800e658:	0092      	lsls	r2, r2, #2
 800e65a:	b570      	push	{r4, r5, r6, lr}
 800e65c:	f1c2 0620 	rsb	r6, r2, #32
 800e660:	6843      	ldr	r3, [r0, #4]
 800e662:	6804      	ldr	r4, [r0, #0]
 800e664:	fa03 f506 	lsl.w	r5, r3, r6
 800e668:	432c      	orrs	r4, r5
 800e66a:	40d3      	lsrs	r3, r2
 800e66c:	6004      	str	r4, [r0, #0]
 800e66e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e672:	4288      	cmp	r0, r1
 800e674:	d3f4      	bcc.n	800e660 <L_shift+0xc>
 800e676:	bd70      	pop	{r4, r5, r6, pc}

0800e678 <__match>:
 800e678:	b530      	push	{r4, r5, lr}
 800e67a:	6803      	ldr	r3, [r0, #0]
 800e67c:	3301      	adds	r3, #1
 800e67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e682:	b914      	cbnz	r4, 800e68a <__match+0x12>
 800e684:	6003      	str	r3, [r0, #0]
 800e686:	2001      	movs	r0, #1
 800e688:	bd30      	pop	{r4, r5, pc}
 800e68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e68e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e692:	2d19      	cmp	r5, #25
 800e694:	bf98      	it	ls
 800e696:	3220      	addls	r2, #32
 800e698:	42a2      	cmp	r2, r4
 800e69a:	d0f0      	beq.n	800e67e <__match+0x6>
 800e69c:	2000      	movs	r0, #0
 800e69e:	e7f3      	b.n	800e688 <__match+0x10>

0800e6a0 <__hexnan>:
 800e6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a4:	680b      	ldr	r3, [r1, #0]
 800e6a6:	115e      	asrs	r6, r3, #5
 800e6a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e6ac:	f013 031f 	ands.w	r3, r3, #31
 800e6b0:	b087      	sub	sp, #28
 800e6b2:	bf18      	it	ne
 800e6b4:	3604      	addne	r6, #4
 800e6b6:	2500      	movs	r5, #0
 800e6b8:	1f37      	subs	r7, r6, #4
 800e6ba:	4690      	mov	r8, r2
 800e6bc:	6802      	ldr	r2, [r0, #0]
 800e6be:	9301      	str	r3, [sp, #4]
 800e6c0:	4682      	mov	sl, r0
 800e6c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e6c6:	46b9      	mov	r9, r7
 800e6c8:	463c      	mov	r4, r7
 800e6ca:	9502      	str	r5, [sp, #8]
 800e6cc:	46ab      	mov	fp, r5
 800e6ce:	7851      	ldrb	r1, [r2, #1]
 800e6d0:	1c53      	adds	r3, r2, #1
 800e6d2:	9303      	str	r3, [sp, #12]
 800e6d4:	b341      	cbz	r1, 800e728 <__hexnan+0x88>
 800e6d6:	4608      	mov	r0, r1
 800e6d8:	9205      	str	r2, [sp, #20]
 800e6da:	9104      	str	r1, [sp, #16]
 800e6dc:	f7ff fd5e 	bl	800e19c <__hexdig_fun>
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	d14f      	bne.n	800e784 <__hexnan+0xe4>
 800e6e4:	9904      	ldr	r1, [sp, #16]
 800e6e6:	9a05      	ldr	r2, [sp, #20]
 800e6e8:	2920      	cmp	r1, #32
 800e6ea:	d818      	bhi.n	800e71e <__hexnan+0x7e>
 800e6ec:	9b02      	ldr	r3, [sp, #8]
 800e6ee:	459b      	cmp	fp, r3
 800e6f0:	dd13      	ble.n	800e71a <__hexnan+0x7a>
 800e6f2:	454c      	cmp	r4, r9
 800e6f4:	d206      	bcs.n	800e704 <__hexnan+0x64>
 800e6f6:	2d07      	cmp	r5, #7
 800e6f8:	dc04      	bgt.n	800e704 <__hexnan+0x64>
 800e6fa:	462a      	mov	r2, r5
 800e6fc:	4649      	mov	r1, r9
 800e6fe:	4620      	mov	r0, r4
 800e700:	f7ff ffa8 	bl	800e654 <L_shift>
 800e704:	4544      	cmp	r4, r8
 800e706:	d950      	bls.n	800e7aa <__hexnan+0x10a>
 800e708:	2300      	movs	r3, #0
 800e70a:	f1a4 0904 	sub.w	r9, r4, #4
 800e70e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e712:	f8cd b008 	str.w	fp, [sp, #8]
 800e716:	464c      	mov	r4, r9
 800e718:	461d      	mov	r5, r3
 800e71a:	9a03      	ldr	r2, [sp, #12]
 800e71c:	e7d7      	b.n	800e6ce <__hexnan+0x2e>
 800e71e:	2929      	cmp	r1, #41	; 0x29
 800e720:	d156      	bne.n	800e7d0 <__hexnan+0x130>
 800e722:	3202      	adds	r2, #2
 800e724:	f8ca 2000 	str.w	r2, [sl]
 800e728:	f1bb 0f00 	cmp.w	fp, #0
 800e72c:	d050      	beq.n	800e7d0 <__hexnan+0x130>
 800e72e:	454c      	cmp	r4, r9
 800e730:	d206      	bcs.n	800e740 <__hexnan+0xa0>
 800e732:	2d07      	cmp	r5, #7
 800e734:	dc04      	bgt.n	800e740 <__hexnan+0xa0>
 800e736:	462a      	mov	r2, r5
 800e738:	4649      	mov	r1, r9
 800e73a:	4620      	mov	r0, r4
 800e73c:	f7ff ff8a 	bl	800e654 <L_shift>
 800e740:	4544      	cmp	r4, r8
 800e742:	d934      	bls.n	800e7ae <__hexnan+0x10e>
 800e744:	f1a8 0204 	sub.w	r2, r8, #4
 800e748:	4623      	mov	r3, r4
 800e74a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e74e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e752:	429f      	cmp	r7, r3
 800e754:	d2f9      	bcs.n	800e74a <__hexnan+0xaa>
 800e756:	1b3b      	subs	r3, r7, r4
 800e758:	f023 0303 	bic.w	r3, r3, #3
 800e75c:	3304      	adds	r3, #4
 800e75e:	3401      	adds	r4, #1
 800e760:	3e03      	subs	r6, #3
 800e762:	42b4      	cmp	r4, r6
 800e764:	bf88      	it	hi
 800e766:	2304      	movhi	r3, #4
 800e768:	4443      	add	r3, r8
 800e76a:	2200      	movs	r2, #0
 800e76c:	f843 2b04 	str.w	r2, [r3], #4
 800e770:	429f      	cmp	r7, r3
 800e772:	d2fb      	bcs.n	800e76c <__hexnan+0xcc>
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	b91b      	cbnz	r3, 800e780 <__hexnan+0xe0>
 800e778:	4547      	cmp	r7, r8
 800e77a:	d127      	bne.n	800e7cc <__hexnan+0x12c>
 800e77c:	2301      	movs	r3, #1
 800e77e:	603b      	str	r3, [r7, #0]
 800e780:	2005      	movs	r0, #5
 800e782:	e026      	b.n	800e7d2 <__hexnan+0x132>
 800e784:	3501      	adds	r5, #1
 800e786:	2d08      	cmp	r5, #8
 800e788:	f10b 0b01 	add.w	fp, fp, #1
 800e78c:	dd06      	ble.n	800e79c <__hexnan+0xfc>
 800e78e:	4544      	cmp	r4, r8
 800e790:	d9c3      	bls.n	800e71a <__hexnan+0x7a>
 800e792:	2300      	movs	r3, #0
 800e794:	f844 3c04 	str.w	r3, [r4, #-4]
 800e798:	2501      	movs	r5, #1
 800e79a:	3c04      	subs	r4, #4
 800e79c:	6822      	ldr	r2, [r4, #0]
 800e79e:	f000 000f 	and.w	r0, r0, #15
 800e7a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e7a6:	6022      	str	r2, [r4, #0]
 800e7a8:	e7b7      	b.n	800e71a <__hexnan+0x7a>
 800e7aa:	2508      	movs	r5, #8
 800e7ac:	e7b5      	b.n	800e71a <__hexnan+0x7a>
 800e7ae:	9b01      	ldr	r3, [sp, #4]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d0df      	beq.n	800e774 <__hexnan+0xd4>
 800e7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e7b8:	f1c3 0320 	rsb	r3, r3, #32
 800e7bc:	fa22 f303 	lsr.w	r3, r2, r3
 800e7c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e7c4:	401a      	ands	r2, r3
 800e7c6:	f846 2c04 	str.w	r2, [r6, #-4]
 800e7ca:	e7d3      	b.n	800e774 <__hexnan+0xd4>
 800e7cc:	3f04      	subs	r7, #4
 800e7ce:	e7d1      	b.n	800e774 <__hexnan+0xd4>
 800e7d0:	2004      	movs	r0, #4
 800e7d2:	b007      	add	sp, #28
 800e7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7d8 <_localeconv_r>:
 800e7d8:	4800      	ldr	r0, [pc, #0]	; (800e7dc <_localeconv_r+0x4>)
 800e7da:	4770      	bx	lr
 800e7dc:	20000178 	.word	0x20000178

0800e7e0 <malloc>:
 800e7e0:	4b02      	ldr	r3, [pc, #8]	; (800e7ec <malloc+0xc>)
 800e7e2:	4601      	mov	r1, r0
 800e7e4:	6818      	ldr	r0, [r3, #0]
 800e7e6:	f000 bd67 	b.w	800f2b8 <_malloc_r>
 800e7ea:	bf00      	nop
 800e7ec:	20000020 	.word	0x20000020

0800e7f0 <__ascii_mbtowc>:
 800e7f0:	b082      	sub	sp, #8
 800e7f2:	b901      	cbnz	r1, 800e7f6 <__ascii_mbtowc+0x6>
 800e7f4:	a901      	add	r1, sp, #4
 800e7f6:	b142      	cbz	r2, 800e80a <__ascii_mbtowc+0x1a>
 800e7f8:	b14b      	cbz	r3, 800e80e <__ascii_mbtowc+0x1e>
 800e7fa:	7813      	ldrb	r3, [r2, #0]
 800e7fc:	600b      	str	r3, [r1, #0]
 800e7fe:	7812      	ldrb	r2, [r2, #0]
 800e800:	1e10      	subs	r0, r2, #0
 800e802:	bf18      	it	ne
 800e804:	2001      	movne	r0, #1
 800e806:	b002      	add	sp, #8
 800e808:	4770      	bx	lr
 800e80a:	4610      	mov	r0, r2
 800e80c:	e7fb      	b.n	800e806 <__ascii_mbtowc+0x16>
 800e80e:	f06f 0001 	mvn.w	r0, #1
 800e812:	e7f8      	b.n	800e806 <__ascii_mbtowc+0x16>

0800e814 <memcpy>:
 800e814:	440a      	add	r2, r1
 800e816:	4291      	cmp	r1, r2
 800e818:	f100 33ff 	add.w	r3, r0, #4294967295
 800e81c:	d100      	bne.n	800e820 <memcpy+0xc>
 800e81e:	4770      	bx	lr
 800e820:	b510      	push	{r4, lr}
 800e822:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e82a:	4291      	cmp	r1, r2
 800e82c:	d1f9      	bne.n	800e822 <memcpy+0xe>
 800e82e:	bd10      	pop	{r4, pc}

0800e830 <_Balloc>:
 800e830:	b570      	push	{r4, r5, r6, lr}
 800e832:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e834:	4604      	mov	r4, r0
 800e836:	460d      	mov	r5, r1
 800e838:	b976      	cbnz	r6, 800e858 <_Balloc+0x28>
 800e83a:	2010      	movs	r0, #16
 800e83c:	f7ff ffd0 	bl	800e7e0 <malloc>
 800e840:	4602      	mov	r2, r0
 800e842:	6260      	str	r0, [r4, #36]	; 0x24
 800e844:	b920      	cbnz	r0, 800e850 <_Balloc+0x20>
 800e846:	4b18      	ldr	r3, [pc, #96]	; (800e8a8 <_Balloc+0x78>)
 800e848:	4818      	ldr	r0, [pc, #96]	; (800e8ac <_Balloc+0x7c>)
 800e84a:	2166      	movs	r1, #102	; 0x66
 800e84c:	f7fe fda8 	bl	800d3a0 <__assert_func>
 800e850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e854:	6006      	str	r6, [r0, #0]
 800e856:	60c6      	str	r6, [r0, #12]
 800e858:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e85a:	68f3      	ldr	r3, [r6, #12]
 800e85c:	b183      	cbz	r3, 800e880 <_Balloc+0x50>
 800e85e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e866:	b9b8      	cbnz	r0, 800e898 <_Balloc+0x68>
 800e868:	2101      	movs	r1, #1
 800e86a:	fa01 f605 	lsl.w	r6, r1, r5
 800e86e:	1d72      	adds	r2, r6, #5
 800e870:	0092      	lsls	r2, r2, #2
 800e872:	4620      	mov	r0, r4
 800e874:	f000 fc9d 	bl	800f1b2 <_calloc_r>
 800e878:	b160      	cbz	r0, 800e894 <_Balloc+0x64>
 800e87a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e87e:	e00e      	b.n	800e89e <_Balloc+0x6e>
 800e880:	2221      	movs	r2, #33	; 0x21
 800e882:	2104      	movs	r1, #4
 800e884:	4620      	mov	r0, r4
 800e886:	f000 fc94 	bl	800f1b2 <_calloc_r>
 800e88a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e88c:	60f0      	str	r0, [r6, #12]
 800e88e:	68db      	ldr	r3, [r3, #12]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1e4      	bne.n	800e85e <_Balloc+0x2e>
 800e894:	2000      	movs	r0, #0
 800e896:	bd70      	pop	{r4, r5, r6, pc}
 800e898:	6802      	ldr	r2, [r0, #0]
 800e89a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e89e:	2300      	movs	r3, #0
 800e8a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e8a4:	e7f7      	b.n	800e896 <_Balloc+0x66>
 800e8a6:	bf00      	nop
 800e8a8:	08011258 	.word	0x08011258
 800e8ac:	080114fc 	.word	0x080114fc

0800e8b0 <_Bfree>:
 800e8b0:	b570      	push	{r4, r5, r6, lr}
 800e8b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e8b4:	4605      	mov	r5, r0
 800e8b6:	460c      	mov	r4, r1
 800e8b8:	b976      	cbnz	r6, 800e8d8 <_Bfree+0x28>
 800e8ba:	2010      	movs	r0, #16
 800e8bc:	f7ff ff90 	bl	800e7e0 <malloc>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	6268      	str	r0, [r5, #36]	; 0x24
 800e8c4:	b920      	cbnz	r0, 800e8d0 <_Bfree+0x20>
 800e8c6:	4b09      	ldr	r3, [pc, #36]	; (800e8ec <_Bfree+0x3c>)
 800e8c8:	4809      	ldr	r0, [pc, #36]	; (800e8f0 <_Bfree+0x40>)
 800e8ca:	218a      	movs	r1, #138	; 0x8a
 800e8cc:	f7fe fd68 	bl	800d3a0 <__assert_func>
 800e8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8d4:	6006      	str	r6, [r0, #0]
 800e8d6:	60c6      	str	r6, [r0, #12]
 800e8d8:	b13c      	cbz	r4, 800e8ea <_Bfree+0x3a>
 800e8da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e8dc:	6862      	ldr	r2, [r4, #4]
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8e4:	6021      	str	r1, [r4, #0]
 800e8e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8ea:	bd70      	pop	{r4, r5, r6, pc}
 800e8ec:	08011258 	.word	0x08011258
 800e8f0:	080114fc 	.word	0x080114fc

0800e8f4 <__multadd>:
 800e8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8f8:	690d      	ldr	r5, [r1, #16]
 800e8fa:	4607      	mov	r7, r0
 800e8fc:	460c      	mov	r4, r1
 800e8fe:	461e      	mov	r6, r3
 800e900:	f101 0c14 	add.w	ip, r1, #20
 800e904:	2000      	movs	r0, #0
 800e906:	f8dc 3000 	ldr.w	r3, [ip]
 800e90a:	b299      	uxth	r1, r3
 800e90c:	fb02 6101 	mla	r1, r2, r1, r6
 800e910:	0c1e      	lsrs	r6, r3, #16
 800e912:	0c0b      	lsrs	r3, r1, #16
 800e914:	fb02 3306 	mla	r3, r2, r6, r3
 800e918:	b289      	uxth	r1, r1
 800e91a:	3001      	adds	r0, #1
 800e91c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e920:	4285      	cmp	r5, r0
 800e922:	f84c 1b04 	str.w	r1, [ip], #4
 800e926:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e92a:	dcec      	bgt.n	800e906 <__multadd+0x12>
 800e92c:	b30e      	cbz	r6, 800e972 <__multadd+0x7e>
 800e92e:	68a3      	ldr	r3, [r4, #8]
 800e930:	42ab      	cmp	r3, r5
 800e932:	dc19      	bgt.n	800e968 <__multadd+0x74>
 800e934:	6861      	ldr	r1, [r4, #4]
 800e936:	4638      	mov	r0, r7
 800e938:	3101      	adds	r1, #1
 800e93a:	f7ff ff79 	bl	800e830 <_Balloc>
 800e93e:	4680      	mov	r8, r0
 800e940:	b928      	cbnz	r0, 800e94e <__multadd+0x5a>
 800e942:	4602      	mov	r2, r0
 800e944:	4b0c      	ldr	r3, [pc, #48]	; (800e978 <__multadd+0x84>)
 800e946:	480d      	ldr	r0, [pc, #52]	; (800e97c <__multadd+0x88>)
 800e948:	21b5      	movs	r1, #181	; 0xb5
 800e94a:	f7fe fd29 	bl	800d3a0 <__assert_func>
 800e94e:	6922      	ldr	r2, [r4, #16]
 800e950:	3202      	adds	r2, #2
 800e952:	f104 010c 	add.w	r1, r4, #12
 800e956:	0092      	lsls	r2, r2, #2
 800e958:	300c      	adds	r0, #12
 800e95a:	f7ff ff5b 	bl	800e814 <memcpy>
 800e95e:	4621      	mov	r1, r4
 800e960:	4638      	mov	r0, r7
 800e962:	f7ff ffa5 	bl	800e8b0 <_Bfree>
 800e966:	4644      	mov	r4, r8
 800e968:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e96c:	3501      	adds	r5, #1
 800e96e:	615e      	str	r6, [r3, #20]
 800e970:	6125      	str	r5, [r4, #16]
 800e972:	4620      	mov	r0, r4
 800e974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e978:	08011471 	.word	0x08011471
 800e97c:	080114fc 	.word	0x080114fc

0800e980 <__s2b>:
 800e980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e984:	460c      	mov	r4, r1
 800e986:	4615      	mov	r5, r2
 800e988:	461f      	mov	r7, r3
 800e98a:	2209      	movs	r2, #9
 800e98c:	3308      	adds	r3, #8
 800e98e:	4606      	mov	r6, r0
 800e990:	fb93 f3f2 	sdiv	r3, r3, r2
 800e994:	2100      	movs	r1, #0
 800e996:	2201      	movs	r2, #1
 800e998:	429a      	cmp	r2, r3
 800e99a:	db09      	blt.n	800e9b0 <__s2b+0x30>
 800e99c:	4630      	mov	r0, r6
 800e99e:	f7ff ff47 	bl	800e830 <_Balloc>
 800e9a2:	b940      	cbnz	r0, 800e9b6 <__s2b+0x36>
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	4b19      	ldr	r3, [pc, #100]	; (800ea0c <__s2b+0x8c>)
 800e9a8:	4819      	ldr	r0, [pc, #100]	; (800ea10 <__s2b+0x90>)
 800e9aa:	21ce      	movs	r1, #206	; 0xce
 800e9ac:	f7fe fcf8 	bl	800d3a0 <__assert_func>
 800e9b0:	0052      	lsls	r2, r2, #1
 800e9b2:	3101      	adds	r1, #1
 800e9b4:	e7f0      	b.n	800e998 <__s2b+0x18>
 800e9b6:	9b08      	ldr	r3, [sp, #32]
 800e9b8:	6143      	str	r3, [r0, #20]
 800e9ba:	2d09      	cmp	r5, #9
 800e9bc:	f04f 0301 	mov.w	r3, #1
 800e9c0:	6103      	str	r3, [r0, #16]
 800e9c2:	dd16      	ble.n	800e9f2 <__s2b+0x72>
 800e9c4:	f104 0909 	add.w	r9, r4, #9
 800e9c8:	46c8      	mov	r8, r9
 800e9ca:	442c      	add	r4, r5
 800e9cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e9d0:	4601      	mov	r1, r0
 800e9d2:	3b30      	subs	r3, #48	; 0x30
 800e9d4:	220a      	movs	r2, #10
 800e9d6:	4630      	mov	r0, r6
 800e9d8:	f7ff ff8c 	bl	800e8f4 <__multadd>
 800e9dc:	45a0      	cmp	r8, r4
 800e9de:	d1f5      	bne.n	800e9cc <__s2b+0x4c>
 800e9e0:	f1a5 0408 	sub.w	r4, r5, #8
 800e9e4:	444c      	add	r4, r9
 800e9e6:	1b2d      	subs	r5, r5, r4
 800e9e8:	1963      	adds	r3, r4, r5
 800e9ea:	42bb      	cmp	r3, r7
 800e9ec:	db04      	blt.n	800e9f8 <__s2b+0x78>
 800e9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9f2:	340a      	adds	r4, #10
 800e9f4:	2509      	movs	r5, #9
 800e9f6:	e7f6      	b.n	800e9e6 <__s2b+0x66>
 800e9f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e9fc:	4601      	mov	r1, r0
 800e9fe:	3b30      	subs	r3, #48	; 0x30
 800ea00:	220a      	movs	r2, #10
 800ea02:	4630      	mov	r0, r6
 800ea04:	f7ff ff76 	bl	800e8f4 <__multadd>
 800ea08:	e7ee      	b.n	800e9e8 <__s2b+0x68>
 800ea0a:	bf00      	nop
 800ea0c:	08011471 	.word	0x08011471
 800ea10:	080114fc 	.word	0x080114fc

0800ea14 <__hi0bits>:
 800ea14:	0c03      	lsrs	r3, r0, #16
 800ea16:	041b      	lsls	r3, r3, #16
 800ea18:	b9d3      	cbnz	r3, 800ea50 <__hi0bits+0x3c>
 800ea1a:	0400      	lsls	r0, r0, #16
 800ea1c:	2310      	movs	r3, #16
 800ea1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ea22:	bf04      	itt	eq
 800ea24:	0200      	lsleq	r0, r0, #8
 800ea26:	3308      	addeq	r3, #8
 800ea28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ea2c:	bf04      	itt	eq
 800ea2e:	0100      	lsleq	r0, r0, #4
 800ea30:	3304      	addeq	r3, #4
 800ea32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ea36:	bf04      	itt	eq
 800ea38:	0080      	lsleq	r0, r0, #2
 800ea3a:	3302      	addeq	r3, #2
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	db05      	blt.n	800ea4c <__hi0bits+0x38>
 800ea40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ea44:	f103 0301 	add.w	r3, r3, #1
 800ea48:	bf08      	it	eq
 800ea4a:	2320      	moveq	r3, #32
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	4770      	bx	lr
 800ea50:	2300      	movs	r3, #0
 800ea52:	e7e4      	b.n	800ea1e <__hi0bits+0xa>

0800ea54 <__lo0bits>:
 800ea54:	6803      	ldr	r3, [r0, #0]
 800ea56:	f013 0207 	ands.w	r2, r3, #7
 800ea5a:	4601      	mov	r1, r0
 800ea5c:	d00b      	beq.n	800ea76 <__lo0bits+0x22>
 800ea5e:	07da      	lsls	r2, r3, #31
 800ea60:	d423      	bmi.n	800eaaa <__lo0bits+0x56>
 800ea62:	0798      	lsls	r0, r3, #30
 800ea64:	bf49      	itett	mi
 800ea66:	085b      	lsrmi	r3, r3, #1
 800ea68:	089b      	lsrpl	r3, r3, #2
 800ea6a:	2001      	movmi	r0, #1
 800ea6c:	600b      	strmi	r3, [r1, #0]
 800ea6e:	bf5c      	itt	pl
 800ea70:	600b      	strpl	r3, [r1, #0]
 800ea72:	2002      	movpl	r0, #2
 800ea74:	4770      	bx	lr
 800ea76:	b298      	uxth	r0, r3
 800ea78:	b9a8      	cbnz	r0, 800eaa6 <__lo0bits+0x52>
 800ea7a:	0c1b      	lsrs	r3, r3, #16
 800ea7c:	2010      	movs	r0, #16
 800ea7e:	b2da      	uxtb	r2, r3
 800ea80:	b90a      	cbnz	r2, 800ea86 <__lo0bits+0x32>
 800ea82:	3008      	adds	r0, #8
 800ea84:	0a1b      	lsrs	r3, r3, #8
 800ea86:	071a      	lsls	r2, r3, #28
 800ea88:	bf04      	itt	eq
 800ea8a:	091b      	lsreq	r3, r3, #4
 800ea8c:	3004      	addeq	r0, #4
 800ea8e:	079a      	lsls	r2, r3, #30
 800ea90:	bf04      	itt	eq
 800ea92:	089b      	lsreq	r3, r3, #2
 800ea94:	3002      	addeq	r0, #2
 800ea96:	07da      	lsls	r2, r3, #31
 800ea98:	d403      	bmi.n	800eaa2 <__lo0bits+0x4e>
 800ea9a:	085b      	lsrs	r3, r3, #1
 800ea9c:	f100 0001 	add.w	r0, r0, #1
 800eaa0:	d005      	beq.n	800eaae <__lo0bits+0x5a>
 800eaa2:	600b      	str	r3, [r1, #0]
 800eaa4:	4770      	bx	lr
 800eaa6:	4610      	mov	r0, r2
 800eaa8:	e7e9      	b.n	800ea7e <__lo0bits+0x2a>
 800eaaa:	2000      	movs	r0, #0
 800eaac:	4770      	bx	lr
 800eaae:	2020      	movs	r0, #32
 800eab0:	4770      	bx	lr
	...

0800eab4 <__i2b>:
 800eab4:	b510      	push	{r4, lr}
 800eab6:	460c      	mov	r4, r1
 800eab8:	2101      	movs	r1, #1
 800eaba:	f7ff feb9 	bl	800e830 <_Balloc>
 800eabe:	4602      	mov	r2, r0
 800eac0:	b928      	cbnz	r0, 800eace <__i2b+0x1a>
 800eac2:	4b05      	ldr	r3, [pc, #20]	; (800ead8 <__i2b+0x24>)
 800eac4:	4805      	ldr	r0, [pc, #20]	; (800eadc <__i2b+0x28>)
 800eac6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800eaca:	f7fe fc69 	bl	800d3a0 <__assert_func>
 800eace:	2301      	movs	r3, #1
 800ead0:	6144      	str	r4, [r0, #20]
 800ead2:	6103      	str	r3, [r0, #16]
 800ead4:	bd10      	pop	{r4, pc}
 800ead6:	bf00      	nop
 800ead8:	08011471 	.word	0x08011471
 800eadc:	080114fc 	.word	0x080114fc

0800eae0 <__multiply>:
 800eae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae4:	4691      	mov	r9, r2
 800eae6:	690a      	ldr	r2, [r1, #16]
 800eae8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	bfb8      	it	lt
 800eaf0:	460b      	movlt	r3, r1
 800eaf2:	460c      	mov	r4, r1
 800eaf4:	bfbc      	itt	lt
 800eaf6:	464c      	movlt	r4, r9
 800eaf8:	4699      	movlt	r9, r3
 800eafa:	6927      	ldr	r7, [r4, #16]
 800eafc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eb00:	68a3      	ldr	r3, [r4, #8]
 800eb02:	6861      	ldr	r1, [r4, #4]
 800eb04:	eb07 060a 	add.w	r6, r7, sl
 800eb08:	42b3      	cmp	r3, r6
 800eb0a:	b085      	sub	sp, #20
 800eb0c:	bfb8      	it	lt
 800eb0e:	3101      	addlt	r1, #1
 800eb10:	f7ff fe8e 	bl	800e830 <_Balloc>
 800eb14:	b930      	cbnz	r0, 800eb24 <__multiply+0x44>
 800eb16:	4602      	mov	r2, r0
 800eb18:	4b44      	ldr	r3, [pc, #272]	; (800ec2c <__multiply+0x14c>)
 800eb1a:	4845      	ldr	r0, [pc, #276]	; (800ec30 <__multiply+0x150>)
 800eb1c:	f240 115d 	movw	r1, #349	; 0x15d
 800eb20:	f7fe fc3e 	bl	800d3a0 <__assert_func>
 800eb24:	f100 0514 	add.w	r5, r0, #20
 800eb28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eb2c:	462b      	mov	r3, r5
 800eb2e:	2200      	movs	r2, #0
 800eb30:	4543      	cmp	r3, r8
 800eb32:	d321      	bcc.n	800eb78 <__multiply+0x98>
 800eb34:	f104 0314 	add.w	r3, r4, #20
 800eb38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800eb3c:	f109 0314 	add.w	r3, r9, #20
 800eb40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800eb44:	9202      	str	r2, [sp, #8]
 800eb46:	1b3a      	subs	r2, r7, r4
 800eb48:	3a15      	subs	r2, #21
 800eb4a:	f022 0203 	bic.w	r2, r2, #3
 800eb4e:	3204      	adds	r2, #4
 800eb50:	f104 0115 	add.w	r1, r4, #21
 800eb54:	428f      	cmp	r7, r1
 800eb56:	bf38      	it	cc
 800eb58:	2204      	movcc	r2, #4
 800eb5a:	9201      	str	r2, [sp, #4]
 800eb5c:	9a02      	ldr	r2, [sp, #8]
 800eb5e:	9303      	str	r3, [sp, #12]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d80c      	bhi.n	800eb7e <__multiply+0x9e>
 800eb64:	2e00      	cmp	r6, #0
 800eb66:	dd03      	ble.n	800eb70 <__multiply+0x90>
 800eb68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d05a      	beq.n	800ec26 <__multiply+0x146>
 800eb70:	6106      	str	r6, [r0, #16]
 800eb72:	b005      	add	sp, #20
 800eb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb78:	f843 2b04 	str.w	r2, [r3], #4
 800eb7c:	e7d8      	b.n	800eb30 <__multiply+0x50>
 800eb7e:	f8b3 a000 	ldrh.w	sl, [r3]
 800eb82:	f1ba 0f00 	cmp.w	sl, #0
 800eb86:	d024      	beq.n	800ebd2 <__multiply+0xf2>
 800eb88:	f104 0e14 	add.w	lr, r4, #20
 800eb8c:	46a9      	mov	r9, r5
 800eb8e:	f04f 0c00 	mov.w	ip, #0
 800eb92:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eb96:	f8d9 1000 	ldr.w	r1, [r9]
 800eb9a:	fa1f fb82 	uxth.w	fp, r2
 800eb9e:	b289      	uxth	r1, r1
 800eba0:	fb0a 110b 	mla	r1, sl, fp, r1
 800eba4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800eba8:	f8d9 2000 	ldr.w	r2, [r9]
 800ebac:	4461      	add	r1, ip
 800ebae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ebb2:	fb0a c20b 	mla	r2, sl, fp, ip
 800ebb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ebba:	b289      	uxth	r1, r1
 800ebbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ebc0:	4577      	cmp	r7, lr
 800ebc2:	f849 1b04 	str.w	r1, [r9], #4
 800ebc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ebca:	d8e2      	bhi.n	800eb92 <__multiply+0xb2>
 800ebcc:	9a01      	ldr	r2, [sp, #4]
 800ebce:	f845 c002 	str.w	ip, [r5, r2]
 800ebd2:	9a03      	ldr	r2, [sp, #12]
 800ebd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ebd8:	3304      	adds	r3, #4
 800ebda:	f1b9 0f00 	cmp.w	r9, #0
 800ebde:	d020      	beq.n	800ec22 <__multiply+0x142>
 800ebe0:	6829      	ldr	r1, [r5, #0]
 800ebe2:	f104 0c14 	add.w	ip, r4, #20
 800ebe6:	46ae      	mov	lr, r5
 800ebe8:	f04f 0a00 	mov.w	sl, #0
 800ebec:	f8bc b000 	ldrh.w	fp, [ip]
 800ebf0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ebf4:	fb09 220b 	mla	r2, r9, fp, r2
 800ebf8:	4492      	add	sl, r2
 800ebfa:	b289      	uxth	r1, r1
 800ebfc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ec00:	f84e 1b04 	str.w	r1, [lr], #4
 800ec04:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ec08:	f8be 1000 	ldrh.w	r1, [lr]
 800ec0c:	0c12      	lsrs	r2, r2, #16
 800ec0e:	fb09 1102 	mla	r1, r9, r2, r1
 800ec12:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ec16:	4567      	cmp	r7, ip
 800ec18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ec1c:	d8e6      	bhi.n	800ebec <__multiply+0x10c>
 800ec1e:	9a01      	ldr	r2, [sp, #4]
 800ec20:	50a9      	str	r1, [r5, r2]
 800ec22:	3504      	adds	r5, #4
 800ec24:	e79a      	b.n	800eb5c <__multiply+0x7c>
 800ec26:	3e01      	subs	r6, #1
 800ec28:	e79c      	b.n	800eb64 <__multiply+0x84>
 800ec2a:	bf00      	nop
 800ec2c:	08011471 	.word	0x08011471
 800ec30:	080114fc 	.word	0x080114fc

0800ec34 <__pow5mult>:
 800ec34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec38:	4615      	mov	r5, r2
 800ec3a:	f012 0203 	ands.w	r2, r2, #3
 800ec3e:	4606      	mov	r6, r0
 800ec40:	460f      	mov	r7, r1
 800ec42:	d007      	beq.n	800ec54 <__pow5mult+0x20>
 800ec44:	4c25      	ldr	r4, [pc, #148]	; (800ecdc <__pow5mult+0xa8>)
 800ec46:	3a01      	subs	r2, #1
 800ec48:	2300      	movs	r3, #0
 800ec4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec4e:	f7ff fe51 	bl	800e8f4 <__multadd>
 800ec52:	4607      	mov	r7, r0
 800ec54:	10ad      	asrs	r5, r5, #2
 800ec56:	d03d      	beq.n	800ecd4 <__pow5mult+0xa0>
 800ec58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ec5a:	b97c      	cbnz	r4, 800ec7c <__pow5mult+0x48>
 800ec5c:	2010      	movs	r0, #16
 800ec5e:	f7ff fdbf 	bl	800e7e0 <malloc>
 800ec62:	4602      	mov	r2, r0
 800ec64:	6270      	str	r0, [r6, #36]	; 0x24
 800ec66:	b928      	cbnz	r0, 800ec74 <__pow5mult+0x40>
 800ec68:	4b1d      	ldr	r3, [pc, #116]	; (800ece0 <__pow5mult+0xac>)
 800ec6a:	481e      	ldr	r0, [pc, #120]	; (800ece4 <__pow5mult+0xb0>)
 800ec6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ec70:	f7fe fb96 	bl	800d3a0 <__assert_func>
 800ec74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec78:	6004      	str	r4, [r0, #0]
 800ec7a:	60c4      	str	r4, [r0, #12]
 800ec7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ec80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec84:	b94c      	cbnz	r4, 800ec9a <__pow5mult+0x66>
 800ec86:	f240 2171 	movw	r1, #625	; 0x271
 800ec8a:	4630      	mov	r0, r6
 800ec8c:	f7ff ff12 	bl	800eab4 <__i2b>
 800ec90:	2300      	movs	r3, #0
 800ec92:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec96:	4604      	mov	r4, r0
 800ec98:	6003      	str	r3, [r0, #0]
 800ec9a:	f04f 0900 	mov.w	r9, #0
 800ec9e:	07eb      	lsls	r3, r5, #31
 800eca0:	d50a      	bpl.n	800ecb8 <__pow5mult+0x84>
 800eca2:	4639      	mov	r1, r7
 800eca4:	4622      	mov	r2, r4
 800eca6:	4630      	mov	r0, r6
 800eca8:	f7ff ff1a 	bl	800eae0 <__multiply>
 800ecac:	4639      	mov	r1, r7
 800ecae:	4680      	mov	r8, r0
 800ecb0:	4630      	mov	r0, r6
 800ecb2:	f7ff fdfd 	bl	800e8b0 <_Bfree>
 800ecb6:	4647      	mov	r7, r8
 800ecb8:	106d      	asrs	r5, r5, #1
 800ecba:	d00b      	beq.n	800ecd4 <__pow5mult+0xa0>
 800ecbc:	6820      	ldr	r0, [r4, #0]
 800ecbe:	b938      	cbnz	r0, 800ecd0 <__pow5mult+0x9c>
 800ecc0:	4622      	mov	r2, r4
 800ecc2:	4621      	mov	r1, r4
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f7ff ff0b 	bl	800eae0 <__multiply>
 800ecca:	6020      	str	r0, [r4, #0]
 800eccc:	f8c0 9000 	str.w	r9, [r0]
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	e7e4      	b.n	800ec9e <__pow5mult+0x6a>
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecda:	bf00      	nop
 800ecdc:	08011648 	.word	0x08011648
 800ece0:	08011258 	.word	0x08011258
 800ece4:	080114fc 	.word	0x080114fc

0800ece8 <__lshift>:
 800ece8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecec:	460c      	mov	r4, r1
 800ecee:	6849      	ldr	r1, [r1, #4]
 800ecf0:	6923      	ldr	r3, [r4, #16]
 800ecf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ecf6:	68a3      	ldr	r3, [r4, #8]
 800ecf8:	4607      	mov	r7, r0
 800ecfa:	4691      	mov	r9, r2
 800ecfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ed00:	f108 0601 	add.w	r6, r8, #1
 800ed04:	42b3      	cmp	r3, r6
 800ed06:	db0b      	blt.n	800ed20 <__lshift+0x38>
 800ed08:	4638      	mov	r0, r7
 800ed0a:	f7ff fd91 	bl	800e830 <_Balloc>
 800ed0e:	4605      	mov	r5, r0
 800ed10:	b948      	cbnz	r0, 800ed26 <__lshift+0x3e>
 800ed12:	4602      	mov	r2, r0
 800ed14:	4b2a      	ldr	r3, [pc, #168]	; (800edc0 <__lshift+0xd8>)
 800ed16:	482b      	ldr	r0, [pc, #172]	; (800edc4 <__lshift+0xdc>)
 800ed18:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ed1c:	f7fe fb40 	bl	800d3a0 <__assert_func>
 800ed20:	3101      	adds	r1, #1
 800ed22:	005b      	lsls	r3, r3, #1
 800ed24:	e7ee      	b.n	800ed04 <__lshift+0x1c>
 800ed26:	2300      	movs	r3, #0
 800ed28:	f100 0114 	add.w	r1, r0, #20
 800ed2c:	f100 0210 	add.w	r2, r0, #16
 800ed30:	4618      	mov	r0, r3
 800ed32:	4553      	cmp	r3, sl
 800ed34:	db37      	blt.n	800eda6 <__lshift+0xbe>
 800ed36:	6920      	ldr	r0, [r4, #16]
 800ed38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed3c:	f104 0314 	add.w	r3, r4, #20
 800ed40:	f019 091f 	ands.w	r9, r9, #31
 800ed44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ed4c:	d02f      	beq.n	800edae <__lshift+0xc6>
 800ed4e:	f1c9 0e20 	rsb	lr, r9, #32
 800ed52:	468a      	mov	sl, r1
 800ed54:	f04f 0c00 	mov.w	ip, #0
 800ed58:	681a      	ldr	r2, [r3, #0]
 800ed5a:	fa02 f209 	lsl.w	r2, r2, r9
 800ed5e:	ea42 020c 	orr.w	r2, r2, ip
 800ed62:	f84a 2b04 	str.w	r2, [sl], #4
 800ed66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed6a:	4298      	cmp	r0, r3
 800ed6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ed70:	d8f2      	bhi.n	800ed58 <__lshift+0x70>
 800ed72:	1b03      	subs	r3, r0, r4
 800ed74:	3b15      	subs	r3, #21
 800ed76:	f023 0303 	bic.w	r3, r3, #3
 800ed7a:	3304      	adds	r3, #4
 800ed7c:	f104 0215 	add.w	r2, r4, #21
 800ed80:	4290      	cmp	r0, r2
 800ed82:	bf38      	it	cc
 800ed84:	2304      	movcc	r3, #4
 800ed86:	f841 c003 	str.w	ip, [r1, r3]
 800ed8a:	f1bc 0f00 	cmp.w	ip, #0
 800ed8e:	d001      	beq.n	800ed94 <__lshift+0xac>
 800ed90:	f108 0602 	add.w	r6, r8, #2
 800ed94:	3e01      	subs	r6, #1
 800ed96:	4638      	mov	r0, r7
 800ed98:	612e      	str	r6, [r5, #16]
 800ed9a:	4621      	mov	r1, r4
 800ed9c:	f7ff fd88 	bl	800e8b0 <_Bfree>
 800eda0:	4628      	mov	r0, r5
 800eda2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eda6:	f842 0f04 	str.w	r0, [r2, #4]!
 800edaa:	3301      	adds	r3, #1
 800edac:	e7c1      	b.n	800ed32 <__lshift+0x4a>
 800edae:	3904      	subs	r1, #4
 800edb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800edb4:	f841 2f04 	str.w	r2, [r1, #4]!
 800edb8:	4298      	cmp	r0, r3
 800edba:	d8f9      	bhi.n	800edb0 <__lshift+0xc8>
 800edbc:	e7ea      	b.n	800ed94 <__lshift+0xac>
 800edbe:	bf00      	nop
 800edc0:	08011471 	.word	0x08011471
 800edc4:	080114fc 	.word	0x080114fc

0800edc8 <__mcmp>:
 800edc8:	b530      	push	{r4, r5, lr}
 800edca:	6902      	ldr	r2, [r0, #16]
 800edcc:	690c      	ldr	r4, [r1, #16]
 800edce:	1b12      	subs	r2, r2, r4
 800edd0:	d10e      	bne.n	800edf0 <__mcmp+0x28>
 800edd2:	f100 0314 	add.w	r3, r0, #20
 800edd6:	3114      	adds	r1, #20
 800edd8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eddc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ede0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ede4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ede8:	42a5      	cmp	r5, r4
 800edea:	d003      	beq.n	800edf4 <__mcmp+0x2c>
 800edec:	d305      	bcc.n	800edfa <__mcmp+0x32>
 800edee:	2201      	movs	r2, #1
 800edf0:	4610      	mov	r0, r2
 800edf2:	bd30      	pop	{r4, r5, pc}
 800edf4:	4283      	cmp	r3, r0
 800edf6:	d3f3      	bcc.n	800ede0 <__mcmp+0x18>
 800edf8:	e7fa      	b.n	800edf0 <__mcmp+0x28>
 800edfa:	f04f 32ff 	mov.w	r2, #4294967295
 800edfe:	e7f7      	b.n	800edf0 <__mcmp+0x28>

0800ee00 <__mdiff>:
 800ee00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee04:	460c      	mov	r4, r1
 800ee06:	4606      	mov	r6, r0
 800ee08:	4611      	mov	r1, r2
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	4690      	mov	r8, r2
 800ee0e:	f7ff ffdb 	bl	800edc8 <__mcmp>
 800ee12:	1e05      	subs	r5, r0, #0
 800ee14:	d110      	bne.n	800ee38 <__mdiff+0x38>
 800ee16:	4629      	mov	r1, r5
 800ee18:	4630      	mov	r0, r6
 800ee1a:	f7ff fd09 	bl	800e830 <_Balloc>
 800ee1e:	b930      	cbnz	r0, 800ee2e <__mdiff+0x2e>
 800ee20:	4b3a      	ldr	r3, [pc, #232]	; (800ef0c <__mdiff+0x10c>)
 800ee22:	4602      	mov	r2, r0
 800ee24:	f240 2132 	movw	r1, #562	; 0x232
 800ee28:	4839      	ldr	r0, [pc, #228]	; (800ef10 <__mdiff+0x110>)
 800ee2a:	f7fe fab9 	bl	800d3a0 <__assert_func>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee38:	bfa4      	itt	ge
 800ee3a:	4643      	movge	r3, r8
 800ee3c:	46a0      	movge	r8, r4
 800ee3e:	4630      	mov	r0, r6
 800ee40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ee44:	bfa6      	itte	ge
 800ee46:	461c      	movge	r4, r3
 800ee48:	2500      	movge	r5, #0
 800ee4a:	2501      	movlt	r5, #1
 800ee4c:	f7ff fcf0 	bl	800e830 <_Balloc>
 800ee50:	b920      	cbnz	r0, 800ee5c <__mdiff+0x5c>
 800ee52:	4b2e      	ldr	r3, [pc, #184]	; (800ef0c <__mdiff+0x10c>)
 800ee54:	4602      	mov	r2, r0
 800ee56:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ee5a:	e7e5      	b.n	800ee28 <__mdiff+0x28>
 800ee5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ee60:	6926      	ldr	r6, [r4, #16]
 800ee62:	60c5      	str	r5, [r0, #12]
 800ee64:	f104 0914 	add.w	r9, r4, #20
 800ee68:	f108 0514 	add.w	r5, r8, #20
 800ee6c:	f100 0e14 	add.w	lr, r0, #20
 800ee70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ee74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ee78:	f108 0210 	add.w	r2, r8, #16
 800ee7c:	46f2      	mov	sl, lr
 800ee7e:	2100      	movs	r1, #0
 800ee80:	f859 3b04 	ldr.w	r3, [r9], #4
 800ee84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ee88:	fa1f f883 	uxth.w	r8, r3
 800ee8c:	fa11 f18b 	uxtah	r1, r1, fp
 800ee90:	0c1b      	lsrs	r3, r3, #16
 800ee92:	eba1 0808 	sub.w	r8, r1, r8
 800ee96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ee9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ee9e:	fa1f f888 	uxth.w	r8, r8
 800eea2:	1419      	asrs	r1, r3, #16
 800eea4:	454e      	cmp	r6, r9
 800eea6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eeaa:	f84a 3b04 	str.w	r3, [sl], #4
 800eeae:	d8e7      	bhi.n	800ee80 <__mdiff+0x80>
 800eeb0:	1b33      	subs	r3, r6, r4
 800eeb2:	3b15      	subs	r3, #21
 800eeb4:	f023 0303 	bic.w	r3, r3, #3
 800eeb8:	3304      	adds	r3, #4
 800eeba:	3415      	adds	r4, #21
 800eebc:	42a6      	cmp	r6, r4
 800eebe:	bf38      	it	cc
 800eec0:	2304      	movcc	r3, #4
 800eec2:	441d      	add	r5, r3
 800eec4:	4473      	add	r3, lr
 800eec6:	469e      	mov	lr, r3
 800eec8:	462e      	mov	r6, r5
 800eeca:	4566      	cmp	r6, ip
 800eecc:	d30e      	bcc.n	800eeec <__mdiff+0xec>
 800eece:	f10c 0203 	add.w	r2, ip, #3
 800eed2:	1b52      	subs	r2, r2, r5
 800eed4:	f022 0203 	bic.w	r2, r2, #3
 800eed8:	3d03      	subs	r5, #3
 800eeda:	45ac      	cmp	ip, r5
 800eedc:	bf38      	it	cc
 800eede:	2200      	movcc	r2, #0
 800eee0:	441a      	add	r2, r3
 800eee2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eee6:	b17b      	cbz	r3, 800ef08 <__mdiff+0x108>
 800eee8:	6107      	str	r7, [r0, #16]
 800eeea:	e7a3      	b.n	800ee34 <__mdiff+0x34>
 800eeec:	f856 8b04 	ldr.w	r8, [r6], #4
 800eef0:	fa11 f288 	uxtah	r2, r1, r8
 800eef4:	1414      	asrs	r4, r2, #16
 800eef6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eefa:	b292      	uxth	r2, r2
 800eefc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ef00:	f84e 2b04 	str.w	r2, [lr], #4
 800ef04:	1421      	asrs	r1, r4, #16
 800ef06:	e7e0      	b.n	800eeca <__mdiff+0xca>
 800ef08:	3f01      	subs	r7, #1
 800ef0a:	e7ea      	b.n	800eee2 <__mdiff+0xe2>
 800ef0c:	08011471 	.word	0x08011471
 800ef10:	080114fc 	.word	0x080114fc

0800ef14 <__ulp>:
 800ef14:	b082      	sub	sp, #8
 800ef16:	ed8d 0b00 	vstr	d0, [sp]
 800ef1a:	9b01      	ldr	r3, [sp, #4]
 800ef1c:	4912      	ldr	r1, [pc, #72]	; (800ef68 <__ulp+0x54>)
 800ef1e:	4019      	ands	r1, r3
 800ef20:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ef24:	2900      	cmp	r1, #0
 800ef26:	dd05      	ble.n	800ef34 <__ulp+0x20>
 800ef28:	2200      	movs	r2, #0
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	ec43 2b10 	vmov	d0, r2, r3
 800ef30:	b002      	add	sp, #8
 800ef32:	4770      	bx	lr
 800ef34:	4249      	negs	r1, r1
 800ef36:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ef3a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ef3e:	f04f 0200 	mov.w	r2, #0
 800ef42:	f04f 0300 	mov.w	r3, #0
 800ef46:	da04      	bge.n	800ef52 <__ulp+0x3e>
 800ef48:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ef4c:	fa41 f300 	asr.w	r3, r1, r0
 800ef50:	e7ec      	b.n	800ef2c <__ulp+0x18>
 800ef52:	f1a0 0114 	sub.w	r1, r0, #20
 800ef56:	291e      	cmp	r1, #30
 800ef58:	bfda      	itte	le
 800ef5a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ef5e:	fa20 f101 	lsrle.w	r1, r0, r1
 800ef62:	2101      	movgt	r1, #1
 800ef64:	460a      	mov	r2, r1
 800ef66:	e7e1      	b.n	800ef2c <__ulp+0x18>
 800ef68:	7ff00000 	.word	0x7ff00000

0800ef6c <__b2d>:
 800ef6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef6e:	6905      	ldr	r5, [r0, #16]
 800ef70:	f100 0714 	add.w	r7, r0, #20
 800ef74:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ef78:	1f2e      	subs	r6, r5, #4
 800ef7a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ef7e:	4620      	mov	r0, r4
 800ef80:	f7ff fd48 	bl	800ea14 <__hi0bits>
 800ef84:	f1c0 0320 	rsb	r3, r0, #32
 800ef88:	280a      	cmp	r0, #10
 800ef8a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f008 <__b2d+0x9c>
 800ef8e:	600b      	str	r3, [r1, #0]
 800ef90:	dc14      	bgt.n	800efbc <__b2d+0x50>
 800ef92:	f1c0 0e0b 	rsb	lr, r0, #11
 800ef96:	fa24 f10e 	lsr.w	r1, r4, lr
 800ef9a:	42b7      	cmp	r7, r6
 800ef9c:	ea41 030c 	orr.w	r3, r1, ip
 800efa0:	bf34      	ite	cc
 800efa2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800efa6:	2100      	movcs	r1, #0
 800efa8:	3015      	adds	r0, #21
 800efaa:	fa04 f000 	lsl.w	r0, r4, r0
 800efae:	fa21 f10e 	lsr.w	r1, r1, lr
 800efb2:	ea40 0201 	orr.w	r2, r0, r1
 800efb6:	ec43 2b10 	vmov	d0, r2, r3
 800efba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efbc:	42b7      	cmp	r7, r6
 800efbe:	bf3a      	itte	cc
 800efc0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800efc4:	f1a5 0608 	subcc.w	r6, r5, #8
 800efc8:	2100      	movcs	r1, #0
 800efca:	380b      	subs	r0, #11
 800efcc:	d017      	beq.n	800effe <__b2d+0x92>
 800efce:	f1c0 0c20 	rsb	ip, r0, #32
 800efd2:	fa04 f500 	lsl.w	r5, r4, r0
 800efd6:	42be      	cmp	r6, r7
 800efd8:	fa21 f40c 	lsr.w	r4, r1, ip
 800efdc:	ea45 0504 	orr.w	r5, r5, r4
 800efe0:	bf8c      	ite	hi
 800efe2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800efe6:	2400      	movls	r4, #0
 800efe8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800efec:	fa01 f000 	lsl.w	r0, r1, r0
 800eff0:	fa24 f40c 	lsr.w	r4, r4, ip
 800eff4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800eff8:	ea40 0204 	orr.w	r2, r0, r4
 800effc:	e7db      	b.n	800efb6 <__b2d+0x4a>
 800effe:	ea44 030c 	orr.w	r3, r4, ip
 800f002:	460a      	mov	r2, r1
 800f004:	e7d7      	b.n	800efb6 <__b2d+0x4a>
 800f006:	bf00      	nop
 800f008:	3ff00000 	.word	0x3ff00000

0800f00c <__d2b>:
 800f00c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f010:	4689      	mov	r9, r1
 800f012:	2101      	movs	r1, #1
 800f014:	ec57 6b10 	vmov	r6, r7, d0
 800f018:	4690      	mov	r8, r2
 800f01a:	f7ff fc09 	bl	800e830 <_Balloc>
 800f01e:	4604      	mov	r4, r0
 800f020:	b930      	cbnz	r0, 800f030 <__d2b+0x24>
 800f022:	4602      	mov	r2, r0
 800f024:	4b25      	ldr	r3, [pc, #148]	; (800f0bc <__d2b+0xb0>)
 800f026:	4826      	ldr	r0, [pc, #152]	; (800f0c0 <__d2b+0xb4>)
 800f028:	f240 310a 	movw	r1, #778	; 0x30a
 800f02c:	f7fe f9b8 	bl	800d3a0 <__assert_func>
 800f030:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f034:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f038:	bb35      	cbnz	r5, 800f088 <__d2b+0x7c>
 800f03a:	2e00      	cmp	r6, #0
 800f03c:	9301      	str	r3, [sp, #4]
 800f03e:	d028      	beq.n	800f092 <__d2b+0x86>
 800f040:	4668      	mov	r0, sp
 800f042:	9600      	str	r6, [sp, #0]
 800f044:	f7ff fd06 	bl	800ea54 <__lo0bits>
 800f048:	9900      	ldr	r1, [sp, #0]
 800f04a:	b300      	cbz	r0, 800f08e <__d2b+0x82>
 800f04c:	9a01      	ldr	r2, [sp, #4]
 800f04e:	f1c0 0320 	rsb	r3, r0, #32
 800f052:	fa02 f303 	lsl.w	r3, r2, r3
 800f056:	430b      	orrs	r3, r1
 800f058:	40c2      	lsrs	r2, r0
 800f05a:	6163      	str	r3, [r4, #20]
 800f05c:	9201      	str	r2, [sp, #4]
 800f05e:	9b01      	ldr	r3, [sp, #4]
 800f060:	61a3      	str	r3, [r4, #24]
 800f062:	2b00      	cmp	r3, #0
 800f064:	bf14      	ite	ne
 800f066:	2202      	movne	r2, #2
 800f068:	2201      	moveq	r2, #1
 800f06a:	6122      	str	r2, [r4, #16]
 800f06c:	b1d5      	cbz	r5, 800f0a4 <__d2b+0x98>
 800f06e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f072:	4405      	add	r5, r0
 800f074:	f8c9 5000 	str.w	r5, [r9]
 800f078:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f07c:	f8c8 0000 	str.w	r0, [r8]
 800f080:	4620      	mov	r0, r4
 800f082:	b003      	add	sp, #12
 800f084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f08c:	e7d5      	b.n	800f03a <__d2b+0x2e>
 800f08e:	6161      	str	r1, [r4, #20]
 800f090:	e7e5      	b.n	800f05e <__d2b+0x52>
 800f092:	a801      	add	r0, sp, #4
 800f094:	f7ff fcde 	bl	800ea54 <__lo0bits>
 800f098:	9b01      	ldr	r3, [sp, #4]
 800f09a:	6163      	str	r3, [r4, #20]
 800f09c:	2201      	movs	r2, #1
 800f09e:	6122      	str	r2, [r4, #16]
 800f0a0:	3020      	adds	r0, #32
 800f0a2:	e7e3      	b.n	800f06c <__d2b+0x60>
 800f0a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f0a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f0ac:	f8c9 0000 	str.w	r0, [r9]
 800f0b0:	6918      	ldr	r0, [r3, #16]
 800f0b2:	f7ff fcaf 	bl	800ea14 <__hi0bits>
 800f0b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f0ba:	e7df      	b.n	800f07c <__d2b+0x70>
 800f0bc:	08011471 	.word	0x08011471
 800f0c0:	080114fc 	.word	0x080114fc

0800f0c4 <__ratio>:
 800f0c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c8:	4688      	mov	r8, r1
 800f0ca:	4669      	mov	r1, sp
 800f0cc:	4681      	mov	r9, r0
 800f0ce:	f7ff ff4d 	bl	800ef6c <__b2d>
 800f0d2:	a901      	add	r1, sp, #4
 800f0d4:	4640      	mov	r0, r8
 800f0d6:	ec55 4b10 	vmov	r4, r5, d0
 800f0da:	f7ff ff47 	bl	800ef6c <__b2d>
 800f0de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f0e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f0e6:	eba3 0c02 	sub.w	ip, r3, r2
 800f0ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f0ee:	1a9b      	subs	r3, r3, r2
 800f0f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f0f4:	ec51 0b10 	vmov	r0, r1, d0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	bfd6      	itet	le
 800f0fc:	460a      	movle	r2, r1
 800f0fe:	462a      	movgt	r2, r5
 800f100:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f104:	468b      	mov	fp, r1
 800f106:	462f      	mov	r7, r5
 800f108:	bfd4      	ite	le
 800f10a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f10e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f112:	4620      	mov	r0, r4
 800f114:	ee10 2a10 	vmov	r2, s0
 800f118:	465b      	mov	r3, fp
 800f11a:	4639      	mov	r1, r7
 800f11c:	f7f1 fbae 	bl	800087c <__aeabi_ddiv>
 800f120:	ec41 0b10 	vmov	d0, r0, r1
 800f124:	b003      	add	sp, #12
 800f126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f12a <__copybits>:
 800f12a:	3901      	subs	r1, #1
 800f12c:	b570      	push	{r4, r5, r6, lr}
 800f12e:	1149      	asrs	r1, r1, #5
 800f130:	6914      	ldr	r4, [r2, #16]
 800f132:	3101      	adds	r1, #1
 800f134:	f102 0314 	add.w	r3, r2, #20
 800f138:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f13c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f140:	1f05      	subs	r5, r0, #4
 800f142:	42a3      	cmp	r3, r4
 800f144:	d30c      	bcc.n	800f160 <__copybits+0x36>
 800f146:	1aa3      	subs	r3, r4, r2
 800f148:	3b11      	subs	r3, #17
 800f14a:	f023 0303 	bic.w	r3, r3, #3
 800f14e:	3211      	adds	r2, #17
 800f150:	42a2      	cmp	r2, r4
 800f152:	bf88      	it	hi
 800f154:	2300      	movhi	r3, #0
 800f156:	4418      	add	r0, r3
 800f158:	2300      	movs	r3, #0
 800f15a:	4288      	cmp	r0, r1
 800f15c:	d305      	bcc.n	800f16a <__copybits+0x40>
 800f15e:	bd70      	pop	{r4, r5, r6, pc}
 800f160:	f853 6b04 	ldr.w	r6, [r3], #4
 800f164:	f845 6f04 	str.w	r6, [r5, #4]!
 800f168:	e7eb      	b.n	800f142 <__copybits+0x18>
 800f16a:	f840 3b04 	str.w	r3, [r0], #4
 800f16e:	e7f4      	b.n	800f15a <__copybits+0x30>

0800f170 <__any_on>:
 800f170:	f100 0214 	add.w	r2, r0, #20
 800f174:	6900      	ldr	r0, [r0, #16]
 800f176:	114b      	asrs	r3, r1, #5
 800f178:	4298      	cmp	r0, r3
 800f17a:	b510      	push	{r4, lr}
 800f17c:	db11      	blt.n	800f1a2 <__any_on+0x32>
 800f17e:	dd0a      	ble.n	800f196 <__any_on+0x26>
 800f180:	f011 011f 	ands.w	r1, r1, #31
 800f184:	d007      	beq.n	800f196 <__any_on+0x26>
 800f186:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f18a:	fa24 f001 	lsr.w	r0, r4, r1
 800f18e:	fa00 f101 	lsl.w	r1, r0, r1
 800f192:	428c      	cmp	r4, r1
 800f194:	d10b      	bne.n	800f1ae <__any_on+0x3e>
 800f196:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d803      	bhi.n	800f1a6 <__any_on+0x36>
 800f19e:	2000      	movs	r0, #0
 800f1a0:	bd10      	pop	{r4, pc}
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	e7f7      	b.n	800f196 <__any_on+0x26>
 800f1a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f1aa:	2900      	cmp	r1, #0
 800f1ac:	d0f5      	beq.n	800f19a <__any_on+0x2a>
 800f1ae:	2001      	movs	r0, #1
 800f1b0:	e7f6      	b.n	800f1a0 <__any_on+0x30>

0800f1b2 <_calloc_r>:
 800f1b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1b4:	fba1 2402 	umull	r2, r4, r1, r2
 800f1b8:	b94c      	cbnz	r4, 800f1ce <_calloc_r+0x1c>
 800f1ba:	4611      	mov	r1, r2
 800f1bc:	9201      	str	r2, [sp, #4]
 800f1be:	f000 f87b 	bl	800f2b8 <_malloc_r>
 800f1c2:	9a01      	ldr	r2, [sp, #4]
 800f1c4:	4605      	mov	r5, r0
 800f1c6:	b930      	cbnz	r0, 800f1d6 <_calloc_r+0x24>
 800f1c8:	4628      	mov	r0, r5
 800f1ca:	b003      	add	sp, #12
 800f1cc:	bd30      	pop	{r4, r5, pc}
 800f1ce:	220c      	movs	r2, #12
 800f1d0:	6002      	str	r2, [r0, #0]
 800f1d2:	2500      	movs	r5, #0
 800f1d4:	e7f8      	b.n	800f1c8 <_calloc_r+0x16>
 800f1d6:	4621      	mov	r1, r4
 800f1d8:	f7fc fade 	bl	800b798 <memset>
 800f1dc:	e7f4      	b.n	800f1c8 <_calloc_r+0x16>
	...

0800f1e0 <_free_r>:
 800f1e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1e2:	2900      	cmp	r1, #0
 800f1e4:	d044      	beq.n	800f270 <_free_r+0x90>
 800f1e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1ea:	9001      	str	r0, [sp, #4]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	f1a1 0404 	sub.w	r4, r1, #4
 800f1f2:	bfb8      	it	lt
 800f1f4:	18e4      	addlt	r4, r4, r3
 800f1f6:	f000 fec7 	bl	800ff88 <__malloc_lock>
 800f1fa:	4a1e      	ldr	r2, [pc, #120]	; (800f274 <_free_r+0x94>)
 800f1fc:	9801      	ldr	r0, [sp, #4]
 800f1fe:	6813      	ldr	r3, [r2, #0]
 800f200:	b933      	cbnz	r3, 800f210 <_free_r+0x30>
 800f202:	6063      	str	r3, [r4, #4]
 800f204:	6014      	str	r4, [r2, #0]
 800f206:	b003      	add	sp, #12
 800f208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f20c:	f000 bec2 	b.w	800ff94 <__malloc_unlock>
 800f210:	42a3      	cmp	r3, r4
 800f212:	d908      	bls.n	800f226 <_free_r+0x46>
 800f214:	6825      	ldr	r5, [r4, #0]
 800f216:	1961      	adds	r1, r4, r5
 800f218:	428b      	cmp	r3, r1
 800f21a:	bf01      	itttt	eq
 800f21c:	6819      	ldreq	r1, [r3, #0]
 800f21e:	685b      	ldreq	r3, [r3, #4]
 800f220:	1949      	addeq	r1, r1, r5
 800f222:	6021      	streq	r1, [r4, #0]
 800f224:	e7ed      	b.n	800f202 <_free_r+0x22>
 800f226:	461a      	mov	r2, r3
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	b10b      	cbz	r3, 800f230 <_free_r+0x50>
 800f22c:	42a3      	cmp	r3, r4
 800f22e:	d9fa      	bls.n	800f226 <_free_r+0x46>
 800f230:	6811      	ldr	r1, [r2, #0]
 800f232:	1855      	adds	r5, r2, r1
 800f234:	42a5      	cmp	r5, r4
 800f236:	d10b      	bne.n	800f250 <_free_r+0x70>
 800f238:	6824      	ldr	r4, [r4, #0]
 800f23a:	4421      	add	r1, r4
 800f23c:	1854      	adds	r4, r2, r1
 800f23e:	42a3      	cmp	r3, r4
 800f240:	6011      	str	r1, [r2, #0]
 800f242:	d1e0      	bne.n	800f206 <_free_r+0x26>
 800f244:	681c      	ldr	r4, [r3, #0]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	6053      	str	r3, [r2, #4]
 800f24a:	4421      	add	r1, r4
 800f24c:	6011      	str	r1, [r2, #0]
 800f24e:	e7da      	b.n	800f206 <_free_r+0x26>
 800f250:	d902      	bls.n	800f258 <_free_r+0x78>
 800f252:	230c      	movs	r3, #12
 800f254:	6003      	str	r3, [r0, #0]
 800f256:	e7d6      	b.n	800f206 <_free_r+0x26>
 800f258:	6825      	ldr	r5, [r4, #0]
 800f25a:	1961      	adds	r1, r4, r5
 800f25c:	428b      	cmp	r3, r1
 800f25e:	bf04      	itt	eq
 800f260:	6819      	ldreq	r1, [r3, #0]
 800f262:	685b      	ldreq	r3, [r3, #4]
 800f264:	6063      	str	r3, [r4, #4]
 800f266:	bf04      	itt	eq
 800f268:	1949      	addeq	r1, r1, r5
 800f26a:	6021      	streq	r1, [r4, #0]
 800f26c:	6054      	str	r4, [r2, #4]
 800f26e:	e7ca      	b.n	800f206 <_free_r+0x26>
 800f270:	b003      	add	sp, #12
 800f272:	bd30      	pop	{r4, r5, pc}
 800f274:	2000085c 	.word	0x2000085c

0800f278 <sbrk_aligned>:
 800f278:	b570      	push	{r4, r5, r6, lr}
 800f27a:	4e0e      	ldr	r6, [pc, #56]	; (800f2b4 <sbrk_aligned+0x3c>)
 800f27c:	460c      	mov	r4, r1
 800f27e:	6831      	ldr	r1, [r6, #0]
 800f280:	4605      	mov	r5, r0
 800f282:	b911      	cbnz	r1, 800f28a <sbrk_aligned+0x12>
 800f284:	f000 fb4c 	bl	800f920 <_sbrk_r>
 800f288:	6030      	str	r0, [r6, #0]
 800f28a:	4621      	mov	r1, r4
 800f28c:	4628      	mov	r0, r5
 800f28e:	f000 fb47 	bl	800f920 <_sbrk_r>
 800f292:	1c43      	adds	r3, r0, #1
 800f294:	d00a      	beq.n	800f2ac <sbrk_aligned+0x34>
 800f296:	1cc4      	adds	r4, r0, #3
 800f298:	f024 0403 	bic.w	r4, r4, #3
 800f29c:	42a0      	cmp	r0, r4
 800f29e:	d007      	beq.n	800f2b0 <sbrk_aligned+0x38>
 800f2a0:	1a21      	subs	r1, r4, r0
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	f000 fb3c 	bl	800f920 <_sbrk_r>
 800f2a8:	3001      	adds	r0, #1
 800f2aa:	d101      	bne.n	800f2b0 <sbrk_aligned+0x38>
 800f2ac:	f04f 34ff 	mov.w	r4, #4294967295
 800f2b0:	4620      	mov	r0, r4
 800f2b2:	bd70      	pop	{r4, r5, r6, pc}
 800f2b4:	20000860 	.word	0x20000860

0800f2b8 <_malloc_r>:
 800f2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2bc:	1ccd      	adds	r5, r1, #3
 800f2be:	f025 0503 	bic.w	r5, r5, #3
 800f2c2:	3508      	adds	r5, #8
 800f2c4:	2d0c      	cmp	r5, #12
 800f2c6:	bf38      	it	cc
 800f2c8:	250c      	movcc	r5, #12
 800f2ca:	2d00      	cmp	r5, #0
 800f2cc:	4607      	mov	r7, r0
 800f2ce:	db01      	blt.n	800f2d4 <_malloc_r+0x1c>
 800f2d0:	42a9      	cmp	r1, r5
 800f2d2:	d905      	bls.n	800f2e0 <_malloc_r+0x28>
 800f2d4:	230c      	movs	r3, #12
 800f2d6:	603b      	str	r3, [r7, #0]
 800f2d8:	2600      	movs	r6, #0
 800f2da:	4630      	mov	r0, r6
 800f2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e0:	4e2e      	ldr	r6, [pc, #184]	; (800f39c <_malloc_r+0xe4>)
 800f2e2:	f000 fe51 	bl	800ff88 <__malloc_lock>
 800f2e6:	6833      	ldr	r3, [r6, #0]
 800f2e8:	461c      	mov	r4, r3
 800f2ea:	bb34      	cbnz	r4, 800f33a <_malloc_r+0x82>
 800f2ec:	4629      	mov	r1, r5
 800f2ee:	4638      	mov	r0, r7
 800f2f0:	f7ff ffc2 	bl	800f278 <sbrk_aligned>
 800f2f4:	1c43      	adds	r3, r0, #1
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	d14d      	bne.n	800f396 <_malloc_r+0xde>
 800f2fa:	6834      	ldr	r4, [r6, #0]
 800f2fc:	4626      	mov	r6, r4
 800f2fe:	2e00      	cmp	r6, #0
 800f300:	d140      	bne.n	800f384 <_malloc_r+0xcc>
 800f302:	6823      	ldr	r3, [r4, #0]
 800f304:	4631      	mov	r1, r6
 800f306:	4638      	mov	r0, r7
 800f308:	eb04 0803 	add.w	r8, r4, r3
 800f30c:	f000 fb08 	bl	800f920 <_sbrk_r>
 800f310:	4580      	cmp	r8, r0
 800f312:	d13a      	bne.n	800f38a <_malloc_r+0xd2>
 800f314:	6821      	ldr	r1, [r4, #0]
 800f316:	3503      	adds	r5, #3
 800f318:	1a6d      	subs	r5, r5, r1
 800f31a:	f025 0503 	bic.w	r5, r5, #3
 800f31e:	3508      	adds	r5, #8
 800f320:	2d0c      	cmp	r5, #12
 800f322:	bf38      	it	cc
 800f324:	250c      	movcc	r5, #12
 800f326:	4629      	mov	r1, r5
 800f328:	4638      	mov	r0, r7
 800f32a:	f7ff ffa5 	bl	800f278 <sbrk_aligned>
 800f32e:	3001      	adds	r0, #1
 800f330:	d02b      	beq.n	800f38a <_malloc_r+0xd2>
 800f332:	6823      	ldr	r3, [r4, #0]
 800f334:	442b      	add	r3, r5
 800f336:	6023      	str	r3, [r4, #0]
 800f338:	e00e      	b.n	800f358 <_malloc_r+0xa0>
 800f33a:	6822      	ldr	r2, [r4, #0]
 800f33c:	1b52      	subs	r2, r2, r5
 800f33e:	d41e      	bmi.n	800f37e <_malloc_r+0xc6>
 800f340:	2a0b      	cmp	r2, #11
 800f342:	d916      	bls.n	800f372 <_malloc_r+0xba>
 800f344:	1961      	adds	r1, r4, r5
 800f346:	42a3      	cmp	r3, r4
 800f348:	6025      	str	r5, [r4, #0]
 800f34a:	bf18      	it	ne
 800f34c:	6059      	strne	r1, [r3, #4]
 800f34e:	6863      	ldr	r3, [r4, #4]
 800f350:	bf08      	it	eq
 800f352:	6031      	streq	r1, [r6, #0]
 800f354:	5162      	str	r2, [r4, r5]
 800f356:	604b      	str	r3, [r1, #4]
 800f358:	4638      	mov	r0, r7
 800f35a:	f104 060b 	add.w	r6, r4, #11
 800f35e:	f000 fe19 	bl	800ff94 <__malloc_unlock>
 800f362:	f026 0607 	bic.w	r6, r6, #7
 800f366:	1d23      	adds	r3, r4, #4
 800f368:	1af2      	subs	r2, r6, r3
 800f36a:	d0b6      	beq.n	800f2da <_malloc_r+0x22>
 800f36c:	1b9b      	subs	r3, r3, r6
 800f36e:	50a3      	str	r3, [r4, r2]
 800f370:	e7b3      	b.n	800f2da <_malloc_r+0x22>
 800f372:	6862      	ldr	r2, [r4, #4]
 800f374:	42a3      	cmp	r3, r4
 800f376:	bf0c      	ite	eq
 800f378:	6032      	streq	r2, [r6, #0]
 800f37a:	605a      	strne	r2, [r3, #4]
 800f37c:	e7ec      	b.n	800f358 <_malloc_r+0xa0>
 800f37e:	4623      	mov	r3, r4
 800f380:	6864      	ldr	r4, [r4, #4]
 800f382:	e7b2      	b.n	800f2ea <_malloc_r+0x32>
 800f384:	4634      	mov	r4, r6
 800f386:	6876      	ldr	r6, [r6, #4]
 800f388:	e7b9      	b.n	800f2fe <_malloc_r+0x46>
 800f38a:	230c      	movs	r3, #12
 800f38c:	603b      	str	r3, [r7, #0]
 800f38e:	4638      	mov	r0, r7
 800f390:	f000 fe00 	bl	800ff94 <__malloc_unlock>
 800f394:	e7a1      	b.n	800f2da <_malloc_r+0x22>
 800f396:	6025      	str	r5, [r4, #0]
 800f398:	e7de      	b.n	800f358 <_malloc_r+0xa0>
 800f39a:	bf00      	nop
 800f39c:	2000085c 	.word	0x2000085c

0800f3a0 <__ssputs_r>:
 800f3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a4:	688e      	ldr	r6, [r1, #8]
 800f3a6:	429e      	cmp	r6, r3
 800f3a8:	4682      	mov	sl, r0
 800f3aa:	460c      	mov	r4, r1
 800f3ac:	4690      	mov	r8, r2
 800f3ae:	461f      	mov	r7, r3
 800f3b0:	d838      	bhi.n	800f424 <__ssputs_r+0x84>
 800f3b2:	898a      	ldrh	r2, [r1, #12]
 800f3b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f3b8:	d032      	beq.n	800f420 <__ssputs_r+0x80>
 800f3ba:	6825      	ldr	r5, [r4, #0]
 800f3bc:	6909      	ldr	r1, [r1, #16]
 800f3be:	eba5 0901 	sub.w	r9, r5, r1
 800f3c2:	6965      	ldr	r5, [r4, #20]
 800f3c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f3c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f3cc:	3301      	adds	r3, #1
 800f3ce:	444b      	add	r3, r9
 800f3d0:	106d      	asrs	r5, r5, #1
 800f3d2:	429d      	cmp	r5, r3
 800f3d4:	bf38      	it	cc
 800f3d6:	461d      	movcc	r5, r3
 800f3d8:	0553      	lsls	r3, r2, #21
 800f3da:	d531      	bpl.n	800f440 <__ssputs_r+0xa0>
 800f3dc:	4629      	mov	r1, r5
 800f3de:	f7ff ff6b 	bl	800f2b8 <_malloc_r>
 800f3e2:	4606      	mov	r6, r0
 800f3e4:	b950      	cbnz	r0, 800f3fc <__ssputs_r+0x5c>
 800f3e6:	230c      	movs	r3, #12
 800f3e8:	f8ca 3000 	str.w	r3, [sl]
 800f3ec:	89a3      	ldrh	r3, [r4, #12]
 800f3ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3f2:	81a3      	strh	r3, [r4, #12]
 800f3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3fc:	6921      	ldr	r1, [r4, #16]
 800f3fe:	464a      	mov	r2, r9
 800f400:	f7ff fa08 	bl	800e814 <memcpy>
 800f404:	89a3      	ldrh	r3, [r4, #12]
 800f406:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f40a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f40e:	81a3      	strh	r3, [r4, #12]
 800f410:	6126      	str	r6, [r4, #16]
 800f412:	6165      	str	r5, [r4, #20]
 800f414:	444e      	add	r6, r9
 800f416:	eba5 0509 	sub.w	r5, r5, r9
 800f41a:	6026      	str	r6, [r4, #0]
 800f41c:	60a5      	str	r5, [r4, #8]
 800f41e:	463e      	mov	r6, r7
 800f420:	42be      	cmp	r6, r7
 800f422:	d900      	bls.n	800f426 <__ssputs_r+0x86>
 800f424:	463e      	mov	r6, r7
 800f426:	6820      	ldr	r0, [r4, #0]
 800f428:	4632      	mov	r2, r6
 800f42a:	4641      	mov	r1, r8
 800f42c:	f000 fd92 	bl	800ff54 <memmove>
 800f430:	68a3      	ldr	r3, [r4, #8]
 800f432:	1b9b      	subs	r3, r3, r6
 800f434:	60a3      	str	r3, [r4, #8]
 800f436:	6823      	ldr	r3, [r4, #0]
 800f438:	4433      	add	r3, r6
 800f43a:	6023      	str	r3, [r4, #0]
 800f43c:	2000      	movs	r0, #0
 800f43e:	e7db      	b.n	800f3f8 <__ssputs_r+0x58>
 800f440:	462a      	mov	r2, r5
 800f442:	f000 fdad 	bl	800ffa0 <_realloc_r>
 800f446:	4606      	mov	r6, r0
 800f448:	2800      	cmp	r0, #0
 800f44a:	d1e1      	bne.n	800f410 <__ssputs_r+0x70>
 800f44c:	6921      	ldr	r1, [r4, #16]
 800f44e:	4650      	mov	r0, sl
 800f450:	f7ff fec6 	bl	800f1e0 <_free_r>
 800f454:	e7c7      	b.n	800f3e6 <__ssputs_r+0x46>
	...

0800f458 <_svfiprintf_r>:
 800f458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f45c:	4698      	mov	r8, r3
 800f45e:	898b      	ldrh	r3, [r1, #12]
 800f460:	061b      	lsls	r3, r3, #24
 800f462:	b09d      	sub	sp, #116	; 0x74
 800f464:	4607      	mov	r7, r0
 800f466:	460d      	mov	r5, r1
 800f468:	4614      	mov	r4, r2
 800f46a:	d50e      	bpl.n	800f48a <_svfiprintf_r+0x32>
 800f46c:	690b      	ldr	r3, [r1, #16]
 800f46e:	b963      	cbnz	r3, 800f48a <_svfiprintf_r+0x32>
 800f470:	2140      	movs	r1, #64	; 0x40
 800f472:	f7ff ff21 	bl	800f2b8 <_malloc_r>
 800f476:	6028      	str	r0, [r5, #0]
 800f478:	6128      	str	r0, [r5, #16]
 800f47a:	b920      	cbnz	r0, 800f486 <_svfiprintf_r+0x2e>
 800f47c:	230c      	movs	r3, #12
 800f47e:	603b      	str	r3, [r7, #0]
 800f480:	f04f 30ff 	mov.w	r0, #4294967295
 800f484:	e0d1      	b.n	800f62a <_svfiprintf_r+0x1d2>
 800f486:	2340      	movs	r3, #64	; 0x40
 800f488:	616b      	str	r3, [r5, #20]
 800f48a:	2300      	movs	r3, #0
 800f48c:	9309      	str	r3, [sp, #36]	; 0x24
 800f48e:	2320      	movs	r3, #32
 800f490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f494:	f8cd 800c 	str.w	r8, [sp, #12]
 800f498:	2330      	movs	r3, #48	; 0x30
 800f49a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f644 <_svfiprintf_r+0x1ec>
 800f49e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4a2:	f04f 0901 	mov.w	r9, #1
 800f4a6:	4623      	mov	r3, r4
 800f4a8:	469a      	mov	sl, r3
 800f4aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4ae:	b10a      	cbz	r2, 800f4b4 <_svfiprintf_r+0x5c>
 800f4b0:	2a25      	cmp	r2, #37	; 0x25
 800f4b2:	d1f9      	bne.n	800f4a8 <_svfiprintf_r+0x50>
 800f4b4:	ebba 0b04 	subs.w	fp, sl, r4
 800f4b8:	d00b      	beq.n	800f4d2 <_svfiprintf_r+0x7a>
 800f4ba:	465b      	mov	r3, fp
 800f4bc:	4622      	mov	r2, r4
 800f4be:	4629      	mov	r1, r5
 800f4c0:	4638      	mov	r0, r7
 800f4c2:	f7ff ff6d 	bl	800f3a0 <__ssputs_r>
 800f4c6:	3001      	adds	r0, #1
 800f4c8:	f000 80aa 	beq.w	800f620 <_svfiprintf_r+0x1c8>
 800f4cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4ce:	445a      	add	r2, fp
 800f4d0:	9209      	str	r2, [sp, #36]	; 0x24
 800f4d2:	f89a 3000 	ldrb.w	r3, [sl]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	f000 80a2 	beq.w	800f620 <_svfiprintf_r+0x1c8>
 800f4dc:	2300      	movs	r3, #0
 800f4de:	f04f 32ff 	mov.w	r2, #4294967295
 800f4e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4e6:	f10a 0a01 	add.w	sl, sl, #1
 800f4ea:	9304      	str	r3, [sp, #16]
 800f4ec:	9307      	str	r3, [sp, #28]
 800f4ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4f2:	931a      	str	r3, [sp, #104]	; 0x68
 800f4f4:	4654      	mov	r4, sl
 800f4f6:	2205      	movs	r2, #5
 800f4f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4fc:	4851      	ldr	r0, [pc, #324]	; (800f644 <_svfiprintf_r+0x1ec>)
 800f4fe:	f7f0 fe87 	bl	8000210 <memchr>
 800f502:	9a04      	ldr	r2, [sp, #16]
 800f504:	b9d8      	cbnz	r0, 800f53e <_svfiprintf_r+0xe6>
 800f506:	06d0      	lsls	r0, r2, #27
 800f508:	bf44      	itt	mi
 800f50a:	2320      	movmi	r3, #32
 800f50c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f510:	0711      	lsls	r1, r2, #28
 800f512:	bf44      	itt	mi
 800f514:	232b      	movmi	r3, #43	; 0x2b
 800f516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f51a:	f89a 3000 	ldrb.w	r3, [sl]
 800f51e:	2b2a      	cmp	r3, #42	; 0x2a
 800f520:	d015      	beq.n	800f54e <_svfiprintf_r+0xf6>
 800f522:	9a07      	ldr	r2, [sp, #28]
 800f524:	4654      	mov	r4, sl
 800f526:	2000      	movs	r0, #0
 800f528:	f04f 0c0a 	mov.w	ip, #10
 800f52c:	4621      	mov	r1, r4
 800f52e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f532:	3b30      	subs	r3, #48	; 0x30
 800f534:	2b09      	cmp	r3, #9
 800f536:	d94e      	bls.n	800f5d6 <_svfiprintf_r+0x17e>
 800f538:	b1b0      	cbz	r0, 800f568 <_svfiprintf_r+0x110>
 800f53a:	9207      	str	r2, [sp, #28]
 800f53c:	e014      	b.n	800f568 <_svfiprintf_r+0x110>
 800f53e:	eba0 0308 	sub.w	r3, r0, r8
 800f542:	fa09 f303 	lsl.w	r3, r9, r3
 800f546:	4313      	orrs	r3, r2
 800f548:	9304      	str	r3, [sp, #16]
 800f54a:	46a2      	mov	sl, r4
 800f54c:	e7d2      	b.n	800f4f4 <_svfiprintf_r+0x9c>
 800f54e:	9b03      	ldr	r3, [sp, #12]
 800f550:	1d19      	adds	r1, r3, #4
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	9103      	str	r1, [sp, #12]
 800f556:	2b00      	cmp	r3, #0
 800f558:	bfbb      	ittet	lt
 800f55a:	425b      	neglt	r3, r3
 800f55c:	f042 0202 	orrlt.w	r2, r2, #2
 800f560:	9307      	strge	r3, [sp, #28]
 800f562:	9307      	strlt	r3, [sp, #28]
 800f564:	bfb8      	it	lt
 800f566:	9204      	strlt	r2, [sp, #16]
 800f568:	7823      	ldrb	r3, [r4, #0]
 800f56a:	2b2e      	cmp	r3, #46	; 0x2e
 800f56c:	d10c      	bne.n	800f588 <_svfiprintf_r+0x130>
 800f56e:	7863      	ldrb	r3, [r4, #1]
 800f570:	2b2a      	cmp	r3, #42	; 0x2a
 800f572:	d135      	bne.n	800f5e0 <_svfiprintf_r+0x188>
 800f574:	9b03      	ldr	r3, [sp, #12]
 800f576:	1d1a      	adds	r2, r3, #4
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	9203      	str	r2, [sp, #12]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	bfb8      	it	lt
 800f580:	f04f 33ff 	movlt.w	r3, #4294967295
 800f584:	3402      	adds	r4, #2
 800f586:	9305      	str	r3, [sp, #20]
 800f588:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f654 <_svfiprintf_r+0x1fc>
 800f58c:	7821      	ldrb	r1, [r4, #0]
 800f58e:	2203      	movs	r2, #3
 800f590:	4650      	mov	r0, sl
 800f592:	f7f0 fe3d 	bl	8000210 <memchr>
 800f596:	b140      	cbz	r0, 800f5aa <_svfiprintf_r+0x152>
 800f598:	2340      	movs	r3, #64	; 0x40
 800f59a:	eba0 000a 	sub.w	r0, r0, sl
 800f59e:	fa03 f000 	lsl.w	r0, r3, r0
 800f5a2:	9b04      	ldr	r3, [sp, #16]
 800f5a4:	4303      	orrs	r3, r0
 800f5a6:	3401      	adds	r4, #1
 800f5a8:	9304      	str	r3, [sp, #16]
 800f5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5ae:	4826      	ldr	r0, [pc, #152]	; (800f648 <_svfiprintf_r+0x1f0>)
 800f5b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5b4:	2206      	movs	r2, #6
 800f5b6:	f7f0 fe2b 	bl	8000210 <memchr>
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	d038      	beq.n	800f630 <_svfiprintf_r+0x1d8>
 800f5be:	4b23      	ldr	r3, [pc, #140]	; (800f64c <_svfiprintf_r+0x1f4>)
 800f5c0:	bb1b      	cbnz	r3, 800f60a <_svfiprintf_r+0x1b2>
 800f5c2:	9b03      	ldr	r3, [sp, #12]
 800f5c4:	3307      	adds	r3, #7
 800f5c6:	f023 0307 	bic.w	r3, r3, #7
 800f5ca:	3308      	adds	r3, #8
 800f5cc:	9303      	str	r3, [sp, #12]
 800f5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5d0:	4433      	add	r3, r6
 800f5d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f5d4:	e767      	b.n	800f4a6 <_svfiprintf_r+0x4e>
 800f5d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5da:	460c      	mov	r4, r1
 800f5dc:	2001      	movs	r0, #1
 800f5de:	e7a5      	b.n	800f52c <_svfiprintf_r+0xd4>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	3401      	adds	r4, #1
 800f5e4:	9305      	str	r3, [sp, #20]
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	f04f 0c0a 	mov.w	ip, #10
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5f2:	3a30      	subs	r2, #48	; 0x30
 800f5f4:	2a09      	cmp	r2, #9
 800f5f6:	d903      	bls.n	800f600 <_svfiprintf_r+0x1a8>
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d0c5      	beq.n	800f588 <_svfiprintf_r+0x130>
 800f5fc:	9105      	str	r1, [sp, #20]
 800f5fe:	e7c3      	b.n	800f588 <_svfiprintf_r+0x130>
 800f600:	fb0c 2101 	mla	r1, ip, r1, r2
 800f604:	4604      	mov	r4, r0
 800f606:	2301      	movs	r3, #1
 800f608:	e7f0      	b.n	800f5ec <_svfiprintf_r+0x194>
 800f60a:	ab03      	add	r3, sp, #12
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	462a      	mov	r2, r5
 800f610:	4b0f      	ldr	r3, [pc, #60]	; (800f650 <_svfiprintf_r+0x1f8>)
 800f612:	a904      	add	r1, sp, #16
 800f614:	4638      	mov	r0, r7
 800f616:	f7fc f967 	bl	800b8e8 <_printf_float>
 800f61a:	1c42      	adds	r2, r0, #1
 800f61c:	4606      	mov	r6, r0
 800f61e:	d1d6      	bne.n	800f5ce <_svfiprintf_r+0x176>
 800f620:	89ab      	ldrh	r3, [r5, #12]
 800f622:	065b      	lsls	r3, r3, #25
 800f624:	f53f af2c 	bmi.w	800f480 <_svfiprintf_r+0x28>
 800f628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f62a:	b01d      	add	sp, #116	; 0x74
 800f62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f630:	ab03      	add	r3, sp, #12
 800f632:	9300      	str	r3, [sp, #0]
 800f634:	462a      	mov	r2, r5
 800f636:	4b06      	ldr	r3, [pc, #24]	; (800f650 <_svfiprintf_r+0x1f8>)
 800f638:	a904      	add	r1, sp, #16
 800f63a:	4638      	mov	r0, r7
 800f63c:	f7fc fbf8 	bl	800be30 <_printf_i>
 800f640:	e7eb      	b.n	800f61a <_svfiprintf_r+0x1c2>
 800f642:	bf00      	nop
 800f644:	08011654 	.word	0x08011654
 800f648:	0801165e 	.word	0x0801165e
 800f64c:	0800b8e9 	.word	0x0800b8e9
 800f650:	0800f3a1 	.word	0x0800f3a1
 800f654:	0801165a 	.word	0x0801165a

0800f658 <__sfputc_r>:
 800f658:	6893      	ldr	r3, [r2, #8]
 800f65a:	3b01      	subs	r3, #1
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	b410      	push	{r4}
 800f660:	6093      	str	r3, [r2, #8]
 800f662:	da08      	bge.n	800f676 <__sfputc_r+0x1e>
 800f664:	6994      	ldr	r4, [r2, #24]
 800f666:	42a3      	cmp	r3, r4
 800f668:	db01      	blt.n	800f66e <__sfputc_r+0x16>
 800f66a:	290a      	cmp	r1, #10
 800f66c:	d103      	bne.n	800f676 <__sfputc_r+0x1e>
 800f66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f672:	f000 b979 	b.w	800f968 <__swbuf_r>
 800f676:	6813      	ldr	r3, [r2, #0]
 800f678:	1c58      	adds	r0, r3, #1
 800f67a:	6010      	str	r0, [r2, #0]
 800f67c:	7019      	strb	r1, [r3, #0]
 800f67e:	4608      	mov	r0, r1
 800f680:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f684:	4770      	bx	lr

0800f686 <__sfputs_r>:
 800f686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f688:	4606      	mov	r6, r0
 800f68a:	460f      	mov	r7, r1
 800f68c:	4614      	mov	r4, r2
 800f68e:	18d5      	adds	r5, r2, r3
 800f690:	42ac      	cmp	r4, r5
 800f692:	d101      	bne.n	800f698 <__sfputs_r+0x12>
 800f694:	2000      	movs	r0, #0
 800f696:	e007      	b.n	800f6a8 <__sfputs_r+0x22>
 800f698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f69c:	463a      	mov	r2, r7
 800f69e:	4630      	mov	r0, r6
 800f6a0:	f7ff ffda 	bl	800f658 <__sfputc_r>
 800f6a4:	1c43      	adds	r3, r0, #1
 800f6a6:	d1f3      	bne.n	800f690 <__sfputs_r+0xa>
 800f6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f6ac <_vfiprintf_r>:
 800f6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b0:	460d      	mov	r5, r1
 800f6b2:	b09d      	sub	sp, #116	; 0x74
 800f6b4:	4614      	mov	r4, r2
 800f6b6:	4698      	mov	r8, r3
 800f6b8:	4606      	mov	r6, r0
 800f6ba:	b118      	cbz	r0, 800f6c4 <_vfiprintf_r+0x18>
 800f6bc:	6983      	ldr	r3, [r0, #24]
 800f6be:	b90b      	cbnz	r3, 800f6c4 <_vfiprintf_r+0x18>
 800f6c0:	f000 fb42 	bl	800fd48 <__sinit>
 800f6c4:	4b89      	ldr	r3, [pc, #548]	; (800f8ec <_vfiprintf_r+0x240>)
 800f6c6:	429d      	cmp	r5, r3
 800f6c8:	d11b      	bne.n	800f702 <_vfiprintf_r+0x56>
 800f6ca:	6875      	ldr	r5, [r6, #4]
 800f6cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6ce:	07d9      	lsls	r1, r3, #31
 800f6d0:	d405      	bmi.n	800f6de <_vfiprintf_r+0x32>
 800f6d2:	89ab      	ldrh	r3, [r5, #12]
 800f6d4:	059a      	lsls	r2, r3, #22
 800f6d6:	d402      	bmi.n	800f6de <_vfiprintf_r+0x32>
 800f6d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6da:	f000 fbd3 	bl	800fe84 <__retarget_lock_acquire_recursive>
 800f6de:	89ab      	ldrh	r3, [r5, #12]
 800f6e0:	071b      	lsls	r3, r3, #28
 800f6e2:	d501      	bpl.n	800f6e8 <_vfiprintf_r+0x3c>
 800f6e4:	692b      	ldr	r3, [r5, #16]
 800f6e6:	b9eb      	cbnz	r3, 800f724 <_vfiprintf_r+0x78>
 800f6e8:	4629      	mov	r1, r5
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	f000 f99c 	bl	800fa28 <__swsetup_r>
 800f6f0:	b1c0      	cbz	r0, 800f724 <_vfiprintf_r+0x78>
 800f6f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6f4:	07dc      	lsls	r4, r3, #31
 800f6f6:	d50e      	bpl.n	800f716 <_vfiprintf_r+0x6a>
 800f6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6fc:	b01d      	add	sp, #116	; 0x74
 800f6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f702:	4b7b      	ldr	r3, [pc, #492]	; (800f8f0 <_vfiprintf_r+0x244>)
 800f704:	429d      	cmp	r5, r3
 800f706:	d101      	bne.n	800f70c <_vfiprintf_r+0x60>
 800f708:	68b5      	ldr	r5, [r6, #8]
 800f70a:	e7df      	b.n	800f6cc <_vfiprintf_r+0x20>
 800f70c:	4b79      	ldr	r3, [pc, #484]	; (800f8f4 <_vfiprintf_r+0x248>)
 800f70e:	429d      	cmp	r5, r3
 800f710:	bf08      	it	eq
 800f712:	68f5      	ldreq	r5, [r6, #12]
 800f714:	e7da      	b.n	800f6cc <_vfiprintf_r+0x20>
 800f716:	89ab      	ldrh	r3, [r5, #12]
 800f718:	0598      	lsls	r0, r3, #22
 800f71a:	d4ed      	bmi.n	800f6f8 <_vfiprintf_r+0x4c>
 800f71c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f71e:	f000 fbb2 	bl	800fe86 <__retarget_lock_release_recursive>
 800f722:	e7e9      	b.n	800f6f8 <_vfiprintf_r+0x4c>
 800f724:	2300      	movs	r3, #0
 800f726:	9309      	str	r3, [sp, #36]	; 0x24
 800f728:	2320      	movs	r3, #32
 800f72a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f72e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f732:	2330      	movs	r3, #48	; 0x30
 800f734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f8f8 <_vfiprintf_r+0x24c>
 800f738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f73c:	f04f 0901 	mov.w	r9, #1
 800f740:	4623      	mov	r3, r4
 800f742:	469a      	mov	sl, r3
 800f744:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f748:	b10a      	cbz	r2, 800f74e <_vfiprintf_r+0xa2>
 800f74a:	2a25      	cmp	r2, #37	; 0x25
 800f74c:	d1f9      	bne.n	800f742 <_vfiprintf_r+0x96>
 800f74e:	ebba 0b04 	subs.w	fp, sl, r4
 800f752:	d00b      	beq.n	800f76c <_vfiprintf_r+0xc0>
 800f754:	465b      	mov	r3, fp
 800f756:	4622      	mov	r2, r4
 800f758:	4629      	mov	r1, r5
 800f75a:	4630      	mov	r0, r6
 800f75c:	f7ff ff93 	bl	800f686 <__sfputs_r>
 800f760:	3001      	adds	r0, #1
 800f762:	f000 80aa 	beq.w	800f8ba <_vfiprintf_r+0x20e>
 800f766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f768:	445a      	add	r2, fp
 800f76a:	9209      	str	r2, [sp, #36]	; 0x24
 800f76c:	f89a 3000 	ldrb.w	r3, [sl]
 800f770:	2b00      	cmp	r3, #0
 800f772:	f000 80a2 	beq.w	800f8ba <_vfiprintf_r+0x20e>
 800f776:	2300      	movs	r3, #0
 800f778:	f04f 32ff 	mov.w	r2, #4294967295
 800f77c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f780:	f10a 0a01 	add.w	sl, sl, #1
 800f784:	9304      	str	r3, [sp, #16]
 800f786:	9307      	str	r3, [sp, #28]
 800f788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f78c:	931a      	str	r3, [sp, #104]	; 0x68
 800f78e:	4654      	mov	r4, sl
 800f790:	2205      	movs	r2, #5
 800f792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f796:	4858      	ldr	r0, [pc, #352]	; (800f8f8 <_vfiprintf_r+0x24c>)
 800f798:	f7f0 fd3a 	bl	8000210 <memchr>
 800f79c:	9a04      	ldr	r2, [sp, #16]
 800f79e:	b9d8      	cbnz	r0, 800f7d8 <_vfiprintf_r+0x12c>
 800f7a0:	06d1      	lsls	r1, r2, #27
 800f7a2:	bf44      	itt	mi
 800f7a4:	2320      	movmi	r3, #32
 800f7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7aa:	0713      	lsls	r3, r2, #28
 800f7ac:	bf44      	itt	mi
 800f7ae:	232b      	movmi	r3, #43	; 0x2b
 800f7b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f7b8:	2b2a      	cmp	r3, #42	; 0x2a
 800f7ba:	d015      	beq.n	800f7e8 <_vfiprintf_r+0x13c>
 800f7bc:	9a07      	ldr	r2, [sp, #28]
 800f7be:	4654      	mov	r4, sl
 800f7c0:	2000      	movs	r0, #0
 800f7c2:	f04f 0c0a 	mov.w	ip, #10
 800f7c6:	4621      	mov	r1, r4
 800f7c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7cc:	3b30      	subs	r3, #48	; 0x30
 800f7ce:	2b09      	cmp	r3, #9
 800f7d0:	d94e      	bls.n	800f870 <_vfiprintf_r+0x1c4>
 800f7d2:	b1b0      	cbz	r0, 800f802 <_vfiprintf_r+0x156>
 800f7d4:	9207      	str	r2, [sp, #28]
 800f7d6:	e014      	b.n	800f802 <_vfiprintf_r+0x156>
 800f7d8:	eba0 0308 	sub.w	r3, r0, r8
 800f7dc:	fa09 f303 	lsl.w	r3, r9, r3
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	9304      	str	r3, [sp, #16]
 800f7e4:	46a2      	mov	sl, r4
 800f7e6:	e7d2      	b.n	800f78e <_vfiprintf_r+0xe2>
 800f7e8:	9b03      	ldr	r3, [sp, #12]
 800f7ea:	1d19      	adds	r1, r3, #4
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	9103      	str	r1, [sp, #12]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	bfbb      	ittet	lt
 800f7f4:	425b      	neglt	r3, r3
 800f7f6:	f042 0202 	orrlt.w	r2, r2, #2
 800f7fa:	9307      	strge	r3, [sp, #28]
 800f7fc:	9307      	strlt	r3, [sp, #28]
 800f7fe:	bfb8      	it	lt
 800f800:	9204      	strlt	r2, [sp, #16]
 800f802:	7823      	ldrb	r3, [r4, #0]
 800f804:	2b2e      	cmp	r3, #46	; 0x2e
 800f806:	d10c      	bne.n	800f822 <_vfiprintf_r+0x176>
 800f808:	7863      	ldrb	r3, [r4, #1]
 800f80a:	2b2a      	cmp	r3, #42	; 0x2a
 800f80c:	d135      	bne.n	800f87a <_vfiprintf_r+0x1ce>
 800f80e:	9b03      	ldr	r3, [sp, #12]
 800f810:	1d1a      	adds	r2, r3, #4
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	9203      	str	r2, [sp, #12]
 800f816:	2b00      	cmp	r3, #0
 800f818:	bfb8      	it	lt
 800f81a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f81e:	3402      	adds	r4, #2
 800f820:	9305      	str	r3, [sp, #20]
 800f822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f908 <_vfiprintf_r+0x25c>
 800f826:	7821      	ldrb	r1, [r4, #0]
 800f828:	2203      	movs	r2, #3
 800f82a:	4650      	mov	r0, sl
 800f82c:	f7f0 fcf0 	bl	8000210 <memchr>
 800f830:	b140      	cbz	r0, 800f844 <_vfiprintf_r+0x198>
 800f832:	2340      	movs	r3, #64	; 0x40
 800f834:	eba0 000a 	sub.w	r0, r0, sl
 800f838:	fa03 f000 	lsl.w	r0, r3, r0
 800f83c:	9b04      	ldr	r3, [sp, #16]
 800f83e:	4303      	orrs	r3, r0
 800f840:	3401      	adds	r4, #1
 800f842:	9304      	str	r3, [sp, #16]
 800f844:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f848:	482c      	ldr	r0, [pc, #176]	; (800f8fc <_vfiprintf_r+0x250>)
 800f84a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f84e:	2206      	movs	r2, #6
 800f850:	f7f0 fcde 	bl	8000210 <memchr>
 800f854:	2800      	cmp	r0, #0
 800f856:	d03f      	beq.n	800f8d8 <_vfiprintf_r+0x22c>
 800f858:	4b29      	ldr	r3, [pc, #164]	; (800f900 <_vfiprintf_r+0x254>)
 800f85a:	bb1b      	cbnz	r3, 800f8a4 <_vfiprintf_r+0x1f8>
 800f85c:	9b03      	ldr	r3, [sp, #12]
 800f85e:	3307      	adds	r3, #7
 800f860:	f023 0307 	bic.w	r3, r3, #7
 800f864:	3308      	adds	r3, #8
 800f866:	9303      	str	r3, [sp, #12]
 800f868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f86a:	443b      	add	r3, r7
 800f86c:	9309      	str	r3, [sp, #36]	; 0x24
 800f86e:	e767      	b.n	800f740 <_vfiprintf_r+0x94>
 800f870:	fb0c 3202 	mla	r2, ip, r2, r3
 800f874:	460c      	mov	r4, r1
 800f876:	2001      	movs	r0, #1
 800f878:	e7a5      	b.n	800f7c6 <_vfiprintf_r+0x11a>
 800f87a:	2300      	movs	r3, #0
 800f87c:	3401      	adds	r4, #1
 800f87e:	9305      	str	r3, [sp, #20]
 800f880:	4619      	mov	r1, r3
 800f882:	f04f 0c0a 	mov.w	ip, #10
 800f886:	4620      	mov	r0, r4
 800f888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f88c:	3a30      	subs	r2, #48	; 0x30
 800f88e:	2a09      	cmp	r2, #9
 800f890:	d903      	bls.n	800f89a <_vfiprintf_r+0x1ee>
 800f892:	2b00      	cmp	r3, #0
 800f894:	d0c5      	beq.n	800f822 <_vfiprintf_r+0x176>
 800f896:	9105      	str	r1, [sp, #20]
 800f898:	e7c3      	b.n	800f822 <_vfiprintf_r+0x176>
 800f89a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f89e:	4604      	mov	r4, r0
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	e7f0      	b.n	800f886 <_vfiprintf_r+0x1da>
 800f8a4:	ab03      	add	r3, sp, #12
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	462a      	mov	r2, r5
 800f8aa:	4b16      	ldr	r3, [pc, #88]	; (800f904 <_vfiprintf_r+0x258>)
 800f8ac:	a904      	add	r1, sp, #16
 800f8ae:	4630      	mov	r0, r6
 800f8b0:	f7fc f81a 	bl	800b8e8 <_printf_float>
 800f8b4:	4607      	mov	r7, r0
 800f8b6:	1c78      	adds	r0, r7, #1
 800f8b8:	d1d6      	bne.n	800f868 <_vfiprintf_r+0x1bc>
 800f8ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8bc:	07d9      	lsls	r1, r3, #31
 800f8be:	d405      	bmi.n	800f8cc <_vfiprintf_r+0x220>
 800f8c0:	89ab      	ldrh	r3, [r5, #12]
 800f8c2:	059a      	lsls	r2, r3, #22
 800f8c4:	d402      	bmi.n	800f8cc <_vfiprintf_r+0x220>
 800f8c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8c8:	f000 fadd 	bl	800fe86 <__retarget_lock_release_recursive>
 800f8cc:	89ab      	ldrh	r3, [r5, #12]
 800f8ce:	065b      	lsls	r3, r3, #25
 800f8d0:	f53f af12 	bmi.w	800f6f8 <_vfiprintf_r+0x4c>
 800f8d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8d6:	e711      	b.n	800f6fc <_vfiprintf_r+0x50>
 800f8d8:	ab03      	add	r3, sp, #12
 800f8da:	9300      	str	r3, [sp, #0]
 800f8dc:	462a      	mov	r2, r5
 800f8de:	4b09      	ldr	r3, [pc, #36]	; (800f904 <_vfiprintf_r+0x258>)
 800f8e0:	a904      	add	r1, sp, #16
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	f7fc faa4 	bl	800be30 <_printf_i>
 800f8e8:	e7e4      	b.n	800f8b4 <_vfiprintf_r+0x208>
 800f8ea:	bf00      	nop
 800f8ec:	08011688 	.word	0x08011688
 800f8f0:	080116a8 	.word	0x080116a8
 800f8f4:	08011668 	.word	0x08011668
 800f8f8:	08011654 	.word	0x08011654
 800f8fc:	0801165e 	.word	0x0801165e
 800f900:	0800b8e9 	.word	0x0800b8e9
 800f904:	0800f687 	.word	0x0800f687
 800f908:	0801165a 	.word	0x0801165a
 800f90c:	00000000 	.word	0x00000000

0800f910 <nan>:
 800f910:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f918 <nan+0x8>
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop
 800f918:	00000000 	.word	0x00000000
 800f91c:	7ff80000 	.word	0x7ff80000

0800f920 <_sbrk_r>:
 800f920:	b538      	push	{r3, r4, r5, lr}
 800f922:	4d06      	ldr	r5, [pc, #24]	; (800f93c <_sbrk_r+0x1c>)
 800f924:	2300      	movs	r3, #0
 800f926:	4604      	mov	r4, r0
 800f928:	4608      	mov	r0, r1
 800f92a:	602b      	str	r3, [r5, #0]
 800f92c:	f7f3 fbec 	bl	8003108 <_sbrk>
 800f930:	1c43      	adds	r3, r0, #1
 800f932:	d102      	bne.n	800f93a <_sbrk_r+0x1a>
 800f934:	682b      	ldr	r3, [r5, #0]
 800f936:	b103      	cbz	r3, 800f93a <_sbrk_r+0x1a>
 800f938:	6023      	str	r3, [r4, #0]
 800f93a:	bd38      	pop	{r3, r4, r5, pc}
 800f93c:	20000868 	.word	0x20000868

0800f940 <strncmp>:
 800f940:	b510      	push	{r4, lr}
 800f942:	b17a      	cbz	r2, 800f964 <strncmp+0x24>
 800f944:	4603      	mov	r3, r0
 800f946:	3901      	subs	r1, #1
 800f948:	1884      	adds	r4, r0, r2
 800f94a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f94e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f952:	4290      	cmp	r0, r2
 800f954:	d101      	bne.n	800f95a <strncmp+0x1a>
 800f956:	42a3      	cmp	r3, r4
 800f958:	d101      	bne.n	800f95e <strncmp+0x1e>
 800f95a:	1a80      	subs	r0, r0, r2
 800f95c:	bd10      	pop	{r4, pc}
 800f95e:	2800      	cmp	r0, #0
 800f960:	d1f3      	bne.n	800f94a <strncmp+0xa>
 800f962:	e7fa      	b.n	800f95a <strncmp+0x1a>
 800f964:	4610      	mov	r0, r2
 800f966:	e7f9      	b.n	800f95c <strncmp+0x1c>

0800f968 <__swbuf_r>:
 800f968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96a:	460e      	mov	r6, r1
 800f96c:	4614      	mov	r4, r2
 800f96e:	4605      	mov	r5, r0
 800f970:	b118      	cbz	r0, 800f97a <__swbuf_r+0x12>
 800f972:	6983      	ldr	r3, [r0, #24]
 800f974:	b90b      	cbnz	r3, 800f97a <__swbuf_r+0x12>
 800f976:	f000 f9e7 	bl	800fd48 <__sinit>
 800f97a:	4b21      	ldr	r3, [pc, #132]	; (800fa00 <__swbuf_r+0x98>)
 800f97c:	429c      	cmp	r4, r3
 800f97e:	d12b      	bne.n	800f9d8 <__swbuf_r+0x70>
 800f980:	686c      	ldr	r4, [r5, #4]
 800f982:	69a3      	ldr	r3, [r4, #24]
 800f984:	60a3      	str	r3, [r4, #8]
 800f986:	89a3      	ldrh	r3, [r4, #12]
 800f988:	071a      	lsls	r2, r3, #28
 800f98a:	d52f      	bpl.n	800f9ec <__swbuf_r+0x84>
 800f98c:	6923      	ldr	r3, [r4, #16]
 800f98e:	b36b      	cbz	r3, 800f9ec <__swbuf_r+0x84>
 800f990:	6923      	ldr	r3, [r4, #16]
 800f992:	6820      	ldr	r0, [r4, #0]
 800f994:	1ac0      	subs	r0, r0, r3
 800f996:	6963      	ldr	r3, [r4, #20]
 800f998:	b2f6      	uxtb	r6, r6
 800f99a:	4283      	cmp	r3, r0
 800f99c:	4637      	mov	r7, r6
 800f99e:	dc04      	bgt.n	800f9aa <__swbuf_r+0x42>
 800f9a0:	4621      	mov	r1, r4
 800f9a2:	4628      	mov	r0, r5
 800f9a4:	f000 f93c 	bl	800fc20 <_fflush_r>
 800f9a8:	bb30      	cbnz	r0, 800f9f8 <__swbuf_r+0x90>
 800f9aa:	68a3      	ldr	r3, [r4, #8]
 800f9ac:	3b01      	subs	r3, #1
 800f9ae:	60a3      	str	r3, [r4, #8]
 800f9b0:	6823      	ldr	r3, [r4, #0]
 800f9b2:	1c5a      	adds	r2, r3, #1
 800f9b4:	6022      	str	r2, [r4, #0]
 800f9b6:	701e      	strb	r6, [r3, #0]
 800f9b8:	6963      	ldr	r3, [r4, #20]
 800f9ba:	3001      	adds	r0, #1
 800f9bc:	4283      	cmp	r3, r0
 800f9be:	d004      	beq.n	800f9ca <__swbuf_r+0x62>
 800f9c0:	89a3      	ldrh	r3, [r4, #12]
 800f9c2:	07db      	lsls	r3, r3, #31
 800f9c4:	d506      	bpl.n	800f9d4 <__swbuf_r+0x6c>
 800f9c6:	2e0a      	cmp	r6, #10
 800f9c8:	d104      	bne.n	800f9d4 <__swbuf_r+0x6c>
 800f9ca:	4621      	mov	r1, r4
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	f000 f927 	bl	800fc20 <_fflush_r>
 800f9d2:	b988      	cbnz	r0, 800f9f8 <__swbuf_r+0x90>
 800f9d4:	4638      	mov	r0, r7
 800f9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9d8:	4b0a      	ldr	r3, [pc, #40]	; (800fa04 <__swbuf_r+0x9c>)
 800f9da:	429c      	cmp	r4, r3
 800f9dc:	d101      	bne.n	800f9e2 <__swbuf_r+0x7a>
 800f9de:	68ac      	ldr	r4, [r5, #8]
 800f9e0:	e7cf      	b.n	800f982 <__swbuf_r+0x1a>
 800f9e2:	4b09      	ldr	r3, [pc, #36]	; (800fa08 <__swbuf_r+0xa0>)
 800f9e4:	429c      	cmp	r4, r3
 800f9e6:	bf08      	it	eq
 800f9e8:	68ec      	ldreq	r4, [r5, #12]
 800f9ea:	e7ca      	b.n	800f982 <__swbuf_r+0x1a>
 800f9ec:	4621      	mov	r1, r4
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	f000 f81a 	bl	800fa28 <__swsetup_r>
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	d0cb      	beq.n	800f990 <__swbuf_r+0x28>
 800f9f8:	f04f 37ff 	mov.w	r7, #4294967295
 800f9fc:	e7ea      	b.n	800f9d4 <__swbuf_r+0x6c>
 800f9fe:	bf00      	nop
 800fa00:	08011688 	.word	0x08011688
 800fa04:	080116a8 	.word	0x080116a8
 800fa08:	08011668 	.word	0x08011668

0800fa0c <__ascii_wctomb>:
 800fa0c:	b149      	cbz	r1, 800fa22 <__ascii_wctomb+0x16>
 800fa0e:	2aff      	cmp	r2, #255	; 0xff
 800fa10:	bf85      	ittet	hi
 800fa12:	238a      	movhi	r3, #138	; 0x8a
 800fa14:	6003      	strhi	r3, [r0, #0]
 800fa16:	700a      	strbls	r2, [r1, #0]
 800fa18:	f04f 30ff 	movhi.w	r0, #4294967295
 800fa1c:	bf98      	it	ls
 800fa1e:	2001      	movls	r0, #1
 800fa20:	4770      	bx	lr
 800fa22:	4608      	mov	r0, r1
 800fa24:	4770      	bx	lr
	...

0800fa28 <__swsetup_r>:
 800fa28:	4b32      	ldr	r3, [pc, #200]	; (800faf4 <__swsetup_r+0xcc>)
 800fa2a:	b570      	push	{r4, r5, r6, lr}
 800fa2c:	681d      	ldr	r5, [r3, #0]
 800fa2e:	4606      	mov	r6, r0
 800fa30:	460c      	mov	r4, r1
 800fa32:	b125      	cbz	r5, 800fa3e <__swsetup_r+0x16>
 800fa34:	69ab      	ldr	r3, [r5, #24]
 800fa36:	b913      	cbnz	r3, 800fa3e <__swsetup_r+0x16>
 800fa38:	4628      	mov	r0, r5
 800fa3a:	f000 f985 	bl	800fd48 <__sinit>
 800fa3e:	4b2e      	ldr	r3, [pc, #184]	; (800faf8 <__swsetup_r+0xd0>)
 800fa40:	429c      	cmp	r4, r3
 800fa42:	d10f      	bne.n	800fa64 <__swsetup_r+0x3c>
 800fa44:	686c      	ldr	r4, [r5, #4]
 800fa46:	89a3      	ldrh	r3, [r4, #12]
 800fa48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa4c:	0719      	lsls	r1, r3, #28
 800fa4e:	d42c      	bmi.n	800faaa <__swsetup_r+0x82>
 800fa50:	06dd      	lsls	r5, r3, #27
 800fa52:	d411      	bmi.n	800fa78 <__swsetup_r+0x50>
 800fa54:	2309      	movs	r3, #9
 800fa56:	6033      	str	r3, [r6, #0]
 800fa58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa5c:	81a3      	strh	r3, [r4, #12]
 800fa5e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa62:	e03e      	b.n	800fae2 <__swsetup_r+0xba>
 800fa64:	4b25      	ldr	r3, [pc, #148]	; (800fafc <__swsetup_r+0xd4>)
 800fa66:	429c      	cmp	r4, r3
 800fa68:	d101      	bne.n	800fa6e <__swsetup_r+0x46>
 800fa6a:	68ac      	ldr	r4, [r5, #8]
 800fa6c:	e7eb      	b.n	800fa46 <__swsetup_r+0x1e>
 800fa6e:	4b24      	ldr	r3, [pc, #144]	; (800fb00 <__swsetup_r+0xd8>)
 800fa70:	429c      	cmp	r4, r3
 800fa72:	bf08      	it	eq
 800fa74:	68ec      	ldreq	r4, [r5, #12]
 800fa76:	e7e6      	b.n	800fa46 <__swsetup_r+0x1e>
 800fa78:	0758      	lsls	r0, r3, #29
 800fa7a:	d512      	bpl.n	800faa2 <__swsetup_r+0x7a>
 800fa7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa7e:	b141      	cbz	r1, 800fa92 <__swsetup_r+0x6a>
 800fa80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa84:	4299      	cmp	r1, r3
 800fa86:	d002      	beq.n	800fa8e <__swsetup_r+0x66>
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f7ff fba9 	bl	800f1e0 <_free_r>
 800fa8e:	2300      	movs	r3, #0
 800fa90:	6363      	str	r3, [r4, #52]	; 0x34
 800fa92:	89a3      	ldrh	r3, [r4, #12]
 800fa94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa98:	81a3      	strh	r3, [r4, #12]
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	6063      	str	r3, [r4, #4]
 800fa9e:	6923      	ldr	r3, [r4, #16]
 800faa0:	6023      	str	r3, [r4, #0]
 800faa2:	89a3      	ldrh	r3, [r4, #12]
 800faa4:	f043 0308 	orr.w	r3, r3, #8
 800faa8:	81a3      	strh	r3, [r4, #12]
 800faaa:	6923      	ldr	r3, [r4, #16]
 800faac:	b94b      	cbnz	r3, 800fac2 <__swsetup_r+0x9a>
 800faae:	89a3      	ldrh	r3, [r4, #12]
 800fab0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fab8:	d003      	beq.n	800fac2 <__swsetup_r+0x9a>
 800faba:	4621      	mov	r1, r4
 800fabc:	4630      	mov	r0, r6
 800fabe:	f000 fa09 	bl	800fed4 <__smakebuf_r>
 800fac2:	89a0      	ldrh	r0, [r4, #12]
 800fac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fac8:	f010 0301 	ands.w	r3, r0, #1
 800facc:	d00a      	beq.n	800fae4 <__swsetup_r+0xbc>
 800face:	2300      	movs	r3, #0
 800fad0:	60a3      	str	r3, [r4, #8]
 800fad2:	6963      	ldr	r3, [r4, #20]
 800fad4:	425b      	negs	r3, r3
 800fad6:	61a3      	str	r3, [r4, #24]
 800fad8:	6923      	ldr	r3, [r4, #16]
 800fada:	b943      	cbnz	r3, 800faee <__swsetup_r+0xc6>
 800fadc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fae0:	d1ba      	bne.n	800fa58 <__swsetup_r+0x30>
 800fae2:	bd70      	pop	{r4, r5, r6, pc}
 800fae4:	0781      	lsls	r1, r0, #30
 800fae6:	bf58      	it	pl
 800fae8:	6963      	ldrpl	r3, [r4, #20]
 800faea:	60a3      	str	r3, [r4, #8]
 800faec:	e7f4      	b.n	800fad8 <__swsetup_r+0xb0>
 800faee:	2000      	movs	r0, #0
 800faf0:	e7f7      	b.n	800fae2 <__swsetup_r+0xba>
 800faf2:	bf00      	nop
 800faf4:	20000020 	.word	0x20000020
 800faf8:	08011688 	.word	0x08011688
 800fafc:	080116a8 	.word	0x080116a8
 800fb00:	08011668 	.word	0x08011668

0800fb04 <abort>:
 800fb04:	b508      	push	{r3, lr}
 800fb06:	2006      	movs	r0, #6
 800fb08:	f000 faa2 	bl	8010050 <raise>
 800fb0c:	2001      	movs	r0, #1
 800fb0e:	f7f3 fa83 	bl	8003018 <_exit>
	...

0800fb14 <__sflush_r>:
 800fb14:	898a      	ldrh	r2, [r1, #12]
 800fb16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb1a:	4605      	mov	r5, r0
 800fb1c:	0710      	lsls	r0, r2, #28
 800fb1e:	460c      	mov	r4, r1
 800fb20:	d458      	bmi.n	800fbd4 <__sflush_r+0xc0>
 800fb22:	684b      	ldr	r3, [r1, #4]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	dc05      	bgt.n	800fb34 <__sflush_r+0x20>
 800fb28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	dc02      	bgt.n	800fb34 <__sflush_r+0x20>
 800fb2e:	2000      	movs	r0, #0
 800fb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb36:	2e00      	cmp	r6, #0
 800fb38:	d0f9      	beq.n	800fb2e <__sflush_r+0x1a>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb40:	682f      	ldr	r7, [r5, #0]
 800fb42:	602b      	str	r3, [r5, #0]
 800fb44:	d032      	beq.n	800fbac <__sflush_r+0x98>
 800fb46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb48:	89a3      	ldrh	r3, [r4, #12]
 800fb4a:	075a      	lsls	r2, r3, #29
 800fb4c:	d505      	bpl.n	800fb5a <__sflush_r+0x46>
 800fb4e:	6863      	ldr	r3, [r4, #4]
 800fb50:	1ac0      	subs	r0, r0, r3
 800fb52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb54:	b10b      	cbz	r3, 800fb5a <__sflush_r+0x46>
 800fb56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb58:	1ac0      	subs	r0, r0, r3
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb60:	6a21      	ldr	r1, [r4, #32]
 800fb62:	4628      	mov	r0, r5
 800fb64:	47b0      	blx	r6
 800fb66:	1c43      	adds	r3, r0, #1
 800fb68:	89a3      	ldrh	r3, [r4, #12]
 800fb6a:	d106      	bne.n	800fb7a <__sflush_r+0x66>
 800fb6c:	6829      	ldr	r1, [r5, #0]
 800fb6e:	291d      	cmp	r1, #29
 800fb70:	d82c      	bhi.n	800fbcc <__sflush_r+0xb8>
 800fb72:	4a2a      	ldr	r2, [pc, #168]	; (800fc1c <__sflush_r+0x108>)
 800fb74:	40ca      	lsrs	r2, r1
 800fb76:	07d6      	lsls	r6, r2, #31
 800fb78:	d528      	bpl.n	800fbcc <__sflush_r+0xb8>
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	6062      	str	r2, [r4, #4]
 800fb7e:	04d9      	lsls	r1, r3, #19
 800fb80:	6922      	ldr	r2, [r4, #16]
 800fb82:	6022      	str	r2, [r4, #0]
 800fb84:	d504      	bpl.n	800fb90 <__sflush_r+0x7c>
 800fb86:	1c42      	adds	r2, r0, #1
 800fb88:	d101      	bne.n	800fb8e <__sflush_r+0x7a>
 800fb8a:	682b      	ldr	r3, [r5, #0]
 800fb8c:	b903      	cbnz	r3, 800fb90 <__sflush_r+0x7c>
 800fb8e:	6560      	str	r0, [r4, #84]	; 0x54
 800fb90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb92:	602f      	str	r7, [r5, #0]
 800fb94:	2900      	cmp	r1, #0
 800fb96:	d0ca      	beq.n	800fb2e <__sflush_r+0x1a>
 800fb98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb9c:	4299      	cmp	r1, r3
 800fb9e:	d002      	beq.n	800fba6 <__sflush_r+0x92>
 800fba0:	4628      	mov	r0, r5
 800fba2:	f7ff fb1d 	bl	800f1e0 <_free_r>
 800fba6:	2000      	movs	r0, #0
 800fba8:	6360      	str	r0, [r4, #52]	; 0x34
 800fbaa:	e7c1      	b.n	800fb30 <__sflush_r+0x1c>
 800fbac:	6a21      	ldr	r1, [r4, #32]
 800fbae:	2301      	movs	r3, #1
 800fbb0:	4628      	mov	r0, r5
 800fbb2:	47b0      	blx	r6
 800fbb4:	1c41      	adds	r1, r0, #1
 800fbb6:	d1c7      	bne.n	800fb48 <__sflush_r+0x34>
 800fbb8:	682b      	ldr	r3, [r5, #0]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d0c4      	beq.n	800fb48 <__sflush_r+0x34>
 800fbbe:	2b1d      	cmp	r3, #29
 800fbc0:	d001      	beq.n	800fbc6 <__sflush_r+0xb2>
 800fbc2:	2b16      	cmp	r3, #22
 800fbc4:	d101      	bne.n	800fbca <__sflush_r+0xb6>
 800fbc6:	602f      	str	r7, [r5, #0]
 800fbc8:	e7b1      	b.n	800fb2e <__sflush_r+0x1a>
 800fbca:	89a3      	ldrh	r3, [r4, #12]
 800fbcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbd0:	81a3      	strh	r3, [r4, #12]
 800fbd2:	e7ad      	b.n	800fb30 <__sflush_r+0x1c>
 800fbd4:	690f      	ldr	r7, [r1, #16]
 800fbd6:	2f00      	cmp	r7, #0
 800fbd8:	d0a9      	beq.n	800fb2e <__sflush_r+0x1a>
 800fbda:	0793      	lsls	r3, r2, #30
 800fbdc:	680e      	ldr	r6, [r1, #0]
 800fbde:	bf08      	it	eq
 800fbe0:	694b      	ldreq	r3, [r1, #20]
 800fbe2:	600f      	str	r7, [r1, #0]
 800fbe4:	bf18      	it	ne
 800fbe6:	2300      	movne	r3, #0
 800fbe8:	eba6 0807 	sub.w	r8, r6, r7
 800fbec:	608b      	str	r3, [r1, #8]
 800fbee:	f1b8 0f00 	cmp.w	r8, #0
 800fbf2:	dd9c      	ble.n	800fb2e <__sflush_r+0x1a>
 800fbf4:	6a21      	ldr	r1, [r4, #32]
 800fbf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fbf8:	4643      	mov	r3, r8
 800fbfa:	463a      	mov	r2, r7
 800fbfc:	4628      	mov	r0, r5
 800fbfe:	47b0      	blx	r6
 800fc00:	2800      	cmp	r0, #0
 800fc02:	dc06      	bgt.n	800fc12 <__sflush_r+0xfe>
 800fc04:	89a3      	ldrh	r3, [r4, #12]
 800fc06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc0a:	81a3      	strh	r3, [r4, #12]
 800fc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc10:	e78e      	b.n	800fb30 <__sflush_r+0x1c>
 800fc12:	4407      	add	r7, r0
 800fc14:	eba8 0800 	sub.w	r8, r8, r0
 800fc18:	e7e9      	b.n	800fbee <__sflush_r+0xda>
 800fc1a:	bf00      	nop
 800fc1c:	20400001 	.word	0x20400001

0800fc20 <_fflush_r>:
 800fc20:	b538      	push	{r3, r4, r5, lr}
 800fc22:	690b      	ldr	r3, [r1, #16]
 800fc24:	4605      	mov	r5, r0
 800fc26:	460c      	mov	r4, r1
 800fc28:	b913      	cbnz	r3, 800fc30 <_fflush_r+0x10>
 800fc2a:	2500      	movs	r5, #0
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	bd38      	pop	{r3, r4, r5, pc}
 800fc30:	b118      	cbz	r0, 800fc3a <_fflush_r+0x1a>
 800fc32:	6983      	ldr	r3, [r0, #24]
 800fc34:	b90b      	cbnz	r3, 800fc3a <_fflush_r+0x1a>
 800fc36:	f000 f887 	bl	800fd48 <__sinit>
 800fc3a:	4b14      	ldr	r3, [pc, #80]	; (800fc8c <_fflush_r+0x6c>)
 800fc3c:	429c      	cmp	r4, r3
 800fc3e:	d11b      	bne.n	800fc78 <_fflush_r+0x58>
 800fc40:	686c      	ldr	r4, [r5, #4]
 800fc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d0ef      	beq.n	800fc2a <_fflush_r+0xa>
 800fc4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc4c:	07d0      	lsls	r0, r2, #31
 800fc4e:	d404      	bmi.n	800fc5a <_fflush_r+0x3a>
 800fc50:	0599      	lsls	r1, r3, #22
 800fc52:	d402      	bmi.n	800fc5a <_fflush_r+0x3a>
 800fc54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc56:	f000 f915 	bl	800fe84 <__retarget_lock_acquire_recursive>
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	4621      	mov	r1, r4
 800fc5e:	f7ff ff59 	bl	800fb14 <__sflush_r>
 800fc62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc64:	07da      	lsls	r2, r3, #31
 800fc66:	4605      	mov	r5, r0
 800fc68:	d4e0      	bmi.n	800fc2c <_fflush_r+0xc>
 800fc6a:	89a3      	ldrh	r3, [r4, #12]
 800fc6c:	059b      	lsls	r3, r3, #22
 800fc6e:	d4dd      	bmi.n	800fc2c <_fflush_r+0xc>
 800fc70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc72:	f000 f908 	bl	800fe86 <__retarget_lock_release_recursive>
 800fc76:	e7d9      	b.n	800fc2c <_fflush_r+0xc>
 800fc78:	4b05      	ldr	r3, [pc, #20]	; (800fc90 <_fflush_r+0x70>)
 800fc7a:	429c      	cmp	r4, r3
 800fc7c:	d101      	bne.n	800fc82 <_fflush_r+0x62>
 800fc7e:	68ac      	ldr	r4, [r5, #8]
 800fc80:	e7df      	b.n	800fc42 <_fflush_r+0x22>
 800fc82:	4b04      	ldr	r3, [pc, #16]	; (800fc94 <_fflush_r+0x74>)
 800fc84:	429c      	cmp	r4, r3
 800fc86:	bf08      	it	eq
 800fc88:	68ec      	ldreq	r4, [r5, #12]
 800fc8a:	e7da      	b.n	800fc42 <_fflush_r+0x22>
 800fc8c:	08011688 	.word	0x08011688
 800fc90:	080116a8 	.word	0x080116a8
 800fc94:	08011668 	.word	0x08011668

0800fc98 <std>:
 800fc98:	2300      	movs	r3, #0
 800fc9a:	b510      	push	{r4, lr}
 800fc9c:	4604      	mov	r4, r0
 800fc9e:	e9c0 3300 	strd	r3, r3, [r0]
 800fca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fca6:	6083      	str	r3, [r0, #8]
 800fca8:	8181      	strh	r1, [r0, #12]
 800fcaa:	6643      	str	r3, [r0, #100]	; 0x64
 800fcac:	81c2      	strh	r2, [r0, #14]
 800fcae:	6183      	str	r3, [r0, #24]
 800fcb0:	4619      	mov	r1, r3
 800fcb2:	2208      	movs	r2, #8
 800fcb4:	305c      	adds	r0, #92	; 0x5c
 800fcb6:	f7fb fd6f 	bl	800b798 <memset>
 800fcba:	4b05      	ldr	r3, [pc, #20]	; (800fcd0 <std+0x38>)
 800fcbc:	6263      	str	r3, [r4, #36]	; 0x24
 800fcbe:	4b05      	ldr	r3, [pc, #20]	; (800fcd4 <std+0x3c>)
 800fcc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800fcc2:	4b05      	ldr	r3, [pc, #20]	; (800fcd8 <std+0x40>)
 800fcc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fcc6:	4b05      	ldr	r3, [pc, #20]	; (800fcdc <std+0x44>)
 800fcc8:	6224      	str	r4, [r4, #32]
 800fcca:	6323      	str	r3, [r4, #48]	; 0x30
 800fccc:	bd10      	pop	{r4, pc}
 800fcce:	bf00      	nop
 800fcd0:	08010089 	.word	0x08010089
 800fcd4:	080100ab 	.word	0x080100ab
 800fcd8:	080100e3 	.word	0x080100e3
 800fcdc:	08010107 	.word	0x08010107

0800fce0 <_cleanup_r>:
 800fce0:	4901      	ldr	r1, [pc, #4]	; (800fce8 <_cleanup_r+0x8>)
 800fce2:	f000 b8af 	b.w	800fe44 <_fwalk_reent>
 800fce6:	bf00      	nop
 800fce8:	0800fc21 	.word	0x0800fc21

0800fcec <__sfmoreglue>:
 800fcec:	b570      	push	{r4, r5, r6, lr}
 800fcee:	2268      	movs	r2, #104	; 0x68
 800fcf0:	1e4d      	subs	r5, r1, #1
 800fcf2:	4355      	muls	r5, r2
 800fcf4:	460e      	mov	r6, r1
 800fcf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fcfa:	f7ff fadd 	bl	800f2b8 <_malloc_r>
 800fcfe:	4604      	mov	r4, r0
 800fd00:	b140      	cbz	r0, 800fd14 <__sfmoreglue+0x28>
 800fd02:	2100      	movs	r1, #0
 800fd04:	e9c0 1600 	strd	r1, r6, [r0]
 800fd08:	300c      	adds	r0, #12
 800fd0a:	60a0      	str	r0, [r4, #8]
 800fd0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd10:	f7fb fd42 	bl	800b798 <memset>
 800fd14:	4620      	mov	r0, r4
 800fd16:	bd70      	pop	{r4, r5, r6, pc}

0800fd18 <__sfp_lock_acquire>:
 800fd18:	4801      	ldr	r0, [pc, #4]	; (800fd20 <__sfp_lock_acquire+0x8>)
 800fd1a:	f000 b8b3 	b.w	800fe84 <__retarget_lock_acquire_recursive>
 800fd1e:	bf00      	nop
 800fd20:	20000865 	.word	0x20000865

0800fd24 <__sfp_lock_release>:
 800fd24:	4801      	ldr	r0, [pc, #4]	; (800fd2c <__sfp_lock_release+0x8>)
 800fd26:	f000 b8ae 	b.w	800fe86 <__retarget_lock_release_recursive>
 800fd2a:	bf00      	nop
 800fd2c:	20000865 	.word	0x20000865

0800fd30 <__sinit_lock_acquire>:
 800fd30:	4801      	ldr	r0, [pc, #4]	; (800fd38 <__sinit_lock_acquire+0x8>)
 800fd32:	f000 b8a7 	b.w	800fe84 <__retarget_lock_acquire_recursive>
 800fd36:	bf00      	nop
 800fd38:	20000866 	.word	0x20000866

0800fd3c <__sinit_lock_release>:
 800fd3c:	4801      	ldr	r0, [pc, #4]	; (800fd44 <__sinit_lock_release+0x8>)
 800fd3e:	f000 b8a2 	b.w	800fe86 <__retarget_lock_release_recursive>
 800fd42:	bf00      	nop
 800fd44:	20000866 	.word	0x20000866

0800fd48 <__sinit>:
 800fd48:	b510      	push	{r4, lr}
 800fd4a:	4604      	mov	r4, r0
 800fd4c:	f7ff fff0 	bl	800fd30 <__sinit_lock_acquire>
 800fd50:	69a3      	ldr	r3, [r4, #24]
 800fd52:	b11b      	cbz	r3, 800fd5c <__sinit+0x14>
 800fd54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd58:	f7ff bff0 	b.w	800fd3c <__sinit_lock_release>
 800fd5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fd60:	6523      	str	r3, [r4, #80]	; 0x50
 800fd62:	4b13      	ldr	r3, [pc, #76]	; (800fdb0 <__sinit+0x68>)
 800fd64:	4a13      	ldr	r2, [pc, #76]	; (800fdb4 <__sinit+0x6c>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	62a2      	str	r2, [r4, #40]	; 0x28
 800fd6a:	42a3      	cmp	r3, r4
 800fd6c:	bf04      	itt	eq
 800fd6e:	2301      	moveq	r3, #1
 800fd70:	61a3      	streq	r3, [r4, #24]
 800fd72:	4620      	mov	r0, r4
 800fd74:	f000 f820 	bl	800fdb8 <__sfp>
 800fd78:	6060      	str	r0, [r4, #4]
 800fd7a:	4620      	mov	r0, r4
 800fd7c:	f000 f81c 	bl	800fdb8 <__sfp>
 800fd80:	60a0      	str	r0, [r4, #8]
 800fd82:	4620      	mov	r0, r4
 800fd84:	f000 f818 	bl	800fdb8 <__sfp>
 800fd88:	2200      	movs	r2, #0
 800fd8a:	60e0      	str	r0, [r4, #12]
 800fd8c:	2104      	movs	r1, #4
 800fd8e:	6860      	ldr	r0, [r4, #4]
 800fd90:	f7ff ff82 	bl	800fc98 <std>
 800fd94:	68a0      	ldr	r0, [r4, #8]
 800fd96:	2201      	movs	r2, #1
 800fd98:	2109      	movs	r1, #9
 800fd9a:	f7ff ff7d 	bl	800fc98 <std>
 800fd9e:	68e0      	ldr	r0, [r4, #12]
 800fda0:	2202      	movs	r2, #2
 800fda2:	2112      	movs	r1, #18
 800fda4:	f7ff ff78 	bl	800fc98 <std>
 800fda8:	2301      	movs	r3, #1
 800fdaa:	61a3      	str	r3, [r4, #24]
 800fdac:	e7d2      	b.n	800fd54 <__sinit+0xc>
 800fdae:	bf00      	nop
 800fdb0:	080111c8 	.word	0x080111c8
 800fdb4:	0800fce1 	.word	0x0800fce1

0800fdb8 <__sfp>:
 800fdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdba:	4607      	mov	r7, r0
 800fdbc:	f7ff ffac 	bl	800fd18 <__sfp_lock_acquire>
 800fdc0:	4b1e      	ldr	r3, [pc, #120]	; (800fe3c <__sfp+0x84>)
 800fdc2:	681e      	ldr	r6, [r3, #0]
 800fdc4:	69b3      	ldr	r3, [r6, #24]
 800fdc6:	b913      	cbnz	r3, 800fdce <__sfp+0x16>
 800fdc8:	4630      	mov	r0, r6
 800fdca:	f7ff ffbd 	bl	800fd48 <__sinit>
 800fdce:	3648      	adds	r6, #72	; 0x48
 800fdd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fdd4:	3b01      	subs	r3, #1
 800fdd6:	d503      	bpl.n	800fde0 <__sfp+0x28>
 800fdd8:	6833      	ldr	r3, [r6, #0]
 800fdda:	b30b      	cbz	r3, 800fe20 <__sfp+0x68>
 800fddc:	6836      	ldr	r6, [r6, #0]
 800fdde:	e7f7      	b.n	800fdd0 <__sfp+0x18>
 800fde0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fde4:	b9d5      	cbnz	r5, 800fe1c <__sfp+0x64>
 800fde6:	4b16      	ldr	r3, [pc, #88]	; (800fe40 <__sfp+0x88>)
 800fde8:	60e3      	str	r3, [r4, #12]
 800fdea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fdee:	6665      	str	r5, [r4, #100]	; 0x64
 800fdf0:	f000 f847 	bl	800fe82 <__retarget_lock_init_recursive>
 800fdf4:	f7ff ff96 	bl	800fd24 <__sfp_lock_release>
 800fdf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fdfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fe00:	6025      	str	r5, [r4, #0]
 800fe02:	61a5      	str	r5, [r4, #24]
 800fe04:	2208      	movs	r2, #8
 800fe06:	4629      	mov	r1, r5
 800fe08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fe0c:	f7fb fcc4 	bl	800b798 <memset>
 800fe10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fe18:	4620      	mov	r0, r4
 800fe1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe1c:	3468      	adds	r4, #104	; 0x68
 800fe1e:	e7d9      	b.n	800fdd4 <__sfp+0x1c>
 800fe20:	2104      	movs	r1, #4
 800fe22:	4638      	mov	r0, r7
 800fe24:	f7ff ff62 	bl	800fcec <__sfmoreglue>
 800fe28:	4604      	mov	r4, r0
 800fe2a:	6030      	str	r0, [r6, #0]
 800fe2c:	2800      	cmp	r0, #0
 800fe2e:	d1d5      	bne.n	800fddc <__sfp+0x24>
 800fe30:	f7ff ff78 	bl	800fd24 <__sfp_lock_release>
 800fe34:	230c      	movs	r3, #12
 800fe36:	603b      	str	r3, [r7, #0]
 800fe38:	e7ee      	b.n	800fe18 <__sfp+0x60>
 800fe3a:	bf00      	nop
 800fe3c:	080111c8 	.word	0x080111c8
 800fe40:	ffff0001 	.word	0xffff0001

0800fe44 <_fwalk_reent>:
 800fe44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe48:	4606      	mov	r6, r0
 800fe4a:	4688      	mov	r8, r1
 800fe4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fe50:	2700      	movs	r7, #0
 800fe52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe56:	f1b9 0901 	subs.w	r9, r9, #1
 800fe5a:	d505      	bpl.n	800fe68 <_fwalk_reent+0x24>
 800fe5c:	6824      	ldr	r4, [r4, #0]
 800fe5e:	2c00      	cmp	r4, #0
 800fe60:	d1f7      	bne.n	800fe52 <_fwalk_reent+0xe>
 800fe62:	4638      	mov	r0, r7
 800fe64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe68:	89ab      	ldrh	r3, [r5, #12]
 800fe6a:	2b01      	cmp	r3, #1
 800fe6c:	d907      	bls.n	800fe7e <_fwalk_reent+0x3a>
 800fe6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe72:	3301      	adds	r3, #1
 800fe74:	d003      	beq.n	800fe7e <_fwalk_reent+0x3a>
 800fe76:	4629      	mov	r1, r5
 800fe78:	4630      	mov	r0, r6
 800fe7a:	47c0      	blx	r8
 800fe7c:	4307      	orrs	r7, r0
 800fe7e:	3568      	adds	r5, #104	; 0x68
 800fe80:	e7e9      	b.n	800fe56 <_fwalk_reent+0x12>

0800fe82 <__retarget_lock_init_recursive>:
 800fe82:	4770      	bx	lr

0800fe84 <__retarget_lock_acquire_recursive>:
 800fe84:	4770      	bx	lr

0800fe86 <__retarget_lock_release_recursive>:
 800fe86:	4770      	bx	lr

0800fe88 <__swhatbuf_r>:
 800fe88:	b570      	push	{r4, r5, r6, lr}
 800fe8a:	460e      	mov	r6, r1
 800fe8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe90:	2900      	cmp	r1, #0
 800fe92:	b096      	sub	sp, #88	; 0x58
 800fe94:	4614      	mov	r4, r2
 800fe96:	461d      	mov	r5, r3
 800fe98:	da08      	bge.n	800feac <__swhatbuf_r+0x24>
 800fe9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	602a      	str	r2, [r5, #0]
 800fea2:	061a      	lsls	r2, r3, #24
 800fea4:	d410      	bmi.n	800fec8 <__swhatbuf_r+0x40>
 800fea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800feaa:	e00e      	b.n	800feca <__swhatbuf_r+0x42>
 800feac:	466a      	mov	r2, sp
 800feae:	f000 f951 	bl	8010154 <_fstat_r>
 800feb2:	2800      	cmp	r0, #0
 800feb4:	dbf1      	blt.n	800fe9a <__swhatbuf_r+0x12>
 800feb6:	9a01      	ldr	r2, [sp, #4]
 800feb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800febc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fec0:	425a      	negs	r2, r3
 800fec2:	415a      	adcs	r2, r3
 800fec4:	602a      	str	r2, [r5, #0]
 800fec6:	e7ee      	b.n	800fea6 <__swhatbuf_r+0x1e>
 800fec8:	2340      	movs	r3, #64	; 0x40
 800feca:	2000      	movs	r0, #0
 800fecc:	6023      	str	r3, [r4, #0]
 800fece:	b016      	add	sp, #88	; 0x58
 800fed0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fed4 <__smakebuf_r>:
 800fed4:	898b      	ldrh	r3, [r1, #12]
 800fed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fed8:	079d      	lsls	r5, r3, #30
 800feda:	4606      	mov	r6, r0
 800fedc:	460c      	mov	r4, r1
 800fede:	d507      	bpl.n	800fef0 <__smakebuf_r+0x1c>
 800fee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fee4:	6023      	str	r3, [r4, #0]
 800fee6:	6123      	str	r3, [r4, #16]
 800fee8:	2301      	movs	r3, #1
 800feea:	6163      	str	r3, [r4, #20]
 800feec:	b002      	add	sp, #8
 800feee:	bd70      	pop	{r4, r5, r6, pc}
 800fef0:	ab01      	add	r3, sp, #4
 800fef2:	466a      	mov	r2, sp
 800fef4:	f7ff ffc8 	bl	800fe88 <__swhatbuf_r>
 800fef8:	9900      	ldr	r1, [sp, #0]
 800fefa:	4605      	mov	r5, r0
 800fefc:	4630      	mov	r0, r6
 800fefe:	f7ff f9db 	bl	800f2b8 <_malloc_r>
 800ff02:	b948      	cbnz	r0, 800ff18 <__smakebuf_r+0x44>
 800ff04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff08:	059a      	lsls	r2, r3, #22
 800ff0a:	d4ef      	bmi.n	800feec <__smakebuf_r+0x18>
 800ff0c:	f023 0303 	bic.w	r3, r3, #3
 800ff10:	f043 0302 	orr.w	r3, r3, #2
 800ff14:	81a3      	strh	r3, [r4, #12]
 800ff16:	e7e3      	b.n	800fee0 <__smakebuf_r+0xc>
 800ff18:	4b0d      	ldr	r3, [pc, #52]	; (800ff50 <__smakebuf_r+0x7c>)
 800ff1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ff1c:	89a3      	ldrh	r3, [r4, #12]
 800ff1e:	6020      	str	r0, [r4, #0]
 800ff20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff24:	81a3      	strh	r3, [r4, #12]
 800ff26:	9b00      	ldr	r3, [sp, #0]
 800ff28:	6163      	str	r3, [r4, #20]
 800ff2a:	9b01      	ldr	r3, [sp, #4]
 800ff2c:	6120      	str	r0, [r4, #16]
 800ff2e:	b15b      	cbz	r3, 800ff48 <__smakebuf_r+0x74>
 800ff30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff34:	4630      	mov	r0, r6
 800ff36:	f000 f91f 	bl	8010178 <_isatty_r>
 800ff3a:	b128      	cbz	r0, 800ff48 <__smakebuf_r+0x74>
 800ff3c:	89a3      	ldrh	r3, [r4, #12]
 800ff3e:	f023 0303 	bic.w	r3, r3, #3
 800ff42:	f043 0301 	orr.w	r3, r3, #1
 800ff46:	81a3      	strh	r3, [r4, #12]
 800ff48:	89a0      	ldrh	r0, [r4, #12]
 800ff4a:	4305      	orrs	r5, r0
 800ff4c:	81a5      	strh	r5, [r4, #12]
 800ff4e:	e7cd      	b.n	800feec <__smakebuf_r+0x18>
 800ff50:	0800fce1 	.word	0x0800fce1

0800ff54 <memmove>:
 800ff54:	4288      	cmp	r0, r1
 800ff56:	b510      	push	{r4, lr}
 800ff58:	eb01 0402 	add.w	r4, r1, r2
 800ff5c:	d902      	bls.n	800ff64 <memmove+0x10>
 800ff5e:	4284      	cmp	r4, r0
 800ff60:	4623      	mov	r3, r4
 800ff62:	d807      	bhi.n	800ff74 <memmove+0x20>
 800ff64:	1e43      	subs	r3, r0, #1
 800ff66:	42a1      	cmp	r1, r4
 800ff68:	d008      	beq.n	800ff7c <memmove+0x28>
 800ff6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff72:	e7f8      	b.n	800ff66 <memmove+0x12>
 800ff74:	4402      	add	r2, r0
 800ff76:	4601      	mov	r1, r0
 800ff78:	428a      	cmp	r2, r1
 800ff7a:	d100      	bne.n	800ff7e <memmove+0x2a>
 800ff7c:	bd10      	pop	{r4, pc}
 800ff7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff86:	e7f7      	b.n	800ff78 <memmove+0x24>

0800ff88 <__malloc_lock>:
 800ff88:	4801      	ldr	r0, [pc, #4]	; (800ff90 <__malloc_lock+0x8>)
 800ff8a:	f7ff bf7b 	b.w	800fe84 <__retarget_lock_acquire_recursive>
 800ff8e:	bf00      	nop
 800ff90:	20000864 	.word	0x20000864

0800ff94 <__malloc_unlock>:
 800ff94:	4801      	ldr	r0, [pc, #4]	; (800ff9c <__malloc_unlock+0x8>)
 800ff96:	f7ff bf76 	b.w	800fe86 <__retarget_lock_release_recursive>
 800ff9a:	bf00      	nop
 800ff9c:	20000864 	.word	0x20000864

0800ffa0 <_realloc_r>:
 800ffa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa4:	4680      	mov	r8, r0
 800ffa6:	4614      	mov	r4, r2
 800ffa8:	460e      	mov	r6, r1
 800ffaa:	b921      	cbnz	r1, 800ffb6 <_realloc_r+0x16>
 800ffac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb0:	4611      	mov	r1, r2
 800ffb2:	f7ff b981 	b.w	800f2b8 <_malloc_r>
 800ffb6:	b92a      	cbnz	r2, 800ffc4 <_realloc_r+0x24>
 800ffb8:	f7ff f912 	bl	800f1e0 <_free_r>
 800ffbc:	4625      	mov	r5, r4
 800ffbe:	4628      	mov	r0, r5
 800ffc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc4:	f000 f8fa 	bl	80101bc <_malloc_usable_size_r>
 800ffc8:	4284      	cmp	r4, r0
 800ffca:	4607      	mov	r7, r0
 800ffcc:	d802      	bhi.n	800ffd4 <_realloc_r+0x34>
 800ffce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ffd2:	d812      	bhi.n	800fffa <_realloc_r+0x5a>
 800ffd4:	4621      	mov	r1, r4
 800ffd6:	4640      	mov	r0, r8
 800ffd8:	f7ff f96e 	bl	800f2b8 <_malloc_r>
 800ffdc:	4605      	mov	r5, r0
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d0ed      	beq.n	800ffbe <_realloc_r+0x1e>
 800ffe2:	42bc      	cmp	r4, r7
 800ffe4:	4622      	mov	r2, r4
 800ffe6:	4631      	mov	r1, r6
 800ffe8:	bf28      	it	cs
 800ffea:	463a      	movcs	r2, r7
 800ffec:	f7fe fc12 	bl	800e814 <memcpy>
 800fff0:	4631      	mov	r1, r6
 800fff2:	4640      	mov	r0, r8
 800fff4:	f7ff f8f4 	bl	800f1e0 <_free_r>
 800fff8:	e7e1      	b.n	800ffbe <_realloc_r+0x1e>
 800fffa:	4635      	mov	r5, r6
 800fffc:	e7df      	b.n	800ffbe <_realloc_r+0x1e>

0800fffe <_raise_r>:
 800fffe:	291f      	cmp	r1, #31
 8010000:	b538      	push	{r3, r4, r5, lr}
 8010002:	4604      	mov	r4, r0
 8010004:	460d      	mov	r5, r1
 8010006:	d904      	bls.n	8010012 <_raise_r+0x14>
 8010008:	2316      	movs	r3, #22
 801000a:	6003      	str	r3, [r0, #0]
 801000c:	f04f 30ff 	mov.w	r0, #4294967295
 8010010:	bd38      	pop	{r3, r4, r5, pc}
 8010012:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010014:	b112      	cbz	r2, 801001c <_raise_r+0x1e>
 8010016:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801001a:	b94b      	cbnz	r3, 8010030 <_raise_r+0x32>
 801001c:	4620      	mov	r0, r4
 801001e:	f000 f831 	bl	8010084 <_getpid_r>
 8010022:	462a      	mov	r2, r5
 8010024:	4601      	mov	r1, r0
 8010026:	4620      	mov	r0, r4
 8010028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801002c:	f000 b818 	b.w	8010060 <_kill_r>
 8010030:	2b01      	cmp	r3, #1
 8010032:	d00a      	beq.n	801004a <_raise_r+0x4c>
 8010034:	1c59      	adds	r1, r3, #1
 8010036:	d103      	bne.n	8010040 <_raise_r+0x42>
 8010038:	2316      	movs	r3, #22
 801003a:	6003      	str	r3, [r0, #0]
 801003c:	2001      	movs	r0, #1
 801003e:	e7e7      	b.n	8010010 <_raise_r+0x12>
 8010040:	2400      	movs	r4, #0
 8010042:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010046:	4628      	mov	r0, r5
 8010048:	4798      	blx	r3
 801004a:	2000      	movs	r0, #0
 801004c:	e7e0      	b.n	8010010 <_raise_r+0x12>
	...

08010050 <raise>:
 8010050:	4b02      	ldr	r3, [pc, #8]	; (801005c <raise+0xc>)
 8010052:	4601      	mov	r1, r0
 8010054:	6818      	ldr	r0, [r3, #0]
 8010056:	f7ff bfd2 	b.w	800fffe <_raise_r>
 801005a:	bf00      	nop
 801005c:	20000020 	.word	0x20000020

08010060 <_kill_r>:
 8010060:	b538      	push	{r3, r4, r5, lr}
 8010062:	4d07      	ldr	r5, [pc, #28]	; (8010080 <_kill_r+0x20>)
 8010064:	2300      	movs	r3, #0
 8010066:	4604      	mov	r4, r0
 8010068:	4608      	mov	r0, r1
 801006a:	4611      	mov	r1, r2
 801006c:	602b      	str	r3, [r5, #0]
 801006e:	f7f2 ffc3 	bl	8002ff8 <_kill>
 8010072:	1c43      	adds	r3, r0, #1
 8010074:	d102      	bne.n	801007c <_kill_r+0x1c>
 8010076:	682b      	ldr	r3, [r5, #0]
 8010078:	b103      	cbz	r3, 801007c <_kill_r+0x1c>
 801007a:	6023      	str	r3, [r4, #0]
 801007c:	bd38      	pop	{r3, r4, r5, pc}
 801007e:	bf00      	nop
 8010080:	20000868 	.word	0x20000868

08010084 <_getpid_r>:
 8010084:	f7f2 bfb0 	b.w	8002fe8 <_getpid>

08010088 <__sread>:
 8010088:	b510      	push	{r4, lr}
 801008a:	460c      	mov	r4, r1
 801008c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010090:	f000 f89c 	bl	80101cc <_read_r>
 8010094:	2800      	cmp	r0, #0
 8010096:	bfab      	itete	ge
 8010098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801009a:	89a3      	ldrhlt	r3, [r4, #12]
 801009c:	181b      	addge	r3, r3, r0
 801009e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80100a2:	bfac      	ite	ge
 80100a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80100a6:	81a3      	strhlt	r3, [r4, #12]
 80100a8:	bd10      	pop	{r4, pc}

080100aa <__swrite>:
 80100aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100ae:	461f      	mov	r7, r3
 80100b0:	898b      	ldrh	r3, [r1, #12]
 80100b2:	05db      	lsls	r3, r3, #23
 80100b4:	4605      	mov	r5, r0
 80100b6:	460c      	mov	r4, r1
 80100b8:	4616      	mov	r6, r2
 80100ba:	d505      	bpl.n	80100c8 <__swrite+0x1e>
 80100bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100c0:	2302      	movs	r3, #2
 80100c2:	2200      	movs	r2, #0
 80100c4:	f000 f868 	bl	8010198 <_lseek_r>
 80100c8:	89a3      	ldrh	r3, [r4, #12]
 80100ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100d2:	81a3      	strh	r3, [r4, #12]
 80100d4:	4632      	mov	r2, r6
 80100d6:	463b      	mov	r3, r7
 80100d8:	4628      	mov	r0, r5
 80100da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100de:	f000 b817 	b.w	8010110 <_write_r>

080100e2 <__sseek>:
 80100e2:	b510      	push	{r4, lr}
 80100e4:	460c      	mov	r4, r1
 80100e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100ea:	f000 f855 	bl	8010198 <_lseek_r>
 80100ee:	1c43      	adds	r3, r0, #1
 80100f0:	89a3      	ldrh	r3, [r4, #12]
 80100f2:	bf15      	itete	ne
 80100f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80100f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80100fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80100fe:	81a3      	strheq	r3, [r4, #12]
 8010100:	bf18      	it	ne
 8010102:	81a3      	strhne	r3, [r4, #12]
 8010104:	bd10      	pop	{r4, pc}

08010106 <__sclose>:
 8010106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801010a:	f000 b813 	b.w	8010134 <_close_r>
	...

08010110 <_write_r>:
 8010110:	b538      	push	{r3, r4, r5, lr}
 8010112:	4d07      	ldr	r5, [pc, #28]	; (8010130 <_write_r+0x20>)
 8010114:	4604      	mov	r4, r0
 8010116:	4608      	mov	r0, r1
 8010118:	4611      	mov	r1, r2
 801011a:	2200      	movs	r2, #0
 801011c:	602a      	str	r2, [r5, #0]
 801011e:	461a      	mov	r2, r3
 8010120:	f7f2 ffa1 	bl	8003066 <_write>
 8010124:	1c43      	adds	r3, r0, #1
 8010126:	d102      	bne.n	801012e <_write_r+0x1e>
 8010128:	682b      	ldr	r3, [r5, #0]
 801012a:	b103      	cbz	r3, 801012e <_write_r+0x1e>
 801012c:	6023      	str	r3, [r4, #0]
 801012e:	bd38      	pop	{r3, r4, r5, pc}
 8010130:	20000868 	.word	0x20000868

08010134 <_close_r>:
 8010134:	b538      	push	{r3, r4, r5, lr}
 8010136:	4d06      	ldr	r5, [pc, #24]	; (8010150 <_close_r+0x1c>)
 8010138:	2300      	movs	r3, #0
 801013a:	4604      	mov	r4, r0
 801013c:	4608      	mov	r0, r1
 801013e:	602b      	str	r3, [r5, #0]
 8010140:	f7f2 ffad 	bl	800309e <_close>
 8010144:	1c43      	adds	r3, r0, #1
 8010146:	d102      	bne.n	801014e <_close_r+0x1a>
 8010148:	682b      	ldr	r3, [r5, #0]
 801014a:	b103      	cbz	r3, 801014e <_close_r+0x1a>
 801014c:	6023      	str	r3, [r4, #0]
 801014e:	bd38      	pop	{r3, r4, r5, pc}
 8010150:	20000868 	.word	0x20000868

08010154 <_fstat_r>:
 8010154:	b538      	push	{r3, r4, r5, lr}
 8010156:	4d07      	ldr	r5, [pc, #28]	; (8010174 <_fstat_r+0x20>)
 8010158:	2300      	movs	r3, #0
 801015a:	4604      	mov	r4, r0
 801015c:	4608      	mov	r0, r1
 801015e:	4611      	mov	r1, r2
 8010160:	602b      	str	r3, [r5, #0]
 8010162:	f7f2 ffa8 	bl	80030b6 <_fstat>
 8010166:	1c43      	adds	r3, r0, #1
 8010168:	d102      	bne.n	8010170 <_fstat_r+0x1c>
 801016a:	682b      	ldr	r3, [r5, #0]
 801016c:	b103      	cbz	r3, 8010170 <_fstat_r+0x1c>
 801016e:	6023      	str	r3, [r4, #0]
 8010170:	bd38      	pop	{r3, r4, r5, pc}
 8010172:	bf00      	nop
 8010174:	20000868 	.word	0x20000868

08010178 <_isatty_r>:
 8010178:	b538      	push	{r3, r4, r5, lr}
 801017a:	4d06      	ldr	r5, [pc, #24]	; (8010194 <_isatty_r+0x1c>)
 801017c:	2300      	movs	r3, #0
 801017e:	4604      	mov	r4, r0
 8010180:	4608      	mov	r0, r1
 8010182:	602b      	str	r3, [r5, #0]
 8010184:	f7f2 ffa7 	bl	80030d6 <_isatty>
 8010188:	1c43      	adds	r3, r0, #1
 801018a:	d102      	bne.n	8010192 <_isatty_r+0x1a>
 801018c:	682b      	ldr	r3, [r5, #0]
 801018e:	b103      	cbz	r3, 8010192 <_isatty_r+0x1a>
 8010190:	6023      	str	r3, [r4, #0]
 8010192:	bd38      	pop	{r3, r4, r5, pc}
 8010194:	20000868 	.word	0x20000868

08010198 <_lseek_r>:
 8010198:	b538      	push	{r3, r4, r5, lr}
 801019a:	4d07      	ldr	r5, [pc, #28]	; (80101b8 <_lseek_r+0x20>)
 801019c:	4604      	mov	r4, r0
 801019e:	4608      	mov	r0, r1
 80101a0:	4611      	mov	r1, r2
 80101a2:	2200      	movs	r2, #0
 80101a4:	602a      	str	r2, [r5, #0]
 80101a6:	461a      	mov	r2, r3
 80101a8:	f7f2 ffa0 	bl	80030ec <_lseek>
 80101ac:	1c43      	adds	r3, r0, #1
 80101ae:	d102      	bne.n	80101b6 <_lseek_r+0x1e>
 80101b0:	682b      	ldr	r3, [r5, #0]
 80101b2:	b103      	cbz	r3, 80101b6 <_lseek_r+0x1e>
 80101b4:	6023      	str	r3, [r4, #0]
 80101b6:	bd38      	pop	{r3, r4, r5, pc}
 80101b8:	20000868 	.word	0x20000868

080101bc <_malloc_usable_size_r>:
 80101bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101c0:	1f18      	subs	r0, r3, #4
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	bfbc      	itt	lt
 80101c6:	580b      	ldrlt	r3, [r1, r0]
 80101c8:	18c0      	addlt	r0, r0, r3
 80101ca:	4770      	bx	lr

080101cc <_read_r>:
 80101cc:	b538      	push	{r3, r4, r5, lr}
 80101ce:	4d07      	ldr	r5, [pc, #28]	; (80101ec <_read_r+0x20>)
 80101d0:	4604      	mov	r4, r0
 80101d2:	4608      	mov	r0, r1
 80101d4:	4611      	mov	r1, r2
 80101d6:	2200      	movs	r2, #0
 80101d8:	602a      	str	r2, [r5, #0]
 80101da:	461a      	mov	r2, r3
 80101dc:	f7f2 ff26 	bl	800302c <_read>
 80101e0:	1c43      	adds	r3, r0, #1
 80101e2:	d102      	bne.n	80101ea <_read_r+0x1e>
 80101e4:	682b      	ldr	r3, [r5, #0]
 80101e6:	b103      	cbz	r3, 80101ea <_read_r+0x1e>
 80101e8:	6023      	str	r3, [r4, #0]
 80101ea:	bd38      	pop	{r3, r4, r5, pc}
 80101ec:	20000868 	.word	0x20000868

080101f0 <fmax>:
 80101f0:	b508      	push	{r3, lr}
 80101f2:	ed2d 8b04 	vpush	{d8-d9}
 80101f6:	eeb0 8a40 	vmov.f32	s16, s0
 80101fa:	eef0 8a60 	vmov.f32	s17, s1
 80101fe:	eeb0 9a41 	vmov.f32	s18, s2
 8010202:	eef0 9a61 	vmov.f32	s19, s3
 8010206:	f000 f81b 	bl	8010240 <__fpclassifyd>
 801020a:	b168      	cbz	r0, 8010228 <fmax+0x38>
 801020c:	eeb0 0a49 	vmov.f32	s0, s18
 8010210:	eef0 0a69 	vmov.f32	s1, s19
 8010214:	f000 f814 	bl	8010240 <__fpclassifyd>
 8010218:	b150      	cbz	r0, 8010230 <fmax+0x40>
 801021a:	ec53 2b19 	vmov	r2, r3, d9
 801021e:	ec51 0b18 	vmov	r0, r1, d8
 8010222:	f7f0 fc91 	bl	8000b48 <__aeabi_dcmpgt>
 8010226:	b918      	cbnz	r0, 8010230 <fmax+0x40>
 8010228:	eeb0 8a49 	vmov.f32	s16, s18
 801022c:	eef0 8a69 	vmov.f32	s17, s19
 8010230:	eeb0 0a48 	vmov.f32	s0, s16
 8010234:	eef0 0a68 	vmov.f32	s1, s17
 8010238:	ecbd 8b04 	vpop	{d8-d9}
 801023c:	bd08      	pop	{r3, pc}
	...

08010240 <__fpclassifyd>:
 8010240:	ec51 0b10 	vmov	r0, r1, d0
 8010244:	b510      	push	{r4, lr}
 8010246:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801024a:	460b      	mov	r3, r1
 801024c:	d019      	beq.n	8010282 <__fpclassifyd+0x42>
 801024e:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8010252:	490e      	ldr	r1, [pc, #56]	; (801028c <__fpclassifyd+0x4c>)
 8010254:	428a      	cmp	r2, r1
 8010256:	d90e      	bls.n	8010276 <__fpclassifyd+0x36>
 8010258:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 801025c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8010260:	428a      	cmp	r2, r1
 8010262:	d908      	bls.n	8010276 <__fpclassifyd+0x36>
 8010264:	4a0a      	ldr	r2, [pc, #40]	; (8010290 <__fpclassifyd+0x50>)
 8010266:	4213      	tst	r3, r2
 8010268:	d007      	beq.n	801027a <__fpclassifyd+0x3a>
 801026a:	4294      	cmp	r4, r2
 801026c:	d107      	bne.n	801027e <__fpclassifyd+0x3e>
 801026e:	fab0 f080 	clz	r0, r0
 8010272:	0940      	lsrs	r0, r0, #5
 8010274:	bd10      	pop	{r4, pc}
 8010276:	2004      	movs	r0, #4
 8010278:	e7fc      	b.n	8010274 <__fpclassifyd+0x34>
 801027a:	2003      	movs	r0, #3
 801027c:	e7fa      	b.n	8010274 <__fpclassifyd+0x34>
 801027e:	2000      	movs	r0, #0
 8010280:	e7f8      	b.n	8010274 <__fpclassifyd+0x34>
 8010282:	2800      	cmp	r0, #0
 8010284:	d1ee      	bne.n	8010264 <__fpclassifyd+0x24>
 8010286:	2002      	movs	r0, #2
 8010288:	e7f4      	b.n	8010274 <__fpclassifyd+0x34>
 801028a:	bf00      	nop
 801028c:	7fdfffff 	.word	0x7fdfffff
 8010290:	7ff00000 	.word	0x7ff00000

08010294 <atan2>:
 8010294:	f000 b86c 	b.w	8010370 <__ieee754_atan2>

08010298 <log>:
 8010298:	b538      	push	{r3, r4, r5, lr}
 801029a:	ed2d 8b02 	vpush	{d8}
 801029e:	ec55 4b10 	vmov	r4, r5, d0
 80102a2:	f000 f931 	bl	8010508 <__ieee754_log>
 80102a6:	4622      	mov	r2, r4
 80102a8:	462b      	mov	r3, r5
 80102aa:	4620      	mov	r0, r4
 80102ac:	4629      	mov	r1, r5
 80102ae:	eeb0 8a40 	vmov.f32	s16, s0
 80102b2:	eef0 8a60 	vmov.f32	s17, s1
 80102b6:	f7f0 fc51 	bl	8000b5c <__aeabi_dcmpun>
 80102ba:	b998      	cbnz	r0, 80102e4 <log+0x4c>
 80102bc:	2200      	movs	r2, #0
 80102be:	2300      	movs	r3, #0
 80102c0:	4620      	mov	r0, r4
 80102c2:	4629      	mov	r1, r5
 80102c4:	f7f0 fc40 	bl	8000b48 <__aeabi_dcmpgt>
 80102c8:	b960      	cbnz	r0, 80102e4 <log+0x4c>
 80102ca:	2200      	movs	r2, #0
 80102cc:	2300      	movs	r3, #0
 80102ce:	4620      	mov	r0, r4
 80102d0:	4629      	mov	r1, r5
 80102d2:	f7f0 fc11 	bl	8000af8 <__aeabi_dcmpeq>
 80102d6:	b160      	cbz	r0, 80102f2 <log+0x5a>
 80102d8:	f7fb fa34 	bl	800b744 <__errno>
 80102dc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8010308 <log+0x70>
 80102e0:	2322      	movs	r3, #34	; 0x22
 80102e2:	6003      	str	r3, [r0, #0]
 80102e4:	eeb0 0a48 	vmov.f32	s0, s16
 80102e8:	eef0 0a68 	vmov.f32	s1, s17
 80102ec:	ecbd 8b02 	vpop	{d8}
 80102f0:	bd38      	pop	{r3, r4, r5, pc}
 80102f2:	f7fb fa27 	bl	800b744 <__errno>
 80102f6:	ecbd 8b02 	vpop	{d8}
 80102fa:	2321      	movs	r3, #33	; 0x21
 80102fc:	6003      	str	r3, [r0, #0]
 80102fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010302:	4803      	ldr	r0, [pc, #12]	; (8010310 <log+0x78>)
 8010304:	f7ff bb04 	b.w	800f910 <nan>
 8010308:	00000000 	.word	0x00000000
 801030c:	fff00000 	.word	0xfff00000
 8010310:	08011307 	.word	0x08011307

08010314 <sqrt>:
 8010314:	b538      	push	{r3, r4, r5, lr}
 8010316:	ed2d 8b02 	vpush	{d8}
 801031a:	ec55 4b10 	vmov	r4, r5, d0
 801031e:	f000 faad 	bl	801087c <__ieee754_sqrt>
 8010322:	4622      	mov	r2, r4
 8010324:	462b      	mov	r3, r5
 8010326:	4620      	mov	r0, r4
 8010328:	4629      	mov	r1, r5
 801032a:	eeb0 8a40 	vmov.f32	s16, s0
 801032e:	eef0 8a60 	vmov.f32	s17, s1
 8010332:	f7f0 fc13 	bl	8000b5c <__aeabi_dcmpun>
 8010336:	b990      	cbnz	r0, 801035e <sqrt+0x4a>
 8010338:	2200      	movs	r2, #0
 801033a:	2300      	movs	r3, #0
 801033c:	4620      	mov	r0, r4
 801033e:	4629      	mov	r1, r5
 8010340:	f7f0 fbe4 	bl	8000b0c <__aeabi_dcmplt>
 8010344:	b158      	cbz	r0, 801035e <sqrt+0x4a>
 8010346:	f7fb f9fd 	bl	800b744 <__errno>
 801034a:	2321      	movs	r3, #33	; 0x21
 801034c:	6003      	str	r3, [r0, #0]
 801034e:	2200      	movs	r2, #0
 8010350:	2300      	movs	r3, #0
 8010352:	4610      	mov	r0, r2
 8010354:	4619      	mov	r1, r3
 8010356:	f7f0 fa91 	bl	800087c <__aeabi_ddiv>
 801035a:	ec41 0b18 	vmov	d8, r0, r1
 801035e:	eeb0 0a48 	vmov.f32	s0, s16
 8010362:	eef0 0a68 	vmov.f32	s1, s17
 8010366:	ecbd 8b02 	vpop	{d8}
 801036a:	bd38      	pop	{r3, r4, r5, pc}
 801036c:	0000      	movs	r0, r0
	...

08010370 <__ieee754_atan2>:
 8010370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010374:	ec57 6b11 	vmov	r6, r7, d1
 8010378:	4273      	negs	r3, r6
 801037a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8010500 <__ieee754_atan2+0x190>
 801037e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010382:	4333      	orrs	r3, r6
 8010384:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010388:	4573      	cmp	r3, lr
 801038a:	ec51 0b10 	vmov	r0, r1, d0
 801038e:	ee11 8a10 	vmov	r8, s2
 8010392:	d80a      	bhi.n	80103aa <__ieee754_atan2+0x3a>
 8010394:	4244      	negs	r4, r0
 8010396:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801039a:	4304      	orrs	r4, r0
 801039c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80103a0:	4574      	cmp	r4, lr
 80103a2:	ee10 9a10 	vmov	r9, s0
 80103a6:	468c      	mov	ip, r1
 80103a8:	d907      	bls.n	80103ba <__ieee754_atan2+0x4a>
 80103aa:	4632      	mov	r2, r6
 80103ac:	463b      	mov	r3, r7
 80103ae:	f7ef ff85 	bl	80002bc <__adddf3>
 80103b2:	ec41 0b10 	vmov	d0, r0, r1
 80103b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103ba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80103be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80103c2:	4334      	orrs	r4, r6
 80103c4:	d103      	bne.n	80103ce <__ieee754_atan2+0x5e>
 80103c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103ca:	f000 bb09 	b.w	80109e0 <atan>
 80103ce:	17bc      	asrs	r4, r7, #30
 80103d0:	f004 0402 	and.w	r4, r4, #2
 80103d4:	ea53 0909 	orrs.w	r9, r3, r9
 80103d8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80103dc:	d107      	bne.n	80103ee <__ieee754_atan2+0x7e>
 80103de:	2c02      	cmp	r4, #2
 80103e0:	d060      	beq.n	80104a4 <__ieee754_atan2+0x134>
 80103e2:	2c03      	cmp	r4, #3
 80103e4:	d1e5      	bne.n	80103b2 <__ieee754_atan2+0x42>
 80103e6:	a142      	add	r1, pc, #264	; (adr r1, 80104f0 <__ieee754_atan2+0x180>)
 80103e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103ec:	e7e1      	b.n	80103b2 <__ieee754_atan2+0x42>
 80103ee:	ea52 0808 	orrs.w	r8, r2, r8
 80103f2:	d106      	bne.n	8010402 <__ieee754_atan2+0x92>
 80103f4:	f1bc 0f00 	cmp.w	ip, #0
 80103f8:	da5f      	bge.n	80104ba <__ieee754_atan2+0x14a>
 80103fa:	a13f      	add	r1, pc, #252	; (adr r1, 80104f8 <__ieee754_atan2+0x188>)
 80103fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010400:	e7d7      	b.n	80103b2 <__ieee754_atan2+0x42>
 8010402:	4572      	cmp	r2, lr
 8010404:	d10f      	bne.n	8010426 <__ieee754_atan2+0xb6>
 8010406:	4293      	cmp	r3, r2
 8010408:	f104 34ff 	add.w	r4, r4, #4294967295
 801040c:	d107      	bne.n	801041e <__ieee754_atan2+0xae>
 801040e:	2c02      	cmp	r4, #2
 8010410:	d84c      	bhi.n	80104ac <__ieee754_atan2+0x13c>
 8010412:	4b35      	ldr	r3, [pc, #212]	; (80104e8 <__ieee754_atan2+0x178>)
 8010414:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010418:	e9d4 0100 	ldrd	r0, r1, [r4]
 801041c:	e7c9      	b.n	80103b2 <__ieee754_atan2+0x42>
 801041e:	2c02      	cmp	r4, #2
 8010420:	d848      	bhi.n	80104b4 <__ieee754_atan2+0x144>
 8010422:	4b32      	ldr	r3, [pc, #200]	; (80104ec <__ieee754_atan2+0x17c>)
 8010424:	e7f6      	b.n	8010414 <__ieee754_atan2+0xa4>
 8010426:	4573      	cmp	r3, lr
 8010428:	d0e4      	beq.n	80103f4 <__ieee754_atan2+0x84>
 801042a:	1a9b      	subs	r3, r3, r2
 801042c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010430:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010434:	da1e      	bge.n	8010474 <__ieee754_atan2+0x104>
 8010436:	2f00      	cmp	r7, #0
 8010438:	da01      	bge.n	801043e <__ieee754_atan2+0xce>
 801043a:	323c      	adds	r2, #60	; 0x3c
 801043c:	db1e      	blt.n	801047c <__ieee754_atan2+0x10c>
 801043e:	4632      	mov	r2, r6
 8010440:	463b      	mov	r3, r7
 8010442:	f7f0 fa1b 	bl	800087c <__aeabi_ddiv>
 8010446:	ec41 0b10 	vmov	d0, r0, r1
 801044a:	f000 fc69 	bl	8010d20 <fabs>
 801044e:	f000 fac7 	bl	80109e0 <atan>
 8010452:	ec51 0b10 	vmov	r0, r1, d0
 8010456:	2c01      	cmp	r4, #1
 8010458:	d013      	beq.n	8010482 <__ieee754_atan2+0x112>
 801045a:	2c02      	cmp	r4, #2
 801045c:	d015      	beq.n	801048a <__ieee754_atan2+0x11a>
 801045e:	2c00      	cmp	r4, #0
 8010460:	d0a7      	beq.n	80103b2 <__ieee754_atan2+0x42>
 8010462:	a319      	add	r3, pc, #100	; (adr r3, 80104c8 <__ieee754_atan2+0x158>)
 8010464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010468:	f7ef ff26 	bl	80002b8 <__aeabi_dsub>
 801046c:	a318      	add	r3, pc, #96	; (adr r3, 80104d0 <__ieee754_atan2+0x160>)
 801046e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010472:	e014      	b.n	801049e <__ieee754_atan2+0x12e>
 8010474:	a118      	add	r1, pc, #96	; (adr r1, 80104d8 <__ieee754_atan2+0x168>)
 8010476:	e9d1 0100 	ldrd	r0, r1, [r1]
 801047a:	e7ec      	b.n	8010456 <__ieee754_atan2+0xe6>
 801047c:	2000      	movs	r0, #0
 801047e:	2100      	movs	r1, #0
 8010480:	e7e9      	b.n	8010456 <__ieee754_atan2+0xe6>
 8010482:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010486:	4619      	mov	r1, r3
 8010488:	e793      	b.n	80103b2 <__ieee754_atan2+0x42>
 801048a:	a30f      	add	r3, pc, #60	; (adr r3, 80104c8 <__ieee754_atan2+0x158>)
 801048c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010490:	f7ef ff12 	bl	80002b8 <__aeabi_dsub>
 8010494:	4602      	mov	r2, r0
 8010496:	460b      	mov	r3, r1
 8010498:	a10d      	add	r1, pc, #52	; (adr r1, 80104d0 <__ieee754_atan2+0x160>)
 801049a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801049e:	f7ef ff0b 	bl	80002b8 <__aeabi_dsub>
 80104a2:	e786      	b.n	80103b2 <__ieee754_atan2+0x42>
 80104a4:	a10a      	add	r1, pc, #40	; (adr r1, 80104d0 <__ieee754_atan2+0x160>)
 80104a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104aa:	e782      	b.n	80103b2 <__ieee754_atan2+0x42>
 80104ac:	a10c      	add	r1, pc, #48	; (adr r1, 80104e0 <__ieee754_atan2+0x170>)
 80104ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104b2:	e77e      	b.n	80103b2 <__ieee754_atan2+0x42>
 80104b4:	2000      	movs	r0, #0
 80104b6:	2100      	movs	r1, #0
 80104b8:	e77b      	b.n	80103b2 <__ieee754_atan2+0x42>
 80104ba:	a107      	add	r1, pc, #28	; (adr r1, 80104d8 <__ieee754_atan2+0x168>)
 80104bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104c0:	e777      	b.n	80103b2 <__ieee754_atan2+0x42>
 80104c2:	bf00      	nop
 80104c4:	f3af 8000 	nop.w
 80104c8:	33145c07 	.word	0x33145c07
 80104cc:	3ca1a626 	.word	0x3ca1a626
 80104d0:	54442d18 	.word	0x54442d18
 80104d4:	400921fb 	.word	0x400921fb
 80104d8:	54442d18 	.word	0x54442d18
 80104dc:	3ff921fb 	.word	0x3ff921fb
 80104e0:	54442d18 	.word	0x54442d18
 80104e4:	3fe921fb 	.word	0x3fe921fb
 80104e8:	080116c8 	.word	0x080116c8
 80104ec:	080116e0 	.word	0x080116e0
 80104f0:	54442d18 	.word	0x54442d18
 80104f4:	c00921fb 	.word	0xc00921fb
 80104f8:	54442d18 	.word	0x54442d18
 80104fc:	bff921fb 	.word	0xbff921fb
 8010500:	7ff00000 	.word	0x7ff00000
 8010504:	00000000 	.word	0x00000000

08010508 <__ieee754_log>:
 8010508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801050c:	ec51 0b10 	vmov	r0, r1, d0
 8010510:	ed2d 8b04 	vpush	{d8-d9}
 8010514:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010518:	b083      	sub	sp, #12
 801051a:	460d      	mov	r5, r1
 801051c:	da29      	bge.n	8010572 <__ieee754_log+0x6a>
 801051e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010522:	4303      	orrs	r3, r0
 8010524:	ee10 2a10 	vmov	r2, s0
 8010528:	d10c      	bne.n	8010544 <__ieee754_log+0x3c>
 801052a:	49cf      	ldr	r1, [pc, #828]	; (8010868 <__ieee754_log+0x360>)
 801052c:	2200      	movs	r2, #0
 801052e:	2300      	movs	r3, #0
 8010530:	2000      	movs	r0, #0
 8010532:	f7f0 f9a3 	bl	800087c <__aeabi_ddiv>
 8010536:	ec41 0b10 	vmov	d0, r0, r1
 801053a:	b003      	add	sp, #12
 801053c:	ecbd 8b04 	vpop	{d8-d9}
 8010540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010544:	2900      	cmp	r1, #0
 8010546:	da05      	bge.n	8010554 <__ieee754_log+0x4c>
 8010548:	460b      	mov	r3, r1
 801054a:	f7ef feb5 	bl	80002b8 <__aeabi_dsub>
 801054e:	2200      	movs	r2, #0
 8010550:	2300      	movs	r3, #0
 8010552:	e7ee      	b.n	8010532 <__ieee754_log+0x2a>
 8010554:	4bc5      	ldr	r3, [pc, #788]	; (801086c <__ieee754_log+0x364>)
 8010556:	2200      	movs	r2, #0
 8010558:	f7f0 f866 	bl	8000628 <__aeabi_dmul>
 801055c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8010560:	460d      	mov	r5, r1
 8010562:	4ac3      	ldr	r2, [pc, #780]	; (8010870 <__ieee754_log+0x368>)
 8010564:	4295      	cmp	r5, r2
 8010566:	dd06      	ble.n	8010576 <__ieee754_log+0x6e>
 8010568:	4602      	mov	r2, r0
 801056a:	460b      	mov	r3, r1
 801056c:	f7ef fea6 	bl	80002bc <__adddf3>
 8010570:	e7e1      	b.n	8010536 <__ieee754_log+0x2e>
 8010572:	2300      	movs	r3, #0
 8010574:	e7f5      	b.n	8010562 <__ieee754_log+0x5a>
 8010576:	152c      	asrs	r4, r5, #20
 8010578:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801057c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010580:	441c      	add	r4, r3
 8010582:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8010586:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801058a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801058e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8010592:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8010596:	ea42 0105 	orr.w	r1, r2, r5
 801059a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801059e:	2200      	movs	r2, #0
 80105a0:	4bb4      	ldr	r3, [pc, #720]	; (8010874 <__ieee754_log+0x36c>)
 80105a2:	f7ef fe89 	bl	80002b8 <__aeabi_dsub>
 80105a6:	1cab      	adds	r3, r5, #2
 80105a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80105ac:	2b02      	cmp	r3, #2
 80105ae:	4682      	mov	sl, r0
 80105b0:	468b      	mov	fp, r1
 80105b2:	f04f 0200 	mov.w	r2, #0
 80105b6:	dc53      	bgt.n	8010660 <__ieee754_log+0x158>
 80105b8:	2300      	movs	r3, #0
 80105ba:	f7f0 fa9d 	bl	8000af8 <__aeabi_dcmpeq>
 80105be:	b1d0      	cbz	r0, 80105f6 <__ieee754_log+0xee>
 80105c0:	2c00      	cmp	r4, #0
 80105c2:	f000 8122 	beq.w	801080a <__ieee754_log+0x302>
 80105c6:	4620      	mov	r0, r4
 80105c8:	f7ef ffc4 	bl	8000554 <__aeabi_i2d>
 80105cc:	a390      	add	r3, pc, #576	; (adr r3, 8010810 <__ieee754_log+0x308>)
 80105ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d2:	4606      	mov	r6, r0
 80105d4:	460f      	mov	r7, r1
 80105d6:	f7f0 f827 	bl	8000628 <__aeabi_dmul>
 80105da:	a38f      	add	r3, pc, #572	; (adr r3, 8010818 <__ieee754_log+0x310>)
 80105dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e0:	4604      	mov	r4, r0
 80105e2:	460d      	mov	r5, r1
 80105e4:	4630      	mov	r0, r6
 80105e6:	4639      	mov	r1, r7
 80105e8:	f7f0 f81e 	bl	8000628 <__aeabi_dmul>
 80105ec:	4602      	mov	r2, r0
 80105ee:	460b      	mov	r3, r1
 80105f0:	4620      	mov	r0, r4
 80105f2:	4629      	mov	r1, r5
 80105f4:	e7ba      	b.n	801056c <__ieee754_log+0x64>
 80105f6:	a38a      	add	r3, pc, #552	; (adr r3, 8010820 <__ieee754_log+0x318>)
 80105f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fc:	4650      	mov	r0, sl
 80105fe:	4659      	mov	r1, fp
 8010600:	f7f0 f812 	bl	8000628 <__aeabi_dmul>
 8010604:	4602      	mov	r2, r0
 8010606:	460b      	mov	r3, r1
 8010608:	2000      	movs	r0, #0
 801060a:	499b      	ldr	r1, [pc, #620]	; (8010878 <__ieee754_log+0x370>)
 801060c:	f7ef fe54 	bl	80002b8 <__aeabi_dsub>
 8010610:	4652      	mov	r2, sl
 8010612:	4606      	mov	r6, r0
 8010614:	460f      	mov	r7, r1
 8010616:	465b      	mov	r3, fp
 8010618:	4650      	mov	r0, sl
 801061a:	4659      	mov	r1, fp
 801061c:	f7f0 f804 	bl	8000628 <__aeabi_dmul>
 8010620:	4602      	mov	r2, r0
 8010622:	460b      	mov	r3, r1
 8010624:	4630      	mov	r0, r6
 8010626:	4639      	mov	r1, r7
 8010628:	f7ef fffe 	bl	8000628 <__aeabi_dmul>
 801062c:	4606      	mov	r6, r0
 801062e:	460f      	mov	r7, r1
 8010630:	b914      	cbnz	r4, 8010638 <__ieee754_log+0x130>
 8010632:	4632      	mov	r2, r6
 8010634:	463b      	mov	r3, r7
 8010636:	e0a2      	b.n	801077e <__ieee754_log+0x276>
 8010638:	4620      	mov	r0, r4
 801063a:	f7ef ff8b 	bl	8000554 <__aeabi_i2d>
 801063e:	a374      	add	r3, pc, #464	; (adr r3, 8010810 <__ieee754_log+0x308>)
 8010640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010644:	4680      	mov	r8, r0
 8010646:	4689      	mov	r9, r1
 8010648:	f7ef ffee 	bl	8000628 <__aeabi_dmul>
 801064c:	a372      	add	r3, pc, #456	; (adr r3, 8010818 <__ieee754_log+0x310>)
 801064e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010652:	4604      	mov	r4, r0
 8010654:	460d      	mov	r5, r1
 8010656:	4640      	mov	r0, r8
 8010658:	4649      	mov	r1, r9
 801065a:	f7ef ffe5 	bl	8000628 <__aeabi_dmul>
 801065e:	e0a7      	b.n	80107b0 <__ieee754_log+0x2a8>
 8010660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010664:	f7ef fe2a 	bl	80002bc <__adddf3>
 8010668:	4602      	mov	r2, r0
 801066a:	460b      	mov	r3, r1
 801066c:	4650      	mov	r0, sl
 801066e:	4659      	mov	r1, fp
 8010670:	f7f0 f904 	bl	800087c <__aeabi_ddiv>
 8010674:	ec41 0b18 	vmov	d8, r0, r1
 8010678:	4620      	mov	r0, r4
 801067a:	f7ef ff6b 	bl	8000554 <__aeabi_i2d>
 801067e:	ec53 2b18 	vmov	r2, r3, d8
 8010682:	ec41 0b19 	vmov	d9, r0, r1
 8010686:	ec51 0b18 	vmov	r0, r1, d8
 801068a:	f7ef ffcd 	bl	8000628 <__aeabi_dmul>
 801068e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8010692:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8010696:	9301      	str	r3, [sp, #4]
 8010698:	4602      	mov	r2, r0
 801069a:	460b      	mov	r3, r1
 801069c:	4680      	mov	r8, r0
 801069e:	4689      	mov	r9, r1
 80106a0:	f7ef ffc2 	bl	8000628 <__aeabi_dmul>
 80106a4:	a360      	add	r3, pc, #384	; (adr r3, 8010828 <__ieee754_log+0x320>)
 80106a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106aa:	4606      	mov	r6, r0
 80106ac:	460f      	mov	r7, r1
 80106ae:	f7ef ffbb 	bl	8000628 <__aeabi_dmul>
 80106b2:	a35f      	add	r3, pc, #380	; (adr r3, 8010830 <__ieee754_log+0x328>)
 80106b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b8:	f7ef fe00 	bl	80002bc <__adddf3>
 80106bc:	4632      	mov	r2, r6
 80106be:	463b      	mov	r3, r7
 80106c0:	f7ef ffb2 	bl	8000628 <__aeabi_dmul>
 80106c4:	a35c      	add	r3, pc, #368	; (adr r3, 8010838 <__ieee754_log+0x330>)
 80106c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ca:	f7ef fdf7 	bl	80002bc <__adddf3>
 80106ce:	4632      	mov	r2, r6
 80106d0:	463b      	mov	r3, r7
 80106d2:	f7ef ffa9 	bl	8000628 <__aeabi_dmul>
 80106d6:	a35a      	add	r3, pc, #360	; (adr r3, 8010840 <__ieee754_log+0x338>)
 80106d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106dc:	f7ef fdee 	bl	80002bc <__adddf3>
 80106e0:	4642      	mov	r2, r8
 80106e2:	464b      	mov	r3, r9
 80106e4:	f7ef ffa0 	bl	8000628 <__aeabi_dmul>
 80106e8:	a357      	add	r3, pc, #348	; (adr r3, 8010848 <__ieee754_log+0x340>)
 80106ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ee:	4680      	mov	r8, r0
 80106f0:	4689      	mov	r9, r1
 80106f2:	4630      	mov	r0, r6
 80106f4:	4639      	mov	r1, r7
 80106f6:	f7ef ff97 	bl	8000628 <__aeabi_dmul>
 80106fa:	a355      	add	r3, pc, #340	; (adr r3, 8010850 <__ieee754_log+0x348>)
 80106fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010700:	f7ef fddc 	bl	80002bc <__adddf3>
 8010704:	4632      	mov	r2, r6
 8010706:	463b      	mov	r3, r7
 8010708:	f7ef ff8e 	bl	8000628 <__aeabi_dmul>
 801070c:	a352      	add	r3, pc, #328	; (adr r3, 8010858 <__ieee754_log+0x350>)
 801070e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010712:	f7ef fdd3 	bl	80002bc <__adddf3>
 8010716:	4632      	mov	r2, r6
 8010718:	463b      	mov	r3, r7
 801071a:	f7ef ff85 	bl	8000628 <__aeabi_dmul>
 801071e:	460b      	mov	r3, r1
 8010720:	4602      	mov	r2, r0
 8010722:	4649      	mov	r1, r9
 8010724:	4640      	mov	r0, r8
 8010726:	f7ef fdc9 	bl	80002bc <__adddf3>
 801072a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801072e:	9b01      	ldr	r3, [sp, #4]
 8010730:	3551      	adds	r5, #81	; 0x51
 8010732:	431d      	orrs	r5, r3
 8010734:	2d00      	cmp	r5, #0
 8010736:	4680      	mov	r8, r0
 8010738:	4689      	mov	r9, r1
 801073a:	dd48      	ble.n	80107ce <__ieee754_log+0x2c6>
 801073c:	4b4e      	ldr	r3, [pc, #312]	; (8010878 <__ieee754_log+0x370>)
 801073e:	2200      	movs	r2, #0
 8010740:	4650      	mov	r0, sl
 8010742:	4659      	mov	r1, fp
 8010744:	f7ef ff70 	bl	8000628 <__aeabi_dmul>
 8010748:	4652      	mov	r2, sl
 801074a:	465b      	mov	r3, fp
 801074c:	f7ef ff6c 	bl	8000628 <__aeabi_dmul>
 8010750:	4602      	mov	r2, r0
 8010752:	460b      	mov	r3, r1
 8010754:	4606      	mov	r6, r0
 8010756:	460f      	mov	r7, r1
 8010758:	4640      	mov	r0, r8
 801075a:	4649      	mov	r1, r9
 801075c:	f7ef fdae 	bl	80002bc <__adddf3>
 8010760:	ec53 2b18 	vmov	r2, r3, d8
 8010764:	f7ef ff60 	bl	8000628 <__aeabi_dmul>
 8010768:	4680      	mov	r8, r0
 801076a:	4689      	mov	r9, r1
 801076c:	b964      	cbnz	r4, 8010788 <__ieee754_log+0x280>
 801076e:	4602      	mov	r2, r0
 8010770:	460b      	mov	r3, r1
 8010772:	4630      	mov	r0, r6
 8010774:	4639      	mov	r1, r7
 8010776:	f7ef fd9f 	bl	80002b8 <__aeabi_dsub>
 801077a:	4602      	mov	r2, r0
 801077c:	460b      	mov	r3, r1
 801077e:	4650      	mov	r0, sl
 8010780:	4659      	mov	r1, fp
 8010782:	f7ef fd99 	bl	80002b8 <__aeabi_dsub>
 8010786:	e6d6      	b.n	8010536 <__ieee754_log+0x2e>
 8010788:	a321      	add	r3, pc, #132	; (adr r3, 8010810 <__ieee754_log+0x308>)
 801078a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078e:	ec51 0b19 	vmov	r0, r1, d9
 8010792:	f7ef ff49 	bl	8000628 <__aeabi_dmul>
 8010796:	a320      	add	r3, pc, #128	; (adr r3, 8010818 <__ieee754_log+0x310>)
 8010798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079c:	4604      	mov	r4, r0
 801079e:	460d      	mov	r5, r1
 80107a0:	ec51 0b19 	vmov	r0, r1, d9
 80107a4:	f7ef ff40 	bl	8000628 <__aeabi_dmul>
 80107a8:	4642      	mov	r2, r8
 80107aa:	464b      	mov	r3, r9
 80107ac:	f7ef fd86 	bl	80002bc <__adddf3>
 80107b0:	4602      	mov	r2, r0
 80107b2:	460b      	mov	r3, r1
 80107b4:	4630      	mov	r0, r6
 80107b6:	4639      	mov	r1, r7
 80107b8:	f7ef fd7e 	bl	80002b8 <__aeabi_dsub>
 80107bc:	4652      	mov	r2, sl
 80107be:	465b      	mov	r3, fp
 80107c0:	f7ef fd7a 	bl	80002b8 <__aeabi_dsub>
 80107c4:	4602      	mov	r2, r0
 80107c6:	460b      	mov	r3, r1
 80107c8:	4620      	mov	r0, r4
 80107ca:	4629      	mov	r1, r5
 80107cc:	e7d9      	b.n	8010782 <__ieee754_log+0x27a>
 80107ce:	4602      	mov	r2, r0
 80107d0:	460b      	mov	r3, r1
 80107d2:	4650      	mov	r0, sl
 80107d4:	4659      	mov	r1, fp
 80107d6:	f7ef fd6f 	bl	80002b8 <__aeabi_dsub>
 80107da:	ec53 2b18 	vmov	r2, r3, d8
 80107de:	f7ef ff23 	bl	8000628 <__aeabi_dmul>
 80107e2:	4606      	mov	r6, r0
 80107e4:	460f      	mov	r7, r1
 80107e6:	2c00      	cmp	r4, #0
 80107e8:	f43f af23 	beq.w	8010632 <__ieee754_log+0x12a>
 80107ec:	a308      	add	r3, pc, #32	; (adr r3, 8010810 <__ieee754_log+0x308>)
 80107ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f2:	ec51 0b19 	vmov	r0, r1, d9
 80107f6:	f7ef ff17 	bl	8000628 <__aeabi_dmul>
 80107fa:	a307      	add	r3, pc, #28	; (adr r3, 8010818 <__ieee754_log+0x310>)
 80107fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010800:	4604      	mov	r4, r0
 8010802:	460d      	mov	r5, r1
 8010804:	ec51 0b19 	vmov	r0, r1, d9
 8010808:	e727      	b.n	801065a <__ieee754_log+0x152>
 801080a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8010860 <__ieee754_log+0x358>
 801080e:	e694      	b.n	801053a <__ieee754_log+0x32>
 8010810:	fee00000 	.word	0xfee00000
 8010814:	3fe62e42 	.word	0x3fe62e42
 8010818:	35793c76 	.word	0x35793c76
 801081c:	3dea39ef 	.word	0x3dea39ef
 8010820:	55555555 	.word	0x55555555
 8010824:	3fd55555 	.word	0x3fd55555
 8010828:	df3e5244 	.word	0xdf3e5244
 801082c:	3fc2f112 	.word	0x3fc2f112
 8010830:	96cb03de 	.word	0x96cb03de
 8010834:	3fc74664 	.word	0x3fc74664
 8010838:	94229359 	.word	0x94229359
 801083c:	3fd24924 	.word	0x3fd24924
 8010840:	55555593 	.word	0x55555593
 8010844:	3fe55555 	.word	0x3fe55555
 8010848:	d078c69f 	.word	0xd078c69f
 801084c:	3fc39a09 	.word	0x3fc39a09
 8010850:	1d8e78af 	.word	0x1d8e78af
 8010854:	3fcc71c5 	.word	0x3fcc71c5
 8010858:	9997fa04 	.word	0x9997fa04
 801085c:	3fd99999 	.word	0x3fd99999
	...
 8010868:	c3500000 	.word	0xc3500000
 801086c:	43500000 	.word	0x43500000
 8010870:	7fefffff 	.word	0x7fefffff
 8010874:	3ff00000 	.word	0x3ff00000
 8010878:	3fe00000 	.word	0x3fe00000

0801087c <__ieee754_sqrt>:
 801087c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010880:	ec55 4b10 	vmov	r4, r5, d0
 8010884:	4e55      	ldr	r6, [pc, #340]	; (80109dc <__ieee754_sqrt+0x160>)
 8010886:	43ae      	bics	r6, r5
 8010888:	ee10 0a10 	vmov	r0, s0
 801088c:	ee10 3a10 	vmov	r3, s0
 8010890:	462a      	mov	r2, r5
 8010892:	4629      	mov	r1, r5
 8010894:	d110      	bne.n	80108b8 <__ieee754_sqrt+0x3c>
 8010896:	ee10 2a10 	vmov	r2, s0
 801089a:	462b      	mov	r3, r5
 801089c:	f7ef fec4 	bl	8000628 <__aeabi_dmul>
 80108a0:	4602      	mov	r2, r0
 80108a2:	460b      	mov	r3, r1
 80108a4:	4620      	mov	r0, r4
 80108a6:	4629      	mov	r1, r5
 80108a8:	f7ef fd08 	bl	80002bc <__adddf3>
 80108ac:	4604      	mov	r4, r0
 80108ae:	460d      	mov	r5, r1
 80108b0:	ec45 4b10 	vmov	d0, r4, r5
 80108b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108b8:	2d00      	cmp	r5, #0
 80108ba:	dc10      	bgt.n	80108de <__ieee754_sqrt+0x62>
 80108bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80108c0:	4330      	orrs	r0, r6
 80108c2:	d0f5      	beq.n	80108b0 <__ieee754_sqrt+0x34>
 80108c4:	b15d      	cbz	r5, 80108de <__ieee754_sqrt+0x62>
 80108c6:	ee10 2a10 	vmov	r2, s0
 80108ca:	462b      	mov	r3, r5
 80108cc:	ee10 0a10 	vmov	r0, s0
 80108d0:	f7ef fcf2 	bl	80002b8 <__aeabi_dsub>
 80108d4:	4602      	mov	r2, r0
 80108d6:	460b      	mov	r3, r1
 80108d8:	f7ef ffd0 	bl	800087c <__aeabi_ddiv>
 80108dc:	e7e6      	b.n	80108ac <__ieee754_sqrt+0x30>
 80108de:	1512      	asrs	r2, r2, #20
 80108e0:	d074      	beq.n	80109cc <__ieee754_sqrt+0x150>
 80108e2:	07d4      	lsls	r4, r2, #31
 80108e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80108e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80108ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80108f0:	bf5e      	ittt	pl
 80108f2:	0fda      	lsrpl	r2, r3, #31
 80108f4:	005b      	lslpl	r3, r3, #1
 80108f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80108fa:	2400      	movs	r4, #0
 80108fc:	0fda      	lsrs	r2, r3, #31
 80108fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010902:	107f      	asrs	r7, r7, #1
 8010904:	005b      	lsls	r3, r3, #1
 8010906:	2516      	movs	r5, #22
 8010908:	4620      	mov	r0, r4
 801090a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801090e:	1886      	adds	r6, r0, r2
 8010910:	428e      	cmp	r6, r1
 8010912:	bfde      	ittt	le
 8010914:	1b89      	suble	r1, r1, r6
 8010916:	18b0      	addle	r0, r6, r2
 8010918:	18a4      	addle	r4, r4, r2
 801091a:	0049      	lsls	r1, r1, #1
 801091c:	3d01      	subs	r5, #1
 801091e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010922:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010926:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801092a:	d1f0      	bne.n	801090e <__ieee754_sqrt+0x92>
 801092c:	462a      	mov	r2, r5
 801092e:	f04f 0e20 	mov.w	lr, #32
 8010932:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010936:	4281      	cmp	r1, r0
 8010938:	eb06 0c05 	add.w	ip, r6, r5
 801093c:	dc02      	bgt.n	8010944 <__ieee754_sqrt+0xc8>
 801093e:	d113      	bne.n	8010968 <__ieee754_sqrt+0xec>
 8010940:	459c      	cmp	ip, r3
 8010942:	d811      	bhi.n	8010968 <__ieee754_sqrt+0xec>
 8010944:	f1bc 0f00 	cmp.w	ip, #0
 8010948:	eb0c 0506 	add.w	r5, ip, r6
 801094c:	da43      	bge.n	80109d6 <__ieee754_sqrt+0x15a>
 801094e:	2d00      	cmp	r5, #0
 8010950:	db41      	blt.n	80109d6 <__ieee754_sqrt+0x15a>
 8010952:	f100 0801 	add.w	r8, r0, #1
 8010956:	1a09      	subs	r1, r1, r0
 8010958:	459c      	cmp	ip, r3
 801095a:	bf88      	it	hi
 801095c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010960:	eba3 030c 	sub.w	r3, r3, ip
 8010964:	4432      	add	r2, r6
 8010966:	4640      	mov	r0, r8
 8010968:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801096c:	f1be 0e01 	subs.w	lr, lr, #1
 8010970:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010974:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010978:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801097c:	d1db      	bne.n	8010936 <__ieee754_sqrt+0xba>
 801097e:	430b      	orrs	r3, r1
 8010980:	d006      	beq.n	8010990 <__ieee754_sqrt+0x114>
 8010982:	1c50      	adds	r0, r2, #1
 8010984:	bf13      	iteet	ne
 8010986:	3201      	addne	r2, #1
 8010988:	3401      	addeq	r4, #1
 801098a:	4672      	moveq	r2, lr
 801098c:	f022 0201 	bicne.w	r2, r2, #1
 8010990:	1063      	asrs	r3, r4, #1
 8010992:	0852      	lsrs	r2, r2, #1
 8010994:	07e1      	lsls	r1, r4, #31
 8010996:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801099a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801099e:	bf48      	it	mi
 80109a0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80109a4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80109a8:	4614      	mov	r4, r2
 80109aa:	e781      	b.n	80108b0 <__ieee754_sqrt+0x34>
 80109ac:	0ad9      	lsrs	r1, r3, #11
 80109ae:	3815      	subs	r0, #21
 80109b0:	055b      	lsls	r3, r3, #21
 80109b2:	2900      	cmp	r1, #0
 80109b4:	d0fa      	beq.n	80109ac <__ieee754_sqrt+0x130>
 80109b6:	02cd      	lsls	r5, r1, #11
 80109b8:	d50a      	bpl.n	80109d0 <__ieee754_sqrt+0x154>
 80109ba:	f1c2 0420 	rsb	r4, r2, #32
 80109be:	fa23 f404 	lsr.w	r4, r3, r4
 80109c2:	1e55      	subs	r5, r2, #1
 80109c4:	4093      	lsls	r3, r2
 80109c6:	4321      	orrs	r1, r4
 80109c8:	1b42      	subs	r2, r0, r5
 80109ca:	e78a      	b.n	80108e2 <__ieee754_sqrt+0x66>
 80109cc:	4610      	mov	r0, r2
 80109ce:	e7f0      	b.n	80109b2 <__ieee754_sqrt+0x136>
 80109d0:	0049      	lsls	r1, r1, #1
 80109d2:	3201      	adds	r2, #1
 80109d4:	e7ef      	b.n	80109b6 <__ieee754_sqrt+0x13a>
 80109d6:	4680      	mov	r8, r0
 80109d8:	e7bd      	b.n	8010956 <__ieee754_sqrt+0xda>
 80109da:	bf00      	nop
 80109dc:	7ff00000 	.word	0x7ff00000

080109e0 <atan>:
 80109e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109e4:	ec55 4b10 	vmov	r4, r5, d0
 80109e8:	4bc3      	ldr	r3, [pc, #780]	; (8010cf8 <atan+0x318>)
 80109ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80109ee:	429e      	cmp	r6, r3
 80109f0:	46ab      	mov	fp, r5
 80109f2:	dd18      	ble.n	8010a26 <atan+0x46>
 80109f4:	4bc1      	ldr	r3, [pc, #772]	; (8010cfc <atan+0x31c>)
 80109f6:	429e      	cmp	r6, r3
 80109f8:	dc01      	bgt.n	80109fe <atan+0x1e>
 80109fa:	d109      	bne.n	8010a10 <atan+0x30>
 80109fc:	b144      	cbz	r4, 8010a10 <atan+0x30>
 80109fe:	4622      	mov	r2, r4
 8010a00:	462b      	mov	r3, r5
 8010a02:	4620      	mov	r0, r4
 8010a04:	4629      	mov	r1, r5
 8010a06:	f7ef fc59 	bl	80002bc <__adddf3>
 8010a0a:	4604      	mov	r4, r0
 8010a0c:	460d      	mov	r5, r1
 8010a0e:	e006      	b.n	8010a1e <atan+0x3e>
 8010a10:	f1bb 0f00 	cmp.w	fp, #0
 8010a14:	f300 8131 	bgt.w	8010c7a <atan+0x29a>
 8010a18:	a59b      	add	r5, pc, #620	; (adr r5, 8010c88 <atan+0x2a8>)
 8010a1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010a1e:	ec45 4b10 	vmov	d0, r4, r5
 8010a22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a26:	4bb6      	ldr	r3, [pc, #728]	; (8010d00 <atan+0x320>)
 8010a28:	429e      	cmp	r6, r3
 8010a2a:	dc14      	bgt.n	8010a56 <atan+0x76>
 8010a2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010a30:	429e      	cmp	r6, r3
 8010a32:	dc0d      	bgt.n	8010a50 <atan+0x70>
 8010a34:	a396      	add	r3, pc, #600	; (adr r3, 8010c90 <atan+0x2b0>)
 8010a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a3a:	ee10 0a10 	vmov	r0, s0
 8010a3e:	4629      	mov	r1, r5
 8010a40:	f7ef fc3c 	bl	80002bc <__adddf3>
 8010a44:	4baf      	ldr	r3, [pc, #700]	; (8010d04 <atan+0x324>)
 8010a46:	2200      	movs	r2, #0
 8010a48:	f7f0 f87e 	bl	8000b48 <__aeabi_dcmpgt>
 8010a4c:	2800      	cmp	r0, #0
 8010a4e:	d1e6      	bne.n	8010a1e <atan+0x3e>
 8010a50:	f04f 3aff 	mov.w	sl, #4294967295
 8010a54:	e02b      	b.n	8010aae <atan+0xce>
 8010a56:	f000 f963 	bl	8010d20 <fabs>
 8010a5a:	4bab      	ldr	r3, [pc, #684]	; (8010d08 <atan+0x328>)
 8010a5c:	429e      	cmp	r6, r3
 8010a5e:	ec55 4b10 	vmov	r4, r5, d0
 8010a62:	f300 80bf 	bgt.w	8010be4 <atan+0x204>
 8010a66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010a6a:	429e      	cmp	r6, r3
 8010a6c:	f300 80a0 	bgt.w	8010bb0 <atan+0x1d0>
 8010a70:	ee10 2a10 	vmov	r2, s0
 8010a74:	ee10 0a10 	vmov	r0, s0
 8010a78:	462b      	mov	r3, r5
 8010a7a:	4629      	mov	r1, r5
 8010a7c:	f7ef fc1e 	bl	80002bc <__adddf3>
 8010a80:	4ba0      	ldr	r3, [pc, #640]	; (8010d04 <atan+0x324>)
 8010a82:	2200      	movs	r2, #0
 8010a84:	f7ef fc18 	bl	80002b8 <__aeabi_dsub>
 8010a88:	2200      	movs	r2, #0
 8010a8a:	4606      	mov	r6, r0
 8010a8c:	460f      	mov	r7, r1
 8010a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010a92:	4620      	mov	r0, r4
 8010a94:	4629      	mov	r1, r5
 8010a96:	f7ef fc11 	bl	80002bc <__adddf3>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	4639      	mov	r1, r7
 8010aa2:	f7ef feeb 	bl	800087c <__aeabi_ddiv>
 8010aa6:	f04f 0a00 	mov.w	sl, #0
 8010aaa:	4604      	mov	r4, r0
 8010aac:	460d      	mov	r5, r1
 8010aae:	4622      	mov	r2, r4
 8010ab0:	462b      	mov	r3, r5
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	4629      	mov	r1, r5
 8010ab6:	f7ef fdb7 	bl	8000628 <__aeabi_dmul>
 8010aba:	4602      	mov	r2, r0
 8010abc:	460b      	mov	r3, r1
 8010abe:	4680      	mov	r8, r0
 8010ac0:	4689      	mov	r9, r1
 8010ac2:	f7ef fdb1 	bl	8000628 <__aeabi_dmul>
 8010ac6:	a374      	add	r3, pc, #464	; (adr r3, 8010c98 <atan+0x2b8>)
 8010ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010acc:	4606      	mov	r6, r0
 8010ace:	460f      	mov	r7, r1
 8010ad0:	f7ef fdaa 	bl	8000628 <__aeabi_dmul>
 8010ad4:	a372      	add	r3, pc, #456	; (adr r3, 8010ca0 <atan+0x2c0>)
 8010ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ada:	f7ef fbef 	bl	80002bc <__adddf3>
 8010ade:	4632      	mov	r2, r6
 8010ae0:	463b      	mov	r3, r7
 8010ae2:	f7ef fda1 	bl	8000628 <__aeabi_dmul>
 8010ae6:	a370      	add	r3, pc, #448	; (adr r3, 8010ca8 <atan+0x2c8>)
 8010ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aec:	f7ef fbe6 	bl	80002bc <__adddf3>
 8010af0:	4632      	mov	r2, r6
 8010af2:	463b      	mov	r3, r7
 8010af4:	f7ef fd98 	bl	8000628 <__aeabi_dmul>
 8010af8:	a36d      	add	r3, pc, #436	; (adr r3, 8010cb0 <atan+0x2d0>)
 8010afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010afe:	f7ef fbdd 	bl	80002bc <__adddf3>
 8010b02:	4632      	mov	r2, r6
 8010b04:	463b      	mov	r3, r7
 8010b06:	f7ef fd8f 	bl	8000628 <__aeabi_dmul>
 8010b0a:	a36b      	add	r3, pc, #428	; (adr r3, 8010cb8 <atan+0x2d8>)
 8010b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b10:	f7ef fbd4 	bl	80002bc <__adddf3>
 8010b14:	4632      	mov	r2, r6
 8010b16:	463b      	mov	r3, r7
 8010b18:	f7ef fd86 	bl	8000628 <__aeabi_dmul>
 8010b1c:	a368      	add	r3, pc, #416	; (adr r3, 8010cc0 <atan+0x2e0>)
 8010b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b22:	f7ef fbcb 	bl	80002bc <__adddf3>
 8010b26:	4642      	mov	r2, r8
 8010b28:	464b      	mov	r3, r9
 8010b2a:	f7ef fd7d 	bl	8000628 <__aeabi_dmul>
 8010b2e:	a366      	add	r3, pc, #408	; (adr r3, 8010cc8 <atan+0x2e8>)
 8010b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b34:	4680      	mov	r8, r0
 8010b36:	4689      	mov	r9, r1
 8010b38:	4630      	mov	r0, r6
 8010b3a:	4639      	mov	r1, r7
 8010b3c:	f7ef fd74 	bl	8000628 <__aeabi_dmul>
 8010b40:	a363      	add	r3, pc, #396	; (adr r3, 8010cd0 <atan+0x2f0>)
 8010b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b46:	f7ef fbb7 	bl	80002b8 <__aeabi_dsub>
 8010b4a:	4632      	mov	r2, r6
 8010b4c:	463b      	mov	r3, r7
 8010b4e:	f7ef fd6b 	bl	8000628 <__aeabi_dmul>
 8010b52:	a361      	add	r3, pc, #388	; (adr r3, 8010cd8 <atan+0x2f8>)
 8010b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b58:	f7ef fbae 	bl	80002b8 <__aeabi_dsub>
 8010b5c:	4632      	mov	r2, r6
 8010b5e:	463b      	mov	r3, r7
 8010b60:	f7ef fd62 	bl	8000628 <__aeabi_dmul>
 8010b64:	a35e      	add	r3, pc, #376	; (adr r3, 8010ce0 <atan+0x300>)
 8010b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6a:	f7ef fba5 	bl	80002b8 <__aeabi_dsub>
 8010b6e:	4632      	mov	r2, r6
 8010b70:	463b      	mov	r3, r7
 8010b72:	f7ef fd59 	bl	8000628 <__aeabi_dmul>
 8010b76:	a35c      	add	r3, pc, #368	; (adr r3, 8010ce8 <atan+0x308>)
 8010b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b7c:	f7ef fb9c 	bl	80002b8 <__aeabi_dsub>
 8010b80:	4632      	mov	r2, r6
 8010b82:	463b      	mov	r3, r7
 8010b84:	f7ef fd50 	bl	8000628 <__aeabi_dmul>
 8010b88:	4602      	mov	r2, r0
 8010b8a:	460b      	mov	r3, r1
 8010b8c:	4640      	mov	r0, r8
 8010b8e:	4649      	mov	r1, r9
 8010b90:	f7ef fb94 	bl	80002bc <__adddf3>
 8010b94:	4622      	mov	r2, r4
 8010b96:	462b      	mov	r3, r5
 8010b98:	f7ef fd46 	bl	8000628 <__aeabi_dmul>
 8010b9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010ba0:	4602      	mov	r2, r0
 8010ba2:	460b      	mov	r3, r1
 8010ba4:	d14b      	bne.n	8010c3e <atan+0x25e>
 8010ba6:	4620      	mov	r0, r4
 8010ba8:	4629      	mov	r1, r5
 8010baa:	f7ef fb85 	bl	80002b8 <__aeabi_dsub>
 8010bae:	e72c      	b.n	8010a0a <atan+0x2a>
 8010bb0:	ee10 0a10 	vmov	r0, s0
 8010bb4:	4b53      	ldr	r3, [pc, #332]	; (8010d04 <atan+0x324>)
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	4629      	mov	r1, r5
 8010bba:	f7ef fb7d 	bl	80002b8 <__aeabi_dsub>
 8010bbe:	4b51      	ldr	r3, [pc, #324]	; (8010d04 <atan+0x324>)
 8010bc0:	4606      	mov	r6, r0
 8010bc2:	460f      	mov	r7, r1
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	4629      	mov	r1, r5
 8010bca:	f7ef fb77 	bl	80002bc <__adddf3>
 8010bce:	4602      	mov	r2, r0
 8010bd0:	460b      	mov	r3, r1
 8010bd2:	4630      	mov	r0, r6
 8010bd4:	4639      	mov	r1, r7
 8010bd6:	f7ef fe51 	bl	800087c <__aeabi_ddiv>
 8010bda:	f04f 0a01 	mov.w	sl, #1
 8010bde:	4604      	mov	r4, r0
 8010be0:	460d      	mov	r5, r1
 8010be2:	e764      	b.n	8010aae <atan+0xce>
 8010be4:	4b49      	ldr	r3, [pc, #292]	; (8010d0c <atan+0x32c>)
 8010be6:	429e      	cmp	r6, r3
 8010be8:	da1d      	bge.n	8010c26 <atan+0x246>
 8010bea:	ee10 0a10 	vmov	r0, s0
 8010bee:	4b48      	ldr	r3, [pc, #288]	; (8010d10 <atan+0x330>)
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	4629      	mov	r1, r5
 8010bf4:	f7ef fb60 	bl	80002b8 <__aeabi_dsub>
 8010bf8:	4b45      	ldr	r3, [pc, #276]	; (8010d10 <atan+0x330>)
 8010bfa:	4606      	mov	r6, r0
 8010bfc:	460f      	mov	r7, r1
 8010bfe:	2200      	movs	r2, #0
 8010c00:	4620      	mov	r0, r4
 8010c02:	4629      	mov	r1, r5
 8010c04:	f7ef fd10 	bl	8000628 <__aeabi_dmul>
 8010c08:	4b3e      	ldr	r3, [pc, #248]	; (8010d04 <atan+0x324>)
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f7ef fb56 	bl	80002bc <__adddf3>
 8010c10:	4602      	mov	r2, r0
 8010c12:	460b      	mov	r3, r1
 8010c14:	4630      	mov	r0, r6
 8010c16:	4639      	mov	r1, r7
 8010c18:	f7ef fe30 	bl	800087c <__aeabi_ddiv>
 8010c1c:	f04f 0a02 	mov.w	sl, #2
 8010c20:	4604      	mov	r4, r0
 8010c22:	460d      	mov	r5, r1
 8010c24:	e743      	b.n	8010aae <atan+0xce>
 8010c26:	462b      	mov	r3, r5
 8010c28:	ee10 2a10 	vmov	r2, s0
 8010c2c:	4939      	ldr	r1, [pc, #228]	; (8010d14 <atan+0x334>)
 8010c2e:	2000      	movs	r0, #0
 8010c30:	f7ef fe24 	bl	800087c <__aeabi_ddiv>
 8010c34:	f04f 0a03 	mov.w	sl, #3
 8010c38:	4604      	mov	r4, r0
 8010c3a:	460d      	mov	r5, r1
 8010c3c:	e737      	b.n	8010aae <atan+0xce>
 8010c3e:	4b36      	ldr	r3, [pc, #216]	; (8010d18 <atan+0x338>)
 8010c40:	4e36      	ldr	r6, [pc, #216]	; (8010d1c <atan+0x33c>)
 8010c42:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010c46:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010c4a:	e9da 2300 	ldrd	r2, r3, [sl]
 8010c4e:	f7ef fb33 	bl	80002b8 <__aeabi_dsub>
 8010c52:	4622      	mov	r2, r4
 8010c54:	462b      	mov	r3, r5
 8010c56:	f7ef fb2f 	bl	80002b8 <__aeabi_dsub>
 8010c5a:	4602      	mov	r2, r0
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010c62:	f7ef fb29 	bl	80002b8 <__aeabi_dsub>
 8010c66:	f1bb 0f00 	cmp.w	fp, #0
 8010c6a:	4604      	mov	r4, r0
 8010c6c:	460d      	mov	r5, r1
 8010c6e:	f6bf aed6 	bge.w	8010a1e <atan+0x3e>
 8010c72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c76:	461d      	mov	r5, r3
 8010c78:	e6d1      	b.n	8010a1e <atan+0x3e>
 8010c7a:	a51d      	add	r5, pc, #116	; (adr r5, 8010cf0 <atan+0x310>)
 8010c7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010c80:	e6cd      	b.n	8010a1e <atan+0x3e>
 8010c82:	bf00      	nop
 8010c84:	f3af 8000 	nop.w
 8010c88:	54442d18 	.word	0x54442d18
 8010c8c:	bff921fb 	.word	0xbff921fb
 8010c90:	8800759c 	.word	0x8800759c
 8010c94:	7e37e43c 	.word	0x7e37e43c
 8010c98:	e322da11 	.word	0xe322da11
 8010c9c:	3f90ad3a 	.word	0x3f90ad3a
 8010ca0:	24760deb 	.word	0x24760deb
 8010ca4:	3fa97b4b 	.word	0x3fa97b4b
 8010ca8:	a0d03d51 	.word	0xa0d03d51
 8010cac:	3fb10d66 	.word	0x3fb10d66
 8010cb0:	c54c206e 	.word	0xc54c206e
 8010cb4:	3fb745cd 	.word	0x3fb745cd
 8010cb8:	920083ff 	.word	0x920083ff
 8010cbc:	3fc24924 	.word	0x3fc24924
 8010cc0:	5555550d 	.word	0x5555550d
 8010cc4:	3fd55555 	.word	0x3fd55555
 8010cc8:	2c6a6c2f 	.word	0x2c6a6c2f
 8010ccc:	bfa2b444 	.word	0xbfa2b444
 8010cd0:	52defd9a 	.word	0x52defd9a
 8010cd4:	3fadde2d 	.word	0x3fadde2d
 8010cd8:	af749a6d 	.word	0xaf749a6d
 8010cdc:	3fb3b0f2 	.word	0x3fb3b0f2
 8010ce0:	fe231671 	.word	0xfe231671
 8010ce4:	3fbc71c6 	.word	0x3fbc71c6
 8010ce8:	9998ebc4 	.word	0x9998ebc4
 8010cec:	3fc99999 	.word	0x3fc99999
 8010cf0:	54442d18 	.word	0x54442d18
 8010cf4:	3ff921fb 	.word	0x3ff921fb
 8010cf8:	440fffff 	.word	0x440fffff
 8010cfc:	7ff00000 	.word	0x7ff00000
 8010d00:	3fdbffff 	.word	0x3fdbffff
 8010d04:	3ff00000 	.word	0x3ff00000
 8010d08:	3ff2ffff 	.word	0x3ff2ffff
 8010d0c:	40038000 	.word	0x40038000
 8010d10:	3ff80000 	.word	0x3ff80000
 8010d14:	bff00000 	.word	0xbff00000
 8010d18:	08011718 	.word	0x08011718
 8010d1c:	080116f8 	.word	0x080116f8

08010d20 <fabs>:
 8010d20:	ec51 0b10 	vmov	r0, r1, d0
 8010d24:	ee10 2a10 	vmov	r2, s0
 8010d28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010d2c:	ec43 2b10 	vmov	d0, r2, r3
 8010d30:	4770      	bx	lr
	...

08010d34 <_init>:
 8010d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d36:	bf00      	nop
 8010d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d3a:	bc08      	pop	{r3}
 8010d3c:	469e      	mov	lr, r3
 8010d3e:	4770      	bx	lr

08010d40 <_fini>:
 8010d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d42:	bf00      	nop
 8010d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d46:	bc08      	pop	{r3}
 8010d48:	469e      	mov	lr, r3
 8010d4a:	4770      	bx	lr
